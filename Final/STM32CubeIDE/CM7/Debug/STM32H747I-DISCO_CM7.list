
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020758  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004628  080209f8  080209f8  000309f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000015bc  08025020  08025020  00035020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000098  080265dc  080265dc  000365dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 01455494  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000154  91455494  91455494  014a5494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08026674  08026674  014a55e8  2**0
                  CONTENTS
  8 .ARM          00000008  08026674  08026674  00036674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802667c  0802667c  014a55e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0802667c  0802667c  0003667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08026694  08026694  00036694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000134  24000000  0802669c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000ef58  24000134  080267d0  00040134  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2400f08c  080267d0  0004f08c  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  014a55e8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0010890f  00000000  00000000  014a5616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001760f  00000000  00000000  015adf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003558  00000000  00000000  015c5538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005bf0  00000000  00000000  015c8a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00053226  00000000  00000000  015ce680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00064001  00000000  00000000  016218a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001dd777  00000000  00000000  016858a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0186301e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009b98  00000000  00000000  018630f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00038804  00000000  00000000  0186cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080209e0 	.word	0x080209e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	080209e0 	.word	0x080209e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000678:	4901      	ldr	r1, [pc, #4]	; (8000680 <vApplicationIdleHook+0x8>)
 800067a:	2000      	movs	r0, #0
 800067c:	f00c b934 	b.w	800c8e8 <vTaskSetApplicationTaskTag>
 8000680:	08001e81 	.word	0x08001e81

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000688:	224c      	movs	r2, #76	; 0x4c
 800068a:	2100      	movs	r1, #0
 800068c:	a809      	add	r0, sp, #36	; 0x24
 800068e:	f01f f92b 	bl	801f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	2220      	movs	r2, #32
 8000694:	2100      	movs	r1, #0
 8000696:	a801      	add	r0, sp, #4
 8000698:	f01f f926 	bl	801f8e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800069c:	2004      	movs	r0, #4
 800069e:	f007 fa79 	bl	8007b94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a2:	2300      	movs	r3, #0
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <SystemClock_Config+0xcc>)
 80006a8:	699a      	ldr	r2, [r3, #24]
 80006aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	699a      	ldr	r2, [r3, #24]
 80006b2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80006b6:	9200      	str	r2, [sp, #0]
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <SystemClock_Config+0xd0>)
 80006ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80006bc:	f041 0101 	orr.w	r1, r1, #1
 80006c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80006c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006c4:	f002 0201 	and.w	r2, r2, #1
 80006c8:	9200      	str	r2, [sp, #0]
 80006ca:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	0491      	lsls	r1, r2, #18
 80006d0:	d5fc      	bpl.n	80006cc <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd4>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006da:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006dc:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006e0:	f023 0303 	bic.w	r3, r3, #3
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006ee:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f2:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000702:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000704:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000708:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800070c:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000710:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f007 fd39 	bl	8008188 <HAL_RCC_OscConfig>
 8000716:	b108      	cbz	r0, 800071c <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071a:	e7fe      	b.n	800071a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072e:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000732:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000736:	f008 f8ad 	bl	8008894 <HAL_RCC_ClockConfig>
 800073a:	4601      	mov	r1, r0
 800073c:	b108      	cbz	r0, 8000742 <SystemClock_Config+0xbe>
 800073e:	b672      	cpsid	i
  while (1)
 8000740:	e7fe      	b.n	8000740 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000742:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000746:	f007 ffb7 	bl	80086b8 <HAL_RCC_MCOConfig>
}
 800074a:	b01d      	add	sp, #116	; 0x74
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800
 8000754:	58000400 	.word	0x58000400
 8000758:	58024400 	.word	0x58024400

0800075c <main>:
{
 800075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000760:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000762:	2210      	movs	r2, #16
 8000764:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000766:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000768:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800076a:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800076c:	f01f f8bc 	bl	801f8e8 <memset>
  HAL_MPU_Disable();
 8000770:	f005 fa98 	bl	8005ca4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000774:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8000778:	4bb8      	ldr	r3, [pc, #736]	; (8000a5c <main+0x300>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800077a:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800077c:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000780:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000782:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000786:	f005 faaf 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800078a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800078c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800078e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000792:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000796:	f005 faa7 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800079a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800079c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800079e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80007a2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80007a6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80007aa:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80007ac:	2318      	movs	r3, #24
 80007ae:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007b2:	f005 fa99 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80007b6:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007b8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80007ba:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 80007be:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80007c2:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80007c4:	2312      	movs	r3, #18
 80007c6:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d0:	f005 fa8a 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 80007d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007da:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 80007de:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80007e0:	2311      	movs	r3, #17
 80007e2:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	f005 fa7f 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80007ea:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007ec:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ee:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80007f2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 80007f6:	4b9a      	ldr	r3, [pc, #616]	; (8000a60 <main+0x304>)
 80007f8:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80007fa:	230e      	movs	r3, #14
 80007fc:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000800:	f005 fa72 	bl	8005ce8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000804:	4628      	mov	r0, r5
 8000806:	f005 fa5d 	bl	8005cc4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080a:	4b96      	ldr	r3, [pc, #600]	; (8000a64 <main+0x308>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000812:	d111      	bne.n	8000838 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800081c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000824:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800082e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000834:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000838:	4a8a      	ldr	r2, [pc, #552]	; (8000a64 <main+0x308>)
 800083a:	6953      	ldr	r3, [r2, #20]
 800083c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000840:	d123      	bne.n	800088a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000842:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800084a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800084e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000852:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000856:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800085a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800085c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000860:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000862:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000866:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000868:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800086c:	d2f9      	bcs.n	8000862 <main+0x106>
    } while(sets-- != 0U);
 800086e:	3b20      	subs	r3, #32
 8000870:	f113 0f20 	cmn.w	r3, #32
 8000874:	d1f2      	bne.n	800085c <main+0x100>
 8000876:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800087a:	6953      	ldr	r3, [r2, #20]
 800087c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800088a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088e:	4d76      	ldr	r5, [pc, #472]	; (8000a68 <main+0x30c>)
 8000890:	682c      	ldr	r4, [r5, #0]
 8000892:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000896:	f000 82e2 	beq.w	8000e5e <main+0x702>
 800089a:	3b01      	subs	r3, #1
 800089c:	d1f8      	bne.n	8000890 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0x144>
 80008a2:	b672      	cpsid	i
 80008a4:	e7fe      	b.n	80008a4 <main+0x148>
  BSP_SDRAM_DeInit(0);
 80008a6:	f004 fe91 	bl	80055cc <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80008aa:	4640      	mov	r0, r8
 80008ac:	f004 fedc 	bl	8005668 <BSP_SDRAM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b108      	cbz	r0, 80008b8 <main+0x15c>
 80008b4:	b672      	cpsid	i
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0x15a>
  hqspi.Instance = QUADSPI;
 80008b8:	486c      	ldr	r0, [pc, #432]	; (8000a6c <main+0x310>)
 80008ba:	4a6d      	ldr	r2, [pc, #436]	; (8000a70 <main+0x314>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008bc:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80008be:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 80008c0:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008c4:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008c8:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008cc:	f007 fa82 	bl	8007dd4 <HAL_QSPI_Init>
 80008d0:	b108      	cbz	r0, 80008d6 <main+0x17a>
 80008d2:	b672      	cpsid	i
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x178>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80008d6:	f240 1303 	movw	r3, #259	; 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80008da:	a92d      	add	r1, sp, #180	; 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 80008dc:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80008e0:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80008e4:	f004 fcb8 	bl	8005258 <BSP_QSPI_Init>
 80008e8:	b108      	cbz	r0, 80008ee <main+0x192>
 80008ea:	b672      	cpsid	i
  while (1)
 80008ec:	e7fe      	b.n	80008ec <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80008ee:	f004 fc5f 	bl	80051b0 <BSP_QSPI_EnableMemoryMappedMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b108      	cbz	r0, 80008fa <main+0x19e>
 80008f6:	b672      	cpsid	i
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x19c>
  hdma2d.Instance = DMA2D;
 80008fa:	485e      	ldr	r0, [pc, #376]	; (8000a74 <main+0x318>)
  hdma2d.Init.Mode = DMA2D_R2M;
 80008fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000900:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000a80 <main+0x324>
  hdma2d.Init.OutputOffset = 0;
 8000904:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000908:	e9c0 8200 	strd	r8, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800090c:	f005 fccc 	bl	80062a8 <HAL_DMA2D_Init>
 8000910:	4605      	mov	r5, r0
 8000912:	b108      	cbz	r0, 8000918 <main+0x1bc>
 8000914:	b672      	cpsid	i
  while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000918:	4602      	mov	r2, r0
 800091a:	4631      	mov	r1, r6
 800091c:	4856      	ldr	r0, [pc, #344]	; (8000a78 <main+0x31c>)
 800091e:	f006 fb5b 	bl	8006fd8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000922:	2014      	movs	r0, #20
 8000924:	f005 f940 	bl	8005ba8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000928:	4631      	mov	r1, r6
 800092a:	4622      	mov	r2, r4
 800092c:	4852      	ldr	r0, [pc, #328]	; (8000a78 <main+0x31c>)
 800092e:	f006 fb53 	bl	8006fd8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000932:	200a      	movs	r0, #10
 8000934:	f005 f938 	bl	8005ba8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000938:	2224      	movs	r2, #36	; 0x24
 800093a:	4629      	mov	r1, r5
 800093c:	a817      	add	r0, sp, #92	; 0x5c
 800093e:	f01e ffd3 	bl	801f8e8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000942:	2218      	movs	r2, #24
 8000944:	4629      	mov	r1, r5
 8000946:	a811      	add	r0, sp, #68	; 0x44
 8000948:	f01e ffce 	bl	801f8e8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800094c:	2234      	movs	r2, #52	; 0x34
 800094e:	4629      	mov	r1, r5
 8000950:	a82d      	add	r0, sp, #180	; 0xb4
 8000952:	f01e ffc9 	bl	801f8e8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000956:	4629      	mov	r1, r5
 8000958:	222c      	movs	r2, #44	; 0x2c
 800095a:	a820      	add	r0, sp, #128	; 0x80
 800095c:	f01e ffc4 	bl	801f8e8 <memset>
  hdsi.Instance = DSI;
 8000960:	4e46      	ldr	r6, [pc, #280]	; (8000a7c <main+0x320>)
 8000962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000966:	f04f 0e63 	mov.w	lr, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800096a:	a90e      	add	r1, sp, #56	; 0x38
 800096c:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800096e:	9510      	str	r5, [sp, #64]	; 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000970:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000974:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000976:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800097a:	2305      	movs	r3, #5
 800097c:	e9cd e30e 	strd	lr, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000980:	f005 fdde 	bl	8006540 <HAL_DSI_Init>
 8000984:	b108      	cbz	r0, 800098a <main+0x22e>
 8000986:	b672      	cpsid	i
  while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800098a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 800098e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000992:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000996:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 800099a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800099c:	a917      	add	r1, sp, #92	; 0x5c
 800099e:	4630      	mov	r0, r6
 80009a0:	f005 fff8 	bl	8006994 <HAL_DSI_ConfigHostTimeouts>
 80009a4:	b108      	cbz	r0, 80009aa <main+0x24e>
 80009a6:	b672      	cpsid	i
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009aa:	2321      	movs	r3, #33	; 0x21
 80009ac:	271c      	movs	r7, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 80009ae:	f04f 0c0f 	mov.w	ip, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009b2:	a911      	add	r1, sp, #68	; 0x44
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <main+0x320>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009b6:	e9cd 7311 	strd	r7, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80009ba:	2319      	movs	r3, #25
 80009bc:	e9cd c313 	strd	ip, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009c0:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 80009c2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009c6:	f005 ffa8 	bl	800691a <HAL_DSI_ConfigPhyTimer>
 80009ca:	b108      	cbz	r0, 80009d0 <main+0x274>
 80009cc:	b672      	cpsid	i
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x272>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009d0:	2104      	movs	r1, #4
 80009d2:	482a      	ldr	r0, [pc, #168]	; (8000a7c <main+0x320>)
 80009d4:	f005 ff90 	bl	80068f8 <HAL_DSI_ConfigFlowControl>
 80009d8:	b108      	cbz	r0, 80009de <main+0x282>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x280>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009de:	f242 7110 	movw	r1, #10000	; 0x2710
 80009e2:	4826      	ldr	r0, [pc, #152]	; (8000a7c <main+0x320>)
 80009e4:	f006 f956 	bl	8006c94 <HAL_DSI_SetLowPowerRXFilter>
 80009e8:	4601      	mov	r1, r0
 80009ea:	b108      	cbz	r0, 80009f0 <main+0x294>
 80009ec:	b672      	cpsid	i
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0x292>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009f0:	4822      	ldr	r0, [pc, #136]	; (8000a7c <main+0x320>)
 80009f2:	f005 fd43 	bl	800647c <HAL_DSI_ConfigErrorMonitor>
 80009f6:	b108      	cbz	r0, 80009fc <main+0x2a0>
 80009f8:	b672      	cpsid	i
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x29e>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80009fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a00:	f44f 7280 	mov.w	r2, #256	; 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a0c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a10:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a14:	f44f 2600 	mov.w	r6, #524288	; 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a18:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a1c:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a24:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a28:	e9cd 132f 	strd	r1, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a30:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a32:	e9cd 0331 	strd	r0, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0x320>)
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a3c:	e9cd 4333 	strd	r4, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a44:	e9cd 5335 	strd	r5, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a4c:	e9cd 6337 	strd	r6, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a50:	f005 ff1e 	bl	8006890 <HAL_DSI_ConfigCommand>
 8000a54:	b1b0      	cbz	r0, 8000a84 <main+0x328>
 8000a56:	b672      	cpsid	i
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0x2fc>
 8000a5a:	bf00      	nop
 8000a5c:	0300001b 	.word	0x0300001b
 8000a60:	10040000 	.word	0x10040000
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	2400eef4 	.word	0x2400eef4
 8000a70:	52005000 	.word	0x52005000
 8000a74:	2400ee54 	.word	0x2400ee54
 8000a78:	58021800 	.word	0x58021800
 8000a7c:	2400ecb4 	.word	0x2400ecb4
 8000a80:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000a84:	2305      	movs	r3, #5
 8000a86:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a8a:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000a8c:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a8e:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a90:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000a92:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a96:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a98:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000a9c:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000a9e:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000aa2:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000aa6:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000aaa:	4868      	ldr	r0, [pc, #416]	; (8000c4c <main+0x4f0>)
 8000aac:	f005 fe7e 	bl	80067ac <HAL_DSI_ConfigAdaptedCommandMode>
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	b108      	cbz	r0, 8000ab8 <main+0x35c>
 8000ab4:	b672      	cpsid	i
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <main+0x35a>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ab8:	4864      	ldr	r0, [pc, #400]	; (8000c4c <main+0x4f0>)
 8000aba:	f005 fe66 	bl	800678a <HAL_DSI_SetGenericVCID>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	b108      	cbz	r0, 8000ac6 <main+0x36a>
 8000ac2:	b672      	cpsid	i
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x368>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	2234      	movs	r2, #52	; 0x34
 8000aca:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000acc:	4d60      	ldr	r5, [pc, #384]	; (8000c50 <main+0x4f4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ace:	f01e ff0b 	bl	801f8e8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ad6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000c80 <main+0x524>
  hltdc.Init.AccumulatedActiveH = 482;
 8000ada:	f44f 7ec9 	mov.w	lr, #402	; 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000ade:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ae2:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000ae4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000ae6:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000aea:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000af2:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000af6:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000afa:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000afe:	e9c5 e309 	strd	lr, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b02:	f240 1893 	movw	r8, #403	; 0x193
 8000b06:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b0a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b0e:	e9c5 830b 	strd	r8, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b12:	f006 fe7b 	bl	800780c <HAL_LTDC_Init>
 8000b16:	b108      	cbz	r0, 8000b1c <main+0x3c0>
 8000b18:	b672      	cpsid	i
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <main+0x3be>
  pLayerCfg.Alpha = 255;
 8000b1c:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b1e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000b22:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000b26:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000b28:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2c:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.Backcolor.Red = 0;
 8000b2e:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b32:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000b34:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b38:	2207      	movs	r2, #7
 8000b3a:	e9cd 4227 	strd	r4, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b3e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000b42:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000b46:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b4e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b52:	f006 ff27 	bl	80079a4 <HAL_LTDC_ConfigLayer>
 8000b56:	4604      	mov	r4, r0
 8000b58:	b108      	cbz	r0, 8000b5e <main+0x402>
 8000b5a:	b672      	cpsid	i
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <main+0x400>
  __HAL_LTDC_DISABLE(&hltdc);
 8000b5e:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000b60:	483a      	ldr	r0, [pc, #232]	; (8000c4c <main+0x4f0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000b62:	6993      	ldr	r3, [r2, #24]
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000b6a:	f005 ff79 	bl	8006a60 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000b6e:	4939      	ldr	r1, [pc, #228]	; (8000c54 <main+0x4f8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000b70:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <main+0x4fc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000b72:	483a      	ldr	r0, [pc, #232]	; (8000c5c <main+0x500>)
  IOCtx.GetTick     = BSP_GetTick;
 8000b74:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <main+0x504>)
  IOCtx.Address     = 0;
 8000b78:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000b7a:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000b7c:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <main+0x508>)
 8000b7e:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000b80:	f004 f906 	bl	8004d90 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000b84:	4632      	mov	r2, r6
 8000b86:	4621      	mov	r1, r4
 8000b88:	4834      	ldr	r0, [pc, #208]	; (8000c5c <main+0x500>)
 8000b8a:	f003 fd5b 	bl	8004644 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000b8e:	2328      	movs	r3, #40	; 0x28
 8000b90:	2215      	movs	r2, #21
 8000b92:	4621      	mov	r1, r4
 8000b94:	482d      	ldr	r0, [pc, #180]	; (8000c4c <main+0x4f0>)
 8000b96:	9400      	str	r4, [sp, #0]
 8000b98:	f005 ff95 	bl	8006ac6 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000b9c:	a92d      	add	r1, sp, #180	; 0xb4
 8000b9e:	482b      	ldr	r0, [pc, #172]	; (8000c4c <main+0x4f0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000ba0:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000ba2:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000ba6:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000baa:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bae:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000bb2:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bb6:	f005 fe6b 	bl	8006890 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000bba:	4622      	mov	r2, r4
 8000bbc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f006 ff1d 	bl	8007a00 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000bc6:	682a      	ldr	r2, [r5, #0]
  huart1.Instance = USART1;
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <main+0x50c>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000bca:	6993      	ldr	r3, [r2, #24]
  huart1.Init.BaudRate = 9600;
 8000bcc:	4927      	ldr	r1, [pc, #156]	; (8000c6c <main+0x510>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000bce:	f043 0301 	orr.w	r3, r3, #1
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	6104      	str	r4, [r0, #16]
  __HAL_LTDC_ENABLE(&hltdc);
 8000bd4:	6193      	str	r3, [r2, #24]
  huart1.Init.BaudRate = 9600;
 8000bd6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bda:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bde:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be4:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be8:	e9c0 4407 	strd	r4, r4, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bec:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf0:	f009 fff4 	bl	800abdc <HAL_UART_Init>
 8000bf4:	b108      	cbz	r0, 8000bfa <main+0x49e>
 8000bf6:	b672      	cpsid	i
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x49c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <main+0x50c>)
 8000bfe:	f00a f8ef 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c02:	4601      	mov	r1, r0
 8000c04:	b108      	cbz	r0, 8000c0a <main+0x4ae>
 8000c06:	b672      	cpsid	i
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <main+0x4ac>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <main+0x50c>)
 8000c0c:	f00a f90c 	bl	800ae28 <HAL_UARTEx_SetRxFifoThreshold>
 8000c10:	b108      	cbz	r0, 8000c16 <main+0x4ba>
 8000c12:	b672      	cpsid	i
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0x4b8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <main+0x50c>)
 8000c18:	f00a f8c7 	bl	800adaa <HAL_UARTEx_DisableFifoMode>
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	b108      	cbz	r0, 8000c24 <main+0x4c8>
 8000c20:	b672      	cpsid	i
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <main+0x4c6>
  MX_TouchGFX_Init();
 8000c24:	f000 fdb5 	bl	8001792 <MX_TouchGFX_Init>
  HAL_UART_Receive_IT(&huart1, &uRx_byte, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4911      	ldr	r1, [pc, #68]	; (8000c70 <main+0x514>)
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <main+0x50c>)
 8000c2e:	f00a f86f 	bl	800ad10 <HAL_UART_Receive_IT>
  osKernelInitialize();
 8000c32:	f00a f9c7 	bl	800afc4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <main+0x518>)
 8000c38:	4621      	mov	r1, r4
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <main+0x51c>)
 8000c3c:	f00a f9ee 	bl	800b01c <osThreadNew>
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <main+0x520>)
 8000c42:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c44:	f00a f9d0 	bl	800afe8 <osKernelStart>
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x4ec>
 8000c4a:	bf00      	nop
 8000c4c:	2400ecb4 	.word	0x2400ecb4
 8000c50:	2400ecfc 	.word	0x2400ecfc
 8000c54:	2400ee38 	.word	0x2400ee38
 8000c58:	08005181 	.word	0x08005181
 8000c5c:	2400ef40 	.word	0x2400ef40
 8000c60:	08001bb9 	.word	0x08001bb9
 8000c64:	08001bf1 	.word	0x08001bf1
 8000c68:	2400eda8 	.word	0x2400eda8
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	2400ecf8 	.word	0x2400ecf8
 8000c74:	08020a54 	.word	0x08020a54
 8000c78:	08001797 	.word	0x08001797
 8000c7c:	2400eda4 	.word	0x2400eda4
 8000c80:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2214      	movs	r2, #20
 8000c86:	2100      	movs	r1, #0
 8000c88:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f01e fe2c 	bl	801f8e8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000c9e:	4881      	ldr	r0, [pc, #516]	; (8000ea4 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000ca2:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ca8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb0:	9304      	str	r3, [sp, #16]
 8000cb2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc8:	9305      	str	r3, [sp, #20]
 8000cca:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	9306      	str	r3, [sp, #24]
 8000ce2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf8:	9307      	str	r3, [sp, #28]
 8000cfa:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	9308      	str	r3, [sp, #32]
 8000d12:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d28:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	930a      	str	r3, [sp, #40]	; 0x28
 8000d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	930c      	str	r3, [sp, #48]	; 0x30
 8000d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8000d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000d8e:	f006 f923 	bl	8006fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d98:	4843      	ldr	r0, [pc, #268]	; (8000ea8 <main+0x74c>)
 8000d9a:	f006 f91d 	bl	8006fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	4842      	ldr	r0, [pc, #264]	; (8000eac <main+0x750>)
 8000da4:	f006 f918 	bl	8006fd8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000dac:	a92d      	add	r1, sp, #180	; 0xb4
 8000dae:	483d      	ldr	r0, [pc, #244]	; (8000ea4 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f005 ff82 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	a92d      	add	r1, sp, #180	; 0xb4
 8000dc4:	483a      	ldr	r0, [pc, #232]	; (8000eb0 <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dc6:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f005 ff76 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dd4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dd8:	a92d      	add	r1, sp, #180	; 0xb4
 8000dda:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000de4:	f005 ff6c 	bl	8006cc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000de8:	a92d      	add	r1, sp, #180	; 0xb4
 8000dea:	4830      	ldr	r0, [pc, #192]	; (8000eac <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f005 ff64 	bl	8006cc0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000df8:	482e      	ldr	r0, [pc, #184]	; (8000eb4 <main+0x758>)
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <main+0x75c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dfc:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000dfe:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e00:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e02:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e06:	f004 ff97 	bl	8005d38 <HAL_CRC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	f47f ad48 	bne.w	80008a2 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e12:	492a      	ldr	r1, [pc, #168]	; (8000ebc <main+0x760>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e14:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e16:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <main+0x764>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e18:	680a      	ldr	r2, [r1, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e20:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e22:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <main+0x768>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e24:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e26:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e30:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e32:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e36:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e3a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e3e:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e40:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e44:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e48:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e4c:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e4e:	f008 fddd 	bl	8009a0c <HAL_SDRAM_Init>
 8000e52:	4680      	mov	r8, r0
 8000e54:	2800      	cmp	r0, #0
 8000e56:	f43f ad26 	beq.w	80008a6 <main+0x14a>
 8000e5a:	b672      	cpsid	i
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <main+0x700>
  HAL_Init();
 8000e5e:	f004 fe63 	bl	8005b28 <HAL_Init>
  SystemClock_Config();
 8000e62:	f7ff fc0f 	bl	8000684 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e66:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e6a:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e70:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e80:	f006 f8b8 	bl	8006ff4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e84:	4621      	mov	r1, r4
 8000e86:	4620      	mov	r0, r4
 8000e88:	f006 f8c2 	bl	8007010 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e8c:	4c0e      	ldr	r4, [pc, #56]	; (8000ec8 <main+0x76c>)
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	f53f aef5 	bmi.w	8000c84 <main+0x528>
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	d1f9      	bne.n	8000e92 <main+0x736>
 8000e9e:	b672      	cpsid	i
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x744>
 8000ea2:	bf00      	nop
 8000ea4:	58022400 	.word	0x58022400
 8000ea8:	58022000 	.word	0x58022000
 8000eac:	58021800 	.word	0x58021800
 8000eb0:	58020000 	.word	0x58020000
 8000eb4:	2400ec8c 	.word	0x2400ec8c
 8000eb8:	58024c00 	.word	0x58024c00
 8000ebc:	52004000 	.word	0x52004000
 8000ec0:	2400eebc 	.word	0x2400eebc
 8000ec4:	52004140 	.word	0x52004140
 8000ec8:	58024400 	.word	0x58024400

08000ecc <getSubInt>:
{
 8000ecc:	b598      	push	{r3, r4, r7, lr}
	unsigned char temp[size + 1];
 8000ece:	f101 0308 	add.w	r3, r1, #8
{
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <getSubInt+0x34>)
	unsigned char temp[size + 1];
 8000ed6:	f023 0307 	bic.w	r3, r3, #7
 8000eda:	4402      	add	r2, r0
 8000edc:	ebad 0d03 	sub.w	sp, sp, r3
	for(i = 0; i < size; i++) temp[i] = uRx_data[start + i];
 8000ee0:	2300      	movs	r3, #0
	unsigned char temp[size + 1];
 8000ee2:	466c      	mov	r4, sp
	for(i = 0; i < size; i++) temp[i] = uRx_data[start + i];
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	db06      	blt.n	8000ef6 <getSubInt+0x2a>
	temp[size] = '\0';
 8000ee8:	2300      	movs	r3, #0
	return atoi(temp);
 8000eea:	4620      	mov	r0, r4
	temp[size] = '\0';
 8000eec:	5463      	strb	r3, [r4, r1]
	return atoi(temp);
 8000eee:	f01e fc8f 	bl	801f810 <atoi>
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd98      	pop	{r3, r4, r7, pc}
	for(i = 0; i < size; i++) temp[i] = uRx_data[start + i];
 8000ef6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000efa:	54e0      	strb	r0, [r4, r3]
 8000efc:	3301      	adds	r3, #1
 8000efe:	e7f1      	b.n	8000ee4 <getSubInt+0x18>
 8000f00:	2400ecd0 	.word	0x2400ecd0

08000f04 <update_parameter>:
{
 8000f04:	b508      	push	{r3, lr}
  if(uRx_data[0] == '=' && uRx_data[33] == '@')
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <update_parameter+0x74>)
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	2a3d      	cmp	r2, #61	; 0x3d
 8000f0c:	d133      	bne.n	8000f76 <update_parameter+0x72>
 8000f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f12:	2b40      	cmp	r3, #64	; 0x40
 8000f14:	d12f      	bne.n	8000f76 <update_parameter+0x72>
    speed_L_R = getSubInt(1, 1);
 8000f16:	2101      	movs	r1, #1
 8000f18:	4608      	mov	r0, r1
 8000f1a:	f7ff ffd7 	bl	8000ecc <getSubInt>
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <update_parameter+0x78>)
    speed_R_R = getSubInt(2, 1);
 8000f20:	2101      	movs	r1, #1
    speed_L_R = getSubInt(1, 1);
 8000f22:	6018      	str	r0, [r3, #0]
    speed_R_R = getSubInt(2, 1);
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff ffd1 	bl	8000ecc <getSubInt>
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <update_parameter+0x7c>)
    G_X = getSubInt( 3, 5);
 8000f2c:	2105      	movs	r1, #5
    speed_R_R = getSubInt(2, 1);
 8000f2e:	6018      	str	r0, [r3, #0]
    G_X = getSubInt( 3, 5);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff ffcb 	bl	8000ecc <getSubInt>
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <update_parameter+0x80>)
    G_Y = getSubInt( 8, 5);
 8000f38:	2105      	movs	r1, #5
    G_X = getSubInt( 3, 5);
 8000f3a:	6018      	str	r0, [r3, #0]
    G_Y = getSubInt( 8, 5);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f7ff ffc5 	bl	8000ecc <getSubInt>
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <update_parameter+0x84>)
    G_Z = getSubInt(13, 5);
 8000f44:	2105      	movs	r1, #5
    G_Y = getSubInt( 8, 5);
 8000f46:	6018      	str	r0, [r3, #0]
    G_Z = getSubInt(13, 5);
 8000f48:	200d      	movs	r0, #13
 8000f4a:	f7ff ffbf 	bl	8000ecc <getSubInt>
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <update_parameter+0x88>)
    A_X = getSubInt(18, 5);
 8000f50:	2105      	movs	r1, #5
    G_Z = getSubInt(13, 5);
 8000f52:	6018      	str	r0, [r3, #0]
    A_X = getSubInt(18, 5);
 8000f54:	2012      	movs	r0, #18
 8000f56:	f7ff ffb9 	bl	8000ecc <getSubInt>
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <update_parameter+0x8c>)
    A_Y = getSubInt(23, 5);
 8000f5c:	2105      	movs	r1, #5
    A_X = getSubInt(18, 5);
 8000f5e:	6018      	str	r0, [r3, #0]
    A_Y = getSubInt(23, 5);
 8000f60:	2017      	movs	r0, #23
 8000f62:	f7ff ffb3 	bl	8000ecc <getSubInt>
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <update_parameter+0x90>)
    A_Z = getSubInt(28, 5);
 8000f68:	2105      	movs	r1, #5
    A_Y = getSubInt(23, 5);
 8000f6a:	6018      	str	r0, [r3, #0]
    A_Z = getSubInt(28, 5);
 8000f6c:	201c      	movs	r0, #28
 8000f6e:	f7ff ffad 	bl	8000ecc <getSubInt>
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <update_parameter+0x94>)
 8000f74:	6018      	str	r0, [r3, #0]
}
 8000f76:	bd08      	pop	{r3, pc}
 8000f78:	2400ecd0 	.word	0x2400ecd0
 8000f7c:	2400ee50 	.word	0x2400ee50
 8000f80:	2400ee48 	.word	0x2400ee48
 8000f84:	24000010 	.word	0x24000010
 8000f88:	24000014 	.word	0x24000014
 8000f8c:	24000018 	.word	0x24000018
 8000f90:	24000004 	.word	0x24000004
 8000f94:	24000008 	.word	0x24000008
 8000f98:	2400000c 	.word	0x2400000c

08000f9c <HAL_UART_RxCpltCallback>:
  if(huart->Instance == USART1)
 8000f9c:	6802      	ldr	r2, [r0, #0]
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_UART_RxCpltCallback+0x50>)
 8000fa0:	429a      	cmp	r2, r3
{
 8000fa2:	b510      	push	{r4, lr}
  if(huart->Instance == USART1)
 8000fa4:	d121      	bne.n	8000fea <HAL_UART_RxCpltCallback+0x4e>
	if (uRx_index >= 35) uRx_index = 0;
 8000fa6:	4c12      	ldr	r4, [pc, #72]	; (8000ff0 <HAL_UART_RxCpltCallback+0x54>)
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <HAL_UART_RxCpltCallback+0x58>)
	if (uRx_index >= 35) uRx_index = 0;
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	2b22      	cmp	r3, #34	; 0x22
 8000fb2:	bfc4      	itt	gt
 8000fb4:	2300      	movgt	r3, #0
 8000fb6:	6023      	strgt	r3, [r4, #0]
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8000fb8:	f006 f813 	bl	8006fe2 <HAL_GPIO_TogglePin>
    if(uRx_byte == '=') uRx_index = 0;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_RxCpltCallback+0x5c>)
    uRx_data[uRx_index] = uRx_byte;
 8000fbe:	490f      	ldr	r1, [pc, #60]	; (8000ffc <HAL_UART_RxCpltCallback+0x60>)
    if(uRx_byte == '=') uRx_index = 0;
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b3d      	cmp	r3, #61	; 0x3d
 8000fc4:	bf04      	itt	eq
 8000fc6:	2200      	moveq	r2, #0
 8000fc8:	6022      	streq	r2, [r4, #0]
    if(uRx_byte == '@') update_parameter();
 8000fca:	2b40      	cmp	r3, #64	; 0x40
    uRx_data[uRx_index] = uRx_byte;
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	548b      	strb	r3, [r1, r2]
    if(uRx_byte == '@') update_parameter();
 8000fd0:	d101      	bne.n	8000fd6 <HAL_UART_RxCpltCallback+0x3a>
 8000fd2:	f7ff ff97 	bl	8000f04 <update_parameter>
    uRx_index++;
 8000fd6:	6823      	ldr	r3, [r4, #0]
    HAL_UART_Receive_IT(&huart1, &uRx_byte, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <HAL_UART_RxCpltCallback+0x5c>)
    uRx_index++;
 8000fdc:	3301      	adds	r3, #1
    HAL_UART_Receive_IT(&huart1, &uRx_byte, 1);
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <HAL_UART_RxCpltCallback+0x64>)
    uRx_index++;
 8000fe0:	6023      	str	r3, [r4, #0]
}
 8000fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_IT(&huart1, &uRx_byte, 1);
 8000fe6:	f009 be93 	b.w	800ad10 <HAL_UART_Receive_IT>
}
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	2400eef0 	.word	0x2400eef0
 8000ff4:	58022000 	.word	0x58022000
 8000ff8:	2400ecf8 	.word	0x2400ecf8
 8000ffc:	2400ecd0 	.word	0x2400ecd0
 8001000:	2400eda8 	.word	0x2400eda8

08001004 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001004:	6802      	ldr	r2, [r0, #0]
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001008:	429a      	cmp	r2, r3
 800100a:	d101      	bne.n	8001010 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800100c:	f004 bdba 	b.w	8005b84 <HAL_IncTick>
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40001000 	.word	0x40001000

08001018 <Error_Handler>:
 8001018:	b672      	cpsid	i
  while (1)
 800101a:	e7fe      	b.n	800101a <Error_Handler+0x2>

0800101c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x2c>)
{
 800101e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001020:	210f      	movs	r1, #15
 8001022:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800102a:	f042 0202 	orr.w	r2, r2, #2
 800102e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001032:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001040:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001042:	f004 bddb 	b.w	8005bfc <HAL_NVIC_SetPriority>
 8001046:	bf00      	nop
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800104c:	6802      	ldr	r2, [r0, #0]
{
 800104e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_CRC_MspInit+0x2c>)
 8001052:	429a      	cmp	r2, r3
 8001054:	d10d      	bne.n	8001072 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001056:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800105a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800105e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001062:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001072:	b002      	add	sp, #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	58024c00 	.word	0x58024c00

0800107c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_DMA2D_MspInit+0x40>)
{
 800107e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001080:	6802      	ldr	r2, [r0, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d117      	bne.n	80010b6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001088:	2107      	movs	r1, #7
 800108a:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800108c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001090:	f042 0210 	orr.w	r2, r2, #16
 8001094:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001098:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800109a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80010a6:	f004 fda9 	bl	8005bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010aa:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010ac:	b003      	add	sp, #12
 80010ae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010b2:	f004 bdd5 	b.w	8005c60 <HAL_NVIC_EnableIRQ>
}
 80010b6:	b003      	add	sp, #12
 80010b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010bc:	52001000 	.word	0x52001000
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	b0b8      	sub	sp, #224	; 0xe0
 80010c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	a803      	add	r0, sp, #12
 80010d0:	f01e fc0a 	bl	801f8e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	22c0      	movs	r2, #192	; 0xc0
 80010d6:	2100      	movs	r1, #0
 80010d8:	a808      	add	r0, sp, #32
 80010da:	f01e fc05 	bl	801f8e8 <memset>
  if(hdsi->Instance==DSI)
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e4:	d138      	bne.n	8001158 <HAL_DSI_MspInit+0x94>
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010ec:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
 80010ee:	2300      	movs	r3, #0
 80010f0:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f007 fe55 	bl	8008da0 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80010f8:	f7ff ff8e 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001100:	a903      	add	r1, sp, #12
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001104:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001108:	f042 0210 	orr.w	r2, r2, #16
 800110c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001110:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001114:	f002 0210 	and.w	r2, r2, #16
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800111c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001124:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800113c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001142:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001144:	f005 fdbc 	bl	8006cc0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001148:	207b      	movs	r0, #123	; 0x7b
 800114a:	4622      	mov	r2, r4
 800114c:	2107      	movs	r1, #7
 800114e:	f004 fd55 	bl	8005bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001152:	207b      	movs	r0, #123	; 0x7b
 8001154:	f004 fd84 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001158:	b038      	add	sp, #224	; 0xe0
 800115a:	bd10      	pop	{r4, pc}
 800115c:	58024400 	.word	0x58024400
 8001160:	58022400 	.word	0x58022400

08001164 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001164:	b510      	push	{r4, lr}
 8001166:	b0b2      	sub	sp, #200	; 0xc8
 8001168:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116a:	22c0      	movs	r2, #192	; 0xc0
 800116c:	2100      	movs	r1, #0
 800116e:	a802      	add	r0, sp, #8
 8001170:	f01e fbba 	bl	801f8e8 <memset>
  if(hltdc->Instance==LTDC)
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_LTDC_MspInit+0x78>)
 8001178:	429a      	cmp	r2, r3
 800117a:	d12c      	bne.n	80011d6 <HAL_LTDC_MspInit+0x72>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800117c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001180:	2105      	movs	r1, #5
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001182:	2015      	movs	r0, #21
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001184:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001186:	23a1      	movs	r3, #161	; 0xa1
 8001188:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800118c:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800118e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800119a:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800119e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f007 fdfd 	bl	8008da0 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	b108      	cbz	r0, 80011ac <HAL_LTDC_MspInit+0x48>
    {
      Error_Handler();
 80011a8:	f7ff ff36 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_LTDC_MspInit+0x7c>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011ae:	2058      	movs	r0, #88	; 0x58
 80011b0:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011b2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80011b6:	f042 0208 	orr.w	r2, r2, #8
 80011ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011be:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011cc:	f004 fd16 	bl	8005bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011d0:	2058      	movs	r0, #88	; 0x58
 80011d2:	f004 fd45 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011d6:	b032      	add	sp, #200	; 0xc8
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	bf00      	nop
 80011dc:	50001000 	.word	0x50001000
 80011e0:	58024400 	.word	0x58024400

080011e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b0bd      	sub	sp, #244	; 0xf4
 80011e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	2214      	movs	r2, #20
 80011ec:	2100      	movs	r1, #0
 80011ee:	a807      	add	r0, sp, #28
 80011f0:	f01e fb7a 	bl	801f8e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	a80c      	add	r0, sp, #48	; 0x30
 80011fa:	f01e fb75 	bl	801f8e8 <memset>
  if(hqspi->Instance==QUADSPI)
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <HAL_QSPI_MspInit+0x16c>)
 8001202:	429a      	cmp	r2, r3
 8001204:	f040 80a1 	bne.w	800134a <HAL_QSPI_MspInit+0x166>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800120e:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001210:	2300      	movs	r3, #0
 8001212:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	f007 fdc4 	bl	8008da0 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	b108      	cbz	r0, 800121e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800121a:	f7ff fefd 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001224:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001226:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122a:	a907      	add	r1, sp, #28
 800122c:	484a      	ldr	r0, [pc, #296]	; (8001358 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800122e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001234:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001238:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800123c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001254:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001258:	9202      	str	r2, [sp, #8]
 800125a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800125c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001268:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800126c:	f002 0220 	and.w	r2, r2, #32
 8001270:	9203      	str	r2, [sp, #12]
 8001272:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001274:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001284:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001288:	9204      	str	r2, [sp, #16]
 800128a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001290:	f042 0202 	orr.w	r2, r2, #2
 8001294:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001298:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800129c:	f002 0202 	and.w	r2, r2, #2
 80012a0:	9205      	str	r2, [sp, #20]
 80012a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012a8:	f042 0208 	orr.w	r2, r2, #8
 80012ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	9306      	str	r3, [sp, #24]
 80012ba:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80012c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012c8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ca:	f005 fcf9 	bl	8006cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ce:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	a907      	add	r1, sp, #28
 80012d2:	4821      	ldr	r0, [pc, #132]	; (8001358 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012d4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012de:	f005 fcef 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e4:	a907      	add	r1, sp, #28
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012e8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f2:	f005 fce5 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fa:	a907      	add	r1, sp, #28
 80012fc:	4817      	ldr	r0, [pc, #92]	; (800135c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012fe:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f005 fcda 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130c:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800130e:	a907      	add	r1, sp, #28
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001312:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800131c:	f005 fcd0 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001320:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	a907      	add	r1, sp, #28
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001326:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f005 fcc6 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001334:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	a907      	add	r1, sp, #28
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800133c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001346:	f005 fcbb 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800134a:	b03d      	add	sp, #244	; 0xf4
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	bf00      	nop
 8001350:	52005000 	.word	0x52005000
 8001354:	58024400 	.word	0x58024400
 8001358:	58021800 	.word	0x58021800
 800135c:	58021400 	.word	0x58021400
 8001360:	58021c00 	.word	0x58021c00
 8001364:	58020400 	.word	0x58020400
 8001368:	58020c00 	.word	0x58020c00

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b510      	push	{r4, lr}
 800136e:	b0b8      	sub	sp, #224	; 0xe0
 8001370:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2214      	movs	r2, #20
 8001374:	2100      	movs	r1, #0
 8001376:	a803      	add	r0, sp, #12
 8001378:	f01e fab6 	bl	801f8e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	22c0      	movs	r2, #192	; 0xc0
 800137e:	2100      	movs	r1, #0
 8001380:	a808      	add	r0, sp, #32
 8001382:	f01e fab1 	bl	801f8e8 <memset>
  if(huart->Instance==USART1)
 8001386:	6822      	ldr	r2, [r4, #0]
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_UART_MspInit+0x98>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d138      	bne.n	8001400 <HAL_UART_MspInit+0x94>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800138e:	2301      	movs	r3, #1
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001392:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001394:	2300      	movs	r3, #0
 8001396:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f007 fd02 	bl	8008da0 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	b108      	cbz	r0, 80013a2 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800139e:	f7ff fe3b 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0x9c>)
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	a903      	add	r1, sp, #12
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80013aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80013b6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80013ba:	f002 0210 	and.w	r2, r2, #16
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013c6:	f042 0202 	orr.w	r2, r2, #2
 80013ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013e4:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f005 fc68 	bl	8006cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013f0:	2025      	movs	r0, #37	; 0x25
 80013f2:	4622      	mov	r2, r4
 80013f4:	2105      	movs	r1, #5
 80013f6:	f004 fc01 	bl	8005bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013fa:	2025      	movs	r0, #37	; 0x25
 80013fc:	f004 fc30 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001400:	b038      	add	sp, #224	; 0xe0
 8001402:	bd10      	pop	{r4, pc}
 8001404:	40011000 	.word	0x40011000
 8001408:	58024400 	.word	0x58024400
 800140c:	58020400 	.word	0x58020400

08001410 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001414:	2214      	movs	r2, #20
 8001416:	2100      	movs	r1, #0
 8001418:	a801      	add	r0, sp, #4
 800141a:	f01e fa65 	bl	801f8e8 <memset>
  if (FMC_Initialized) {
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_SDRAM_MspInit+0xf8>)
 8001420:	681c      	ldr	r4, [r3, #0]
 8001422:	2c00      	cmp	r4, #0
 8001424:	d16d      	bne.n	8001502 <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001426:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	4621      	mov	r1, r4
 800142a:	a807      	add	r0, sp, #28
  FMC_Initialized = 1;
 800142c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142e:	22bc      	movs	r2, #188	; 0xbc
 8001430:	f01e fa5a 	bl	801f8e8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001438:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800143a:	9417      	str	r4, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800143c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f007 fcaf 	bl	8008da0 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	b108      	cbz	r0, 8001448 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001444:	f7ff fde8 	bl	8001018 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2600      	movs	r6, #0
 800144e:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001450:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001454:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001456:	a901      	add	r1, sp, #4
 8001458:	482d      	ldr	r0, [pc, #180]	; (8001510 <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800145a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800145e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001466:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800147c:	f005 fc20 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001480:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	a901      	add	r1, sp, #4
 8001486:	4823      	ldr	r0, [pc, #140]	; (8001514 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001488:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	f005 fc15 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001496:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800149a:	a901      	add	r1, sp, #4
 800149c:	481e      	ldr	r0, [pc, #120]	; (8001518 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014a8:	f005 fc0a 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014ac:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b0:	a901      	add	r1, sp, #4
 80014b2:	481a      	ldr	r0, [pc, #104]	; (800151c <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	f005 fbff 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80014c2:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	a901      	add	r1, sp, #4
 80014c8:	4815      	ldr	r0, [pc, #84]	; (8001520 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ca:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f005 fbf4 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014d8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014dc:	a901      	add	r1, sp, #4
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ea:	f005 fbe9 	bl	8006cc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80014ee:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	a901      	add	r1, sp, #4
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f005 fbdf 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001502:	b037      	add	sp, #220	; 0xdc
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	bf00      	nop
 8001508:	24000154 	.word	0x24000154
 800150c:	58024400 	.word	0x58024400
 8001510:	58022000 	.word	0x58022000
 8001514:	58021000 	.word	0x58021000
 8001518:	58021c00 	.word	0x58021c00
 800151c:	58021800 	.word	0x58021800
 8001520:	58020c00 	.word	0x58020c00
 8001524:	58021400 	.word	0x58021400
 8001528:	58020800 	.word	0x58020800

0800152c <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800152c:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_SDRAM_MspDeInit+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	bb62      	cbnz	r2, 800158e <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001534:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001536:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 800153c:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800153e:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_SDRAM_MspDeInit+0x6c>)
 8001540:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001548:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800154c:	f005 fc9e 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001550:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <HAL_SDRAM_MspDeInit+0x70>)
 8001556:	f005 fc99 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800155a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800155e:	4810      	ldr	r0, [pc, #64]	; (80015a0 <HAL_SDRAM_MspDeInit+0x74>)
 8001560:	f005 fc94 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001564:	f248 1131 	movw	r1, #33073	; 0x8131
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <HAL_SDRAM_MspDeInit+0x78>)
 800156a:	f005 fc8f 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800156e:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_SDRAM_MspDeInit+0x7c>)
 8001574:	f005 fc8a 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001578:	f64f 013f 	movw	r1, #63551	; 0xf83f
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <HAL_SDRAM_MspDeInit+0x80>)
 800157e:	f005 fc85 	bl	8006e8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 8001582:	210d      	movs	r1, #13
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 800158a:	f005 bc7f 	b.w	8006e8c <HAL_GPIO_DeInit>
}
 800158e:	bd08      	pop	{r3, pc}
 8001590:	24000150 	.word	0x24000150
 8001594:	58022000 	.word	0x58022000
 8001598:	58024400 	.word	0x58024400
 800159c:	58021000 	.word	0x58021000
 80015a0:	58021c00 	.word	0x58021c00
 80015a4:	58021800 	.word	0x58021800
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	58021400 	.word	0x58021400
 80015b0:	58020800 	.word	0x58020800

080015b4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b4:	280f      	cmp	r0, #15
{
 80015b6:	b510      	push	{r4, lr}
 80015b8:	4604      	mov	r4, r0
 80015ba:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015bc:	d902      	bls.n	80015c4 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80015be:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80015c0:	b00a      	add	sp, #40	; 0x28
 80015c2:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015c4:	4601      	mov	r1, r0
 80015c6:	2200      	movs	r2, #0
 80015c8:	2036      	movs	r0, #54	; 0x36
 80015ca:	f004 fb17 	bl	8005bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ce:	2036      	movs	r0, #54	; 0x36
 80015d0:	f004 fb46 	bl	8005c60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d6:	4669      	mov	r1, sp
 80015d8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80015da:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_InitTick+0x88>)
 80015de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80015e2:	f042 0210 	orr.w	r2, r2, #16
 80015e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80015ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f6:	f007 fab9 	bl	8008b6c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015fa:	9b07      	ldr	r3, [sp, #28]
 80015fc:	b9c3      	cbnz	r3, 8001630 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015fe:	f007 fa91 	bl	8008b24 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001602:	4c0f      	ldr	r4, [pc, #60]	; (8001640 <HAL_InitTick+0x8c>)
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_InitTick+0x90>)
 8001606:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001608:	f240 33e7 	movw	r3, #999	; 0x3e7
 800160c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_InitTick+0x94>)
 8001610:	fbb0 f0f3 	udiv	r0, r0, r3
 8001614:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001616:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001618:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800161a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800161c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001620:	f008 fbec 	bl	8009dfc <HAL_TIM_Base_Init>
 8001624:	2800      	cmp	r0, #0
 8001626:	d1ca      	bne.n	80015be <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001628:	4620      	mov	r0, r4
 800162a:	f008 fa93 	bl	8009b54 <HAL_TIM_Base_Start_IT>
 800162e:	e7c7      	b.n	80015c0 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001630:	f007 fa78 	bl	8008b24 <HAL_RCC_GetPCLK1Freq>
 8001634:	0040      	lsls	r0, r0, #1
 8001636:	e7e4      	b.n	8001602 <HAL_InitTick+0x4e>
 8001638:	2400006c 	.word	0x2400006c
 800163c:	58024400 	.word	0x58024400
 8001640:	2400ef60 	.word	0x2400ef60
 8001644:	40001000 	.word	0x40001000
 8001648:	000f4240 	.word	0x000f4240

0800164c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler>

0800164e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler>

08001650 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler>

08001652 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler>

08001654 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler>

08001656 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	4770      	bx	lr

08001658 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001658:	4801      	ldr	r0, [pc, #4]	; (8001660 <USART1_IRQHandler+0x8>)
 800165a:	f008 bd0d 	b.w	800a078 <HAL_UART_IRQHandler>
 800165e:	bf00      	nop
 8001660:	2400eda8 	.word	0x2400eda8

08001664 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001664:	4801      	ldr	r0, [pc, #4]	; (800166c <TIM6_DAC_IRQHandler+0x8>)
 8001666:	f008 bab3 	b.w	8009bd0 <HAL_TIM_IRQHandler>
 800166a:	bf00      	nop
 800166c:	2400ef60 	.word	0x2400ef60

08001670 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001670:	4801      	ldr	r0, [pc, #4]	; (8001678 <LTDC_IRQHandler+0x8>)
 8001672:	f006 b93a 	b.w	80078ea <HAL_LTDC_IRQHandler>
 8001676:	bf00      	nop
 8001678:	2400ecfc 	.word	0x2400ecfc

0800167c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800167c:	4801      	ldr	r0, [pc, #4]	; (8001684 <DMA2D_IRQHandler+0x8>)
 800167e:	f004 be52 	b.w	8006326 <HAL_DMA2D_IRQHandler>
 8001682:	bf00      	nop
 8001684:	2400ee54 	.word	0x2400ee54

08001688 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001688:	4801      	ldr	r0, [pc, #4]	; (8001690 <DSI_IRQHandler+0x8>)
 800168a:	f005 b80c 	b.w	80066a6 <HAL_DSI_IRQHandler>
 800168e:	bf00      	nop
 8001690:	2400ecb4 	.word	0x2400ecb4

08001694 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001694:	2001      	movs	r0, #1
 8001696:	4770      	bx	lr

08001698 <_kill>:

int _kill(int pid, int sig)
{
 8001698:	b508      	push	{r3, lr}
	errno = EINVAL;
 800169a:	f01e f8cb 	bl	801f834 <__errno>
 800169e:	2316      	movs	r3, #22
 80016a0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80016a2:	f04f 30ff 	mov.w	r0, #4294967295
 80016a6:	bd08      	pop	{r3, pc}

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016aa:	f01e f8c3 	bl	801f834 <__errno>
 80016ae:	2316      	movs	r3, #22
 80016b0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80016b2:	e7fe      	b.n	80016b2 <_exit+0xa>

080016b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	460e      	mov	r6, r1
 80016b8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2500      	movs	r5, #0
 80016bc:	42a5      	cmp	r5, r4
 80016be:	db01      	blt.n	80016c4 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80016c0:	4620      	mov	r0, r4
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80016c4:	f3af 8000 	nop.w
 80016c8:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	3501      	adds	r5, #1
 80016cc:	e7f6      	b.n	80016bc <_read+0x8>

080016ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ce:	b570      	push	{r4, r5, r6, lr}
 80016d0:	460e      	mov	r6, r1
 80016d2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2500      	movs	r5, #0
 80016d6:	42a5      	cmp	r5, r4
 80016d8:	db01      	blt.n	80016de <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016da:	4620      	mov	r0, r4
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016de:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80016e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	e7f6      	b.n	80016d6 <_write+0x8>

080016e8 <_close>:

int _close(int file)
{
	return -1;
}
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80016f2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016f4:	604b      	str	r3, [r1, #4]
}
 80016f6:	4770      	bx	lr

080016f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016f8:	2001      	movs	r0, #1
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016fc:	2000      	movs	r0, #0
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <_sbrk+0x30>)
{
 8001702:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001704:	6819      	ldr	r1, [r3, #0]
{
 8001706:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001708:	b909      	cbnz	r1, 800170e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <_sbrk+0x34>)
 800170c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <_sbrk+0x38>)
 8001712:	4c0a      	ldr	r4, [pc, #40]	; (800173c <_sbrk+0x3c>)
 8001714:	4402      	add	r2, r0
 8001716:	1b09      	subs	r1, r1, r4
 8001718:	428a      	cmp	r2, r1
 800171a:	d906      	bls.n	800172a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800171c:	f01e f88a 	bl	801f834 <__errno>
 8001720:	230c      	movs	r3, #12
 8001722:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001724:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001728:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800172a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800172c:	e7fc      	b.n	8001728 <_sbrk+0x28>
 800172e:	bf00      	nop
 8001730:	24000158 	.word	0x24000158
 8001734:	2400f090 	.word	0x2400f090
 8001738:	24080000 	.word	0x24080000
 800173c:	00001000 	.word	0x00001000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001744:	f004 f982 	bl	8005a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f01e f879 	bl	801f864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7fe fff3 	bl	800075c <main>
  bx  lr
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800177c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001780:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8001784:	0802669c 	.word	0x0802669c
  ldr r2, =_sbss
 8001788:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 800178c:	2400f08c 	.word	0x2400f08c

08001790 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC3_IRQHandler>

08001792 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001792:	f000 be1d 	b.w	80023d0 <touchgfx_init>

08001796 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001796:	f000 be8b 	b.w	80024b0 <touchgfx_taskEntry>

0800179a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800179a:	6840      	ldr	r0, [r0, #4]
    }
 800179c:	4770      	bx	lr

0800179e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800179e:	6041      	str	r1, [r0, #4]
    }
 80017a0:	4770      	bx	lr

080017a2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80017a2:	1a51      	subs	r1, r2, r1
 80017a4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80017a8:	fbb1 f0f3 	udiv	r0, r1, r3
 80017ac:	4770      	bx	lr
	...

080017b0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80017b2:	68c0      	ldr	r0, [r0, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017b8:	4358      	muls	r0, r3
 80017ba:	4770      	bx	lr
 80017bc:	2400015c 	.word	0x2400015c

080017c0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017c0:	4770      	bx	lr
	...

080017c4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 80017cc:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017de:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017ec:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017f0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017f6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017f8:	2101      	movs	r1, #1
 80017fa:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017fc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	2210      	movs	r2, #16
 8001800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001804:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001808:	fab2 f282 	clz	r2, r2
 800180c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	b983      	cbnz	r3, 8001836 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001814:	f007 f964 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8001818:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800181a:	f006 ff9b 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 800181e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001822:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001826:	f008 fae9 	bl	8009dfc <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800182c:	b003      	add	sp, #12
 800182e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001832:	f008 b959 	b.w	8009ae8 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001836:	f007 f975 	bl	8008b24 <HAL_RCC_GetPCLK1Freq>
 800183a:	0044      	lsls	r4, r0, #1
 800183c:	e7ed      	b.n	800181a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800183e:	bf00      	nop
 8001840:	58024400 	.word	0x58024400
 8001844:	2400015c 	.word	0x2400015c
 8001848:	08021d78 	.word	0x08021d78

0800184c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800184c:	b510      	push	{r4, lr}
 800184e:	4604      	mov	r4, r0
 8001850:	2110      	movs	r1, #16
 8001852:	f01d ff8a 	bl	801f76a <_ZdlPvj>
 8001856:	4620      	mov	r0, r4
 8001858:	bd10      	pop	{r4, pc}

0800185a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800185a:	b538      	push	{r3, r4, r5, lr}
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	4604      	mov	r4, r0
 8001860:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 8001862:	b131      	cbz	r1, 8001872 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
    {
        uint32_t current_cc = cc_in;
 8001864:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001866:	4790      	blx	r2
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	1b5b      	subs	r3, r3, r5
 800186c:	4418      	add	r0, r3
 800186e:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001870:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001872:	4790      	blx	r2
 8001874:	60a0      	str	r0, [r4, #8]
}
 8001876:	e7fb      	b.n	8001870 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001878 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001878:	4770      	bx	lr

0800187a <_ZN20STM32TouchControllerD0Ev>:
 800187a:	b510      	push	{r4, lr}
 800187c:	4604      	mov	r4, r0
 800187e:	2104      	movs	r1, #4
 8001880:	f01d ff73 	bl	801f76a <_ZdlPvj>
 8001884:	4620      	mov	r0, r4
 8001886:	bd10      	pop	{r4, pc}

08001888 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 8001888:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 800188c:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 8001890:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001892:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001894:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001898:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 800189c:	230c      	movs	r3, #12
 800189e:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018a2:	f003 ffe1 	bl	8005868 <BSP_TS_Init>
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_ZN20STM32TouchController4initEv+0x40>)
 80018a8:	b910      	cbnz	r0, 80018b0 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80018ae:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1fb      	bne.n	80018ae <_ZN20STM32TouchController4initEv+0x26>
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <_ZN20STM32TouchController4initEv+0x44>)
 80018b8:	212d      	movs	r1, #45	; 0x2d
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_ZN20STM32TouchController4initEv+0x48>)
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <_ZN20STM32TouchController4initEv+0x4c>)
 80018be:	f01d ff83 	bl	801f7c8 <__assert_func>
 80018c2:	bf00      	nop
 80018c4:	240001b8 	.word	0x240001b8
 80018c8:	240001b4 	.word	0x240001b4
 80018cc:	08020aa0 	.word	0x08020aa0
 80018d0:	08020ab3 	.word	0x08020ab3
 80018d4:	08020add 	.word	0x08020add

080018d8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 80018dc:	460f      	mov	r7, r1
 80018de:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 80018e0:	781d      	ldrb	r5, [r3, #0]
 80018e2:	b915      	cbnz	r5, 80018ea <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 80018e4:	2500      	movs	r5, #0
}
 80018e6:	4628      	mov	r0, r5
 80018e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 80018ea:	4c07      	ldr	r4, [pc, #28]	; (8001908 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80018ec:	2000      	movs	r0, #0
 80018ee:	4621      	mov	r1, r4
 80018f0:	f004 f84e 	bl	8005990 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f4      	beq.n	80018e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	6033      	str	r3, [r6, #0]
            return true;
 8001902:	e7f0      	b.n	80018e6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001904:	240001b4 	.word	0x240001b4
 8001908:	240001a8 	.word	0x240001a8

0800190c <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 800190c:	4770      	bx	lr

0800190e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 800190e:	4770      	bx	lr

08001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 8001910:	4770      	bx	lr

08001912 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 8001912:	4770      	bx	lr

08001914 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001914:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001916:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800191a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800191e:	4770      	bx	lr

08001920 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001920:	2000      	movs	r0, #0
 8001922:	4770      	bx	lr

08001924 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001924:	2000      	movs	r0, #0
 8001926:	4770      	bx	lr

08001928 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001928:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800192a:	b10b      	cbz	r3, 8001930 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800192c:	4608      	mov	r0, r1
 800192e:	4718      	bx	r3
        }
    }
 8001930:	4770      	bx	lr

08001932 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001932:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001936:	4770      	bx	lr

08001938 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001938:	6840      	ldr	r0, [r0, #4]
 800193a:	6803      	ldr	r3, [r0, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4718      	bx	r3

08001940 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	240001bc 	.word	0x240001bc

0800194c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800194c:	4770      	bx	lr

0800194e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800194e:	f000 be3b 	b.w	80025c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001952 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001952:	f000 bddd 	b.w	8002510 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001956 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001956:	f000 be51 	b.w	80025fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800195a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 800195a:	f000 be43 	b.w	80025e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800195e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800195e:	f000 bddf 	b.w	8002520 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001964 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001964:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	428b      	cmp	r3, r1
 800196c:	d803      	bhi.n	8001976 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	4293      	cmp	r3, r2
 8001974:	d905      	bls.n	8001982 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001978:	219e      	movs	r1, #158	; 0x9e
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800197e:	f01d ff23 	bl	801f7c8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001984:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001988:	801a      	strh	r2, [r3, #0]
    }
 800198a:	bd08      	pop	{r3, pc}
 800198c:	2400e9e4 	.word	0x2400e9e4
 8001990:	2400e9e6 	.word	0x2400e9e6
 8001994:	08020b3c 	.word	0x08020b3c
 8001998:	08020b9f 	.word	0x08020b9f
 800199c:	08020be2 	.word	0x08020be2
 80019a0:	2400e9ea 	.word	0x2400e9ea
 80019a4:	2400e9ec 	.word	0x2400e9ec

080019a8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80019a8:	b510      	push	{r4, lr}
 80019aa:	4604      	mov	r4, r0
        swapFrameBuffers();
 80019ac:	f00d f8f4 	bl	800eb98 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	4620      	mov	r0, r4
 80019b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 80019b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80019bc:	4718      	bx	r3

080019be <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80019be:	f00c baa3 	b.w	800df08 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080019c2 <_ZN11TouchGFXHALD0Ev>:
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
 80019c6:	217c      	movs	r1, #124	; 0x7c
 80019c8:	f01d fecf 	bl	801f76a <_ZdlPvj>
 80019cc:	4620      	mov	r0, r4
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 80019d6:	f00c bad3 	b.w	800df80 <_ZN8touchgfx3HAL10beginFrameEv>
 80019da:	bf00      	nop
 80019dc:	24000024 	.word	0x24000024

080019e0 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4604      	mov	r4, r0
    HAL::endFrame();
 80019e4:	f00c fad8 	bl	800df98 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 80019e8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80019ec:	b113      	cbz	r3, 80019f4 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
    }
}
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	24000024 	.word	0x24000024

080019fc <_ZN11TouchGFXHAL10initializeEv>:
{
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4604      	mov	r4, r0
    GPIO::init();
 8001a00:	f7ff ff84 	bl	800190c <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001a04:	4d07      	ldr	r5, [pc, #28]	; (8001a24 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 fd8b 	bl	8002522 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001a0c:	2300      	movs	r3, #0
    mcuInstr.init();
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001a14:	f7ff fed6 	bl	80017c4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001a18:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001a1a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001a1c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop
 8001a24:	240001c4 	.word	0x240001c4

08001a28 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001a28:	6803      	ldr	r3, [r0, #0]
{
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a30:	4798      	blx	r3
    enableInterrupts();
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	4620      	mov	r0, r4
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001a3a:	f000 fa85 	bl	8001f48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	4620      	mov	r0, r4
 8001a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a44:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2329      	movs	r3, #41	; 0x29
 8001a4a:	2215      	movs	r2, #21
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001a4e:	9100      	str	r1, [sp, #0]
 8001a50:	f005 f839 	bl	8006ac6 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001a54:	f000 fa78 	bl	8001f48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5e:	4798      	blx	r3
    for (;;)
 8001a60:	e7f8      	b.n	8001a54 <_ZN11TouchGFXHAL9taskEntryEv+0x2c>
 8001a62:	bf00      	nop
 8001a64:	2400ecb4 	.word	0x2400ecb4

08001a68 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001a68:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001a6c:	b11b      	cbz	r3, 8001a76 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001a6e:	6840      	ldr	r0, [r0, #4]
 8001a70:	6803      	ldr	r3, [r0, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4718      	bx	r3
    }
 8001a76:	4618      	mov	r0, r3
 8001a78:	4770      	bx	lr
	...

08001a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001a7c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001a82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001a84:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	428c      	cmp	r4, r1
 8001a8c:	d009      	beq.n	8001aa2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001a8e:	b93a      	cbnz	r2, 8001aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a90:	490a      	ldr	r1, [pc, #40]	; (8001abc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001a98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001aa0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d0fc      	beq.n	8001aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001aaa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001aac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001aae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001ab0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	e7f3      	b.n	8001a9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001ab6:	bf00      	nop
 8001ab8:	2400e9e8 	.word	0x2400e9e8
 8001abc:	2400e9e6 	.word	0x2400e9e6
 8001ac0:	2400e9e4 	.word	0x2400e9e4

08001ac4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001ac4:	b510      	push	{r4, lr}
    currFbBase = (uint16_t*)frameBuffer;
 8001ac6:	4c0c      	ldr	r4, [pc, #48]	; (8001af8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001ac8:	6021      	str	r1, [r4, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001aca:	b931      	cbnz	r1, 8001ada <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x16>
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001ace:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001ad4:	480b      	ldr	r0, [pc, #44]	; (8001b04 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001ad6:	f01d fe77 	bl	801f7c8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001ada:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ade:	3a00      	subs	r2, #0
 8001ae0:	4909      	ldr	r1, [pc, #36]	; (8001b08 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ae2:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ae4:	bf18      	it	ne
 8001ae6:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ae8:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001aea:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001aec:	bf18      	it	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x48>)
 8001af2:	7013      	strb	r3, [r2, #0]
}
 8001af4:	bd10      	pop	{r4, pc}
 8001af6:	bf00      	nop
 8001af8:	240001bc 	.word	0x240001bc
 8001afc:	08020c35 	.word	0x08020c35
 8001b00:	08020c6d 	.word	0x08020c6d
 8001b04:	08020be2 	.word	0x08020be2
 8001b08:	2400e9ee 	.word	0x2400e9ee
 8001b0c:	2400e9ef 	.word	0x2400e9ef

08001b10 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001b10:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001b14:	60c3      	str	r3, [r0, #12]
 8001b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001b22:	8503      	strh	r3, [r0, #40]	; 0x28
 8001b24:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001b28:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001b2a:	8603      	strh	r3, [r0, #48]	; 0x30
 8001b2c:	6603      	str	r3, [r0, #96]	; 0x60
 8001b2e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001b32:	6703      	str	r3, [r0, #112]	; 0x70
 8001b34:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b3c:	6742      	str	r2, [r0, #116]	; 0x74
 8001b3e:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b46:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001b4a:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001b4e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001b52:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001b56:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001b5a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b5e:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b62:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b66:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b6a:	42b5      	cmp	r5, r6
        instance = this;
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b6e:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b72:	8015      	strh	r5, [r2, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b76:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b78:	bf28      	it	cs
 8001b7a:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b7e:	bf38      	it	cc
 8001b80:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b82:	8016      	strh	r6, [r2, #0]
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b86:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b8a:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b8c:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b8e:	7013      	strb	r3, [r2, #0]
                           height)
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b92:	6003      	str	r3, [r0, #0]
}
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	bf00      	nop
 8001b98:	01000001 	.word	0x01000001
 8001b9c:	2400e9f0 	.word	0x2400e9f0
 8001ba0:	2400e9e4 	.word	0x2400e9e4
 8001ba4:	2400e9ea 	.word	0x2400e9ea
 8001ba8:	2400e9e6 	.word	0x2400e9e6
 8001bac:	2400e9ec 	.word	0x2400e9ec
 8001bb0:	2400e9e8 	.word	0x2400e9e8
 8001bb4:	08020cc4 	.word	0x08020cc4

08001bb8 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001bb8:	2b01      	cmp	r3, #1
    {
 8001bba:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001bbc:	d80e      	bhi.n	8001bdc <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	2215      	movs	r2, #21
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <DSI_IO_Write+0x34>)
 8001bca:	f004 ff7c 	bl	8006ac6 <HAL_DSI_ShortWrite>
 8001bce:	b118      	cbz	r0, 8001bd8 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001bd0:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7fb      	b.n	8001bd4 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001bdc:	e9cd 1200 	strd	r1, r2, [sp]
 8001be0:	4601      	mov	r1, r0
 8001be2:	2239      	movs	r2, #57	; 0x39
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <DSI_IO_Write+0x34>)
 8001be6:	f004 ff7f 	bl	8006ae8 <HAL_DSI_LongWrite>
 8001bea:	e7f0      	b.n	8001bce <DSI_IO_Write+0x16>
 8001bec:	2400ecb4 	.word	0x2400ecb4

08001bf0 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001bf2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001bf6:	2106      	movs	r1, #6
 8001bf8:	9100      	str	r1, [sp, #0]
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <DSI_IO_Read+0x24>)
 8001bfe:	f004 ffd4 	bl	8006baa <HAL_DSI_Read>
 8001c02:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001c04:	bf14      	ite	ne
 8001c06:	f06f 0007 	mvnne.w	r0, #7
 8001c0a:	2000      	moveq	r0, #0
 8001c0c:	b005      	add	sp, #20
 8001c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c12:	bf00      	nop
 8001c14:	2400ecb4 	.word	0x2400ecb4

08001c18 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
 8001c1a:	f241 5302 	movw	r3, #5378	; 0x1502
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001c1e:	4c0b      	ldr	r4, [pc, #44]	; (8001c4c <LCD_ReqTear+0x34>)
 8001c20:	2239      	movs	r2, #57	; 0x39
 8001c22:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001c24:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001c28:	ab03      	add	r3, sp, #12
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2344      	movs	r3, #68	; 0x44
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2302      	movs	r3, #2
 8001c34:	f004 ff58 	bl	8006ae8 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2335      	movs	r3, #53	; 0x35
 8001c3c:	2215      	movs	r2, #21
 8001c3e:	4620      	mov	r0, r4
 8001c40:	9100      	str	r1, [sp, #0]
 8001c42:	f004 ff40 	bl	8006ac6 <HAL_DSI_ShortWrite>
    }
 8001c46:	b004      	add	sp, #16
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2400ecb4 	.word	0x2400ecb4

08001c50 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001c50:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001c52:	f7ff ffe1 	bl	8001c18 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c58:	2202      	movs	r2, #2
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c76:	f042 0202 	orr.w	r2, r2, #2
 8001c7a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c7e:	2203      	movs	r2, #3
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c84:	bd08      	pop	{r3, pc}
 8001c86:	bf00      	nop
 8001c88:	2400ecb4 	.word	0x2400ecb4
 8001c8c:	50001000 	.word	0x50001000

08001c90 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <LCD_ReqEnable+0x20>)
    {
 8001c92:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c94:	7819      	ldrb	r1, [r3, #0]
 8001c96:	b939      	cbnz	r1, 8001ca8 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c98:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c9c:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c9e:	2329      	movs	r3, #41	; 0x29
 8001ca0:	2215      	movs	r2, #21
 8001ca2:	9100      	str	r1, [sp, #0]
 8001ca4:	f004 ff0f 	bl	8006ac6 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001ca8:	b003      	add	sp, #12
 8001caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cae:	bf00      	nop
 8001cb0:	240001d4 	.word	0x240001d4
 8001cb4:	2400ecb4 	.word	0x2400ecb4

08001cb8 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001cba:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	232a      	movs	r3, #42	; 0x2a
 8001cc0:	2239      	movs	r2, #57	; 0x39
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <LCD_SetUpdateRegionLeft+0x20>)
 8001cca:	f004 ff0d 	bl	8006ae8 <HAL_DSI_LongWrite>
    }
 8001cce:	b003      	add	sp, #12
 8001cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cd4:	2400001c 	.word	0x2400001c
 8001cd8:	2400ecb4 	.word	0x2400ecb4

08001cdc <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001cde:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	232a      	movs	r3, #42	; 0x2a
 8001ce4:	2239      	movs	r2, #57	; 0x39
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2304      	movs	r3, #4
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <LCD_SetUpdateRegionRight+0x20>)
 8001cee:	f004 fefb 	bl	8006ae8 <HAL_DSI_LongWrite>
    }
 8001cf2:	b003      	add	sp, #12
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf8:	24000020 	.word	0x24000020
 8001cfc:	2400ecb4 	.word	0x2400ecb4

08001d00 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d00:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001d02:	4d14      	ldr	r5, [pc, #80]	; (8001d54 <HAL_DSI_TearingEffectCallback+0x54>)
 8001d04:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fe01 	bl	800190e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001d0c:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001d0e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d12:	3301      	adds	r3, #1
 8001d14:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001d18:	f000 f90a 	bl	8001f30 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001d1e:	682a      	ldr	r2, [r5, #0]
 8001d20:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001d28:	b173      	cbz	r3, 8001d48 <HAL_DSI_TearingEffectCallback+0x48>
 8001d2a:	4d0c      	ldr	r5, [pc, #48]	; (8001d5c <HAL_DSI_TearingEffectCallback+0x5c>)
 8001d2c:	782b      	ldrb	r3, [r5, #0]
 8001d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d32:	b94b      	cbnz	r3, 8001d48 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_DSI_TearingEffectCallback+0x60>)
 8001d36:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001d38:	f7ff ffbe 	bl	8001cb8 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f004 feb2 	bl	8006aa6 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001d48:	2000      	movs	r0, #0
    }
 8001d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001d4e:	f7ff bddf 	b.w	8001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001d52:	bf00      	nop
 8001d54:	2400e9f0 	.word	0x2400e9f0
 8001d58:	24000024 	.word	0x24000024
 8001d5c:	240001d5 	.word	0x240001d5
 8001d60:	240001c0 	.word	0x240001c0

08001d64 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d68:	4e3f      	ldr	r6, [pc, #252]	; (8001e68 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d6e:	7833      	ldrb	r3, [r6, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d076      	beq.n	8001e62 <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d74:	4d3d      	ldr	r5, [pc, #244]	; (8001e6c <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d76:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e7c <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d7a:	f8d5 9000 	ldr.w	r9, [r5]
 8001d7e:	4f3c      	ldr	r7, [pc, #240]	; (8001e70 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d80:	f1b9 0f00 	cmp.w	r9, #0
 8001d84:	d139      	bne.n	8001dfa <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f003 ff0e 	bl	8005ba8 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	f8cd 9000 	str.w	r9, [sp]
 8001d92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d96:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d9a:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001da8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dac:	f002 0208 	and.w	r2, r2, #8
 8001db0:	9200      	str	r2, [sp, #0]
 8001db2:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001db4:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	0852      	lsrs	r2, r2, #1
 8001dba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dbe:	4402      	add	r2, r0
 8001dc0:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dc2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001dca:	f8cd 9004 	str.w	r9, [sp, #4]
 8001dce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001dda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001de6:	f7ff ff79 	bl	8001cdc <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001dea:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001dec:	4620      	mov	r0, r4
                updateRegion = 1;
 8001dee:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001df0:	b005      	add	sp, #20
 8001df2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001df6:	f004 be56 	b.w	8006aa6 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001dfa:	6803      	ldr	r3, [r0, #0]
 8001dfc:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dfe:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e00:	9502      	str	r5, [sp, #8]
 8001e02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e06:	f022 0208 	bic.w	r2, r2, #8
 8001e0a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e12:	f002 0208 	and.w	r2, r2, #8
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001e1a:	f8d8 2000 	ldr.w	r2, [r8]
 8001e1e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001e22:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001e24:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001e26:	f041 0101 	orr.w	r1, r1, #1
 8001e2a:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001e2c:	9503      	str	r5, [sp, #12]
 8001e2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	9303      	str	r3, [sp, #12]
 8001e44:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001e46:	f7ff fd63 	bl	8001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001e4a:	f7ff ff21 	bl	8001c90 <LCD_ReqEnable>
        return instance;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001e50:	7035      	strb	r5, [r6, #0]
 8001e52:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001e54:	b128      	cbz	r0, 8001e62 <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001e56:	6803      	ldr	r3, [r0, #0]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e5a:	b005      	add	sp, #20
 8001e5c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e60:	4718      	bx	r3
 8001e62:	b005      	add	sp, #20
 8001e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e68:	240001d5 	.word	0x240001d5
 8001e6c:	240001c0 	.word	0x240001c0
 8001e70:	240001bc 	.word	0x240001bc
 8001e74:	2400e9ea 	.word	0x2400e9ea
 8001e78:	2400e9f0 	.word	0x2400e9f0
 8001e7c:	2400ecfc 	.word	0x2400ecfc

08001e80 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e80:	4601      	mov	r1, r0
 8001e82:	b508      	push	{r3, lr}
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <IdleTaskHook+0x14>)
 8001e86:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e88:	b101      	cbz	r1, 8001e8c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e8a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e8c:	f00c fe9e 	bl	800ebcc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e90:	2001      	movs	r0, #1
 8001e92:	bd08      	pop	{r3, pc}
 8001e94:	2400e9f0 	.word	0x2400e9f0

08001e98 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	4a02      	ldr	r2, [pc, #8]	; (8001eac <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001ea2:	601a      	str	r2, [r3, #0]

}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	240001c4 	.word	0x240001c4
 8001eac:	08020a80 	.word	0x08020a80

08001eb0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2200      	movs	r2, #0
{
 8001eb4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	f009 f8f9 	bl	800b0ae <osSemaphoreNew>
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001ebe:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ec0:	b928      	cbnz	r0, 8001ece <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ec4:	2129      	movs	r1, #41	; 0x29
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001eca:	f01d fc7d 	bl	801f7c8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f009 f98a 	bl	800b1ec <osMessageQueueNew>
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001eda:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001edc:	b918      	cbnz	r0, 8001ee6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001ee0:	212d      	movs	r1, #45	; 0x2d
 8001ee2:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001ee4:	e7f0      	b.n	8001ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001ee6:	bd08      	pop	{r3, pc}
 8001ee8:	240001dc 	.word	0x240001dc
 8001eec:	08020d8c 	.word	0x08020d8c
 8001ef0:	08020dd5 	.word	0x08020dd5
 8001ef4:	08020e04 	.word	0x08020e04
 8001ef8:	240001d8 	.word	0x240001d8
 8001efc:	08020e4b 	.word	0x08020e4b

08001f00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	f009 b91c 	b.w	800b144 <osSemaphoreAcquire>
 8001f0c:	240001dc 	.word	0x240001dc

08001f10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	f009 b942 	b.w	800b19c <osSemaphoreRelease>
 8001f18:	240001dc 	.word	0x240001dc

08001f1c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	f009 b90f 	b.w	800b144 <osSemaphoreAcquire>
 8001f26:	bf00      	nop
 8001f28:	240001dc 	.word	0x240001dc

08001f2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001f2c:	f7ff bff0 	b.w	8001f10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001f30 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f30:	2300      	movs	r3, #0
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001f36:	461a      	mov	r2, r3
 8001f38:	6800      	ldr	r0, [r0, #0]
 8001f3a:	f009 b993 	b.w	800b264 <osMessageQueuePut>
 8001f3e:	bf00      	nop
 8001f40:	240001d8 	.word	0x240001d8
 8001f44:	24000028 	.word	0x24000028

08001f48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f48:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4c07      	ldr	r4, [pc, #28]	; (8001f6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001f4e:	a901      	add	r1, sp, #4
 8001f50:	461a      	mov	r2, r3
 8001f52:	6820      	ldr	r0, [r4, #0]
 8001f54:	f009 f9b6 	bl	800b2c4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	a901      	add	r1, sp, #4
 8001f60:	6820      	ldr	r0, [r4, #0]
 8001f62:	f009 f9af 	bl	800b2c4 <osMessageQueueGet>
}
 8001f66:	b002      	add	sp, #8
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	bf00      	nop
 8001f6c:	240001d8 	.word	0x240001d8

08001f70 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4718      	bx	r3

08001f76 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f76:	2001      	movs	r0, #1
 8001f78:	4770      	bx	lr

08001f7a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f7a:	6803      	ldr	r3, [r0, #0]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	4718      	bx	r3

08001f80 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f80:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f84:	4770      	bx	lr
	...

08001f88 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <DMA2D_XferCpltCallback+0xc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4718      	bx	r3
 8001f94:	2400e9f0 	.word	0x2400e9f0

08001f98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001f98:	b508      	push	{r3, lr}
 8001f9a:	280b      	cmp	r0, #11
 8001f9c:	d80b      	bhi.n	8001fb6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001f9e:	e8df f000 	tbb	[pc, r0]
 8001fa2:	0612      	.short	0x0612
 8001fa4:	0a0a0a10 	.word	0x0a0a0a10
 8001fa8:	0808080a 	.word	0x0808080a
 8001fac:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001fb2:	2005      	movs	r0, #5
        break;
 8001fb4:	e7fc      	b.n	8001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001fb8:	2167      	movs	r1, #103	; 0x67
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001fbe:	f01d fc03 	bl	801f7c8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	e7f4      	b.n	8001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001fc6:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001fc8:	e7f2      	b.n	8001fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001fca:	bf00      	nop
 8001fcc:	08020e8d 	.word	0x08020e8d
 8001fd0:	08020ea8 	.word	0x08020ea8
 8001fd4:	08020ef2 	.word	0x08020ef2

08001fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001fd8:	b508      	push	{r3, lr}
 8001fda:	280a      	cmp	r0, #10
 8001fdc:	d809      	bhi.n	8001ff2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001fde:	e8df f000 	tbb	[pc, r0]
 8001fe2:	0610      	.short	0x0610
 8001fe4:	0808080e 	.word	0x0808080e
 8001fe8:	06060608 	.word	0x06060608
 8001fec:	06          	.byte	0x06
 8001fed:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fee:	2001      	movs	r0, #1
}
 8001ff0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001ff4:	2188      	movs	r1, #136	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001ffa:	f01d fbe5 	bl	801f7c8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7f6      	b.n	8001ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002002:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002004:	e7f4      	b.n	8001ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002006:	bf00      	nop
 8002008:	08020e8d 	.word	0x08020e8d
 800200c:	08020f37 	.word	0x08020f37
 8002010:	08020ef2 	.word	0x08020ef2

08002014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002018:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 800201c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800201e:	4640      	mov	r0, r8
 8002020:	f7ff ffba 	bl	8001f98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002024:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002026:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002028:	4638      	mov	r0, r7
 800202a:	f7ff ffb5 	bl	8001f98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 800202e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002030:	4638      	mov	r0, r7
 8002032:	f7ff ffd1 	bl	8001fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002036:	8aa1      	ldrh	r1, [r4, #20]
 8002038:	8b62      	ldrh	r2, [r4, #26]
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800203c:	1a52      	subs	r2, r2, r1
 800203e:	469e      	mov	lr, r3
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002042:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002044:	8b22      	ldrh	r2, [r4, #24]
 8002046:	1a52      	subs	r2, r2, r1
 8002048:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800204a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800204c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800204e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002052:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002056:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002058:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800205a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800205c:	f8d4 c000 	ldr.w	ip, [r4]
 8002060:	f894 901c 	ldrb.w	r9, [r4, #28]
 8002064:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8002068:	ea4f 6209 	mov.w	r2, r9, lsl #24
 800206c:	d029      	beq.n	80020c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 800206e:	d813      	bhi.n	8002098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8002070:	f1bc 0f20 	cmp.w	ip, #32
 8002074:	ea45 0002 	orr.w	r0, r5, r2
 8002078:	d067      	beq.n	800214a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 800207a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800207e:	d064      	beq.n	800214a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8002080:	f1bc 0f04 	cmp.w	ip, #4
 8002084:	d05d      	beq.n	8002142 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002086:	432a      	orrs	r2, r5
 8002088:	4b38      	ldr	r3, [pc, #224]	; (800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800208a:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800208c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002090:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002092:	d067      	beq.n	8002164 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002094:	4a36      	ldr	r2, [pc, #216]	; (8002170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002096:	e040      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 8002098:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800209c:	d007      	beq.n	80020ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 800209e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80020a2:	d1f0      	bne.n	8002086 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020a8:	f042 0209 	orr.w	r2, r2, #9
 80020ac:	e003      	b.n	80020b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020b2:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020b6:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80020b8:	68e2      	ldr	r2, [r4, #12]
 80020ba:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020bc:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020be:	6159      	str	r1, [r3, #20]
 80020c0:	e02a      	b.n	8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c2:	432a      	orrs	r2, r5
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80020c4:	68a0      	ldr	r0, [r4, #8]
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ca:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020cc:	1d02      	adds	r2, r0, #4
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020ce:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020d0:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
        switch ((Bitmap::ClutFormat)palette->format)
 80020d4:	7802      	ldrb	r2, [r0, #0]
 80020d6:	b142      	cbz	r2, 80020ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 80020d8:	2a01      	cmp	r2, #1
 80020da:	d020      	beq.n	800211e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
            assert(0 && "Unsupported format");
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 80020de:	f44f 7181 	mov.w	r1, #258	; 0x102
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 80020e4:	4825      	ldr	r0, [pc, #148]	; (800217c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 80020e6:	f01d fb6f 	bl	801f7c8 <__assert_func>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020ea:	8842      	ldrh	r2, [r0, #2]
        bool blend = true;
 80020ec:	2401      	movs	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020ee:	69d9      	ldr	r1, [r3, #28]
 80020f0:	1e50      	subs	r0, r2, #1
 80020f2:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80020fe:	61da      	str	r2, [r3, #28]
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	61da      	str	r2, [r3, #28]
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	0692      	lsls	r2, r2, #26
 800210e:	d4fc      	bmi.n	800210a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002110:	2210      	movs	r2, #16
 8002112:	609a      	str	r2, [r3, #8]
        if(blend)
 8002114:	2c00      	cmp	r4, #0
 8002116:	d0bd      	beq.n	8002094 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800211a:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800211c:	e020      	b.n	8002160 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800211e:	8842      	ldrh	r2, [r0, #2]
            if(blitOp.alpha == 255)
 8002120:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002124:	69d9      	ldr	r1, [r3, #28]
 8002126:	f102 30ff 	add.w	r0, r2, #4294967295
            if(blitOp.alpha == 255)
 800212a:	bf18      	it	ne
 800212c:	2401      	movne	r4, #1
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800212e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002132:	f022 0210 	bic.w	r2, r2, #16
 8002136:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800213a:	f042 0210 	orr.w	r2, r2, #16
 800213e:	61da      	str	r2, [r3, #28]
            break;
 8002140:	e7de      	b.n	8002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002142:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8002146:	61d8      	str	r0, [r3, #28]
 8002148:	e7b8      	b.n	80020bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800214a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002150:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002154:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002158:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800215c:	f8ce 3000 	str.w	r3, [lr]
}
 8002160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002164:	f240 2201 	movw	r2, #513	; 0x201
 8002168:	e7d7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800216a:	bf00      	nop
 800216c:	52001000 	.word	0x52001000
 8002170:	00010201 	.word	0x00010201
 8002174:	08020f82 	.word	0x08020f82
 8002178:	08020f9c 	.word	0x08020f9c
 800217c:	08020ef2 	.word	0x08020ef2
 8002180:	00020201 	.word	0x00020201

08002184 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002188:	7f88      	ldrb	r0, [r1, #30]
 800218a:	f7ff ff25 	bl	8001fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002190:	8aa5      	ldrh	r5, [r4, #20]
 8002192:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002194:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002196:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800219a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800219c:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800219e:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021a0:	6921      	ldr	r1, [r4, #16]
 80021a2:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021a6:	6825      	ldr	r5, [r4, #0]
 80021a8:	2d08      	cmp	r5, #8
 80021aa:	d10e      	bne.n	80021ca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021ac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021ae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021b0:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80021b4:	7f20      	ldrb	r0, [r4, #28]
 80021b6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80021ba:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021bc:	68e2      	ldr	r2, [r4, #12]
 80021be:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021c2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021c4:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021c6:	601a      	str	r2, [r3, #0]
    }
}
 80021c8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80021ca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021cc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80021ce:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80021d0:	68e2      	ldr	r2, [r4, #12]
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80021d6:	e7f6      	b.n	80021c6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80021d8:	52001000 	.word	0x52001000
 80021dc:	00010009 	.word	0x00010009
 80021e0:	00020201 	.word	0x00020201
 80021e4:	00030201 	.word	0x00030201

080021e8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021ee:	6003      	str	r3, [r0, #0]
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <_ZN8STM32DMAD1Ev+0x1c>)
 80021f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80021f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021fa:	f3bf 8f6f 	isb	sy
}
 80021fe:	4770      	bx	lr
 8002200:	08020fe4 	.word	0x08020fe4
 8002204:	e000e100 	.word	0xe000e100

08002208 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002208:	b510      	push	{r4, lr}
 800220a:	4604      	mov	r4, r0
}
 800220c:	f7ff ffec 	bl	80021e8 <_ZN8STM32DMAD1Ev>
 8002210:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002214:	4620      	mov	r0, r4
 8002216:	f01d faa8 	bl	801f76a <_ZdlPvj>
 800221a:	4620      	mov	r0, r4
 800221c:	bd10      	pop	{r4, pc}
	...

08002220 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002222:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002224:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002228:	f042 0210 	orr.w	r2, r2, #16
 800222c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002230:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002234:	f002 0210 	and.w	r2, r2, #16
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800223c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800223e:	f042 0210 	orr.w	r2, r2, #16
 8002242:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002244:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <_ZN8STM32DMA10initializeEv+0x44>)
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <_ZN8STM32DMA10initializeEv+0x48>)
 8002250:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002254:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002258:	609a      	str	r2, [r3, #8]
}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	58024400 	.word	0x58024400
 8002264:	2400ee54 	.word	0x2400ee54
 8002268:	08001f89 	.word	0x08001f89
 800226c:	e000e100 	.word	0xe000e100

08002270 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <_ZN8STM32DMAC1Ev+0x30>)
 8002276:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002278:	2600      	movs	r6, #0
 800227a:	4625      	mov	r5, r4
 800227c:	2260      	movs	r2, #96	; 0x60
 800227e:	6060      	str	r0, [r4, #4]
 8002280:	7226      	strb	r6, [r4, #8]
 8002282:	7266      	strb	r6, [r4, #9]
 8002284:	f845 3b20 	str.w	r3, [r5], #32
 8002288:	4629      	mov	r1, r5
 800228a:	f00c fe07 	bl	800ee9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800228e:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
        : color(0)
 8002292:	60ee      	str	r6, [r5, #12]
 8002294:	3520      	adds	r5, #32
 8002296:	42ab      	cmp	r3, r5
 8002298:	d1fb      	bne.n	8002292 <_ZN8STM32DMAC1Ev+0x22>
}
 800229a:	4620      	mov	r0, r4
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	bf00      	nop
 80022a0:	08020fe4 	.word	0x08020fe4

080022a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80022a4:	2001      	movs	r0, #1
 80022a6:	4770      	bx	lr

080022a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80022a8:	200c      	movs	r0, #12
 80022aa:	4770      	bx	lr

080022ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80022ac:	230c      	movs	r3, #12
 80022ae:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022b2:	3008      	adds	r0, #8
 80022b4:	4770      	bx	lr

080022b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022b6:	230c      	movs	r3, #12
 80022b8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022bc:	3008      	adds	r0, #8
 80022be:	4770      	bx	lr

080022c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022c0:	2001      	movs	r0, #1
 80022c2:	4770      	bx	lr

080022c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022c4:	f244 0094 	movw	r0, #16532	; 0x4094
 80022c8:	4770      	bx	lr

080022ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ca:	f244 0394 	movw	r3, #16532	; 0x4094
 80022ce:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022d2:	3008      	adds	r0, #8
 80022d4:	4770      	bx	lr

080022d6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022d6:	f244 0394 	movw	r3, #16532	; 0x4094
 80022da:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022e2:	2001      	movs	r0, #1
 80022e4:	4770      	bx	lr

080022e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022e6:	2010      	movs	r0, #16
 80022e8:	4770      	bx	lr

080022ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ea:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022ee:	3008      	adds	r0, #8
 80022f0:	4770      	bx	lr

080022f2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022f2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022f6:	3008      	adds	r0, #8
 80022f8:	4770      	bx	lr

080022fa <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenNoTransition();
 80022fa:	4608      	mov	r0, r1
 80022fc:	f000 ba54 	b.w	80027a8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>

08002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002302:	b510      	push	{r4, lr}
 8002304:	4604      	mov	r4, r0
 8002306:	6003      	str	r3, [r0, #0]
 8002308:	f00a ffc4 	bl	800d294 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800230c:	4620      	mov	r0, r4
 800230e:	bd10      	pop	{r4, pc}
 8002310:	0802109c 	.word	0x0802109c

08002314 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4604      	mov	r4, r0
 8002318:	f7ff fff2 	bl	8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800231c:	2114      	movs	r1, #20
 800231e:	4620      	mov	r0, r4
 8002320:	f01d fa23 	bl	801f76a <_ZdlPvj>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}

08002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800232a:	b510      	push	{r4, lr}
 800232c:	4604      	mov	r4, r0
 800232e:	6003      	str	r3, [r0, #0]
 8002330:	f00a ffb0 	bl	800d294 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002334:	4620      	mov	r0, r4
 8002336:	bd10      	pop	{r4, pc}
 8002338:	08021068 	.word	0x08021068

0800233c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800233c:	b510      	push	{r4, lr}
 800233e:	4604      	mov	r4, r0
 8002340:	f7ff fff2 	bl	8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002344:	f244 019c 	movw	r1, #16540	; 0x409c
 8002348:	4620      	mov	r0, r4
 800234a:	f01d fa0e 	bl	801f76a <_ZdlPvj>
 800234e:	4620      	mov	r0, r4
 8002350:	bd10      	pop	{r4, pc}
	...

08002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002356:	b510      	push	{r4, lr}
 8002358:	4604      	mov	r4, r0
 800235a:	6003      	str	r3, [r0, #0]
 800235c:	f00a ff9a 	bl	800d294 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002360:	4620      	mov	r0, r4
 8002362:	bd10      	pop	{r4, pc}
 8002364:	08021034 	.word	0x08021034

08002368 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002368:	b510      	push	{r4, lr}
 800236a:	4604      	mov	r4, r0
 800236c:	f7ff fff2 	bl	8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002370:	2118      	movs	r1, #24
 8002372:	4620      	mov	r0, r4
 8002374:	f01d f9f9 	bl	801f76a <_ZdlPvj>
 8002378:	4620      	mov	r0, r4
 800237a:	bd10      	pop	{r4, pc}

0800237c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <_ZN12FrontendHeapD1Ev+0x28>)
 800237e:	b510      	push	{r4, lr}
 8002380:	4604      	mov	r4, r0
 8002382:	6003      	str	r3, [r0, #0]
 8002384:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
 8002388:	3048      	adds	r0, #72	; 0x48
 800238a:	f7ff ffb9 	bl	8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002392:	f7ff ffc9 	bl	8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002396:	f104 0014 	add.w	r0, r4, #20
 800239a:	f7ff ffdb 	bl	8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800239e:	4620      	mov	r0, r4
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	bf00      	nop
 80023a4:	080210d0 	.word	0x080210d0

080023a8 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80023a8:	b508      	push	{r3, lr}
 80023aa:	4802      	ldr	r0, [pc, #8]	; (80023b4 <__tcf_0+0xc>)
 80023ac:	f7ff ffe6 	bl	800237c <_ZN12FrontendHeapD1Ev>
 80023b0:	bd08      	pop	{r3, pc}
 80023b2:	bf00      	nop
 80023b4:	240001e4 	.word	0x240001e4

080023b8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023b8:	b510      	push	{r4, lr}
 80023ba:	4604      	mov	r4, r0
 80023bc:	f7ff ffde 	bl	800237c <_ZN12FrontendHeapD1Ev>
 80023c0:	f244 2138 	movw	r1, #16952	; 0x4238
 80023c4:	4620      	mov	r0, r4
 80023c6:	f01d f9d0 	bl	801f76a <_ZdlPvj>
 80023ca:	4620      	mov	r0, r4
 80023cc:	bd10      	pop	{r4, pc}
	...

080023d0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023d4:	f000 f92a 	bl	800262c <_ZN14BitmapDatabase11getInstanceEv>
 80023d8:	2400      	movs	r4, #0
 80023da:	4605      	mov	r5, r0
 80023dc:	f000 f92a 	bl	8002634 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023e0:	4623      	mov	r3, r4
 80023e2:	4601      	mov	r1, r0
 80023e4:	4622      	mov	r2, r4
 80023e6:	4628      	mov	r0, r5
 80023e8:	9400      	str	r4, [sp, #0]
 80023ea:	f013 facf 	bl	801598c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <touchgfx_init+0xb0>)
 80023f0:	4a24      	ldr	r2, [pc, #144]	; (8002484 <touchgfx_init+0xb4>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023f2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023f4:	4d24      	ldr	r5, [pc, #144]	; (8002488 <touchgfx_init+0xb8>)
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f001 fbf4 	bl	8003be4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <touchgfx_init+0xbc>)
 80023fe:	f013 fa07 	bl	8015810 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002402:	782b      	ldrb	r3, [r5, #0]
 8002404:	f3bf 8f5b 	dmb	ish
 8002408:	07db      	lsls	r3, r3, #31
 800240a:	d433      	bmi.n	8002474 <touchgfx_init+0xa4>
 800240c:	4628      	mov	r0, r5
 800240e:	f01d f9ae 	bl	801f76e <__cxa_guard_acquire>
 8002412:	b378      	cbz	r0, 8002474 <touchgfx_init+0xa4>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002414:	4c1e      	ldr	r4, [pc, #120]	; (8002490 <touchgfx_init+0xc0>)
 8002416:	4f1f      	ldr	r7, [pc, #124]	; (8002494 <touchgfx_init+0xc4>)
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
        app(model, *this)
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <touchgfx_init+0xc8>)
 800241a:	f104 0014 	add.w	r0, r4, #20
 800241e:	f107 0614 	add.w	r6, r7, #20
 8002422:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002426:	6023      	str	r3, [r4, #0]
 8002428:	6060      	str	r0, [r4, #4]
 800242a:	f8c4 8008 	str.w	r8, [r4, #8]
 800242e:	60e7      	str	r7, [r4, #12]
 8002430:	6126      	str	r6, [r4, #16]
 8002432:	f00a ff31 	bl	800d298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <touchgfx_init+0xcc>)
 8002438:	4640      	mov	r0, r8
 800243a:	6163      	str	r3, [r4, #20]
 800243c:	f00a ff2c 	bl	800d298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <touchgfx_init+0xd0>)
 8002442:	4638      	mov	r0, r7
 8002444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002446:	f00a ff27 	bl	800d298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <touchgfx_init+0xd4>)
 800244c:	4622      	mov	r2, r4
 800244e:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8002452:	4630      	mov	r0, r6
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	f001 fc31 	bl	8003cbc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800245a:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 800245e:	f001 fc37 	bl	8003cd0 <_ZN5ModelC1Ev>
 8002462:	4630      	mov	r0, r6
 8002464:	f000 f9a0 	bl	80027a8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        static FrontendHeap instance;
 8002468:	4628      	mov	r0, r5
 800246a:	f01d f98c 	bl	801f786 <__cxa_guard_release>
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <touchgfx_init+0xd8>)
 8002470:	f01d f9c8 	bl	801f804 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <touchgfx_init+0xdc>)
}
 8002476:	b002      	add	sp, #8
 8002478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800247c:	f7ff babe 	b.w	80019fc <_ZN11TouchGFXHAL10initializeEv>
 8002480:	2400ea6c 	.word	0x2400ea6c
 8002484:	240050bc 	.word	0x240050bc
 8002488:	240001e0 	.word	0x240001e0
 800248c:	2400002c 	.word	0x2400002c
 8002490:	240001e4 	.word	0x240001e4
 8002494:	240042ac 	.word	0x240042ac
 8002498:	080210d0 	.word	0x080210d0
 800249c:	08021034 	.word	0x08021034
 80024a0:	08021068 	.word	0x08021068
 80024a4:	0802109c 	.word	0x0802109c
 80024a8:	080023a9 	.word	0x080023a9
 80024ac:	24005040 	.word	0x24005040

080024b0 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024b0:	4801      	ldr	r0, [pc, #4]	; (80024b8 <touchgfx_taskEntry+0x8>)
 80024b2:	f7ff bab9 	b.w	8001a28 <_ZN11TouchGFXHAL9taskEntryEv>
 80024b6:	bf00      	nop
 80024b8:	24005040 	.word	0x24005040

080024bc <_GLOBAL__sub_I_touchgfx_init>:
}
 80024bc:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024be:	490c      	ldr	r1, [pc, #48]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024c2:	4c0d      	ldr	r4, [pc, #52]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024c4:	4608      	mov	r0, r1
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	f7ff fed2 	bl	8002270 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ce:	4610      	mov	r0, r2
 80024d0:	f015 fc76 	bl	8017dc0 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024de:	4808      	ldr	r0, [pc, #32]	; (8002500 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024e0:	e9cd 3200 	strd	r3, r2, [sp]
 80024e4:	4623      	mov	r3, r4
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024e8:	f7ff fb12 	bl	8001b10 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024ec:	b002      	add	sp, #8
 80024ee:	bd10      	pop	{r4, pc}
 80024f0:	24004420 	.word	0x24004420
 80024f4:	08020b2c 	.word	0x08020b2c
 80024f8:	2400441c 	.word	0x2400441c
 80024fc:	240050c0 	.word	0x240050c0
 8002500:	24005040 	.word	0x24005040

08002504 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002504:	4801      	ldr	r0, [pc, #4]	; (800250c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002506:	f7ff be6f 	b.w	80021e8 <_ZN8STM32DMAD1Ev>
 800250a:	bf00      	nop
 800250c:	24004420 	.word	0x24004420

08002510 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8002512:	2290      	movs	r2, #144	; 0x90
 8002514:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8002520:	4770      	bx	lr

08002522 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002522:	b538      	push	{r3, r4, r5, lr}
 8002524:	4604      	mov	r4, r0
    HAL::initialize();
 8002526:	f00b fd44 	bl	800dfb2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800252e:	f010 f949 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8002532:	4601      	mov	r1, r0
 8002534:	4620      	mov	r0, r4
 8002536:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800253e:	4620      	mov	r0, r4
 8002540:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002544:	2300      	movs	r3, #0
 8002546:	461a      	mov	r2, r3
 8002548:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 800254a:	2301      	movs	r3, #1
 800254c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 8002550:	bd38      	pop	{r3, r4, r5, pc}

08002552 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002552:	f00b be3c 	b.w	800e1ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
	...

08002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002558:	4a10      	ldr	r2, [pc, #64]	; (800259c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 800255a:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002562:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002566:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800256a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800256e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002572:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002576:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002578:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800257c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800257e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002582:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002584:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002588:	d2f9      	bcs.n	800257e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 800258a:	3b20      	subs	r3, #32
 800258c:	f113 0f20 	cmn.w	r3, #32
 8002590:	d1f2      	bne.n	8002578 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 8002592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002596:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	03db      	lsls	r3, r3, #15
 80025a6:	d501      	bpl.n	80025ac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 80025a8:	f7ff bfd6 	b.w	8002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	03db      	lsls	r3, r3, #15
 80025ba:	d501      	bpl.n	80025c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 80025bc:	f7ff bfcc 	b.w	8002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80025c8:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 80025ca:	f00b fca3 	bl	800df14 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	03db      	lsls	r3, r3, #15
 80025d4:	d503      	bpl.n	80025de <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 80025d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025da:	f7ff bfbd 	b.w	8002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 80025de:	bd08      	pop	{r3, pc}
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80025e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025f2:	f3bf 8f6f 	isb	sy
}
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100

080025fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80025fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId DEFAULT = 0; // RobotoCondensed_Regular_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800260c:	4770      	bx	lr

0800260e <_ZN23ApplicationFontProviderD0Ev>:
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	2104      	movs	r1, #4
 8002614:	f01d f8a9 	bl	801f76a <_ZdlPvj>
 8002618:	4620      	mov	r0, r4
 800261a:	bd10      	pop	{r4, pc}

0800261c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800261c:	b508      	push	{r3, lr}
    switch (typography)
 800261e:	b919      	cbnz	r1, 8002628 <_ZN23ApplicationFontProvider7getFontEt+0xc>
    {
    case Typography::DEFAULT:
        // RobotoCondensed_Regular_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002620:	f001 fb2c 	bl	8003c7c <_ZN17TypedTextDatabase8getFontsEv>
 8002624:	6800      	ldr	r0, [r0, #0]
    default:
        return 0;
    }
}
 8002626:	bd08      	pop	{r3, pc}
        return 0;
 8002628:	2000      	movs	r0, #0
 800262a:	e7fc      	b.n	8002626 <_ZN23ApplicationFontProvider7getFontEt+0xa>

0800262c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800262c:	4800      	ldr	r0, [pc, #0]	; (8002630 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800262e:	4770      	bx	lr
 8002630:	080210f0 	.word	0x080210f0

08002634 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002634:	201c      	movs	r0, #28
 8002636:	4770      	bx	lr

08002638 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002638:	b513      	push	{r0, r1, r4, lr}
 800263a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800263c:	b151      	cbz	r1, 8002654 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800263e:	6803      	ldr	r3, [r0, #0]
 8002640:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002642:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002644:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002648:	689c      	ldr	r4, [r3, #8]
 800264a:	f10d 0303 	add.w	r3, sp, #3
 800264e:	47a0      	blx	r4
        return glyph;
    }
 8002650:	b002      	add	sp, #8
 8002652:	bd10      	pop	{r4, pc}
            return 0;
 8002654:	4608      	mov	r0, r1
 8002656:	e7fb      	b.n	8002650 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002658 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002658:	8940      	ldrh	r0, [r0, #10]
 800265a:	4770      	bx	lr

0800265c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800265c:	8980      	ldrh	r0, [r0, #12]
 800265e:	4770      	bx	lr

08002660 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002660:	8880      	ldrh	r0, [r0, #4]
 8002662:	4770      	bx	lr

08002664 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002664:	7983      	ldrb	r3, [r0, #6]
 8002666:	8880      	ldrh	r0, [r0, #4]
 8002668:	4418      	add	r0, r3
    }
 800266a:	b280      	uxth	r0, r0
 800266c:	4770      	bx	lr

0800266e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800266e:	79c0      	ldrb	r0, [r0, #7]
    }
 8002670:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002674:	4770      	bx	lr

08002676 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002676:	79c0      	ldrb	r0, [r0, #7]
    }
 8002678:	09c0      	lsrs	r0, r0, #7
 800267a:	4770      	bx	lr

0800267c <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800267c:	4770      	bx	lr

0800267e <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800267e:	b510      	push	{r4, lr}
 8002680:	4604      	mov	r4, r0
    }
 8002682:	2108      	movs	r1, #8
 8002684:	f01d f871 	bl	801f76a <_ZdlPvj>
 8002688:	4620      	mov	r0, r4
 800268a:	bd10      	pop	{r4, pc}

0800268c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 800268c:	4770      	bx	lr

0800268e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800268e:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8002692:	6808      	ldr	r0, [r1, #0]
 8002694:	6849      	ldr	r1, [r1, #4]
 8002696:	c303      	stmia	r3!, {r0, r1}
    }
 8002698:	4770      	bx	lr

0800269a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800269c:	4770      	bx	lr

0800269e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800269e:	6041      	str	r1, [r0, #4]
    }
 80026a0:	4770      	bx	lr

080026a2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80026a2:	4770      	bx	lr

080026a4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80026a4:	2301      	movs	r3, #1
 80026a6:	7203      	strb	r3, [r0, #8]
    }
 80026a8:	4770      	bx	lr

080026aa <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80026aa:	4770      	bx	lr

080026ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026ac:	4770      	bx	lr

080026ae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80026ae:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 80026b0:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80026b2:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80026b4:	68c2      	ldr	r2, [r0, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	1054      	asrs	r4, r2, #1
 80026ba:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80026be:	07d2      	lsls	r2, r2, #31
 80026c0:	bf48      	it	mi
 80026c2:	590a      	ldrmi	r2, [r1, r4]
    }
 80026c4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 80026c8:	bf48      	it	mi
 80026ca:	58d3      	ldrmi	r3, [r2, r3]
 80026cc:	4718      	bx	r3

080026ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80026ce:	6843      	ldr	r3, [r0, #4]
 80026d0:	b12b      	cbz	r3, 80026de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80026d2:	6883      	ldr	r3, [r0, #8]
 80026d4:	b92b      	cbnz	r3, 80026e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80026d6:	68c0      	ldr	r0, [r0, #12]
 80026d8:	f000 0001 	and.w	r0, r0, #1
 80026dc:	4770      	bx	lr
 80026de:	4618      	mov	r0, r3
 80026e0:	4770      	bx	lr
 80026e2:	2001      	movs	r0, #1
    }
 80026e4:	4770      	bx	lr

080026e6 <_ZN8touchgfx12NoTransitionD0Ev>:
 80026e6:	b510      	push	{r4, lr}
 80026e8:	4604      	mov	r4, r0
 80026ea:	210c      	movs	r1, #12
 80026ec:	f01d f83d 	bl	801f76a <_ZdlPvj>
 80026f0:	4620      	mov	r0, r4
 80026f2:	bd10      	pop	{r4, pc}

080026f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026f4:	b510      	push	{r4, lr}
 80026f6:	4604      	mov	r4, r0
 80026f8:	2110      	movs	r1, #16
 80026fa:	f01d f836 	bl	801f76a <_ZdlPvj>
 80026fe:	4620      	mov	r0, r4
 8002700:	bd10      	pop	{r4, pc}

08002702 <_ZN23FrontendApplicationBaseD0Ev>:
 8002702:	b510      	push	{r4, lr}
 8002704:	4604      	mov	r4, r0
 8002706:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800270a:	f01d f82e 	bl	801f76a <_ZdlPvj>
 800270e:	4620      	mov	r0, r4
 8002710:	bd10      	pop	{r4, pc}

08002712 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002712:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8002714:	f010 f856 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8002718:	6803      	ldr	r3, [r0, #0]
    }
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4718      	bx	r3

08002722 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002722:	b510      	push	{r4, lr}
 8002724:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002726:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800272a:	b158      	cbz	r0, 8002744 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800272c:	6803      	ldr	r3, [r0, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4798      	blx	r3
 8002732:	b138      	cbz	r0, 8002744 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002734:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002738:	6803      	ldr	r3, [r0, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8002744:	bd10      	pop	{r4, pc}
	...

08002748 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	4604      	mov	r4, r0
 800274c:	4617      	mov	r7, r2
 800274e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002750:	f010 f8a2 	bl	8012898 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002756:	2500      	movs	r5, #0
        instance = this;
 8002758:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800275a:	4629      	mov	r1, r5
      model(m)
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800275e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002762:	4e0f      	ldr	r6, [pc, #60]	; (80027a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800276a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 800276e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002772:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002774:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800277c:	4628      	mov	r0, r5
 800277e:	f001 fa31 	bl	8003be4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002782:	6833      	ldr	r3, [r6, #0]
 8002784:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002788:	b10a      	cbz	r2, 800278e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800278a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800278c:	b900      	cbnz	r0, 8002790 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 800278e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002790:	f016 fc03 	bl	8018f9a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002794:	4620      	mov	r0, r4
 8002796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002798:	2400ea5c 	.word	0x2400ea5c
 800279c:	08021678 	.word	0x08021678
 80027a0:	2400e9f0 	.word	0x2400e9f0
 80027a4:	08021660 	.word	0x08021660

080027a8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x1c>)
 80027aa:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80027ae:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027b8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80027bc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	08002909 	.word	0x08002909

080027c8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80027c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80027ce:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80027d0:	4699      	mov	r9, r3
 80027d2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80027d4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80027d6:	4614      	mov	r4, r2
 80027d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4798      	blx	r3
 80027e0:	f244 0393 	movw	r3, #16531	; 0x4093
 80027e4:	4298      	cmp	r0, r3
 80027e6:	d805      	bhi.n	80027f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 80027ea:	21a3      	movs	r1, #163	; 0xa3
 80027ec:	4a41      	ldr	r2, [pc, #260]	; (80028f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80027ee:	4842      	ldr	r0, [pc, #264]	; (80028f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 80027f0:	f01c ffea 	bl	801f7c8 <__assert_func>
 80027f4:	6860      	ldr	r0, [r4, #4]
 80027f6:	6803      	ldr	r3, [r0, #0]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4798      	blx	r3
 80027fc:	280f      	cmp	r0, #15
 80027fe:	d803      	bhi.n	8002808 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002802:	21a4      	movs	r1, #164	; 0xa4
 8002804:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002806:	e7f2      	b.n	80027ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002808:	68e0      	ldr	r0, [r4, #12]
 800280a:	6803      	ldr	r3, [r0, #0]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4798      	blx	r3
 8002810:	280b      	cmp	r0, #11
 8002812:	d803      	bhi.n	800281c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 8002814:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002816:	21a5      	movs	r1, #165	; 0xa5
 8002818:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 800281a:	e7e8      	b.n	80027ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 800281c:	f00f ffd2 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8002820:	f010 f81e 	bl	8012860 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002824:	f8d9 0000 	ldr.w	r0, [r9]
 8002828:	b110      	cbz	r0, 8002830 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4798      	blx	r3
    if (*currentTrans)
 8002830:	f8d9 0000 	ldr.w	r0, [r9]
 8002834:	b110      	cbz	r0, 800283c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4798      	blx	r3
    if (*currentScreen)
 800283c:	6838      	ldr	r0, [r7, #0]
 800283e:	b110      	cbz	r0, 8002846 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 8002840:	6803      	ldr	r3, [r0, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4798      	blx	r3
    if (*currentPresenter)
 8002846:	f8d8 0000 	ldr.w	r0, [r8]
 800284a:	b110      	cbz	r0, 8002852 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 800284c:	6803      	ldr	r3, [r0, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4798      	blx	r3
    if (*currentScreen)
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	b110      	cbz	r0, 800285c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4798      	blx	r3
    if (*currentPresenter)
 800285c:	f8d8 0000 	ldr.w	r0, [r8]
 8002860:	b110      	cbz	r0, 8002868 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 8002862:	6803      	ldr	r3, [r0, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002868:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800286a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800286c:	f04f 0b00 	mov.w	fp, #0
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	4798      	blx	r3
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002878:	4605      	mov	r5, r0
 800287a:	f8c0 b004 	str.w	fp, [r0, #4]
 800287e:	6003      	str	r3, [r0, #0]
 8002880:	4659      	mov	r1, fp
 8002882:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002886:	68a0      	ldr	r0, [r4, #8]
 8002888:	6803      	ldr	r3, [r0, #0]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	4798      	blx	r3
 800288e:	4606      	mov	r6, r0
 8002890:	f001 fa76 	bl	8003d80 <_ZN8MainViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002894:	6860      	ldr	r0, [r4, #4]
 8002896:	4659      	mov	r1, fp
 8002898:	6803      	ldr	r3, [r0, #0]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	4798      	blx	r3
 800289e:	4604      	mov	r4, r0
 80028a0:	4631      	mov	r1, r6
 80028a2:	f001 fa27 	bl	8003cf4 <_ZN13MainPresenterC1ER8MainView>
    *currentTrans = newTransition;
 80028a6:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 80028aa:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 80028ae:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80028b0:	b1e4      	cbz	r4, 80028ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 80028b2:	1d23      	adds	r3, r4, #4
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80028b4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80028b8:	4630      	mov	r0, r6
 80028ba:	6833      	ldr	r3, [r6, #0]
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
    {
        model = m;
 80028bc:	f8c4 a008 	str.w	sl, [r4, #8]
 80028c0:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80028c2:	63f4      	str	r4, [r6, #60]	; 0x3c
 80028c4:	4798      	blx	r3
    newPresenter->activate();
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	4620      	mov	r0, r4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80028ce:	4629      	mov	r1, r5
 80028d0:	4630      	mov	r0, r6
 80028d2:	f011 fc3b 	bl	801414c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80028d6:	682b      	ldr	r3, [r5, #0]
 80028d8:	4628      	mov	r0, r5
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	4798      	blx	r3
    newTransition->invalidate();
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	4628      	mov	r0, r5
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80028e6:	4620      	mov	r0, r4
 80028e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 80028ec:	4623      	mov	r3, r4
 80028ee:	e7e1      	b.n	80028b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 80028f0:	08021330 	.word	0x08021330
 80028f4:	080213be 	.word	0x080213be
 80028f8:	080214bc 	.word	0x080214bc
 80028fc:	08021511 	.word	0x08021511
 8002900:	080215b4 	.word	0x080215b4
 8002904:	080216bc 	.word	0x080216bc

08002908 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002908:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 800290c:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800290e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x20>)
 8002916:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800291a:	4804      	ldr	r0, [pc, #16]	; (800292c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x24>)
 800291c:	f7ff ff54 	bl	80027c8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002920:	b003      	add	sp, #12
 8002922:	f85d fb04 	ldr.w	pc, [sp], #4
 8002926:	bf00      	nop
 8002928:	2400ea50 	.word	0x2400ea50
 800292c:	2400ea4c 	.word	0x2400ea4c

08002930 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002930:	6a00      	ldr	r0, [r0, #32]
 8002932:	4770      	bx	lr

08002934 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002934:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002936:	4770      	bx	lr

08002938 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002938:	4770      	bx	lr

0800293a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800293a:	888b      	ldrh	r3, [r1, #4]
 800293c:	6980      	ldr	r0, [r0, #24]
 800293e:	0adb      	lsrs	r3, r3, #11
 8002940:	680a      	ldr	r2, [r1, #0]
 8002942:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002946:	4410      	add	r0, r2
 8002948:	4770      	bx	lr

0800294a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800294a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800294c:	b1c2      	cbz	r2, 8002980 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800294e:	7b13      	ldrb	r3, [r2, #12]
 8002950:	b1b3      	cbz	r3, 8002980 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002952:	7b54      	ldrb	r4, [r2, #13]
 8002954:	7ad2      	ldrb	r2, [r2, #11]
 8002956:	0224      	lsls	r4, r4, #8
 8002958:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800295c:	4314      	orrs	r4, r2
 800295e:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002960:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002962:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002966:	8813      	ldrh	r3, [r2, #0]
 8002968:	428b      	cmp	r3, r1
 800296a:	d102      	bne.n	8002972 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800296c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002970:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002972:	d805      	bhi.n	8002980 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002974:	3801      	subs	r0, #1
 8002976:	3204      	adds	r2, #4
 8002978:	b280      	uxth	r0, r0
 800297a:	2800      	cmp	r0, #0
 800297c:	d1f3      	bne.n	8002966 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800297e:	e7f7      	b.n	8002970 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002980:	2000      	movs	r0, #0
 8002982:	e7f5      	b.n	8002970 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002984 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002984:	b510      	push	{r4, lr}
 8002986:	4604      	mov	r4, r0
 8002988:	2128      	movs	r1, #40	; 0x28
 800298a:	f01c feee 	bl	801f76a <_ZdlPvj>
 800298e:	4620      	mov	r0, r4
 8002990:	bd10      	pop	{r4, pc}
	...

08002994 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002994:	b530      	push	{r4, r5, lr}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800299a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800299e:	9506      	str	r5, [sp, #24]
 80029a0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80029a4:	9505      	str	r5, [sp, #20]
 80029a6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80029aa:	9504      	str	r5, [sp, #16]
 80029ac:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80029b0:	9503      	str	r5, [sp, #12]
 80029b2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80029b6:	9502      	str	r5, [sp, #8]
 80029b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80029bc:	9501      	str	r5, [sp, #4]
 80029be:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80029c2:	9500      	str	r5, [sp, #0]
 80029c4:	f010 ff72 	bl	80138ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80029ca:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029d0:	61a3      	str	r3, [r4, #24]
 80029d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80029d4:	61e3      	str	r3, [r4, #28]
 80029d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80029d8:	6223      	str	r3, [r4, #32]
 80029da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80029dc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80029de:	b009      	add	sp, #36	; 0x24
 80029e0:	bd30      	pop	{r4, r5, pc}
 80029e2:	bf00      	nop
 80029e4:	080216e0 	.word	0x080216e0

080029e8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80029e8:	2000      	movs	r0, #0
 80029ea:	4770      	bx	lr

080029ec <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80029ec:	8081      	strh	r1, [r0, #4]
    }
 80029ee:	4770      	bx	lr

080029f0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80029f0:	80c1      	strh	r1, [r0, #6]
    }
 80029f2:	4770      	bx	lr

080029f4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80029f4:	8101      	strh	r1, [r0, #8]
    }
 80029f6:	4770      	bx	lr

080029f8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80029f8:	8141      	strh	r1, [r0, #10]
    }
 80029fa:	4770      	bx	lr

080029fc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80029fc:	4770      	bx	lr

080029fe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 80029fe:	4770      	bx	lr

08002a00 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002a00:	4770      	bx	lr

08002a02 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8002a02:	4770      	bx	lr

08002a04 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002a04:	4770      	bx	lr

08002a06 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002a06:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002a08:	88c4      	ldrh	r4, [r0, #6]
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	1b12      	subs	r2, r2, r4
 8002a0e:	8884      	ldrh	r4, [r0, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	1b09      	subs	r1, r1, r4
 8002a14:	b212      	sxth	r2, r2
    }
 8002a16:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002a1a:	b209      	sxth	r1, r1
 8002a1c:	4718      	bx	r3

08002a1e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a22:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002a2a:	6813      	ldr	r3, [r2, #0]
 8002a2c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002a2e:	6010      	str	r0, [r2, #0]
    }
 8002a30:	4770      	bx	lr

08002a32 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002a32:	4770      	bx	lr

08002a34 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002a34:	4770      	bx	lr

08002a36 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002a36:	4770      	bx	lr

08002a38 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002a38:	4770      	bx	lr

08002a3a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8002a3a:	4770      	bx	lr

08002a3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002a3c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002a40:	b11a      	cbz	r2, 8002a4a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a42:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002a46:	b102      	cbz	r2, 8002a4a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a48:	6018      	str	r0, [r3, #0]
        }
    }
 8002a4a:	4770      	bx	lr

08002a4c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8002a4c:	4770      	bx	lr

08002a4e <_ZN12MainViewBase11setupScreenEv>:
}

void MainViewBase::setupScreen()
{

}
 8002a4e:	4770      	bx	lr

08002a50 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002a50:	4770      	bx	lr

08002a52 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002a52:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002a54:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002a56:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002a58:	68c2      	ldr	r2, [r0, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	1055      	asrs	r5, r2, #1
 8002a5e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002a62:	07d2      	lsls	r2, r2, #31
 8002a64:	bf48      	it	mi
 8002a66:	5962      	ldrmi	r2, [r4, r5]
    }
 8002a68:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002a6a:	bf48      	it	mi
 8002a6c:	58d3      	ldrmi	r3, [r2, r3]
 8002a6e:	4718      	bx	r3

08002a70 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8002a70:	6843      	ldr	r3, [r0, #4]
 8002a72:	b12b      	cbz	r3, 8002a80 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8002a74:	6883      	ldr	r3, [r0, #8]
 8002a76:	b92b      	cbnz	r3, 8002a84 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002a78:	68c0      	ldr	r0, [r0, #12]
 8002a7a:	f000 0001 	and.w	r0, r0, #1
 8002a7e:	4770      	bx	lr
 8002a80:	4618      	mov	r0, r3
 8002a82:	4770      	bx	lr
 8002a84:	2001      	movs	r0, #1
    }
 8002a86:	4770      	bx	lr

08002a88 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	f01c fe6c 	bl	801f76a <_ZdlPvj>
 8002a92:	4620      	mov	r0, r4
 8002a94:	bd10      	pop	{r4, pc}

08002a96 <_ZN12MainViewBaseD0Ev>:
 8002a96:	b510      	push	{r4, lr}
 8002a98:	4604      	mov	r4, r0
 8002a9a:	f244 0158 	movw	r1, #16472	; 0x4058
 8002a9e:	f01c fe64 	bl	801f76a <_ZdlPvj>
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	bd10      	pop	{r4, pc}
	...

08002aa8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8002aa8:	b508      	push	{r3, lr}
    if (&src == &buttonWithLabel_0)
 8002aaa:	f500 7386 	add.w	r3, r0, #268	; 0x10c
 8002aae:	4299      	cmp	r1, r3
 8002ab0:	d112      	bne.n	8002ad8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x30>
        //Interaction0
        //When buttonWithLabel_0 clicked execute C++ code
        //Execute C++ code
    	//unsigned char uTx = '0';
        //HAL_UART_Transmit(&huart1, &uTx, sizeof(uTx), 10);
    	speed_L_T = 2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
    	speed_R_T = 2;
        uTx = '0';
 8002ab6:	4956      	ldr	r1, [pc, #344]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 2;
 8002ab8:	6013      	str	r3, [r2, #0]
    	speed_R_T = 2;
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002abc:	6013      	str	r3, [r2, #0]
        uTx = '0';
 8002abe:	2330      	movs	r3, #48	; 0x30
    	//unsigned char uTx = '1';
    	//HAL_UART_Transmit(&huart1, &uTx, sizeof(uTx), 10);
    	speed_L_T = 3;
    	speed_R_T = 3;
    	uTx = '1';
    	HAL_UART_Transmit_IT(&huart1, &uTx, sizeof(uTx));
 8002ac0:	2201      	movs	r2, #1
    	uTx = '1';
 8002ac2:	700b      	strb	r3, [r1, #0]
    	//unsigned char uTx = 'c';
    	//HAL_UART_Transmit(&huart1, &uTx, sizeof(uTx), 10);
    	speed_L_T = 1;
    	speed_R_T = 0;
    	uTx = 'c';
    	HAL_UART_Transmit_IT(&huart1, &uTx, sizeof(uTx));
 8002ac4:	4854      	ldr	r0, [pc, #336]	; (8002c18 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x170>)
 8002ac6:	f007 fa73 	bl	8009fb0 <HAL_UART_Transmit_IT>
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8002aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ace:	4853      	ldr	r0, [pc, #332]	; (8002c1c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x174>)
    }
}
 8002ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8002ad4:	f004 ba85 	b.w	8006fe2 <HAL_GPIO_TogglePin>
    else if (&src == &buttonWithLabel_1)
 8002ad8:	f500 73aa 	add.w	r3, r0, #340	; 0x154
 8002adc:	4299      	cmp	r1, r3
 8002ade:	d107      	bne.n	8002af0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
    	speed_L_T = 3;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
    	uTx = '1';
 8002ae4:	494a      	ldr	r1, [pc, #296]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 3;
 8002ae6:	6013      	str	r3, [r2, #0]
    	speed_R_T = 3;
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002aea:	6013      	str	r3, [r2, #0]
    	uTx = '1';
 8002aec:	2331      	movs	r3, #49	; 0x31
 8002aee:	e7e7      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_2)
 8002af0:	f500 73ce 	add.w	r3, r0, #412	; 0x19c
 8002af4:	4299      	cmp	r1, r3
 8002af6:	d107      	bne.n	8002b08 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x60>
    	speed_L_T = 4;
 8002af8:	2304      	movs	r3, #4
 8002afa:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
    	uTx = '2';
 8002afc:	4944      	ldr	r1, [pc, #272]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 4;
 8002afe:	6013      	str	r3, [r2, #0]
    	speed_R_T = 4;
 8002b00:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b02:	6013      	str	r3, [r2, #0]
    	uTx = '2';
 8002b04:	2332      	movs	r3, #50	; 0x32
 8002b06:	e7db      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_3)
 8002b08:	f500 73f2 	add.w	r3, r0, #484	; 0x1e4
 8002b0c:	4299      	cmp	r1, r3
 8002b0e:	d108      	bne.n	8002b22 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x7a>
    	speed_L_T = 1;
 8002b10:	2201      	movs	r2, #1
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
    	uTx = '3';
 8002b14:	493e      	ldr	r1, [pc, #248]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 1;
 8002b16:	601a      	str	r2, [r3, #0]
    	speed_R_T = 1;
 8002b18:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b1a:	601a      	str	r2, [r3, #0]
    	uTx = '3';
 8002b1c:	2333      	movs	r3, #51	; 0x33
    	uTx = 'c';
 8002b1e:	700b      	strb	r3, [r1, #0]
 8002b20:	e7d0      	b.n	8002ac4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
    else if (&src == &buttonWithLabel_4)
 8002b22:	f500 730b 	add.w	r3, r0, #556	; 0x22c
 8002b26:	4299      	cmp	r1, r3
 8002b28:	d107      	bne.n	8002b3a <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x92>
    	speed_L_T = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4a37      	ldr	r2, [pc, #220]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
    	uTx = '4';
 8002b2e:	4938      	ldr	r1, [pc, #224]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 0;
 8002b30:	6013      	str	r3, [r2, #0]
    	speed_R_T = 0;
 8002b32:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b34:	6013      	str	r3, [r2, #0]
    	uTx = '4';
 8002b36:	2334      	movs	r3, #52	; 0x34
 8002b38:	e7c2      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_5)
 8002b3a:	f500 731d 	add.w	r3, r0, #628	; 0x274
 8002b3e:	4299      	cmp	r1, r3
 8002b40:	d108      	bne.n	8002b54 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xac>
    	speed_L_T = 3;
 8002b42:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002b44:	2203      	movs	r2, #3
    	uTx = '5';
 8002b46:	4932      	ldr	r1, [pc, #200]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 3;
 8002b48:	601a      	str	r2, [r3, #0]
    	speed_R_T = 2;
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b4e:	601a      	str	r2, [r3, #0]
    	uTx = '5';
 8002b50:	2335      	movs	r3, #53	; 0x35
 8002b52:	e7b5      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_6)
 8002b54:	f500 732f 	add.w	r3, r0, #700	; 0x2bc
 8002b58:	4299      	cmp	r1, r3
 8002b5a:	d108      	bne.n	8002b6e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc6>
    	speed_L_T = 4;
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002b5e:	2204      	movs	r2, #4
    	uTx = '6';
 8002b60:	492b      	ldr	r1, [pc, #172]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 4;
 8002b62:	601a      	str	r2, [r3, #0]
    	speed_R_T = 2;
 8002b64:	2202      	movs	r2, #2
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b68:	601a      	str	r2, [r3, #0]
    	uTx = '6';
 8002b6a:	2336      	movs	r3, #54	; 0x36
 8002b6c:	e7a8      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_7)
 8002b6e:	f500 7341 	add.w	r3, r0, #772	; 0x304
 8002b72:	4299      	cmp	r1, r3
 8002b74:	d108      	bne.n	8002b88 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe0>
    	speed_L_T = 4;
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002b78:	2204      	movs	r2, #4
    	uTx = '7';
 8002b7a:	4925      	ldr	r1, [pc, #148]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 4;
 8002b7c:	601a      	str	r2, [r3, #0]
    	speed_R_T = 3;
 8002b7e:	2203      	movs	r2, #3
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b82:	601a      	str	r2, [r3, #0]
    	uTx = '7';
 8002b84:	2337      	movs	r3, #55	; 0x37
 8002b86:	e79b      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_8)
 8002b88:	f500 7353 	add.w	r3, r0, #844	; 0x34c
 8002b8c:	4299      	cmp	r1, r3
 8002b8e:	d108      	bne.n	8002ba2 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xfa>
    	speed_L_T = 0;
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002b92:	2200      	movs	r2, #0
    	uTx = '8';
 8002b94:	491e      	ldr	r1, [pc, #120]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 0;
 8002b96:	601a      	str	r2, [r3, #0]
    	speed_R_T = 1;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002b9c:	601a      	str	r2, [r3, #0]
    	uTx = '8';
 8002b9e:	2338      	movs	r3, #56	; 0x38
 8002ba0:	e7bd      	b.n	8002b1e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
    else if (&src == &buttonWithLabel_9)
 8002ba2:	f500 7365 	add.w	r3, r0, #916	; 0x394
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	d108      	bne.n	8002bbc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>
    	speed_L_T = 2;
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002bac:	2202      	movs	r2, #2
    	uTx = '9';
 8002bae:	4918      	ldr	r1, [pc, #96]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 2;
 8002bb0:	601a      	str	r2, [r3, #0]
    	speed_R_T = 3;
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002bb6:	601a      	str	r2, [r3, #0]
    	uTx = '9';
 8002bb8:	2339      	movs	r3, #57	; 0x39
 8002bba:	e781      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_a)
 8002bbc:	f500 7377 	add.w	r3, r0, #988	; 0x3dc
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	d108      	bne.n	8002bd6 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x12e>
    	speed_L_T = 2;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002bc6:	2202      	movs	r2, #2
    	uTx = 'a';
 8002bc8:	4911      	ldr	r1, [pc, #68]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 2;
 8002bca:	601a      	str	r2, [r3, #0]
    	speed_R_T = 4;
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002bd0:	601a      	str	r2, [r3, #0]
    	uTx = 'a';
 8002bd2:	2361      	movs	r3, #97	; 0x61
 8002bd4:	e774      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_b)
 8002bd6:	f200 4324 	addw	r3, r0, #1060	; 0x424
 8002bda:	4299      	cmp	r1, r3
 8002bdc:	d108      	bne.n	8002bf0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x148>
    	speed_L_T = 3;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002be0:	2203      	movs	r2, #3
    	uTx = 'b';
 8002be2:	490b      	ldr	r1, [pc, #44]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
    	speed_L_T = 3;
 8002be4:	601a      	str	r2, [r3, #0]
    	speed_R_T = 4;
 8002be6:	2204      	movs	r2, #4
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002bea:	601a      	str	r2, [r3, #0]
    	uTx = 'b';
 8002bec:	2362      	movs	r3, #98	; 0x62
 8002bee:	e767      	b.n	8002ac0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18>
    else if (&src == &buttonWithLabel_c)
 8002bf0:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8002bf4:	4281      	cmp	r1, r0
 8002bf6:	d108      	bne.n	8002c0a <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x162>
    	speed_L_T = 1;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x164>)
 8002bfa:	2201      	movs	r2, #1
    	speed_R_T = 0;
 8002bfc:	2100      	movs	r1, #0
    	speed_L_T = 1;
 8002bfe:	601a      	str	r2, [r3, #0]
    	speed_R_T = 0;
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16c>)
 8002c02:	6019      	str	r1, [r3, #0]
    	uTx = 'c';
 8002c04:	2363      	movs	r3, #99	; 0x63
 8002c06:	4902      	ldr	r1, [pc, #8]	; (8002c10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>)
 8002c08:	e789      	b.n	8002b1e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
}
 8002c0a:	bd08      	pop	{r3, pc}
 8002c0c:	2400ecb0 	.word	0x2400ecb0
 8002c10:	24005118 	.word	0x24005118
 8002c14:	2400ee4c 	.word	0x2400ee4c
 8002c18:	2400eda8 	.word	0x2400eda8
 8002c1c:	58022000 	.word	0x58022000

08002c20 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002c22:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8002c24:	2200      	movs	r2, #0
 8002c26:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002c2a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8002c2e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002c32:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c3a:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	08023928 	.word	0x08023928

08002c44 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002c44:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002c46:	b570      	push	{r4, r5, r6, lr}
 8002c48:	4604      	mov	r4, r0
        setX(x);
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 8002c4c:	4615      	mov	r5, r2
        setX(x);
 8002c4e:	4798      	blx	r3
        setY(y);
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 8002c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002c5c:	4718      	bx	r3

08002c5e <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002c5e:	b570      	push	{r4, r5, r6, lr}
 8002c60:	4604      	mov	r4, r0
 8002c62:	461d      	mov	r5, r3
 8002c64:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002c68:	f7ff ffec 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	4620      	mov	r0, r4
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	4798      	blx	r3
        setHeight(height);
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	4631      	mov	r1, r6
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8002c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002c82:	4718      	bx	r3

08002c84 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	7202      	strb	r2, [r0, #8]
 8002c8c:	4604      	mov	r4, r0
        : AbstractPainter(), currentX(0), currentY(0)
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002c90:	4e13      	ldr	r6, [pc, #76]	; (8002ce0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8002c92:	6002      	str	r2, [r0, #0]
 8002c94:	6832      	ldr	r2, [r6, #0]
 8002c96:	6043      	str	r3, [r0, #4]
 8002c98:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8002c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002ca0:	b109      	cbz	r1, 8002ca6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x22>
 8002ca2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002ca4:	b900      	cbnz	r0, 8002ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x24>
        return instance->lcdRef;
 8002ca6:	6890      	ldr	r0, [r2, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	4798      	blx	r3
 8002cae:	1e43      	subs	r3, r0, #1
 8002cb0:	425d      	negs	r5, r3
 8002cb2:	415d      	adcs	r5, r3
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002cb4:	6833      	ldr	r3, [r6, #0]
 8002cb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002cb8:	b130      	cbz	r0, 8002cc8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x44>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002cba:	6803      	ldr	r3, [r0, #0]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	4798      	blx	r3
 8002cc0:	2801      	cmp	r0, #1
 8002cc2:	bf08      	it	eq
 8002cc4:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8002cc8:	b92d      	cbnz	r5, 8002cd6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x52>
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8002ccc:	2128      	movs	r1, #40	; 0x28
 8002cce:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x64>)
 8002cd0:	4806      	ldr	r0, [pc, #24]	; (8002cec <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x68>)
 8002cd2:	f01c fd79 	bl	801f7c8 <__assert_func>
    }
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
 8002cda:	bf00      	nop
 8002cdc:	08022cc8 	.word	0x08022cc8
 8002ce0:	2400e9f0 	.word	0x2400e9f0
 8002ce4:	08021730 	.word	0x08021730
 8002ce8:	0802178e 	.word	0x0802178e
 8002cec:	080217c7 	.word	0x080217c7

08002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	460d      	mov	r5, r1
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8002cf6:	f7ff ffc5 	bl	8002c84 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x1c>)
    {
        setColor(color);
    }
 8002cfc:	4620      	mov	r0, r4
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8002cfe:	75a5      	strb	r5, [r4, #22]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8002d00:	6023      	str	r3, [r4, #0]
        return color >> 16;
 8002d02:	0c2b      	lsrs	r3, r5, #16
 8002d04:	7523      	strb	r3, [r4, #20]
        return color >> 8;
 8002d06:	0a2b      	lsrs	r3, r5, #8
 8002d08:	7563      	strb	r3, [r4, #21]
    }
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
 8002d0c:	08022e1c 	.word	0x08022e1c

08002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8002d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8002d16:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 8002d18:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	d033      	beq.n	8002d86 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b92b      	cbnz	r3, 8002d30 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8002d26:	21ae      	movs	r1, #174	; 0xae
 8002d28:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8002d2a:	481c      	ldr	r0, [pc, #112]	; (8002d9c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8002d2c:	f01c fd4c 	bl	801f7c8 <__assert_func>
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 8002d32:	8812      	ldrh	r2, [r2, #0]
 8002d34:	428a      	cmp	r2, r1
 8002d36:	d803      	bhi.n	8002d40 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 8002d3a:	21af      	movs	r1, #175	; 0xaf
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8002d3e:	e7f4      	b.n	8002d2a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002d40:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f000 ff84 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	4601      	mov	r1, r0
 8002d58:	9001      	str	r0, [sp, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	4798      	blx	r3
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	4604      	mov	r4, r0
 8002d64:	9901      	ldr	r1, [sp, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4628      	mov	r0, r5
 8002d6a:	4798      	blx	r3
 8002d6c:	fb14 f400 	smulbb	r4, r4, r0
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	4628      	mov	r0, r5
 8002d74:	b2e4      	uxtb	r4, r4
 8002d76:	9901      	ldr	r1, [sp, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	4798      	blx	r3
 8002d7c:	4404      	add	r4, r0
 8002d7e:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8002d82:	b002      	add	sp, #8
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8002d8c:	e7f9      	b.n	8002d82 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 8002d8e:	bf00      	nop
 8002d90:	2400ea60 	.word	0x2400ea60
 8002d94:	08021837 	.word	0x08021837
 8002d98:	08021879 	.word	0x08021879
 8002d9c:	080218a7 	.word	0x080218a7
 8002da0:	2400ea64 	.word	0x2400ea64
 8002da4:	080218fc 	.word	0x080218fc
 8002da8:	2400ea68 	.word	0x2400ea68
 8002dac:	2400ea6c 	.word	0x2400ea6c

08002db0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002db4:	2226      	movs	r2, #38	; 0x26
 8002db6:	2100      	movs	r1, #0
 8002db8:	f01c fd96 	bl	801f8e8 <memset>
class Widget : public Drawable
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7ff ff2f 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
 8002dc4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8002dc8:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8002dca:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <_ZN8touchgfx8TextAreaC1Ev+0x34>)
 8002dce:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
 8002ddc:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8002dde:	bd10      	pop	{r4, pc}
 8002de0:	08023204 	.word	0x08023204
 8002de4:	08021328 	.word	0x08021328

08002de8 <_ZN12MainViewBaseC1Ev>:
MainViewBase::MainViewBase() :
 8002de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dec:	4604      	mov	r4, r0
        : presenter(0)
 8002dee:	2500      	movs	r5, #0
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
        : Widget(), bitmap(bitmap), alpha(255)
 8002df0:	f04f 38ff 	mov.w	r8, #4294967295
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 8002df4:	f04f 36ff 	mov.w	r6, #4294967295
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8002df8:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
 8002dfc:	f604 6a8c 	addw	sl, r4, #3724	; 0xe8c
 8002e00:	f604 7bdc 	addw	fp, r4, #4060	; 0xfdc
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002e04:	f04f 0913 	mov.w	r9, #19
MainViewBase::MainViewBase() :
 8002e08:	ed2d 8b10 	vpush	{d8-d15}
 8002e0c:	b099      	sub	sp, #100	; 0x64
 8002e0e:	f010 fff1 	bl	8013df4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8002e12:	4622      	mov	r2, r4
 8002e14:	4be6      	ldr	r3, [pc, #920]	; (80031b0 <_ZN12MainViewBaseC1Ev+0x3c8>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002e16:	4629      	mov	r1, r5
 8002e18:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002e1a:	f842 3b40 	str.w	r3, [r2], #64
 8002e1e:	4613      	mov	r3, r2
 8002e20:	ee0d 2a10 	vmov	s26, r2
 8002e24:	2226      	movs	r2, #38	; 0x26
 8002e26:	4618      	mov	r0, r3
 8002e28:	f01c fd5e 	bl	801f8e8 <memset>
 8002e2c:	ee1d 0a10 	vmov	r0, s26
 8002e30:	f7ff fef6 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 8002e34:	4bdf      	ldr	r3, [pc, #892]	; (80031b4 <_ZN12MainViewBaseC1Ev+0x3cc>)
 8002e36:	2226      	movs	r2, #38	; 0x26
 8002e38:	4629      	mov	r1, r5
 8002e3a:	6423      	str	r3, [r4, #64]	; 0x40
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
        : color(col)
 8002e40:	66a5      	str	r5, [r4, #104]	; 0x68
 8002e42:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8002e46:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8002e4a:	ee0c 3a10 	vmov	s24, r3
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	ee1c 0a10 	vmov	r0, s24
 8002e56:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8002e5a:	f01c fd45 	bl	801f8e8 <memset>
 8002e5e:	ee1c 0a10 	vmov	r0, s24
 8002e62:	f7ff fedd 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 8002e66:	4bd4      	ldr	r3, [pc, #848]	; (80031b8 <_ZN12MainViewBaseC1Ev+0x3d0>)
    {
        Image::setBitmap(bitmap);
 8002e68:	a916      	add	r1, sp, #88	; 0x58
 8002e6a:	ee1c 0a10 	vmov	r0, s24
        : Widget(), bitmap(bitmap), alpha(255)
 8002e6e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002e70:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8002e74:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
 8002e78:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bitmap);
 8002e7c:	f00d fdfb 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e80:	4bce      	ldr	r3, [pc, #824]	; (80031bc <_ZN12MainViewBaseC1Ev+0x3d4>)
 8002e82:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8002e86:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8002e8e:	e9c4 6327 	strd	r6, r3, [r4, #156]	; 0x9c
 8002e92:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8002e96:	4618      	mov	r0, r3
 8002e98:	930c      	str	r3, [sp, #48]	; 0x30
 8002e9a:	f00c f903 	bl	800f0a4 <_ZN8touchgfx6CircleC1Ev>
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	f7ff ff25 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8002ea6:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8002eaa:	4618      	mov	r0, r3
 8002eac:	ee0d 3a90 	vmov	s27, r3
 8002eb0:	f00d ff26 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002eb4:	f504 73aa 	add.w	r3, r4, #340	; 0x154
 8002eb8:	4618      	mov	r0, r3
 8002eba:	ee0e 3a10 	vmov	s28, r3
 8002ebe:	f00d ff1f 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002ec2:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	ee0e 3a90 	vmov	s29, r3
 8002ecc:	f00d ff18 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002ed0:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	ee0f 3a10 	vmov	s30, r3
 8002eda:	f00d ff11 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002ede:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	ee0f 3a90 	vmov	s31, r3
 8002ee8:	f00d ff0a 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002eec:	f504 731d 	add.w	r3, r4, #628	; 0x274
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	f00d ff04 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002ef8:	f504 732f 	add.w	r3, r4, #700	; 0x2bc
 8002efc:	4618      	mov	r0, r3
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	f00d fefe 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f04:	f504 7341 	add.w	r3, r4, #772	; 0x304
 8002f08:	4618      	mov	r0, r3
 8002f0a:	9305      	str	r3, [sp, #20]
 8002f0c:	f00d fef8 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f10:	f504 7353 	add.w	r3, r4, #844	; 0x34c
 8002f14:	4618      	mov	r0, r3
 8002f16:	9306      	str	r3, [sp, #24]
 8002f18:	f00d fef2 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f1c:	f504 7365 	add.w	r3, r4, #916	; 0x394
 8002f20:	4618      	mov	r0, r3
 8002f22:	9307      	str	r3, [sp, #28]
 8002f24:	f00d feec 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f28:	f504 7377 	add.w	r3, r4, #988	; 0x3dc
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	9308      	str	r3, [sp, #32]
 8002f30:	f00d fee6 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f34:	f204 4324 	addw	r3, r4, #1060	; 0x424
 8002f38:	4618      	mov	r0, r3
 8002f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f3c:	f00d fee0 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f40:	f204 436c 	addw	r3, r4, #1132	; 0x46c
 8002f44:	4618      	mov	r0, r3
 8002f46:	930a      	str	r3, [sp, #40]	; 0x28
 8002f48:	f00d feda 	bl	8010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8002f4c:	f204 43b4 	addw	r3, r4, #1204	; 0x4b4
 8002f50:	4618      	mov	r0, r3
 8002f52:	ee0a 3a10 	vmov	s20, r3
 8002f56:	f00a fa45 	bl	800d3e4 <_ZN8touchgfx12TextProgressC1Ev>
 8002f5a:	f204 53bc 	addw	r3, r4, #1468	; 0x5bc
 8002f5e:	4618      	mov	r0, r3
 8002f60:	ee0a 3a90 	vmov	s21, r3
 8002f64:	f00a fa3e 	bl	800d3e4 <_ZN8touchgfx12TextProgressC1Ev>
 8002f68:	f204 63c4 	addw	r3, r4, #1732	; 0x6c4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8002f70:	f7ff ff1e 	bl	8002db0 <_ZN8touchgfx8TextAreaC1Ev>
 8002f74:	f504 63e0 	add.w	r3, r4, #1792	; 0x700
 8002f78:	4618      	mov	r0, r3
 8002f7a:	ee0b 3a10 	vmov	s22, r3
 8002f7e:	f00a fa31 	bl	800d3e4 <_ZN8touchgfx12TextProgressC1Ev>
 8002f82:	f604 0308 	addw	r3, r4, #2056	; 0x808
 8002f86:	4618      	mov	r0, r3
 8002f88:	ee0b 3a90 	vmov	s23, r3
 8002f8c:	f00a fa2a 	bl	800d3e4 <_ZN8touchgfx12TextProgressC1Ev>
 8002f90:	f504 6311 	add.w	r3, r4, #2320	; 0x910
 8002f94:	4618      	mov	r0, r3
 8002f96:	930e      	str	r3, [sp, #56]	; 0x38
 8002f98:	f7ff ff0a 	bl	8002db0 <_ZN8touchgfx8TextAreaC1Ev>
 8002f9c:	f604 134c 	addw	r3, r4, #2380	; 0x94c
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	ee08 3a10 	vmov	s16, r3
 8002fa6:	f00a fb11 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8002faa:	f604 2384 	addw	r3, r4, #2692	; 0xa84
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fb4:	f7ff fe9c 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8002fb8:	f604 239c 	addw	r3, r4, #2716	; 0xa9c
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	ee08 3a90 	vmov	s17, r3
 8002fc2:	f00a fb03 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8002fc6:	f604 33d4 	addw	r3, r4, #3028	; 0xbd4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4618      	mov	r0, r3
 8002fce:	9310      	str	r3, [sp, #64]	; 0x40
 8002fd0:	f7ff fe8e 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8002fd4:	f604 33ec 	addw	r3, r4, #3052	; 0xbec
 8002fd8:	4618      	mov	r0, r3
 8002fda:	ee09 3a10 	vmov	s18, r3
 8002fde:	f00a faf5 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8002fe2:	f604 5324 	addw	r3, r4, #3364	; 0xd24
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	4618      	mov	r0, r3
 8002fea:	9311      	str	r3, [sp, #68]	; 0x44
 8002fec:	f7ff fe80 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8002ff0:	f604 533c 	addw	r3, r4, #3388	; 0xd3c
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	ee09 3a90 	vmov	s19, r3
 8002ffa:	f00a fae7 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8002ffe:	f604 6374 	addw	r3, r4, #3700	; 0xe74
 8003002:	4629      	mov	r1, r5
 8003004:	4618      	mov	r0, r3
 8003006:	9312      	str	r3, [sp, #72]	; 0x48
 8003008:	f7ff fe72 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800300c:	4650      	mov	r0, sl
 800300e:	f00a fadd 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8003012:	f604 73c4 	addw	r3, r4, #4036	; 0xfc4
 8003016:	4629      	mov	r1, r5
 8003018:	4618      	mov	r0, r3
 800301a:	9313      	str	r3, [sp, #76]	; 0x4c
 800301c:	f7ff fe68 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8003020:	4658      	mov	r0, fp
 8003022:	f00a fad3 	bl	800d5cc <_ZN8touchgfx12LineProgressC1Ev>
 8003026:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 800302a:	4629      	mov	r1, r5
 800302c:	3314      	adds	r3, #20
 800302e:	4618      	mov	r0, r3
 8003030:	930b      	str	r3, [sp, #44]	; 0x2c
 8003032:	f7ff fe5d 	bl	8002cf0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8003036:	f504 5389 	add.w	r3, r4, #4384	; 0x1120
 800303a:	330c      	adds	r3, #12
 800303c:	4618      	mov	r0, r3
 800303e:	ee0c 3a90 	vmov	s25, r3
 8003042:	f7ff feb5 	bl	8002db0 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003046:	f241 1368 	movw	r3, #4456	; 0x1168
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800304a:	f504 508b 	add.w	r0, r4, #4448	; 0x1160
 800304e:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8003052:	18e2      	adds	r2, r4, r3
 8003054:	3018      	adds	r0, #24
 8003056:	9202      	str	r2, [sp, #8]
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <_ZN12MainViewBaseC1Ev+0x3d8>)
 800305a:	50e2      	str	r2, [r4, r3]
 800305c:	9b02      	ldr	r3, [sp, #8]
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <_ZN12MainViewBaseC1Ev+0x3dc>)
 8003060:	605c      	str	r4, [r3, #4]
 8003062:	f241 1370 	movw	r3, #4464	; 0x1170
 8003066:	50e2      	str	r2, [r4, r3]
 8003068:	f241 1374 	movw	r3, #4468	; 0x1174
 800306c:	50e5      	str	r5, [r4, r3]
 800306e:	f00d fe75 	bl	8010d5c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8003072:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003076:	462a      	mov	r2, r5
 8003078:	4629      	mov	r1, r5
 800307a:	ee1d 0a10 	vmov	r0, s26
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003084:	f7ff fdeb 	bl	8002c5e <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003088:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    animatedImage.setXY(0, 0);
 800308c:	462a      	mov	r2, r5
 800308e:	4629      	mov	r1, r5
 8003090:	66a3      	str	r3, [r4, #104]	; 0x68
 8003092:	ee1c 0a10 	vmov	r0, s24
 8003096:	f7ff fdd5 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    animatedImage.setBitmaps(BITMAP_BKG_01_ID, BITMAP_BKG_18_ID);
 800309a:	2212      	movs	r2, #18
 800309c:	ee1c 0a10 	vmov	r0, s24
 80030a0:	2101      	movs	r1, #1
 80030a2:	f00d f8cd 	bl	8010240 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage.setUpdateTicksInterval(2);
 80030a6:	ee1c 0a10 	vmov	r0, s24
 80030aa:	2102      	movs	r1, #2
 80030ac:	f00d f8db 	bl	8010266 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage.startAnimation(false, true, true);
 80030b0:	2301      	movs	r3, #1
 80030b2:	4629      	mov	r1, r5
 80030b4:	ee1c 0a10 	vmov	r0, s24
 80030b8:	461a      	mov	r2, r3
 80030ba:	f00c fff9 	bl	80100b0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
    circle.setPosition(240, 80, 320, 320);
 80030be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80030c2:	2250      	movs	r2, #80	; 0x50
 80030c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	21f0      	movs	r1, #240	; 0xf0
 80030ca:	f7ff fdc8 	bl	8002c5e <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 80030ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    circle.setPainter(circlePainter);
 80030d2:	4639      	mov	r1, r7
 80030d4:	980c      	ldr	r0, [sp, #48]	; 0x30
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5(r);
 80030d6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
class TypedText
 80030da:	2708      	movs	r7, #8
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 80030dc:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 80030e0:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
     */
    void setColor(colortype color)
    {
        painterRed = Color::getRed(color);
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 80030e4:	f884 810a 	strb.w	r8, [r4, #266]	; 0x10a
 80030e8:	f04f 0814 	mov.w	r8, #20
        painterRed = Color::getRed(color);
 80030ec:	f8a4 6108 	strh.w	r6, [r4, #264]	; 0x108
        this->circleCenterY = CWRUtil::toQ5(y);
 80030f0:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 80030f4:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 80030f8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80030fc:	f00c fbfb 	bl	800f8f6 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003100:	f06f 034b 	mvn.w	r3, #75	; 0x4b
    buttonWithLabel_0.setXY(370, 210);
 8003104:	ee1d 0a90 	vmov	r0, s27
 8003108:	22d2      	movs	r2, #210	; 0xd2
 800310a:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
 800310e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003112:	f7ff fd97 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_0.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003116:	aa16      	add	r2, sp, #88	; 0x58
 8003118:	a915      	add	r1, sp, #84	; 0x54
 800311a:	ee1d 0a90 	vmov	r0, s27
 800311e:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003122:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003126:	f00d fad4 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800312a:	f04f 0301 	mov.w	r3, #1
        updateTextPosition();
 800312e:	ee1d 0a90 	vmov	r0, s27
 8003132:	f8a4 3144 	strh.w	r3, [r4, #324]	; 0x144
 8003136:	f7ff fdeb 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800313a:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_1.setXY(370, 150);
 800313c:	ee1e 0a10 	vmov	r0, s28
 8003140:	2296      	movs	r2, #150	; 0x96
 8003142:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8003146:	f44f 71b9 	mov.w	r1, #370	; 0x172
        colorPressed = col;
 800314a:	e9c4 6652 	strd	r6, r6, [r4, #328]	; 0x148
 800314e:	f7ff fd79 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003152:	aa16      	add	r2, sp, #88	; 0x58
 8003154:	a915      	add	r1, sp, #84	; 0x54
 8003156:	ee1e 0a10 	vmov	r0, s28
 800315a:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 800315e:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003162:	f00d fab6 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003166:	f04f 0302 	mov.w	r3, #2
        updateTextPosition();
 800316a:	ee1e 0a10 	vmov	r0, s28
 800316e:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
 8003172:	f7ff fdcd 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8003176:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_2.setXY(370, 90);
 8003178:	ee1e 0a90 	vmov	r0, s29
 800317c:	225a      	movs	r2, #90	; 0x5a
 800317e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8003182:	f44f 71b9 	mov.w	r1, #370	; 0x172
        colorPressed = col;
 8003186:	e9c4 6664 	strd	r6, r6, [r4, #400]	; 0x190
 800318a:	f7ff fd5b 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 800318e:	aa16      	add	r2, sp, #88	; 0x58
 8003190:	a915      	add	r1, sp, #84	; 0x54
 8003192:	ee1e 0a90 	vmov	r0, s29
 8003196:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 800319a:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800319e:	f00d fa98 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80031a2:	2303      	movs	r3, #3
        updateTextPosition();
 80031a4:	ee1e 0a90 	vmov	r0, s29
 80031a8:	f8a4 31d4 	strh.w	r3, [r4, #468]	; 0x1d4
 80031ac:	e00c      	b.n	80031c8 <_ZN12MainViewBaseC1Ev+0x3e0>
 80031ae:	bf00      	nop
 80031b0:	08021970 	.word	0x08021970
 80031b4:	080232ac 	.word	0x080232ac
 80031b8:	080233ec 	.word	0x080233ec
 80031bc:	08023158 	.word	0x08023158
 80031c0:	08021958 	.word	0x08021958
 80031c4:	08002aa9 	.word	0x08002aa9
 80031c8:	f7ff fda2 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80031cc:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_3.setXY(370, 270);
 80031ce:	ee1f 0a10 	vmov	r0, s30
 80031d2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80031d6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 80031da:	f44f 71b9 	mov.w	r1, #370	; 0x172
        colorPressed = col;
 80031de:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
 80031e2:	f7ff fd2f 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80031e6:	aa16      	add	r2, sp, #88	; 0x58
 80031e8:	a915      	add	r1, sp, #84	; 0x54
 80031ea:	ee1f 0a10 	vmov	r0, s30
 80031ee:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 80031f2:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80031f6:	f00d fa6c 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80031fa:	f04f 0304 	mov.w	r3, #4
        updateTextPosition();
 80031fe:	ee1f 0a10 	vmov	r0, s30
 8003202:	f8a4 321c 	strh.w	r3, [r4, #540]	; 0x21c
 8003206:	f7ff fd83 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800320a:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_4.setXY(370, 330);
 800320c:	ee1f 0a90 	vmov	r0, s31
 8003210:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8003214:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8003218:	f44f 71b9 	mov.w	r1, #370	; 0x172
        colorPressed = col;
 800321c:	e9c4 6688 	strd	r6, r6, [r4, #544]	; 0x220
 8003220:	f7ff fd10 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_4.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003224:	aa16      	add	r2, sp, #88	; 0x58
 8003226:	a915      	add	r1, sp, #84	; 0x54
 8003228:	ee1f 0a90 	vmov	r0, s31
 800322c:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003230:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003234:	f00d fa4d 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003238:	2305      	movs	r3, #5
        updateTextPosition();
 800323a:	ee1f 0a90 	vmov	r0, s31
 800323e:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8003242:	f7ff fd65 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8003246:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_5.setXY(430, 210);
 8003248:	9803      	ldr	r0, [sp, #12]
 800324a:	22d2      	movs	r2, #210	; 0xd2
 800324c:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 8003250:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
        colorPressed = col;
 8003254:	e9c4 669a 	strd	r6, r6, [r4, #616]	; 0x268
 8003258:	f7ff fcf4 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 800325c:	aa16      	add	r2, sp, #88	; 0x58
 800325e:	a915      	add	r1, sp, #84	; 0x54
 8003260:	9803      	ldr	r0, [sp, #12]
 8003262:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003266:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800326a:	f00d fa32 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800326e:	2306      	movs	r3, #6
        updateTextPosition();
 8003270:	9803      	ldr	r0, [sp, #12]
 8003272:	f8a4 32ac 	strh.w	r3, [r4, #684]	; 0x2ac
 8003276:	f7ff fd4b 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800327a:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_6.setXY(490, 210);
 800327c:	9804      	ldr	r0, [sp, #16]
 800327e:	22d2      	movs	r2, #210	; 0xd2
 8003280:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 8003284:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
        colorPressed = col;
 8003288:	e9c4 66ac 	strd	r6, r6, [r4, #688]	; 0x2b0
 800328c:	f7ff fcda 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_6.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003290:	aa16      	add	r2, sp, #88	; 0x58
 8003292:	a915      	add	r1, sp, #84	; 0x54
 8003294:	9804      	ldr	r0, [sp, #16]
 8003296:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 800329a:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800329e:	f00d fa18 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80032a2:	2307      	movs	r3, #7
        updateTextPosition();
 80032a4:	9804      	ldr	r0, [sp, #16]
 80032a6:	f8a4 32f4 	strh.w	r3, [r4, #756]	; 0x2f4
 80032aa:	f7ff fd31 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80032ae:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_7.setXY(430, 150);
 80032b0:	9805      	ldr	r0, [sp, #20]
 80032b2:	2296      	movs	r2, #150	; 0x96
 80032b4:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80032b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
        colorPressed = col;
 80032bc:	e9c4 66be 	strd	r6, r6, [r4, #760]	; 0x2f8
 80032c0:	f7ff fcc0 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_7.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80032c4:	aa16      	add	r2, sp, #88	; 0x58
 80032c6:	a915      	add	r1, sp, #84	; 0x54
 80032c8:	9805      	ldr	r0, [sp, #20]
 80032ca:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 80032ce:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80032d2:	f00d f9fe 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80032d6:	9805      	ldr	r0, [sp, #20]
 80032d8:	f8a4 733c 	strh.w	r7, [r4, #828]	; 0x33c
 80032dc:	f7ff fd18 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80032e0:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_8.setXY(430, 270);
 80032e2:	9806      	ldr	r0, [sp, #24]
 80032e4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80032e8:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80032ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
        colorPressed = col;
 80032f0:	e9c4 66d0 	strd	r6, r6, [r4, #832]	; 0x340
 80032f4:	f7ff fca6 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_8.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80032f8:	aa16      	add	r2, sp, #88	; 0x58
 80032fa:	a915      	add	r1, sp, #84	; 0x54
 80032fc:	9806      	ldr	r0, [sp, #24]
 80032fe:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003302:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003306:	f00d f9e4 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800330a:	2309      	movs	r3, #9
        updateTextPosition();
 800330c:	9806      	ldr	r0, [sp, #24]
 800330e:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
 8003312:	f7ff fcfd 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8003316:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_9.setXY(310, 210);
 8003318:	9807      	ldr	r0, [sp, #28]
 800331a:	22d2      	movs	r2, #210	; 0xd2
 800331c:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 8003320:	f44f 719b 	mov.w	r1, #310	; 0x136
        colorPressed = col;
 8003324:	e9c4 66e2 	strd	r6, r6, [r4, #904]	; 0x388
 8003328:	f7ff fc8c 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_9.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 800332c:	aa16      	add	r2, sp, #88	; 0x58
 800332e:	a915      	add	r1, sp, #84	; 0x54
 8003330:	9807      	ldr	r0, [sp, #28]
 8003332:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003336:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800333a:	f00d f9ca 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800333e:	230a      	movs	r3, #10
        updateTextPosition();
 8003340:	9807      	ldr	r0, [sp, #28]
 8003342:	f8a4 33cc 	strh.w	r3, [r4, #972]	; 0x3cc
 8003346:	f7ff fce3 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800334a:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_a.setXY(250, 210);
 800334c:	9808      	ldr	r0, [sp, #32]
 800334e:	22d2      	movs	r2, #210	; 0xd2
 8003350:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
 8003354:	21fa      	movs	r1, #250	; 0xfa
        colorPressed = col;
 8003356:	e9c4 66f4 	strd	r6, r6, [r4, #976]	; 0x3d0
 800335a:	f7ff fc73 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_a.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 800335e:	aa16      	add	r2, sp, #88	; 0x58
 8003360:	a915      	add	r1, sp, #84	; 0x54
 8003362:	9808      	ldr	r0, [sp, #32]
 8003364:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 8003368:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800336c:	f00d f9b1 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8003370:	f04f 030b 	mov.w	r3, #11
        updateTextPosition();
 8003374:	9808      	ldr	r0, [sp, #32]
 8003376:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800337a:	f7ff fcc9 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800337e:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_b.setXY(310, 150);
 8003380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003382:	2296      	movs	r2, #150	; 0x96
 8003384:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
 8003388:	f44f 719b 	mov.w	r1, #310	; 0x136
        color = col;
 800338c:	f8c4 6418 	str.w	r6, [r4, #1048]	; 0x418
        colorPressed = col;
 8003390:	f8c4 641c 	str.w	r6, [r4, #1052]	; 0x41c
 8003394:	f7ff fc56 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_b.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8003398:	aa16      	add	r2, sp, #88	; 0x58
 800339a:	a915      	add	r1, sp, #84	; 0x54
 800339c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800339e:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 80033a2:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80033a6:	f00d f994 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80033aa:	230c      	movs	r3, #12
        updateTextPosition();
 80033ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ae:	f8a4 345c 	strh.w	r3, [r4, #1116]	; 0x45c
 80033b2:	f7ff fcad 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80033b6:	9b02      	ldr	r3, [sp, #8]
    buttonWithLabel_c.setXY(310, 270);
 80033b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033ba:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80033be:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
 80033c2:	f44f 719b 	mov.w	r1, #310	; 0x136
        color = col;
 80033c6:	f8c4 6460 	str.w	r6, [r4, #1120]	; 0x460
        colorPressed = col;
 80033ca:	f8c4 6464 	str.w	r6, [r4, #1124]	; 0x464
 80033ce:	f7ff fc39 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel_c.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80033d2:	aa16      	add	r2, sp, #88	; 0x58
 80033d4:	a915      	add	r1, sp, #84	; 0x54
 80033d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033d8:	f8ad 9054 	strh.w	r9, [sp, #84]	; 0x54
 80033dc:	f04f 0917 	mov.w	r9, #23
 80033e0:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80033e4:	f00d f975 	bl	80106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80033e8:	230d      	movs	r3, #13
        updateTextPosition();
 80033ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033ec:	f8a4 34a4 	strh.w	r3, [r4, #1188]	; 0x4a4
 80033f0:	f7ff fc8e 	bl	8002d10 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80033f4:	9b02      	ldr	r3, [sp, #8]
    textProgress_L_T.setXY(60, 17);
 80033f6:	ee1a 0a10 	vmov	r0, s20
 80033fa:	2211      	movs	r2, #17
 80033fc:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
 8003400:	213c      	movs	r1, #60	; 0x3c
        color = col;
 8003402:	f8c4 64a8 	str.w	r6, [r4, #1192]	; 0x4a8
        colorPressed = col;
 8003406:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 800340a:	f7ff fc1b 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress_L_T.setProgressIndicatorPosition(0, 0, 180, 37);
 800340e:	2325      	movs	r3, #37	; 0x25
 8003410:	462a      	mov	r2, r5
 8003412:	4629      	mov	r1, r5
 8003414:	ee1a 0a10 	vmov	r0, s20
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	23b4      	movs	r3, #180	; 0xb4
 800341c:	f009 ffc4 	bl	800d3a8 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress_L_T.setRange(0, 4, 4, 0);
 8003420:	2304      	movs	r3, #4
 8003422:	4629      	mov	r1, r5
 8003424:	ee1a 0a10 	vmov	r0, s20
 8003428:	461a      	mov	r2, r3
 800342a:	9500      	str	r5, [sp, #0]
 800342c:	f00a f99a 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress_L_T.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8003430:	4631      	mov	r1, r6
 8003432:	ee1a 0a10 	vmov	r0, s20
 8003436:	f009 ff41 	bl	800d2bc <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress_L_T.setNumberOfDecimals(0);
 800343a:	4629      	mov	r1, r5
 800343c:	ee1a 0a10 	vmov	r0, s20
 8003440:	f009 ff42 	bl	800d2c8 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
        : typedTextId(id)
 8003444:	4be8      	ldr	r3, [pc, #928]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    textProgress_L_T.setTypedText(touchgfx::TypedText(T_PROGRESS_TEST));
 8003446:	a916      	add	r1, sp, #88	; 0x58
 8003448:	ee1a 0a10 	vmov	r0, s20
 800344c:	9316      	str	r3, [sp, #88]	; 0x58
 800344e:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 8003452:	f009 ff58 	bl	800d306 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
    textProgress_L_T.setBackground(touchgfx::Bitmap(BITMAP_IMAGE_PROGRESS_BACKGROUND_ID));
 8003456:	a916      	add	r1, sp, #88	; 0x58
 8003458:	ee1a 0a10 	vmov	r0, s20
 800345c:	f8ad 9058 	strh.w	r9, [sp, #88]	; 0x58
 8003460:	f00a fa2d 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress_L_T.setValue(2);
 8003464:	ee1a 0a10 	vmov	r0, s20
 8003468:	2102      	movs	r1, #2
 800346a:	f009 ff57 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textProgress_L_R.setXY(60, 60);
 800346e:	223c      	movs	r2, #60	; 0x3c
 8003470:	ee1a 0a90 	vmov	r0, s21
 8003474:	4611      	mov	r1, r2
 8003476:	f7ff fbe5 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress_L_R.setProgressIndicatorPosition(0, 0, 180, 37);
 800347a:	2225      	movs	r2, #37	; 0x25
 800347c:	4629      	mov	r1, r5
 800347e:	ee1a 0a90 	vmov	r0, s21
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	23b4      	movs	r3, #180	; 0xb4
 8003486:	462a      	mov	r2, r5
 8003488:	f009 ff8e 	bl	800d3a8 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress_L_R.setRange(0, 4, 4, 0);
 800348c:	2304      	movs	r3, #4
 800348e:	4629      	mov	r1, r5
 8003490:	ee1a 0a90 	vmov	r0, s21
 8003494:	461a      	mov	r2, r3
 8003496:	9500      	str	r5, [sp, #0]
 8003498:	f00a f964 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress_L_R.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800349c:	4631      	mov	r1, r6
 800349e:	ee1a 0a90 	vmov	r0, s21
 80034a2:	f009 ff0b 	bl	800d2bc <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress_L_R.setNumberOfDecimals(0);
 80034a6:	4629      	mov	r1, r5
 80034a8:	ee1a 0a90 	vmov	r0, s21
 80034ac:	f009 ff0c 	bl	800d2c8 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
 80034b0:	4bcd      	ldr	r3, [pc, #820]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    textProgress_L_R.setTypedText(touchgfx::TypedText(T_PROGRESS_TEST));
 80034b2:	a916      	add	r1, sp, #88	; 0x58
 80034b4:	ee1a 0a90 	vmov	r0, s21
 80034b8:	9316      	str	r3, [sp, #88]	; 0x58
 80034ba:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 80034be:	f009 ff22 	bl	800d306 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
    textProgress_L_R.setBackground(touchgfx::Bitmap(BITMAP_IMAGE_PROGRESS_BACKGROUND_ID));
 80034c2:	a916      	add	r1, sp, #88	; 0x58
 80034c4:	ee1a 0a90 	vmov	r0, s21
 80034c8:	f8ad 9058 	strh.w	r9, [sp, #88]	; 0x58
 80034cc:	f00a f9f7 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress_L_R.setValue(2);
 80034d0:	ee1a 0a90 	vmov	r0, s21
 80034d4:	2102      	movs	r1, #2
 80034d6:	f009 ff21 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textAreaL.setXY(11, 17);
 80034da:	2211      	movs	r2, #17
 80034dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034de:	210b      	movs	r1, #11
 80034e0:	f7ff fbb0 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
 80034e4:	4bc0      	ldr	r3, [pc, #768]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    textAreaL.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0VLC));
 80034e6:	a916      	add	r1, sp, #88	; 0x58
 80034e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034ea:	9316      	str	r3, [sp, #88]	; 0x58
 80034ec:	230e      	movs	r3, #14
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80034ee:	f8a4 56f8 	strh.w	r5, [r4, #1784]	; 0x6f8
        this->color = color;
 80034f2:	f8c4 66f4 	str.w	r6, [r4, #1780]	; 0x6f4
 80034f6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 80034fa:	f00d f8a8 	bl	801064e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    textProgress_R_T.setXY(560, 20);
 80034fe:	4642      	mov	r2, r8
 8003500:	ee1b 0a10 	vmov	r0, s22
 8003504:	f44f 710c 	mov.w	r1, #560	; 0x230
 8003508:	f04f 0819 	mov.w	r8, #25
 800350c:	f7ff fb9a 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress_R_T.setProgressIndicatorPosition(0, 0, 180, 37);
 8003510:	2225      	movs	r2, #37	; 0x25
 8003512:	4629      	mov	r1, r5
 8003514:	ee1b 0a10 	vmov	r0, s22
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	23b4      	movs	r3, #180	; 0xb4
 800351c:	462a      	mov	r2, r5
 800351e:	f009 ff43 	bl	800d3a8 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress_R_T.setRange(0, 4, 4, 0);
 8003522:	2304      	movs	r3, #4
 8003524:	4629      	mov	r1, r5
 8003526:	ee1b 0a10 	vmov	r0, s22
 800352a:	461a      	mov	r2, r3
 800352c:	9500      	str	r5, [sp, #0]
 800352e:	f00a f919 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress_R_T.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8003532:	4631      	mov	r1, r6
 8003534:	ee1b 0a10 	vmov	r0, s22
 8003538:	f009 fec0 	bl	800d2bc <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress_R_T.setNumberOfDecimals(0);
 800353c:	4629      	mov	r1, r5
 800353e:	ee1b 0a10 	vmov	r0, s22
 8003542:	f009 fec1 	bl	800d2c8 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
 8003546:	4ba8      	ldr	r3, [pc, #672]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    textProgress_R_T.setTypedText(touchgfx::TypedText(T_PROGRESS_TEST));
 8003548:	a916      	add	r1, sp, #88	; 0x58
 800354a:	ee1b 0a10 	vmov	r0, s22
 800354e:	9316      	str	r3, [sp, #88]	; 0x58
 8003550:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 8003554:	f009 fed7 	bl	800d306 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
    textProgress_R_T.setBackground(touchgfx::Bitmap(BITMAP_IMAGE_PROGRESS_BACKGROUND_ID));
 8003558:	a916      	add	r1, sp, #88	; 0x58
 800355a:	ee1b 0a10 	vmov	r0, s22
 800355e:	f8ad 9058 	strh.w	r9, [sp, #88]	; 0x58
 8003562:	f00a f9ac 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress_R_T.setValue(2);
 8003566:	ee1b 0a10 	vmov	r0, s22
 800356a:	2102      	movs	r1, #2
 800356c:	f009 fed6 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textProgress_R_R.setXY(560, 60);
 8003570:	ee1b 0a90 	vmov	r0, s23
 8003574:	223c      	movs	r2, #60	; 0x3c
 8003576:	f44f 710c 	mov.w	r1, #560	; 0x230
 800357a:	f7ff fb63 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress_R_R.setProgressIndicatorPosition(0, 0, 180, 37);
 800357e:	2225      	movs	r2, #37	; 0x25
 8003580:	4629      	mov	r1, r5
 8003582:	ee1b 0a90 	vmov	r0, s23
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	23b4      	movs	r3, #180	; 0xb4
 800358a:	462a      	mov	r2, r5
 800358c:	f009 ff0c 	bl	800d3a8 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress_R_R.setRange(0, 4, 4, 0);
 8003590:	2304      	movs	r3, #4
 8003592:	4629      	mov	r1, r5
 8003594:	ee1b 0a90 	vmov	r0, s23
 8003598:	461a      	mov	r2, r3
 800359a:	9500      	str	r5, [sp, #0]
 800359c:	f00a f8e2 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress_R_R.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80035a0:	4631      	mov	r1, r6
 80035a2:	ee1b 0a90 	vmov	r0, s23
 80035a6:	f009 fe89 	bl	800d2bc <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress_R_R.setNumberOfDecimals(0);
 80035aa:	4629      	mov	r1, r5
 80035ac:	ee1b 0a90 	vmov	r0, s23
 80035b0:	f009 fe8a 	bl	800d2c8 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
 80035b4:	4b8c      	ldr	r3, [pc, #560]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    textProgress_R_R.setTypedText(touchgfx::TypedText(T_PROGRESS_TEST));
 80035b6:	a916      	add	r1, sp, #88	; 0x58
 80035b8:	ee1b 0a90 	vmov	r0, s23
 80035bc:	9316      	str	r3, [sp, #88]	; 0x58
 80035be:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 80035c2:	f009 fea0 	bl	800d306 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
    textProgress_R_R.setBackground(touchgfx::Bitmap(BITMAP_IMAGE_PROGRESS_BACKGROUND_ID));
 80035c6:	a916      	add	r1, sp, #88	; 0x58
 80035c8:	ee1b 0a90 	vmov	r0, s23
 80035cc:	f8ad 9058 	strh.w	r9, [sp, #88]	; 0x58
 80035d0:	f00a f975 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress_R_R.setValue(2);
 80035d4:	ee1b 0a90 	vmov	r0, s23
 80035d8:	2102      	movs	r1, #2
 80035da:	f009 fe9f 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textAreaR.setXY(748, 17);
 80035de:	2211      	movs	r2, #17
 80035e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035e2:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80035e6:	f7ff fb2d 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <_ZN12MainViewBaseC1Ev+0xa00>)
    lineProgress_G_Z.setProgressIndicatorPosition(0, 0, 180, 16);
 80035ec:	f04f 0910 	mov.w	r9, #16
    textAreaR.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QRWW));
 80035f0:	a916      	add	r1, sp, #88	; 0x58
 80035f2:	9316      	str	r3, [sp, #88]	; 0x58
 80035f4:	230f      	movs	r3, #15
 80035f6:	980e      	ldr	r0, [sp, #56]	; 0x38
        linespace = space;
 80035f8:	f8a4 5944 	strh.w	r5, [r4, #2372]	; 0x944
        this->color = color;
 80035fc:	f8c4 6940 	str.w	r6, [r4, #2368]	; 0x940
 8003600:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8003604:	f00d f823 	bl	801064e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    lineProgress_G_Z.setXY(60, 430);
 8003608:	ee18 0a10 	vmov	r0, s16
 800360c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8003610:	213c      	movs	r1, #60	; 0x3c
 8003612:	f7ff fb17 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_G_Z.setProgressIndicatorPosition(0, 0, 180, 16);
 8003616:	462a      	mov	r2, r5
 8003618:	4629      	mov	r1, r5
 800361a:	ee18 0a10 	vmov	r0, s16
 800361e:	23b4      	movs	r3, #180	; 0xb4
 8003620:	f8cd 9000 	str.w	r9, [sp]
 8003624:	f009 ffb8 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_G_Z.setRange(0, 32767);
 8003628:	462b      	mov	r3, r5
 800362a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800362e:	4629      	mov	r1, r5
 8003630:	ee18 0a10 	vmov	r0, s16
 8003634:	9500      	str	r5, [sp, #0]
 8003636:	f00a f895 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_G_Z.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 800363a:	a916      	add	r1, sp, #88	; 0x58
 800363c:	ee18 0a10 	vmov	r0, s16
 8003640:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003644:	f00a f93b 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
    lineProgress_G_Z.setPainter(lineProgress_G_ZPainter);
 800364c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800364e:	ee18 0a10 	vmov	r0, s16
 8003652:	f8a4 2a98 	strh.w	r2, [r4, #2712]	; 0xa98
        painterBlue = Color::getBlue(color);
 8003656:	f884 6a9a 	strb.w	r6, [r4, #2714]	; 0xa9a
 800365a:	f009 ff37 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_G_Z.setStart(8, 8);
 800365e:	463a      	mov	r2, r7
 8003660:	4639      	mov	r1, r7
 8003662:	ee18 0a10 	vmov	r0, s16
 8003666:	f009 ff34 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_G_Z.setEnd(172, 8);
 800366a:	463a      	mov	r2, r7
 800366c:	ee18 0a10 	vmov	r0, s16
 8003670:	21ac      	movs	r1, #172	; 0xac
 8003672:	f009 ff10 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_G_Z.setLineWidth(8);
 8003676:	4639      	mov	r1, r7
 8003678:	ee18 0a10 	vmov	r0, s16
 800367c:	f009 ff30 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_G_Z.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8003680:	ee18 0a10 	vmov	r0, s16
 8003684:	2101      	movs	r1, #1
 8003686:	f009 ff36 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_G_Z.setValue(0);
 800368a:	4629      	mov	r1, r5
 800368c:	ee18 0a10 	vmov	r0, s16
 8003690:	f009 ff47 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_G_Y.setXY(60, 390);
 8003694:	ee18 0a90 	vmov	r0, s17
 8003698:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800369c:	213c      	movs	r1, #60	; 0x3c
 800369e:	f7ff fad1 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_G_Y.setProgressIndicatorPosition(0, 0, 180, 16);
 80036a2:	462a      	mov	r2, r5
 80036a4:	4629      	mov	r1, r5
 80036a6:	ee18 0a90 	vmov	r0, s17
 80036aa:	23b4      	movs	r3, #180	; 0xb4
 80036ac:	f8cd 9000 	str.w	r9, [sp]
 80036b0:	f009 ff72 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_G_Y.setRange(0, 32767);
 80036b4:	462b      	mov	r3, r5
 80036b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036ba:	4629      	mov	r1, r5
 80036bc:	ee18 0a90 	vmov	r0, s17
 80036c0:	9500      	str	r5, [sp, #0]
 80036c2:	f00a f84f 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_G_Y.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 80036c6:	a916      	add	r1, sp, #88	; 0x58
 80036c8:	ee18 0a90 	vmov	r0, s17
 80036cc:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80036d0:	f00a f8f5 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
        painterRed = Color::getRed(color);
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
    lineProgress_G_Y.setPainter(lineProgress_G_YPainter);
 80036d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80036da:	ee18 0a90 	vmov	r0, s17
 80036de:	f8a4 2be8 	strh.w	r2, [r4, #3048]	; 0xbe8
        painterBlue = Color::getBlue(color);
 80036e2:	f884 2bea 	strb.w	r2, [r4, #3050]	; 0xbea
 80036e6:	f009 fef1 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_G_Y.setStart(8, 8);
 80036ea:	463a      	mov	r2, r7
 80036ec:	4639      	mov	r1, r7
 80036ee:	ee18 0a90 	vmov	r0, s17
 80036f2:	f009 feee 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_G_Y.setEnd(172, 8);
 80036f6:	463a      	mov	r2, r7
 80036f8:	ee18 0a90 	vmov	r0, s17
 80036fc:	21ac      	movs	r1, #172	; 0xac
 80036fe:	f009 feca 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_G_Y.setLineWidth(8);
 8003702:	4639      	mov	r1, r7
 8003704:	ee18 0a90 	vmov	r0, s17
 8003708:	f009 feea 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_G_Y.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800370c:	ee18 0a90 	vmov	r0, s17
 8003710:	2101      	movs	r1, #1
 8003712:	f009 fef0 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_G_Y.setValue(0);
 8003716:	4629      	mov	r1, r5
 8003718:	ee18 0a90 	vmov	r0, s17
 800371c:	f009 ff01 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_G_X.setXY(60, 352);
 8003720:	ee19 0a10 	vmov	r0, s18
 8003724:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003728:	213c      	movs	r1, #60	; 0x3c
 800372a:	f7ff fa8b 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_G_X.setProgressIndicatorPosition(0, 0, 180, 16);
 800372e:	462a      	mov	r2, r5
 8003730:	4629      	mov	r1, r5
 8003732:	ee19 0a10 	vmov	r0, s18
 8003736:	23b4      	movs	r3, #180	; 0xb4
 8003738:	f8cd 9000 	str.w	r9, [sp]
 800373c:	f009 ff2c 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_G_X.setRange(0, 32767);
 8003740:	462b      	mov	r3, r5
 8003742:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003746:	4629      	mov	r1, r5
 8003748:	ee19 0a10 	vmov	r0, s18
 800374c:	9500      	str	r5, [sp, #0]
 800374e:	f00a f809 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_G_X.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 8003752:	a916      	add	r1, sp, #88	; 0x58
 8003754:	ee19 0a10 	vmov	r0, s18
 8003758:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 800375c:	f00a f8af 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
        painterRed = Color::getRed(color);
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
    lineProgress_G_X.setPainter(lineProgress_G_XPainter);
 8003764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003766:	ee19 0a10 	vmov	r0, s18
 800376a:	f8a4 2d38 	strh.w	r2, [r4, #3384]	; 0xd38
        painterBlue = Color::getBlue(color);
 800376e:	f884 2d3a 	strb.w	r2, [r4, #3386]	; 0xd3a
 8003772:	f009 feab 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_G_X.setStart(8, 8);
 8003776:	463a      	mov	r2, r7
 8003778:	4639      	mov	r1, r7
 800377a:	ee19 0a10 	vmov	r0, s18
 800377e:	f009 fea8 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_G_X.setEnd(172, 8);
 8003782:	463a      	mov	r2, r7
 8003784:	ee19 0a10 	vmov	r0, s18
 8003788:	21ac      	movs	r1, #172	; 0xac
 800378a:	f009 fe84 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_G_X.setLineWidth(8);
 800378e:	4639      	mov	r1, r7
 8003790:	ee19 0a10 	vmov	r0, s18
 8003794:	f009 fea4 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_G_X.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8003798:	ee19 0a10 	vmov	r0, s18
 800379c:	2101      	movs	r1, #1
 800379e:	f009 feaa 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_G_X.setValue(0);
 80037a2:	4629      	mov	r1, r5
 80037a4:	ee19 0a10 	vmov	r0, s18
 80037a8:	f009 febb 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_Z.setXY(560, 429);
 80037ac:	ee19 0a90 	vmov	r0, s19
 80037b0:	f240 12ad 	movw	r2, #429	; 0x1ad
 80037b4:	f44f 710c 	mov.w	r1, #560	; 0x230
 80037b8:	f7ff fa44 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_A_Z.setProgressIndicatorPosition(0, 0, 180, 16);
 80037bc:	462a      	mov	r2, r5
 80037be:	4629      	mov	r1, r5
 80037c0:	ee19 0a90 	vmov	r0, s19
 80037c4:	23b4      	movs	r3, #180	; 0xb4
 80037c6:	f8cd 9000 	str.w	r9, [sp]
 80037ca:	f009 fee5 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_A_Z.setRange(0, 32767);
 80037ce:	462b      	mov	r3, r5
 80037d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037d4:	4629      	mov	r1, r5
 80037d6:	ee19 0a90 	vmov	r0, s19
 80037da:	9500      	str	r5, [sp, #0]
 80037dc:	f009 ffc2 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_A_Z.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 80037e0:	a916      	add	r1, sp, #88	; 0x58
 80037e2:	ee19 0a90 	vmov	r0, s19
 80037e6:	e001      	b.n	80037ec <_ZN12MainViewBaseC1Ev+0xa04>
 80037e8:	08021328 	.word	0x08021328
 80037ec:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80037f0:	f00a f865 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
        painterRed = Color::getRed(color);
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
    lineProgress_A_Z.setPainter(lineProgress_A_ZPainter);
 80037f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80037fa:	ee19 0a90 	vmov	r0, s19
 80037fe:	f8a4 2e88 	strh.w	r2, [r4, #3720]	; 0xe88
        painterBlue = Color::getBlue(color);
 8003802:	f884 2e8a 	strb.w	r2, [r4, #3722]	; 0xe8a
 8003806:	f009 fe61 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_A_Z.setStart(8, 8);
 800380a:	463a      	mov	r2, r7
 800380c:	4639      	mov	r1, r7
 800380e:	ee19 0a90 	vmov	r0, s19
 8003812:	f009 fe5e 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_A_Z.setEnd(172, 8);
 8003816:	463a      	mov	r2, r7
 8003818:	ee19 0a90 	vmov	r0, s19
 800381c:	21ac      	movs	r1, #172	; 0xac
 800381e:	f009 fe3a 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_A_Z.setLineWidth(8);
 8003822:	4639      	mov	r1, r7
 8003824:	ee19 0a90 	vmov	r0, s19
 8003828:	f009 fe5a 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_A_Z.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800382c:	ee19 0a90 	vmov	r0, s19
 8003830:	2101      	movs	r1, #1
 8003832:	f009 fe60 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_A_Z.setValue(0);
 8003836:	4629      	mov	r1, r5
 8003838:	ee19 0a90 	vmov	r0, s19
 800383c:	f009 fe71 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_Y.setXY(560, 389);
 8003840:	4650      	mov	r0, sl
 8003842:	f240 1285 	movw	r2, #389	; 0x185
 8003846:	f44f 710c 	mov.w	r1, #560	; 0x230
 800384a:	f7ff f9fb 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_A_Y.setProgressIndicatorPosition(0, 0, 180, 16);
 800384e:	462a      	mov	r2, r5
 8003850:	4629      	mov	r1, r5
 8003852:	4650      	mov	r0, sl
 8003854:	23b4      	movs	r3, #180	; 0xb4
 8003856:	f8cd 9000 	str.w	r9, [sp]
 800385a:	f009 fe9d 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_A_Y.setRange(0, 32767);
 800385e:	462b      	mov	r3, r5
 8003860:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003864:	4629      	mov	r1, r5
 8003866:	4650      	mov	r0, sl
 8003868:	9500      	str	r5, [sp, #0]
 800386a:	f009 ff7b 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_A_Y.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 800386e:	a916      	add	r1, sp, #88	; 0x58
 8003870:	4650      	mov	r0, sl
 8003872:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 8003876:	f00a f822 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
        painterRed = Color::getRed(color);
 800387a:	f04f 32ff 	mov.w	r2, #4294967295
    lineProgress_A_Y.setPainter(lineProgress_A_YPainter);
 800387e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003880:	4650      	mov	r0, sl
 8003882:	f8a4 2fd8 	strh.w	r2, [r4, #4056]	; 0xfd8
        painterBlue = Color::getBlue(color);
 8003886:	f884 2fda 	strb.w	r2, [r4, #4058]	; 0xfda
 800388a:	f009 fe1f 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_A_Y.setStart(8, 8);
 800388e:	463a      	mov	r2, r7
 8003890:	4639      	mov	r1, r7
 8003892:	4650      	mov	r0, sl
 8003894:	f009 fe1d 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_A_Y.setEnd(172, 8);
 8003898:	463a      	mov	r2, r7
 800389a:	4650      	mov	r0, sl
 800389c:	21ac      	movs	r1, #172	; 0xac
 800389e:	f009 fdfa 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_A_Y.setLineWidth(8);
 80038a2:	4639      	mov	r1, r7
 80038a4:	4650      	mov	r0, sl
 80038a6:	f009 fe1b 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_A_Y.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80038aa:	4650      	mov	r0, sl
 80038ac:	2101      	movs	r1, #1
 80038ae:	f009 fe22 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_A_Y.setValue(0);
 80038b2:	4629      	mov	r1, r5
 80038b4:	4650      	mov	r0, sl
 80038b6:	f009 fe34 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_X.setXY(560, 352);
 80038ba:	4658      	mov	r0, fp
 80038bc:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80038c0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80038c4:	f7ff f9be 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress_A_X.setProgressIndicatorPosition(0, 0, 180, 16);
 80038c8:	462a      	mov	r2, r5
 80038ca:	4629      	mov	r1, r5
 80038cc:	4658      	mov	r0, fp
 80038ce:	23b4      	movs	r3, #180	; 0xb4
 80038d0:	f8cd 9000 	str.w	r9, [sp]
 80038d4:	f009 fe60 	bl	800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress_A_X.setRange(0, 32767);
 80038d8:	462b      	mov	r3, r5
 80038da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80038de:	4629      	mov	r1, r5
 80038e0:	4658      	mov	r0, fp
 80038e2:	9500      	str	r5, [sp, #0]
 80038e4:	f009 ff3e 	bl	800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    lineProgress_A_X.setBackground(touchgfx::Bitmap(BITMAP_LINE_PROGRESS_BACKGROUND_ID));
 80038e8:	a916      	add	r1, sp, #88	; 0x58
 80038ea:	4658      	mov	r0, fp
 80038ec:	f8ad 8058 	strh.w	r8, [sp, #88]	; 0x58
 80038f0:	f009 ffe5 	bl	800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
        painterRed = Color::getRed(color);
 80038f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
        painterBlue = Color::getBlue(color);
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
    lineProgress_A_X.setPainter(lineProgress_A_XPainter);
 8003900:	4658      	mov	r0, fp
        painterRed = Color::getRed(color);
 8003902:	52e2      	strh	r2, [r4, r3]
        painterBlue = Color::getBlue(color);
 8003904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003906:	7591      	strb	r1, [r2, #22]
 8003908:	4611      	mov	r1, r2
 800390a:	f009 fddf 	bl	800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress_A_X.setStart(8, 8);
 800390e:	463a      	mov	r2, r7
 8003910:	4639      	mov	r1, r7
 8003912:	4658      	mov	r0, fp
 8003914:	f009 fddd 	bl	800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress_A_X.setEnd(172, 8);
 8003918:	463a      	mov	r2, r7
 800391a:	4658      	mov	r0, fp
 800391c:	21ac      	movs	r1, #172	; 0xac
 800391e:	f009 fdba 	bl	800d496 <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress_A_X.setLineWidth(8);
 8003922:	4639      	mov	r1, r7
 8003924:	4658      	mov	r0, fp
 8003926:	f009 fddb 	bl	800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress_A_X.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800392a:	4658      	mov	r0, fp
 800392c:	2101      	movs	r1, #1
 800392e:	f009 fde2 	bl	800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress_A_X.setValue(0);
 8003932:	4629      	mov	r1, r5
 8003934:	4658      	mov	r0, fp
 8003936:	f009 fdf4 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    textArea1.setXY(306, 0);
 800393a:	462a      	mov	r2, r5
 800393c:	ee1c 0a90 	vmov	r0, s25
 8003940:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003944:	f7ff f97e 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
        linespace = space;
 8003948:	ee1c 2a90 	vmov	r2, s25
        this->color = color;
 800394c:	f241 135c 	movw	r3, #4444	; 0x115c
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CA7F));
 8003950:	a916      	add	r1, sp, #88	; 0x58
 8003952:	ee1c 0a90 	vmov	r0, s25
 8003956:	f8ad 905c 	strh.w	r9, [sp, #92]	; 0x5c
 800395a:	50e6      	str	r6, [r4, r3]
 800395c:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <_ZN12MainViewBaseC1Ev+0xc94>)
        linespace = space;
 800395e:	8695      	strh	r5, [r2, #52]	; 0x34
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003960:	1d25      	adds	r5, r4, #4
 8003962:	9316      	str	r3, [sp, #88]	; 0x58
 8003964:	f00c fe73 	bl	801064e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003968:	ee1d 1a10 	vmov	r1, s26
 800396c:	4628      	mov	r0, r5
 800396e:	f00a f879 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003972:	ee1c 1a10 	vmov	r1, s24
 8003976:	4628      	mov	r0, r5
 8003978:	f00a f874 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800397c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800397e:	4628      	mov	r0, r5
 8003980:	f00a f870 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003984:	ee1d 1a90 	vmov	r1, s27
 8003988:	4628      	mov	r0, r5
 800398a:	f00a f86b 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800398e:	ee1e 1a10 	vmov	r1, s28
 8003992:	4628      	mov	r0, r5
 8003994:	f00a f866 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003998:	ee1e 1a90 	vmov	r1, s29
 800399c:	4628      	mov	r0, r5
 800399e:	f00a f861 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039a2:	ee1f 1a10 	vmov	r1, s30
 80039a6:	4628      	mov	r0, r5
 80039a8:	f00a f85c 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039ac:	ee1f 1a90 	vmov	r1, s31
 80039b0:	4628      	mov	r0, r5
 80039b2:	f00a f857 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039b6:	9903      	ldr	r1, [sp, #12]
 80039b8:	4628      	mov	r0, r5
 80039ba:	f00a f853 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039be:	9904      	ldr	r1, [sp, #16]
 80039c0:	4628      	mov	r0, r5
 80039c2:	f00a f84f 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039c6:	9905      	ldr	r1, [sp, #20]
 80039c8:	4628      	mov	r0, r5
 80039ca:	f00a f84b 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039ce:	9906      	ldr	r1, [sp, #24]
 80039d0:	4628      	mov	r0, r5
 80039d2:	f00a f847 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039d6:	9907      	ldr	r1, [sp, #28]
 80039d8:	4628      	mov	r0, r5
 80039da:	f00a f843 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039de:	9908      	ldr	r1, [sp, #32]
 80039e0:	4628      	mov	r0, r5
 80039e2:	f00a f83f 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039e8:	4628      	mov	r0, r5
 80039ea:	f00a f83b 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80039f0:	4628      	mov	r0, r5
 80039f2:	f00a f837 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80039f6:	ee1a 1a10 	vmov	r1, s20
 80039fa:	4628      	mov	r0, r5
 80039fc:	f00a f832 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a00:	ee1a 1a90 	vmov	r1, s21
 8003a04:	4628      	mov	r0, r5
 8003a06:	f00a f82d 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f00a f829 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a12:	ee1b 1a10 	vmov	r1, s22
 8003a16:	4628      	mov	r0, r5
 8003a18:	f00a f824 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a1c:	ee1b 1a90 	vmov	r1, s23
 8003a20:	4628      	mov	r0, r5
 8003a22:	f00a f81f 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f00a f81b 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a2e:	ee18 1a10 	vmov	r1, s16
 8003a32:	4628      	mov	r0, r5
 8003a34:	f00a f816 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a38:	ee18 1a90 	vmov	r1, s17
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f00a f811 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a42:	ee19 1a10 	vmov	r1, s18
 8003a46:	4628      	mov	r0, r5
 8003a48:	f00a f80c 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a4c:	ee19 1a90 	vmov	r1, s19
 8003a50:	4628      	mov	r0, r5
 8003a52:	f00a f807 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a56:	4651      	mov	r1, sl
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f00a f803 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a5e:	4659      	mov	r1, fp
 8003a60:	4628      	mov	r0, r5
 8003a62:	f009 ffff 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003a66:	4628      	mov	r0, r5
 8003a68:	ee1c 1a90 	vmov	r1, s25
 8003a6c:	f009 fffa 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003a70:	4620      	mov	r0, r4
 8003a72:	b019      	add	sp, #100	; 0x64
 8003a74:	ecbd 8b10 	vpop	{d8-d15}
 8003a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7c:	08021328 	.word	0x08021328

08003a80 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_RobotoCondensed_Regular_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_30_4bpp();

touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_30_4bpp()
{
    static touchgfx::GeneratedFont RobotoCondensed_Regular_30_4bpp(glyphs_RobotoCondensed_Regular_30_4bpp, 40, 30, 2, 4, 1, 0, 1, unicodes_RobotoCondensed_Regular_30_4bpp, kerning_RobotoCondensed_Regular_30_4bpp, 63, 0, 0, 0);
 8003a80:	4770      	bx	lr
	...

08003a84 <_Z39getFont_RobotoCondensed_Regular_30_4bppv>:
{
 8003a84:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont RobotoCondensed_Regular_30_4bpp(glyphs_RobotoCondensed_Regular_30_4bpp, 40, 30, 2, 4, 1, 0, 1, unicodes_RobotoCondensed_Regular_30_4bpp, kerning_RobotoCondensed_Regular_30_4bpp, 63, 0, 0, 0);
 8003a86:	4d16      	ldr	r5, [pc, #88]	; (8003ae0 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x5c>)
{
 8003a88:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont RobotoCondensed_Regular_30_4bpp(glyphs_RobotoCondensed_Regular_30_4bpp, 40, 30, 2, 4, 1, 0, 1, unicodes_RobotoCondensed_Regular_30_4bpp, kerning_RobotoCondensed_Regular_30_4bpp, 63, 0, 0, 0);
 8003a8a:	782c      	ldrb	r4, [r5, #0]
 8003a8c:	f3bf 8f5b 	dmb	ish
 8003a90:	f014 0401 	ands.w	r4, r4, #1
 8003a94:	d120      	bne.n	8003ad8 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x54>
 8003a96:	4628      	mov	r0, r5
 8003a98:	f01b fe69 	bl	801f76e <__cxa_guard_acquire>
 8003a9c:	b1e0      	cbz	r0, 8003ad8 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x54>
 8003a9e:	233f      	movs	r3, #63	; 0x3f
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	4910      	ldr	r1, [pc, #64]	; (8003ae4 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x60>)
 8003aa4:	9307      	str	r3, [sp, #28]
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x64>)
 8003aa8:	4810      	ldr	r0, [pc, #64]	; (8003aec <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x68>)
 8003aaa:	9306      	str	r3, [sp, #24]
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x6c>)
 8003aae:	9408      	str	r4, [sp, #32]
 8003ab0:	9305      	str	r3, [sp, #20]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	2302      	movs	r3, #2
 8003abc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003ac0:	e9cd 3200 	strd	r3, r2, [sp]
 8003ac4:	231e      	movs	r3, #30
 8003ac6:	2228      	movs	r2, #40	; 0x28
 8003ac8:	f7fe ff64 	bl	8002994 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003acc:	4628      	mov	r0, r5
 8003ace:	f01b fe5a 	bl	801f786 <__cxa_guard_release>
 8003ad2:	4808      	ldr	r0, [pc, #32]	; (8003af4 <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x70>)
 8003ad4:	f01b fe96 	bl	801f804 <atexit>
    return RobotoCondensed_Regular_30_4bpp;
}
 8003ad8:	4804      	ldr	r0, [pc, #16]	; (8003aec <_Z39getFont_RobotoCondensed_Regular_30_4bppv+0x68>)
 8003ada:	b00d      	add	sp, #52	; 0x34
 8003adc:	bd30      	pop	{r4, r5, pc}
 8003ade:	bf00      	nop
 8003ae0:	2400511c 	.word	0x2400511c
 8003ae4:	080263ac 	.word	0x080263ac
 8003ae8:	080265dc 	.word	0x080265dc
 8003aec:	24005120 	.word	0x24005120
 8003af0:	08026670 	.word	0x08026670
 8003af4:	08003a81 	.word	0x08003a81

08003af8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003af8:	2000      	movs	r0, #0
 8003afa:	4770      	bx	lr

08003afc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr

08003b00 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b00:	b40e      	push	{r1, r2, r3}
 8003b02:	b503      	push	{r0, r1, lr}
 8003b04:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b06:	2100      	movs	r1, #0
{
 8003b08:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003b0c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b0e:	f00f fd01 	bl	8013514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b12:	b002      	add	sp, #8
 8003b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b18:	b003      	add	sp, #12
 8003b1a:	4770      	bx	lr

08003b1c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b1c:	b40c      	push	{r2, r3}
 8003b1e:	b507      	push	{r0, r1, r2, lr}
 8003b20:	ab04      	add	r3, sp, #16
 8003b22:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003b26:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003b28:	f00f fcf4 	bl	8013514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b2c:	b003      	add	sp, #12
 8003b2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b32:	b002      	add	sp, #8
 8003b34:	4770      	bx	lr
	...

08003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003b38:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003b3e:	b373      	cbz	r3, 8003b9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003b40:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003b42:	b92b      	cbnz	r3, 8003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003b46:	21c0      	movs	r1, #192	; 0xc0
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003b4a:	4819      	ldr	r0, [pc, #100]	; (8003bb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003b4c:	f01b fe3c 	bl	801f7c8 <__assert_func>
            return buffer[pos];
 8003b50:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003b52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003b56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003b58:	b30b      	cbz	r3, 8003b9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003b5a:	f011 f893 	bl	8014c84 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003b5e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d803      	bhi.n	8003b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003b64:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003b66:	21c5      	movs	r1, #197	; 0xc5
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003b6a:	e7ee      	b.n	8003b4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003b6c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003b6e:	f640 103f 	movw	r0, #2367	; 0x93f
 8003b72:	1c53      	adds	r3, r2, #1
 8003b74:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	4619      	mov	r1, r3
 8003b7a:	bf88      	it	hi
 8003b7c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b80:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003b84:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d109      	bne.n	8003b9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003b8a:	2b0a      	cmp	r3, #10
 8003b8c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003b90:	bf28      	it	cs
 8003b92:	2300      	movcs	r3, #0
            return buffer[pos];
 8003b94:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003b9a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003b9c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b9e:	4620      	mov	r0, r4
}
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003ba4:	f010 bf52 	b.w	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003ba8:	0802199c 	.word	0x0802199c
 8003bac:	080219a5 	.word	0x080219a5
 8003bb0:	08021a50 	.word	0x08021a50
 8003bb4:	08021aa8 	.word	0x08021aa8
 8003bb8:	08021ab6 	.word	0x08021ab6

08003bbc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003bbc:	f010 befe 	b.w	80149bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003bc0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	ac02      	add	r4, sp, #8
 8003bc6:	e884 0006 	stmia.w	r4, {r1, r2}
 8003bca:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003bcc:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003bce:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003bd0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	9b08      	ldr	r3, [sp, #32]
 8003bda:	f00e f98b 	bl	8011ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003bde:	b006      	add	sp, #24
 8003be0:	bd10      	pop	{r4, pc}
	...

08003be4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003be4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003be6:	bb18      	cbnz	r0, 8003c30 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003bea:	4813      	ldr	r0, [pc, #76]	; (8003c38 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4913      	ldr	r1, [pc, #76]	; (8003c3c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003bf0:	b1b3      	cbz	r3, 8003c20 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003bf2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003bf4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003bf6:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003bf8:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003bfa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	441a      	add	r2, r3
 8003c00:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003c08:	f000 f838 	bl	8003c7c <_ZN17TypedTextDatabase8getFontsEv>
 8003c0c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003c0e:	f000 f833 	bl	8003c78 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003c14:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003c18:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003c1c:	8018      	strh	r0, [r3, #0]
    }
}
 8003c1e:	e007      	b.n	8003c30 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003c22:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003c26:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003c2a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	d1e8      	bne.n	8003c02 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003c30:	bd38      	pop	{r3, r4, r5, pc}
 8003c32:	bf00      	nop
 8003c34:	24005148 	.word	0x24005148
 8003c38:	2400514c 	.word	0x2400514c
 8003c3c:	24005150 	.word	0x24005150
 8003c40:	24005154 	.word	0x24005154
 8003c44:	2400ea60 	.word	0x2400ea60
 8003c48:	2400ea68 	.word	0x2400ea68
 8003c4c:	2400ea64 	.word	0x2400ea64
 8003c50:	914554d8 	.word	0x914554d8
 8003c54:	91455494 	.word	0x91455494
 8003c58:	914555e4 	.word	0x914555e4

08003c5c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	24005150 	.word	0x24005150
 8003c74:	2400514c 	.word	0x2400514c

08003c78 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003c78:	2011      	movs	r0, #17
 8003c7a:	4770      	bx	lr

08003c7c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c7c:	4800      	ldr	r0, [pc, #0]	; (8003c80 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c7e:	4770      	bx	lr
 8003c80:	24005158 	.word	0x24005158

08003c84 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 0:
        touchgfx_fonts[0] = &(getFont_RobotoCondensed_Regular_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c84:	b508      	push	{r3, lr}
    &(getFont_RobotoCondensed_Regular_30_4bpp())
 8003c86:	f7ff fefd 	bl	8003a84 <_Z39getFont_RobotoCondensed_Regular_30_4bppv>
};
 8003c8a:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <_GLOBAL__sub_I_touchgfx_fonts+0xc>)
 8003c8c:	6018      	str	r0, [r3, #0]
} // namespace TypedTextDatabase
 8003c8e:	bd08      	pop	{r3, pc}
 8003c90:	24005158 	.word	0x24005158

08003c94 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003c94:	4770      	bx	lr

08003c96 <_ZN19FrontendApplicationD0Ev>:
 8003c96:	b510      	push	{r4, lr}
 8003c98:	4604      	mov	r4, r0
 8003c9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003c9e:	f01b fd64 	bl	801f76a <_ZdlPvj>
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bd10      	pop	{r4, pc}

08003ca6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	4604      	mov	r4, r0
    {
        model.tick();
 8003caa:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8003cae:	f000 f812 	bl	8003cd6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003cb2:	4620      	mov	r0, r4
    }
 8003cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003cb8:	f00e bc7a 	b.w	80125b0 <_ZN8touchgfx11Application15handleTickEventEv>

08003cbc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003cc0:	f7fe fd42 	bl	8002748 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003cc4:	4b01      	ldr	r3, [pc, #4]	; (8003ccc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{
}
 8003cc6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003cc8:	6023      	str	r3, [r4, #0]
}
 8003cca:	bd10      	pop	{r4, pc}
 8003ccc:	08021b90 	.word	0x08021b90

08003cd0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	6002      	str	r2, [r0, #0]
{
}
 8003cd4:	4770      	bx	lr

08003cd6 <_ZN5Model4tickEv>:

void Model::tick()
{
}
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8003cd8:	4770      	bx	lr

08003cda <_ZThn4_N13MainPresenterD1Ev>:
 8003cda:	3804      	subs	r0, #4
 8003cdc:	4770      	bx	lr

08003cde <_ZN13MainPresenter10deactivateEv>:
{
}

void MainPresenter::activate()
{
}
 8003cde:	4770      	bx	lr

08003ce0 <_ZN13MainPresenterD0Ev>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	f01b fd40 	bl	801f76a <_ZdlPvj>
 8003cea:	4620      	mov	r0, r4
 8003cec:	bd10      	pop	{r4, pc}

08003cee <_ZThn4_N13MainPresenterD0Ev>:
 8003cee:	f1a0 0004 	sub.w	r0, r0, #4
 8003cf2:	e7f5      	b.n	8003ce0 <_ZN13MainPresenterD0Ev>

08003cf4 <_ZN13MainPresenterC1ER8MainView>:
    ModelListener() : model(0) {}
 8003cf4:	2200      	movs	r2, #0
    : view(v)
 8003cf6:	60c1      	str	r1, [r0, #12]
 8003cf8:	6082      	str	r2, [r0, #8]
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <_ZN13MainPresenterC1ER8MainView+0x18>)
MainPresenter::MainPresenter(MainView& v)
 8003cfc:	b510      	push	{r4, lr}
    : view(v)
 8003cfe:	f102 0408 	add.w	r4, r2, #8
 8003d02:	3220      	adds	r2, #32
 8003d04:	6004      	str	r4, [r0, #0]
 8003d06:	6042      	str	r2, [r0, #4]
}
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08021bcc 	.word	0x08021bcc

08003d10 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8003d10:	4770      	bx	lr

08003d12 <_ZN8MainView14tearDownScreenEv>:
}

void MainView::tearDownScreen()
{

}
 8003d12:	4770      	bx	lr

08003d14 <_ZN8MainView11setupScreenEv>:
    lineProgress_G_X.getRange(lineProgressMin, lineProgressMax);
 8003d14:	f500 4280 	add.w	r2, r0, #16384	; 0x4000
{
 8003d18:	b513      	push	{r0, r1, r4, lr}
    lineProgress_G_X.getRange(lineProgressMin, lineProgressMax);
 8003d1a:	327c      	adds	r2, #124	; 0x7c
{
 8003d1c:	4604      	mov	r4, r0
    lineProgress_G_X.getRange(lineProgressMin, lineProgressMax);
 8003d1e:	f500 4181 	add.w	r1, r0, #16512	; 0x4080
 8003d22:	f600 30ec 	addw	r0, r0, #3052	; 0xbec
 8003d26:	e9cd 1200 	strd	r1, r2, [sp]
 8003d2a:	f009 fc9b 	bl	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>
    lineProgress_G_Y.getRange(lineProgressMin, lineProgressMax);
 8003d2e:	f604 209c 	addw	r0, r4, #2716	; 0xa9c
 8003d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d36:	f009 fc95 	bl	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>
    lineProgress_G_Z.getRange(lineProgressMin, lineProgressMax);
 8003d3a:	f604 104c 	addw	r0, r4, #2380	; 0x94c
 8003d3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d42:	f009 fc8f 	bl	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>
    lineProgress_A_X.getRange(lineProgressMin, lineProgressMax);
 8003d46:	f604 70dc 	addw	r0, r4, #4060	; 0xfdc
 8003d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d4e:	f009 fc89 	bl	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>
    lineProgress_A_Y.getRange(lineProgressMin, lineProgressMax);
 8003d52:	f604 608c 	addw	r0, r4, #3724	; 0xe8c
 8003d56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d5a:	f009 fc83 	bl	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>
    lineProgress_A_Z.getRange(lineProgressMin, lineProgressMax);
 8003d5e:	f604 503c 	addw	r0, r4, #3388	; 0xd3c
 8003d62:	e9dd 1200 	ldrd	r1, r2, [sp]
}
 8003d66:	b002      	add	sp, #8
 8003d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lineProgress_A_Z.getRange(lineProgressMin, lineProgressMax);
 8003d6c:	f009 bc7a 	b.w	800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>

08003d70 <_ZN8MainViewD0Ev>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
 8003d74:	f244 0194 	movw	r1, #16532	; 0x4094
 8003d78:	f01b fcf7 	bl	801f76a <_ZdlPvj>
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	bd10      	pop	{r4, pc}

08003d80 <_ZN8MainViewC1Ev>:
MainView::MainView()
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	f7ff f830 	bl	8002de8 <_ZN12MainViewBaseC1Ev>
 8003d88:	4b01      	ldr	r3, [pc, #4]	; (8003d90 <_ZN8MainViewC1Ev+0x10>)
}
 8003d8a:	4620      	mov	r0, r4
MainView::MainView()
 8003d8c:	6023      	str	r3, [r4, #0]
}
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	08021bfc 	.word	0x08021bfc

08003d94 <_ZN8MainView14updateProgressEt>:

void MainView::updateProgress(uint16_t tick)
{
    //boxProgress.setValue(tick % (boxProgressMax + 1));
    textProgress_L_T.setValue(speed_L_T);
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <_ZN8MainView14updateProgressEt+0x80>)
{
 8003d96:	b510      	push	{r4, lr}
    textProgress_L_T.setValue(speed_L_T);
 8003d98:	6819      	ldr	r1, [r3, #0]
{
 8003d9a:	4604      	mov	r4, r0
    textProgress_L_T.setValue(speed_L_T);
 8003d9c:	f200 40b4 	addw	r0, r0, #1204	; 0x4b4
 8003da0:	f009 fabc 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textProgress_R_T.setValue(speed_R_T);
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <_ZN8MainView14updateProgressEt+0x84>)
 8003da6:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	f009 fab6 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textProgress_L_R.setValue(speed_L_R);
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <_ZN8MainView14updateProgressEt+0x88>)
 8003db2:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	f009 fab0 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    textProgress_R_R.setValue(speed_R_R);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <_ZN8MainView14updateProgressEt+0x8c>)
 8003dbe:	f604 0008 	addw	r0, r4, #2056	; 0x808
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	f009 faaa 	bl	800d31c <_ZN8touchgfx12TextProgress8setValueEi>
    //imageProgress1.setValue(tick % (imageProgress1Max + 1));
    //imageProgress2.setValue(tick % (imageProgress2Max + 1));
    //circleProgress.setValue(tick % (circleProgressMax + 1));
    lineProgress_G_X.setValue(G_X);
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <_ZN8MainView14updateProgressEt+0x90>)
 8003dca:	f604 30ec 	addw	r0, r4, #3052	; 0xbec
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	f009 fba7 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_G_Y.setValue(G_Y);
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <_ZN8MainView14updateProgressEt+0x94>)
 8003dd6:	f604 209c 	addw	r0, r4, #2716	; 0xa9c
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	f009 fba1 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_G_Z.setValue(G_Z);
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <_ZN8MainView14updateProgressEt+0x98>)
 8003de2:	f604 104c 	addw	r0, r4, #2380	; 0x94c
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	f009 fb9b 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_X.setValue(A_X);
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <_ZN8MainView14updateProgressEt+0x9c>)
 8003dee:	f604 70dc 	addw	r0, r4, #4060	; 0xfdc
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	f009 fb95 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_Y.setValue(A_Y);
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <_ZN8MainView14updateProgressEt+0xa0>)
 8003dfa:	f604 608c 	addw	r0, r4, #3724	; 0xe8c
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	f009 fb8f 	bl	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
    lineProgress_A_Z.setValue(A_Z);
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <_ZN8MainView14updateProgressEt+0xa4>)
 8003e06:	f604 503c 	addw	r0, r4, #3388	; 0xd3c
 8003e0a:	6819      	ldr	r1, [r3, #0]
    //lineProgress_G_Y.setValue(20000);
    //tiltedLineProgress_L_T.setValue(tick % (tiltedLineProgressMax + 1));
}
 8003e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lineProgress_A_Z.setValue(A_Z);
 8003e10:	f009 bb87 	b.w	800d522 <_ZN8touchgfx12LineProgress8setValueEi>
 8003e14:	2400ecb0 	.word	0x2400ecb0
 8003e18:	2400ee4c 	.word	0x2400ee4c
 8003e1c:	2400ee50 	.word	0x2400ee50
 8003e20:	2400ee48 	.word	0x2400ee48
 8003e24:	24000010 	.word	0x24000010
 8003e28:	24000014 	.word	0x24000014
 8003e2c:	24000018 	.word	0x24000018
 8003e30:	24000004 	.word	0x24000004
 8003e34:	24000008 	.word	0x24000008
 8003e38:	2400000c 	.word	0x2400000c

08003e3c <_ZN8MainView15handleTickEventEv>:
}

void MainView::handleTickEvent()
{
    //tickCounter++;
    updateProgress(tickCounter);
 8003e3c:	f244 0358 	movw	r3, #16472	; 0x4058
 8003e40:	5ac1      	ldrh	r1, [r0, r3]
 8003e42:	f7ff bfa7 	b.w	8003d94 <_ZN8MainView14updateProgressEt>

08003e46 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003e46:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8003e48:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 8003e4c:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8003e4e:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8003e50:	2302      	movs	r3, #2
 8003e52:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8003e54:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003e58:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8003e5c:	4770      	bx	lr

08003e5e <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8003e5e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003e62:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8003e64:	bf04      	itt	eq
 8003e66:	2300      	moveq	r3, #0
 8003e68:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4770      	bx	lr

08003e70 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8003e70:	2000      	movs	r0, #0
 8003e72:	4770      	bx	lr

08003e74 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003e74:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e76:	6904      	ldr	r4, [r0, #16]
 8003e78:	8900      	ldrh	r0, [r0, #8]
 8003e7a:	46a4      	mov	ip, r4
}
 8003e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e80:	4760      	bx	ip

08003e82 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8003e82:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e84:	68c4      	ldr	r4, [r0, #12]
 8003e86:	8900      	ldrh	r0, [r0, #8]
 8003e88:	46a4      	mov	ip, r4
}
 8003e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003e8e:	4760      	bx	ip

08003e90 <FT6X06_GestureConfig>:
{
 8003e90:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003e94:	f100 0818 	add.w	r8, r0, #24
{
 8003e98:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8003e9a:	7809      	ldrb	r1, [r1, #0]
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	f000 f917 	bl	80040d0 <ft6x06_radian_value>
 8003ea2:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003ea4:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	f000 f91d 	bl	80040e8 <ft6x06_offset_left_right>
 8003eae:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003eb0:	f899 1008 	ldrb.w	r1, [r9, #8]
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f000 f923 	bl	8004100 <ft6x06_offset_up_down>
 8003eba:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003ebc:	f899 100c 	ldrb.w	r1, [r9, #12]
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	f000 f929 	bl	8004118 <ft6x06_disatnce_left_right>
 8003ec6:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003ec8:	f899 1010 	ldrb.w	r1, [r9, #16]
 8003ecc:	4640      	mov	r0, r8
 8003ece:	f000 f92f 	bl	8004130 <ft6x06_distance_up_down>
 8003ed2:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003ed4:	f899 1014 	ldrb.w	r1, [r9, #20]
 8003ed8:	4640      	mov	r0, r8
 8003eda:	f000 f935 	bl	8004148 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8003ede:	42c5      	cmn	r5, r0
}
 8003ee0:	bf14      	ite	ne
 8003ee2:	f04f 30ff 	movne.w	r0, #4294967295
 8003ee6:	2000      	moveq	r0, #0
 8003ee8:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08003eec <FT6X06_ReadID>:
{
 8003eec:	b513      	push	{r0, r1, r4, lr}
 8003eee:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8003ef0:	3018      	adds	r0, #24
 8003ef2:	f10d 0107 	add.w	r1, sp, #7
 8003ef6:	f000 f93f 	bl	8004178 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8003efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003efe:	6023      	str	r3, [r4, #0]
}
 8003f00:	b002      	add	sp, #8
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <FT6X06_GetMultiTouchState>:
{
 8003f04:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8003f06:	f100 0518 	add.w	r5, r0, #24
{
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8003f0e:	4628      	mov	r0, r5
 8003f10:	a901      	add	r1, sp, #4
 8003f12:	f000 f8d0 	bl	80040b6 <ft6x06_td_status>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d145      	bne.n	8003fa6 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8003f1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	bf98      	it	ls
 8003f22:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8003f24:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8003f26:	230c      	movs	r3, #12
 8003f28:	aa01      	add	r2, sp, #4
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f000 f8af 	bl	8004090 <ft6x06_read_reg>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d13a      	bne.n	8003fac <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003f36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003f3a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8003f3e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8003f40:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003f42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8003f46:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003f48:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8003f4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f4e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8003f52:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8003f54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f5e:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f60:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8003f64:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8003f66:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003f6a:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8003f6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f74:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8003f76:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8003f7c:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f7e:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8003f80:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8003f84:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8003f86:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8003f94:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003f98:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8003f9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003fa2:	b005      	add	sp, #20
 8003fa4:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	e7bb      	b.n	8003f24 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8003fb0:	e7f7      	b.n	8003fa2 <FT6X06_GetMultiTouchState+0x9e>

08003fb2 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8003fb2:	3018      	adds	r0, #24
 8003fb4:	f000 b87a 	b.w	80040ac <ft6x06_gest_id>

08003fb8 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8003fb8:	2101      	movs	r1, #1
 8003fba:	3018      	adds	r0, #24
 8003fbc:	f000 b8d0 	b.w	8004160 <ft6x06_g_mode>

08003fc0 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	3018      	adds	r0, #24
 8003fc4:	f000 b8cc 	b.w	8004160 <ft6x06_g_mode>

08003fc8 <FT6X06_Init>:
{
 8003fc8:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8003fca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003fce:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8003fd0:	b96b      	cbnz	r3, 8003fee <FT6X06_Init+0x26>
    pObj->IO.Init();
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff fff2 	bl	8003fc0 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8003fdc:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8003fde:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8003fe2:	bf18      	it	ne
 8003fe4:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8003fe6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 8003fea:	4240      	negs	r0, r0
}
 8003fec:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8003fee:	2000      	movs	r0, #0
  return ret;
 8003ff0:	e7fc      	b.n	8003fec <FT6X06_Init+0x24>

08003ff2 <FT6X06_ClearIT>:
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	4770      	bx	lr

08003ff6 <FT6X06_GetState>:
{
 8003ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8003ff8:	f100 0518 	add.w	r5, r0, #24
{
 8003ffc:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8003ffe:	a901      	add	r1, sp, #4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 f858 	bl	80040b6 <ft6x06_td_status>
 8004006:	bb08      	cbnz	r0, 800404c <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004008:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800400c:	2b02      	cmp	r3, #2
 800400e:	bf98      	it	ls
 8004010:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004012:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004014:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004016:	2103      	movs	r1, #3
 8004018:	4628      	mov	r0, r5
 800401a:	eb0d 0203 	add.w	r2, sp, r3
 800401e:	f000 f837 	bl	8004090 <ft6x06_read_reg>
 8004022:	b9b0      	cbnz	r0, 8004052 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004024:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004028:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004032:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004034:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004038:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800403a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004044:	4313      	orrs	r3, r2
 8004046:	60a3      	str	r3, [r4, #8]
}
 8004048:	b003      	add	sp, #12
 800404a:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e7df      	b.n	8004012 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004052:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004056:	e7f7      	b.n	8004048 <FT6X06_GetState+0x52>

08004058 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004058:	b190      	cbz	r0, 8004080 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800405a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800405c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800405e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004060:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004062:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004064:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004066:	68ca      	ldr	r2, [r1, #12]
 8004068:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800406a:	690a      	ldr	r2, [r1, #16]
 800406c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800406e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004070:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004072:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <FT6X06_RegisterBusIO+0x30>)
 8004076:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <FT6X06_RegisterBusIO+0x34>)
 800407a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800407c:	b103      	cbz	r3, 8004080 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800407e:	4718      	bx	r3
}
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	08003e75 	.word	0x08003e75
 800408c:	08003e83 	.word	0x08003e83

08004090 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004090:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004092:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004096:	46a4      	mov	ip, r4
}
 8004098:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800409c:	4760      	bx	ip

0800409e <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800409e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80040a0:	6804      	ldr	r4, [r0, #0]
 80040a2:	6880      	ldr	r0, [r0, #8]
 80040a4:	46a4      	mov	ip, r4
}
 80040a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80040aa:	4760      	bx	ip

080040ac <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80040ac:	2301      	movs	r3, #1
{
 80040ae:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7ff bfed 	b.w	8004090 <ft6x06_read_reg>

080040b6 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80040b6:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80040b8:	460a      	mov	r2, r1
{
 80040ba:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80040bc:	2301      	movs	r3, #1
 80040be:	2102      	movs	r1, #2
 80040c0:	f7ff ffe6 	bl	8004090 <ft6x06_read_reg>
  
  if(ret == 0)
 80040c4:	b918      	cbnz	r0, 80040ce <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80040c6:	7823      	ldrb	r3, [r4, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80040ce:	bd10      	pop	{r4, pc}

080040d0 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80040d0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80040d2:	2301      	movs	r3, #1
{
 80040d4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80040d8:	f10d 0207 	add.w	r2, sp, #7
 80040dc:	2191      	movs	r1, #145	; 0x91
 80040de:	f7ff ffde 	bl	800409e <ft6x06_write_reg>
}
 80040e2:	b003      	add	sp, #12
 80040e4:	f85d fb04 	ldr.w	pc, [sp], #4

080040e8 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80040e8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80040ea:	2301      	movs	r3, #1
{
 80040ec:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80040f0:	f10d 0207 	add.w	r2, sp, #7
 80040f4:	2192      	movs	r1, #146	; 0x92
 80040f6:	f7ff ffd2 	bl	800409e <ft6x06_write_reg>
}
 80040fa:	b003      	add	sp, #12
 80040fc:	f85d fb04 	ldr.w	pc, [sp], #4

08004100 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004100:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004102:	2301      	movs	r3, #1
{
 8004104:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004108:	f10d 0207 	add.w	r2, sp, #7
 800410c:	2193      	movs	r1, #147	; 0x93
 800410e:	f7ff ffc6 	bl	800409e <ft6x06_write_reg>
}
 8004112:	b003      	add	sp, #12
 8004114:	f85d fb04 	ldr.w	pc, [sp], #4

08004118 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004118:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800411a:	2301      	movs	r3, #1
{
 800411c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004120:	f10d 0207 	add.w	r2, sp, #7
 8004124:	2194      	movs	r1, #148	; 0x94
 8004126:	f7ff ffba 	bl	800409e <ft6x06_write_reg>
}
 800412a:	b003      	add	sp, #12
 800412c:	f85d fb04 	ldr.w	pc, [sp], #4

08004130 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004130:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004132:	2301      	movs	r3, #1
{
 8004134:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004138:	f10d 0207 	add.w	r2, sp, #7
 800413c:	2195      	movs	r1, #149	; 0x95
 800413e:	f7ff ffae 	bl	800409e <ft6x06_write_reg>
}
 8004142:	b003      	add	sp, #12
 8004144:	f85d fb04 	ldr.w	pc, [sp], #4

08004148 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004148:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800414a:	2301      	movs	r3, #1
{
 800414c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004150:	f10d 0207 	add.w	r2, sp, #7
 8004154:	2196      	movs	r1, #150	; 0x96
 8004156:	f7ff ffa2 	bl	800409e <ft6x06_write_reg>
}
 800415a:	b003      	add	sp, #12
 800415c:	f85d fb04 	ldr.w	pc, [sp], #4

08004160 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004160:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004162:	2301      	movs	r3, #1
{
 8004164:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004168:	f10d 0207 	add.w	r2, sp, #7
 800416c:	21a4      	movs	r1, #164	; 0xa4
 800416e:	f7ff ff96 	bl	800409e <ft6x06_write_reg>
}
 8004172:	b003      	add	sp, #12
 8004174:	f85d fb04 	ldr.w	pc, [sp], #4

08004178 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004178:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800417a:	2301      	movs	r3, #1
 800417c:	21a8      	movs	r1, #168	; 0xa8
 800417e:	f7ff bf87 	b.w	8004090 <ft6x06_read_reg>
	...

08004184 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004184:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004186:	2201      	movs	r2, #1
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800418a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800418e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004190:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004192:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004194:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800419a:	f005 fc6d 	bl	8009a78 <HAL_SDRAM_SendCommand>
 800419e:	3800      	subs	r0, #0
 80041a0:	bf18      	it	ne
 80041a2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80041a4:	4240      	negs	r0, r0
 80041a6:	bd08      	pop	{r3, pc}
 80041a8:	2400515c 	.word	0x2400515c

080041ac <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80041ac:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80041ae:	2202      	movs	r2, #2
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80041b2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80041b6:	2101      	movs	r1, #1
 80041b8:	2200      	movs	r2, #0
 80041ba:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041c2:	4619      	mov	r1, r3
 80041c4:	f005 fc58 	bl	8009a78 <HAL_SDRAM_SendCommand>
 80041c8:	3800      	subs	r0, #0
 80041ca:	bf18      	it	ne
 80041cc:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80041ce:	4240      	negs	r0, r0
 80041d0:	bd08      	pop	{r3, pc}
 80041d2:	bf00      	nop
 80041d4:	2400515c 	.word	0x2400515c

080041d8 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80041d8:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 80041dc:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80041de:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 80041e0:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80041e2:	4c0b      	ldr	r4, [pc, #44]	; (8004210 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 80041e4:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 80041e6:	698a      	ldr	r2, [r1, #24]
 80041e8:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80041ea:	69ca      	ldr	r2, [r1, #28]
 80041ec:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80041ee:	2204      	movs	r2, #4
 80041f0:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80041f2:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041f4:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 80041f6:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80041f8:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 80041fa:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004202:	f005 fc39 	bl	8009a78 <HAL_SDRAM_SendCommand>
 8004206:	3800      	subs	r0, #0
 8004208:	bf18      	it	ne
 800420a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800420c:	4240      	negs	r0, r0
 800420e:	bd10      	pop	{r4, pc}
 8004210:	2400515c 	.word	0x2400515c

08004214 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004214:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004218:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800421c:	2108      	movs	r1, #8
 800421e:	2200      	movs	r2, #0
 8004220:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004228:	4619      	mov	r1, r3
 800422a:	f005 fc25 	bl	8009a78 <HAL_SDRAM_SendCommand>
 800422e:	3800      	subs	r0, #0
 8004230:	bf18      	it	ne
 8004232:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004234:	4240      	negs	r0, r0
 8004236:	bd08      	pop	{r3, pc}
 8004238:	2400515c 	.word	0x2400515c

0800423c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800423c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800423e:	f005 fc3a 	bl	8009ab6 <HAL_SDRAM_ProgramRefreshRate>
 8004242:	3800      	subs	r0, #0
 8004244:	bf18      	it	ne
 8004246:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004248:	4240      	negs	r0, r0
 800424a:	bd08      	pop	{r3, pc}

0800424c <IS42S32800J_Init>:
{
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004250:	6809      	ldr	r1, [r1, #0]
{
 8004252:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004254:	f7ff ff96 	bl	8004184 <IS42S32800J_ClockEnable>
 8004258:	b110      	cbz	r0, 8004260 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800425e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004260:	f001 fc9c 	bl	8005b9c <HAL_GetTick>
 8004264:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004266:	f001 fc99 	bl	8005b9c <HAL_GetTick>
 800426a:	4286      	cmp	r6, r0
 800426c:	d0fb      	beq.n	8004266 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800426e:	6821      	ldr	r1, [r4, #0]
 8004270:	4628      	mov	r0, r5
 8004272:	f7ff ff9b 	bl	80041ac <IS42S32800J_Precharge>
 8004276:	2800      	cmp	r0, #0
 8004278:	d1ef      	bne.n	800425a <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800427a:	4628      	mov	r0, r5
 800427c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004280:	f7ff ffc8 	bl	8004214 <IS42S32800J_RefreshMode>
 8004284:	2800      	cmp	r0, #0
 8004286:	d1e8      	bne.n	800425a <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004288:	4621      	mov	r1, r4
 800428a:	4628      	mov	r0, r5
 800428c:	f7ff ffa4 	bl	80041d8 <IS42S32800J_ModeRegConfig>
 8004290:	2800      	cmp	r0, #0
 8004292:	d1e2      	bne.n	800425a <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004294:	68a1      	ldr	r1, [r4, #8]
 8004296:	4628      	mov	r0, r5
 8004298:	f7ff ffd0 	bl	800423c <IS42S32800J_RefreshRate>
 800429c:	3800      	subs	r0, #0
 800429e:	bf18      	it	ne
 80042a0:	2001      	movne	r0, #1
 80042a2:	4240      	negs	r0, r0
  return ret;
 80042a4:	e7db      	b.n	800425e <IS42S32800J_Init+0x12>

080042a6 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80042a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80042ae:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80042b2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80042b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042ba:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80042be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042c2:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80042c4:	2000      	movs	r0, #0
 80042c6:	4770      	bx	lr

080042c8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80042c8:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80042ca:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 80042ce:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80042d0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80042d4:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80042d6:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80042d8:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 80042da:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80042dc:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80042de:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80042e0:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042e2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80042e4:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80042e6:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80042e8:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80042ea:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042ec:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80042ee:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80042f2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80042f6:	2310      	movs	r3, #16
 80042f8:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80042fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042fe:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004300:	f240 1301 	movw	r3, #257	; 0x101
 8004304:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004306:	f241 3388 	movw	r3, #5000	; 0x1388
 800430a:	f003 feac 	bl	8008066 <HAL_QSPI_AutoPolling>
 800430e:	2800      	cmp	r0, #0
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;

}
 8004310:	bf14      	ite	ne
 8004312:	f06f 0004 	mvnne.w	r0, #4
 8004316:	2000      	moveq	r0, #0
 8004318:	b015      	add	sp, #84	; 0x54
 800431a:	f85d fb04 	ldr.w	pc, [sp], #4

0800431e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800431e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004324:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004326:	bf08      	it	eq
 8004328:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800432c:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800432e:	bf18      	it	ne
 8004330:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8004334:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004336:	a906      	add	r1, sp, #24
{
 8004338:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800433a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800433c:	2306      	movs	r3, #6
 800433e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004340:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004342:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004346:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004348:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800434a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800434c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004350:	f003 fd8e 	bl	8007e70 <HAL_QSPI_Command>
 8004354:	bb20      	cbnz	r0, 80043a0 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004356:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800435a:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800435c:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800435e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004362:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004364:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004366:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800436a:	f04f 0310 	mov.w	r3, #16
 800436e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004372:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004376:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004378:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800437c:	bf0c      	ite	eq
 800437e:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8004382:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004386:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004388:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800438a:	f241 3388 	movw	r3, #5000	; 0x1388
 800438e:	f003 fe6a 	bl	8008066 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8004392:	2800      	cmp	r0, #0
 8004394:	bf0c      	ite	eq
 8004396:	2000      	moveq	r0, #0
 8004398:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 800439c:	b015      	add	sp, #84	; 0x54
 800439e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80043a0:	f06f 0001 	mvn.w	r0, #1
 80043a4:	e7fa      	b.n	800439c <MT25TL01G_WriteEnable+0x7e>

080043a6 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80043a6:	2903      	cmp	r1, #3
{
 80043a8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80043aa:	bf08      	it	eq
 80043ac:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80043b0:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80043b2:	bf18      	it	ne
 80043b4:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80043b8:	4604      	mov	r4, r0
 80043ba:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80043bc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80043be:	23b7      	movs	r3, #183	; 0xb7
 80043c0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80043c2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80043c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80043c8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80043ca:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80043cc:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80043ce:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80043d2:	f7ff ffa4 	bl	800431e <MT25TL01G_WriteEnable>
 80043d6:	b958      	cbnz	r0, 80043f0 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4669      	mov	r1, sp
 80043de:	4620      	mov	r0, r4
 80043e0:	f003 fd46 	bl	8007e70 <HAL_QSPI_Command>
 80043e4:	b920      	cbnz	r0, 80043f0 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80043e6:	4629      	mov	r1, r5
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7ff ff6d 	bl	80042c8 <MT25TL01G_AutoPollingMemReady>
 80043ee:	b108      	cbz	r0, 80043f4 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 80043f0:	f06f 0001 	mvn.w	r0, #1
}
 80043f4:	b00f      	add	sp, #60	; 0x3c
 80043f6:	bd30      	pop	{r4, r5, pc}

080043f8 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80043f8:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043fa:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80043fe:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004404:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004406:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004408:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800440a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800440c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800440e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004412:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004414:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004416:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004418:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800441c:	f003 fd28 	bl	8007e70 <HAL_QSPI_Command>
 8004420:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 8004422:	bf14      	ite	ne
 8004424:	f06f 0001 	mvnne.w	r0, #1
 8004428:	2000      	moveq	r0, #0
 800442a:	b00f      	add	sp, #60	; 0x3c
 800442c:	f85d fb04 	ldr.w	pc, [sp], #4

08004430 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004430:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004432:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004436:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800443c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800443e:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004440:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004442:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004444:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004446:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800444c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800444e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004450:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004454:	f003 fd0c 	bl	8007e70 <HAL_QSPI_Command>
 8004458:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 800445a:	bf14      	ite	ne
 800445c:	f06f 0001 	mvnne.w	r0, #1
 8004460:	2000      	moveq	r0, #0
 8004462:	b00f      	add	sp, #60	; 0x3c
 8004464:	f85d fb04 	ldr.w	pc, [sp], #4

08004468 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004468:	b500      	push	{lr}
 800446a:	b091      	sub	sp, #68	; 0x44
 800446c:	2903      	cmp	r1, #3
 800446e:	d80e      	bhi.n	800448e <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004470:	e8df f001 	tbb	[pc, r1]
 8004474:	3f342902 	.word	0x3f342902
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800447c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800447e:	230e      	movs	r3, #14
 8004480:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004486:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800448c:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800448e:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004490:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004494:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004498:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800449a:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800449c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80044a0:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044a2:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80044a4:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80044a8:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80044aa:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80044ac:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80044ae:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80044b2:	f003 fe28 	bl	8008106 <HAL_QSPI_MemoryMapped>
 80044b6:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 80044b8:	bf14      	ite	ne
 80044ba:	f06f 0005 	mvnne.w	r0, #5
 80044be:	2000      	moveq	r0, #0
 80044c0:	b011      	add	sp, #68	; 0x44
 80044c2:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ca:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80044cc:	233d      	movs	r3, #61	; 0x3d
 80044ce:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80044d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d4:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80044d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044da:	e7d7      	b.n	800448c <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80044dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80044e2:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80044e4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80044e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044ea:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80044ec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80044f0:	e7cc      	b.n	800448c <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80044f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044f6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80044f8:	23ed      	movs	r3, #237	; 0xed
 80044fa:	e7f3      	b.n	80044e4 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080044fc <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80044fc:	b500      	push	{lr}
 80044fe:	b091      	sub	sp, #68	; 0x44
 8004500:	2903      	cmp	r1, #3
 8004502:	d80e      	bhi.n	8004522 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004504:	e8df f001 	tbb	[pc, r1]
 8004508:	3b302502 	.word	0x3b302502
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800450c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004510:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004512:	230c      	movs	r3, #12
 8004514:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800451c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004520:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004522:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004524:	466a      	mov	r2, sp
 8004526:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004528:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800452a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800452e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004530:	2300      	movs	r3, #0
 8004532:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004534:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004536:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800453a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800453e:	f003 fde2 	bl	8008106 <HAL_QSPI_MemoryMapped>
 8004542:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 8004544:	bf14      	ite	ne
 8004546:	f06f 0005 	mvnne.w	r0, #5
 800454a:	2000      	moveq	r0, #0
 800454c:	b011      	add	sp, #68	; 0x44
 800454e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004556:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004558:	23bc      	movs	r3, #188	; 0xbc
 800455a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800455c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004560:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	e7db      	b.n	8004520 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800456c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800456e:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004570:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004572:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004576:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004578:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800457c:	e7d0      	b.n	8004520 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800457e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004582:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004584:	23eb      	movs	r3, #235	; 0xeb
 8004586:	e7f3      	b.n	8004570 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004588 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004588:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800458e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004590:	bf08      	it	eq
 8004592:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8004596:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004598:	bf18      	it	ne
 800459a:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800459e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80045a0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80045a2:	2366      	movs	r3, #102	; 0x66
 80045a4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045a6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80045ac:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80045ae:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045b0:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045b2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045b6:	f003 fc5b 	bl	8007e70 <HAL_QSPI_Command>
 80045ba:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 80045bc:	bf14      	ite	ne
 80045be:	f06f 0001 	mvnne.w	r0, #1
 80045c2:	2000      	moveq	r0, #0
 80045c4:	b00f      	add	sp, #60	; 0x3c
 80045c6:	f85d fb04 	ldr.w	pc, [sp], #4

080045ca <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80045ca:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80045d0:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80045d2:	bf08      	it	eq
 80045d4:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80045d8:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80045da:	bf18      	it	ne
 80045dc:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045e0:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80045e2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80045e4:	2399      	movs	r3, #153	; 0x99
 80045e6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80045e8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80045ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80045ee:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80045f0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045f2:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80045f4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045f8:	f003 fc3a 	bl	8007e70 <HAL_QSPI_Command>
 80045fc:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 80045fe:	bf14      	ite	ne
 8004600:	f06f 0001 	mvnne.w	r0, #1
 8004604:	2000      	moveq	r0, #0
 8004606:	b00f      	add	sp, #60	; 0x3c
 8004608:	f85d fb04 	ldr.w	pc, [sp], #4

0800460c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800460c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800460e:	6884      	ldr	r4, [r0, #8]
 8004610:	8800      	ldrh	r0, [r0, #0]
 8004612:	46a4      	mov	ip, r4
}
 8004614:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004618:	4760      	bx	ip

0800461a <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800461a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800461c:	6844      	ldr	r4, [r0, #4]
 800461e:	8800      	ldrh	r0, [r0, #0]
 8004620:	46a4      	mov	ip, r4
}
 8004622:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004626:	4760      	bx	ip

08004628 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004628:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800462a:	6803      	ldr	r3, [r0, #0]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800462c:	4604      	mov	r4, r0
 800462e:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004630:	4798      	blx	r3
 8004632:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	4798      	blx	r3
 8004638:	1b83      	subs	r3, r0, r6
 800463a:	42ab      	cmp	r3, r5
 800463c:	d3fa      	bcc.n	8004634 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800463e:	2000      	movs	r0, #0
 8004640:	bd70      	pop	{r4, r5, r6, pc}
	...

08004644 <OTM8009A_Init>:
{
 8004644:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004648:	2300      	movs	r3, #0
 800464a:	f100 0810 	add.w	r8, r0, #16
{
 800464e:	4681      	mov	r9, r0
 8004650:	468a      	mov	sl, r1
 8004652:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004654:	4619      	mov	r1, r3
 8004656:	4ade      	ldr	r2, [pc, #888]	; (80049d0 <OTM8009A_Init+0x38c>)
 8004658:	4640      	mov	r0, r8
 800465a:	f000 fbaf 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800465e:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004660:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004662:	4adc      	ldr	r2, [pc, #880]	; (80049d4 <OTM8009A_Init+0x390>)
 8004664:	21ff      	movs	r1, #255	; 0xff
 8004666:	4640      	mov	r0, r8
 8004668:	f000 fba8 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800466c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800466e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004670:	4ad9      	ldr	r2, [pc, #868]	; (80049d8 <OTM8009A_Init+0x394>)
 8004672:	4619      	mov	r1, r3
 8004674:	4640      	mov	r0, r8
 8004676:	f000 fba1 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800467a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800467c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800467e:	4ad7      	ldr	r2, [pc, #860]	; (80049dc <OTM8009A_Init+0x398>)
 8004680:	21ff      	movs	r1, #255	; 0xff
 8004682:	4640      	mov	r0, r8
 8004684:	f000 fb9a 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004688:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800468a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800468c:	4ad2      	ldr	r2, [pc, #840]	; (80049d8 <OTM8009A_Init+0x394>)
 800468e:	4619      	mov	r1, r3
 8004690:	4640      	mov	r0, r8
 8004692:	f000 fb93 	bl	8004dbc <otm8009a_write_reg>
 8004696:	f109 090c 	add.w	r9, r9, #12
 800469a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800469c:	2300      	movs	r3, #0
 800469e:	4ad0      	ldr	r2, [pc, #832]	; (80049e0 <OTM8009A_Init+0x39c>)
 80046a0:	21c4      	movs	r1, #196	; 0xc4
 80046a2:	4640      	mov	r0, r8
 80046a4:	4dcf      	ldr	r5, [pc, #828]	; (80049e4 <OTM8009A_Init+0x3a0>)
 80046a6:	f000 fb89 	bl	8004dbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80046aa:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80046ac:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80046ae:	4648      	mov	r0, r9
 80046b0:	f7ff ffba 	bl	8004628 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80046b4:	2300      	movs	r3, #0
 80046b6:	4acc      	ldr	r2, [pc, #816]	; (80049e8 <OTM8009A_Init+0x3a4>)
 80046b8:	4640      	mov	r0, r8
 80046ba:	4619      	mov	r1, r3
 80046bc:	f000 fb7e 	bl	8004dbc <otm8009a_write_reg>
 80046c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80046c2:	2300      	movs	r3, #0
 80046c4:	4ac9      	ldr	r2, [pc, #804]	; (80049ec <OTM8009A_Init+0x3a8>)
 80046c6:	21c4      	movs	r1, #196	; 0xc4
 80046c8:	4640      	mov	r0, r8
 80046ca:	f000 fb77 	bl	8004dbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80046ce:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80046d0:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80046d2:	4648      	mov	r0, r9
 80046d4:	f7ff ffa8 	bl	8004628 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80046d8:	2300      	movs	r3, #0
 80046da:	4ac5      	ldr	r2, [pc, #788]	; (80049f0 <OTM8009A_Init+0x3ac>)
 80046dc:	4640      	mov	r0, r8
 80046de:	4619      	mov	r1, r3
 80046e0:	f000 fb6c 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80046e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80046e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80046e8:	4ac2      	ldr	r2, [pc, #776]	; (80049f4 <OTM8009A_Init+0x3b0>)
 80046ea:	21c5      	movs	r1, #197	; 0xc5
 80046ec:	4640      	mov	r0, r8
 80046ee:	f000 fb65 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80046f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80046f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80046f6:	4ac0      	ldr	r2, [pc, #768]	; (80049f8 <OTM8009A_Init+0x3b4>)
 80046f8:	4619      	mov	r1, r3
 80046fa:	4640      	mov	r0, r8
 80046fc:	f000 fb5e 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004700:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004702:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004704:	4abd      	ldr	r2, [pc, #756]	; (80049fc <OTM8009A_Init+0x3b8>)
 8004706:	21c5      	movs	r1, #197	; 0xc5
 8004708:	4640      	mov	r0, r8
 800470a:	f000 fb57 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800470e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004710:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004712:	4abb      	ldr	r2, [pc, #748]	; (8004a00 <OTM8009A_Init+0x3bc>)
 8004714:	4619      	mov	r1, r3
 8004716:	4640      	mov	r0, r8
 8004718:	f000 fb50 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800471c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800471e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004720:	4ab8      	ldr	r2, [pc, #736]	; (8004a04 <OTM8009A_Init+0x3c0>)
 8004722:	21c0      	movs	r1, #192	; 0xc0
 8004724:	4640      	mov	r0, r8
 8004726:	f000 fb49 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800472a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800472c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800472e:	4aa8      	ldr	r2, [pc, #672]	; (80049d0 <OTM8009A_Init+0x38c>)
 8004730:	4619      	mov	r1, r3
 8004732:	4640      	mov	r0, r8
 8004734:	f000 fb42 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004738:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800473a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800473c:	4ab2      	ldr	r2, [pc, #712]	; (8004a08 <OTM8009A_Init+0x3c4>)
 800473e:	21d9      	movs	r1, #217	; 0xd9
 8004740:	4640      	mov	r0, r8
 8004742:	f000 fb3b 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004746:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004748:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800474a:	4ab0      	ldr	r2, [pc, #704]	; (8004a0c <OTM8009A_Init+0x3c8>)
 800474c:	4619      	mov	r1, r3
 800474e:	4640      	mov	r0, r8
 8004750:	f000 fb34 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004754:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004756:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004758:	4aad      	ldr	r2, [pc, #692]	; (8004a10 <OTM8009A_Init+0x3cc>)
 800475a:	21c1      	movs	r1, #193	; 0xc1
 800475c:	4640      	mov	r0, r8
 800475e:	f000 fb2d 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004762:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004764:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004766:	4aab      	ldr	r2, [pc, #684]	; (8004a14 <OTM8009A_Init+0x3d0>)
 8004768:	4619      	mov	r1, r3
 800476a:	4640      	mov	r0, r8
 800476c:	f000 fb26 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004770:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004772:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004774:	4aa8      	ldr	r2, [pc, #672]	; (8004a18 <OTM8009A_Init+0x3d4>)
 8004776:	21c1      	movs	r1, #193	; 0xc1
 8004778:	4640      	mov	r0, r8
 800477a:	f000 fb1f 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800477e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004780:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004782:	4aa6      	ldr	r2, [pc, #664]	; (8004a1c <OTM8009A_Init+0x3d8>)
 8004784:	4619      	mov	r1, r3
 8004786:	4640      	mov	r0, r8
 8004788:	f000 fb18 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800478c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800478e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004790:	4aa3      	ldr	r2, [pc, #652]	; (8004a20 <OTM8009A_Init+0x3dc>)
 8004792:	21c5      	movs	r1, #197	; 0xc5
 8004794:	4640      	mov	r0, r8
 8004796:	f000 fb11 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800479a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800479c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800479e:	4aa1      	ldr	r2, [pc, #644]	; (8004a24 <OTM8009A_Init+0x3e0>)
 80047a0:	4619      	mov	r1, r3
 80047a2:	4640      	mov	r0, r8
 80047a4:	f000 fb0a 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80047a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80047aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80047ac:	4a93      	ldr	r2, [pc, #588]	; (80049fc <OTM8009A_Init+0x3b8>)
 80047ae:	21c5      	movs	r1, #197	; 0xc5
 80047b0:	4640      	mov	r0, r8
 80047b2:	f000 fb03 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80047b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047ba:	4a85      	ldr	r2, [pc, #532]	; (80049d0 <OTM8009A_Init+0x38c>)
 80047bc:	4619      	mov	r1, r3
 80047be:	4640      	mov	r0, r8
 80047c0:	f000 fafc 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80047c4:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80047c8:	4a97      	ldr	r2, [pc, #604]	; (8004a28 <OTM8009A_Init+0x3e4>)
 80047ca:	21d8      	movs	r1, #216	; 0xd8
 80047cc:	4640      	mov	r0, r8
 80047ce:	f000 faf5 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80047d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80047d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80047d6:	4a95      	ldr	r2, [pc, #596]	; (8004a2c <OTM8009A_Init+0x3e8>)
 80047d8:	4619      	mov	r1, r3
 80047da:	4640      	mov	r0, r8
 80047dc:	f000 faee 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80047e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80047e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80047e4:	4a92      	ldr	r2, [pc, #584]	; (8004a30 <OTM8009A_Init+0x3ec>)
 80047e6:	21c5      	movs	r1, #197	; 0xc5
 80047e8:	4640      	mov	r0, r8
 80047ea:	f000 fae7 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80047ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80047f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80047f2:	4a90      	ldr	r2, [pc, #576]	; (8004a34 <OTM8009A_Init+0x3f0>)
 80047f4:	4619      	mov	r1, r3
 80047f6:	4640      	mov	r0, r8
 80047f8:	f000 fae0 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80047fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80047fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004800:	4a8d      	ldr	r2, [pc, #564]	; (8004a38 <OTM8009A_Init+0x3f4>)
 8004802:	21c0      	movs	r1, #192	; 0xc0
 8004804:	4640      	mov	r0, r8
 8004806:	f000 fad9 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800480a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800480c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800480e:	4a8b      	ldr	r2, [pc, #556]	; (8004a3c <OTM8009A_Init+0x3f8>)
 8004810:	4619      	mov	r1, r3
 8004812:	4640      	mov	r0, r8
 8004814:	f000 fad2 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004818:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800481a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800481c:	4a88      	ldr	r2, [pc, #544]	; (8004a40 <OTM8009A_Init+0x3fc>)
 800481e:	21c5      	movs	r1, #197	; 0xc5
 8004820:	4640      	mov	r0, r8
 8004822:	f000 facb 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004826:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004828:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800482a:	4a78      	ldr	r2, [pc, #480]	; (8004a0c <OTM8009A_Init+0x3c8>)
 800482c:	4619      	mov	r1, r3
 800482e:	4640      	mov	r0, r8
 8004830:	f000 fac4 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004834:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004836:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004838:	4a82      	ldr	r2, [pc, #520]	; (8004a44 <OTM8009A_Init+0x400>)
 800483a:	21c4      	movs	r1, #196	; 0xc4
 800483c:	4640      	mov	r0, r8
 800483e:	f000 fabd 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004842:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004844:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004846:	4a73      	ldr	r2, [pc, #460]	; (8004a14 <OTM8009A_Init+0x3d0>)
 8004848:	4619      	mov	r1, r3
 800484a:	4640      	mov	r0, r8
 800484c:	f000 fab6 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004850:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004852:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004854:	4a7c      	ldr	r2, [pc, #496]	; (8004a48 <OTM8009A_Init+0x404>)
 8004856:	21c1      	movs	r1, #193	; 0xc1
 8004858:	4640      	mov	r0, r8
 800485a:	f000 faaf 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800485e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004860:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004862:	4a7a      	ldr	r2, [pc, #488]	; (8004a4c <OTM8009A_Init+0x408>)
 8004864:	4619      	mov	r1, r3
 8004866:	4640      	mov	r0, r8
 8004868:	f000 faa8 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800486c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800486e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004870:	4a77      	ldr	r2, [pc, #476]	; (8004a50 <OTM8009A_Init+0x40c>)
 8004872:	21b3      	movs	r1, #179	; 0xb3
 8004874:	4640      	mov	r0, r8
 8004876:	f000 faa1 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800487a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800487c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800487e:	4a56      	ldr	r2, [pc, #344]	; (80049d8 <OTM8009A_Init+0x394>)
 8004880:	4619      	mov	r1, r3
 8004882:	4640      	mov	r0, r8
 8004884:	f000 fa9a 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004888:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800488a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800488c:	4a71      	ldr	r2, [pc, #452]	; (8004a54 <OTM8009A_Init+0x410>)
 800488e:	21ce      	movs	r1, #206	; 0xce
 8004890:	4640      	mov	r0, r8
 8004892:	f000 fa93 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004896:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004898:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800489a:	4a6f      	ldr	r2, [pc, #444]	; (8004a58 <OTM8009A_Init+0x414>)
 800489c:	4619      	mov	r1, r3
 800489e:	4640      	mov	r0, r8
 80048a0:	f000 fa8c 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80048a4:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80048a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80048a8:	4a6c      	ldr	r2, [pc, #432]	; (8004a5c <OTM8009A_Init+0x418>)
 80048aa:	21ce      	movs	r1, #206	; 0xce
 80048ac:	4640      	mov	r0, r8
 80048ae:	f000 fa85 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80048b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80048b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80048b6:	4a6a      	ldr	r2, [pc, #424]	; (8004a60 <OTM8009A_Init+0x41c>)
 80048b8:	4619      	mov	r1, r3
 80048ba:	4640      	mov	r0, r8
 80048bc:	f000 fa7e 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80048c0:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80048c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80048c4:	4a67      	ldr	r2, [pc, #412]	; (8004a64 <OTM8009A_Init+0x420>)
 80048c6:	21ce      	movs	r1, #206	; 0xce
 80048c8:	4640      	mov	r0, r8
 80048ca:	f000 fa77 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80048ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80048d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80048d2:	4a65      	ldr	r2, [pc, #404]	; (8004a68 <OTM8009A_Init+0x424>)
 80048d4:	4619      	mov	r1, r3
 80048d6:	4640      	mov	r0, r8
 80048d8:	f000 fa70 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80048dc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80048de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80048e0:	4a62      	ldr	r2, [pc, #392]	; (8004a6c <OTM8009A_Init+0x428>)
 80048e2:	21cf      	movs	r1, #207	; 0xcf
 80048e4:	4640      	mov	r0, r8
 80048e6:	f000 fa69 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80048ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80048ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80048ee:	4a60      	ldr	r2, [pc, #384]	; (8004a70 <OTM8009A_Init+0x42c>)
 80048f0:	4619      	mov	r1, r3
 80048f2:	4640      	mov	r0, r8
 80048f4:	f000 fa62 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80048f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80048fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80048fc:	4a5d      	ldr	r2, [pc, #372]	; (8004a74 <OTM8009A_Init+0x430>)
 80048fe:	21cf      	movs	r1, #207	; 0xcf
 8004900:	4640      	mov	r0, r8
 8004902:	f000 fa5b 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004906:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004908:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800490a:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <OTM8009A_Init+0x394>)
 800490c:	4619      	mov	r1, r3
 800490e:	4640      	mov	r0, r8
 8004910:	f000 fa54 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004914:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004916:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004918:	4a57      	ldr	r2, [pc, #348]	; (8004a78 <OTM8009A_Init+0x434>)
 800491a:	21cb      	movs	r1, #203	; 0xcb
 800491c:	4640      	mov	r0, r8
 800491e:	f000 fa4d 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004922:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004924:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004926:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <OTM8009A_Init+0x438>)
 8004928:	4619      	mov	r1, r3
 800492a:	4640      	mov	r0, r8
 800492c:	f000 fa46 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004930:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004932:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <OTM8009A_Init+0x43c>)
 8004936:	21cb      	movs	r1, #203	; 0xcb
 8004938:	4640      	mov	r0, r8
 800493a:	f000 fa3f 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800493e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004940:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004942:	4a45      	ldr	r2, [pc, #276]	; (8004a58 <OTM8009A_Init+0x414>)
 8004944:	4619      	mov	r1, r3
 8004946:	4640      	mov	r0, r8
 8004948:	f000 fa38 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800494c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800494e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004950:	4a4c      	ldr	r2, [pc, #304]	; (8004a84 <OTM8009A_Init+0x440>)
 8004952:	21cb      	movs	r1, #203	; 0xcb
 8004954:	4640      	mov	r0, r8
 8004956:	f000 fa31 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800495a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800495c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800495e:	4a40      	ldr	r2, [pc, #256]	; (8004a60 <OTM8009A_Init+0x41c>)
 8004960:	4619      	mov	r1, r3
 8004962:	4640      	mov	r0, r8
 8004964:	f000 fa2a 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004968:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800496a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800496c:	4a46      	ldr	r2, [pc, #280]	; (8004a88 <OTM8009A_Init+0x444>)
 800496e:	21cb      	movs	r1, #203	; 0xcb
 8004970:	4640      	mov	r0, r8
 8004972:	f000 fa23 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004976:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004978:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800497a:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <OTM8009A_Init+0x424>)
 800497c:	4619      	mov	r1, r3
 800497e:	4640      	mov	r0, r8
 8004980:	f000 fa1c 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004984:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004986:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004988:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <OTM8009A_Init+0x448>)
 800498a:	21cb      	movs	r1, #203	; 0xcb
 800498c:	4640      	mov	r0, r8
 800498e:	f000 fa15 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004992:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004994:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004996:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <OTM8009A_Init+0x42c>)
 8004998:	4619      	mov	r1, r3
 800499a:	4640      	mov	r0, r8
 800499c:	f000 fa0e 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80049a0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80049a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80049a4:	4a3a      	ldr	r2, [pc, #232]	; (8004a90 <OTM8009A_Init+0x44c>)
 80049a6:	21cb      	movs	r1, #203	; 0xcb
 80049a8:	4640      	mov	r0, r8
 80049aa:	f000 fa07 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80049ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80049b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80049b2:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <OTM8009A_Init+0x450>)
 80049b4:	4619      	mov	r1, r3
 80049b6:	4640      	mov	r0, r8
 80049b8:	f000 fa00 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80049bc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80049be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <OTM8009A_Init+0x454>)
 80049c2:	21cb      	movs	r1, #203	; 0xcb
 80049c4:	4640      	mov	r0, r8
 80049c6:	f000 f9f9 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80049ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80049cc:	4404      	add	r4, r0
 80049ce:	e065      	b.n	8004a9c <OTM8009A_Init+0x458>
 80049d0:	08021d3d 	.word	0x08021d3d
 80049d4:	08021c30 	.word	0x08021c30
 80049d8:	08021d3e 	.word	0x08021d3e
 80049dc:	08021cab 	.word	0x08021cab
 80049e0:	08021d3f 	.word	0x08021d3f
 80049e4:	2400516c 	.word	0x2400516c
 80049e8:	08021d40 	.word	0x08021d40
 80049ec:	08021d41 	.word	0x08021d41
 80049f0:	08021d42 	.word	0x08021d42
 80049f4:	08021d43 	.word	0x08021d43
 80049f8:	08021d44 	.word	0x08021d44
 80049fc:	08021d45 	.word	0x08021d45
 8004a00:	08021d46 	.word	0x08021d46
 8004a04:	08021d47 	.word	0x08021d47
 8004a08:	08021d48 	.word	0x08021d48
 8004a0c:	08021d49 	.word	0x08021d49
 8004a10:	08021d4a 	.word	0x08021d4a
 8004a14:	08021d4b 	.word	0x08021d4b
 8004a18:	08021d4c 	.word	0x08021d4c
 8004a1c:	08021d4d 	.word	0x08021d4d
 8004a20:	08021d4e 	.word	0x08021d4e
 8004a24:	08021d4f 	.word	0x08021d4f
 8004a28:	08021d16 	.word	0x08021d16
 8004a2c:	08021d50 	.word	0x08021d50
 8004a30:	08021d51 	.word	0x08021d51
 8004a34:	08021d52 	.word	0x08021d52
 8004a38:	08021d53 	.word	0x08021d53
 8004a3c:	08021d54 	.word	0x08021d54
 8004a40:	08021d55 	.word	0x08021d55
 8004a44:	08021d56 	.word	0x08021d56
 8004a48:	08021d57 	.word	0x08021d57
 8004a4c:	08021d58 	.word	0x08021d58
 8004a50:	08021d18 	.word	0x08021d18
 8004a54:	08021d1a 	.word	0x08021d1a
 8004a58:	08021d59 	.word	0x08021d59
 8004a5c:	08021d20 	.word	0x08021d20
 8004a60:	08021d5a 	.word	0x08021d5a
 8004a64:	08021d2e 	.word	0x08021d2e
 8004a68:	08021d5b 	.word	0x08021d5b
 8004a6c:	08021c33 	.word	0x08021c33
 8004a70:	08021d5c 	.word	0x08021d5c
 8004a74:	08021d69 	.word	0x08021d69
 8004a78:	08021c3d 	.word	0x08021c3d
 8004a7c:	08021d5d 	.word	0x08021d5d
 8004a80:	08021c47 	.word	0x08021c47
 8004a84:	08021c56 	.word	0x08021c56
 8004a88:	08021c65 	.word	0x08021c65
 8004a8c:	08021c6f 	.word	0x08021c6f
 8004a90:	08021c7e 	.word	0x08021c7e
 8004a94:	08021d5e 	.word	0x08021d5e
 8004a98:	08021c8d 	.word	0x08021c8d
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004a9c:	4a99      	ldr	r2, [pc, #612]	; (8004d04 <OTM8009A_Init+0x6c0>)
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	f000 f98b 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004aa6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004aa8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004aaa:	4a97      	ldr	r2, [pc, #604]	; (8004d08 <OTM8009A_Init+0x6c4>)
 8004aac:	21cb      	movs	r1, #203	; 0xcb
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f000 f984 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ab4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004ab6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ab8:	4a94      	ldr	r2, [pc, #592]	; (8004d0c <OTM8009A_Init+0x6c8>)
 8004aba:	4619      	mov	r1, r3
 8004abc:	4640      	mov	r0, r8
 8004abe:	f000 f97d 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004ac2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ac4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004ac6:	4a92      	ldr	r2, [pc, #584]	; (8004d10 <OTM8009A_Init+0x6cc>)
 8004ac8:	21cc      	movs	r1, #204	; 0xcc
 8004aca:	4640      	mov	r0, r8
 8004acc:	f000 f976 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ad0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004ad2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ad4:	4a8f      	ldr	r2, [pc, #572]	; (8004d14 <OTM8009A_Init+0x6d0>)
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4640      	mov	r0, r8
 8004ada:	f000 f96f 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004ade:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ae0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004ae2:	4a8d      	ldr	r2, [pc, #564]	; (8004d18 <OTM8009A_Init+0x6d4>)
 8004ae4:	21cc      	movs	r1, #204	; 0xcc
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f000 f968 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004aec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004aee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004af0:	4a8a      	ldr	r2, [pc, #552]	; (8004d1c <OTM8009A_Init+0x6d8>)
 8004af2:	4619      	mov	r1, r3
 8004af4:	4640      	mov	r0, r8
 8004af6:	f000 f961 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004afa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004afc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004afe:	4a88      	ldr	r2, [pc, #544]	; (8004d20 <OTM8009A_Init+0x6dc>)
 8004b00:	21cc      	movs	r1, #204	; 0xcc
 8004b02:	4640      	mov	r0, r8
 8004b04:	f000 f95a 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004b0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b0c:	4a85      	ldr	r2, [pc, #532]	; (8004d24 <OTM8009A_Init+0x6e0>)
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4640      	mov	r0, r8
 8004b12:	f000 f953 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004b16:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004b18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004b1a:	4a83      	ldr	r2, [pc, #524]	; (8004d28 <OTM8009A_Init+0x6e4>)
 8004b1c:	21cc      	movs	r1, #204	; 0xcc
 8004b1e:	4640      	mov	r0, r8
 8004b20:	f000 f94c 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004b26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b28:	4a80      	ldr	r2, [pc, #512]	; (8004d2c <OTM8009A_Init+0x6e8>)
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	f000 f945 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004b32:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004b34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004b36:	4a7e      	ldr	r2, [pc, #504]	; (8004d30 <OTM8009A_Init+0x6ec>)
 8004b38:	21cc      	movs	r1, #204	; 0xcc
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	f000 f93e 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004b40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004b42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004b44:	4a7b      	ldr	r2, [pc, #492]	; (8004d34 <OTM8009A_Init+0x6f0>)
 8004b46:	4619      	mov	r1, r3
 8004b48:	4640      	mov	r0, r8
 8004b4a:	f000 f937 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004b4e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004b50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004b52:	4a79      	ldr	r2, [pc, #484]	; (8004d38 <OTM8009A_Init+0x6f4>)
 8004b54:	21cc      	movs	r1, #204	; 0xcc
 8004b56:	4640      	mov	r0, r8
 8004b58:	f000 f930 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004b5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b60:	4a76      	ldr	r2, [pc, #472]	; (8004d3c <OTM8009A_Init+0x6f8>)
 8004b62:	4619      	mov	r1, r3
 8004b64:	4640      	mov	r0, r8
 8004b66:	f000 f929 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004b6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004b6e:	4a74      	ldr	r2, [pc, #464]	; (8004d40 <OTM8009A_Init+0x6fc>)
 8004b70:	21c5      	movs	r1, #197	; 0xc5
 8004b72:	4640      	mov	r0, r8
 8004b74:	f000 f922 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004b78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004b7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004b7c:	4a71      	ldr	r2, [pc, #452]	; (8004d44 <OTM8009A_Init+0x700>)
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4640      	mov	r0, r8
 8004b82:	f000 f91b 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004b86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004b88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004b8a:	4a6f      	ldr	r2, [pc, #444]	; (8004d48 <OTM8009A_Init+0x704>)
 8004b8c:	21f5      	movs	r1, #245	; 0xf5
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f000 f914 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004b94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004b96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004b98:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <OTM8009A_Init+0x708>)
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f000 f90d 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004ba2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004ba4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	; (8004d50 <OTM8009A_Init+0x70c>)
 8004ba8:	21c6      	movs	r1, #198	; 0xc6
 8004baa:	4640      	mov	r0, r8
 8004bac:	f000 f906 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004bb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bb4:	4a67      	ldr	r2, [pc, #412]	; (8004d54 <OTM8009A_Init+0x710>)
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4640      	mov	r0, r8
 8004bba:	f000 f8ff 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004bbe:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004bc2:	4a65      	ldr	r2, [pc, #404]	; (8004d58 <OTM8009A_Init+0x714>)
 8004bc4:	21ff      	movs	r1, #255	; 0xff
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	f000 f8f8 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004bce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bd0:	4a60      	ldr	r2, [pc, #384]	; (8004d54 <OTM8009A_Init+0x710>)
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f000 f8f1 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bde:	4a5d      	ldr	r2, [pc, #372]	; (8004d54 <OTM8009A_Init+0x710>)
 8004be0:	4619      	mov	r1, r3
 8004be2:	4640      	mov	r0, r8
 8004be4:	f000 f8ea 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004be8:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004bec:	4a5b      	ldr	r2, [pc, #364]	; (8004d5c <OTM8009A_Init+0x718>)
 8004bee:	21e1      	movs	r1, #225	; 0xe1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	f000 f8e3 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004bf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bfa:	4a56      	ldr	r2, [pc, #344]	; (8004d54 <OTM8009A_Init+0x710>)
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f000 f8dc 	bl	8004dbc <otm8009a_write_reg>
 8004c04:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004c06:	2310      	movs	r3, #16
 8004c08:	4a55      	ldr	r2, [pc, #340]	; (8004d60 <OTM8009A_Init+0x71c>)
 8004c0a:	21e2      	movs	r1, #226	; 0xe2
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	f000 f8d5 	bl	8004dbc <otm8009a_write_reg>
 8004c12:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004c14:	2300      	movs	r3, #0
 8004c16:	4a53      	ldr	r2, [pc, #332]	; (8004d64 <OTM8009A_Init+0x720>)
 8004c18:	2111      	movs	r1, #17
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f000 f8ce 	bl	8004dbc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004c20:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004c22:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004c24:	4648      	mov	r0, r9
 8004c26:	f7ff fcff 	bl	8004628 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8004c2a:	f1ba 0f00 	cmp.w	sl, #0
 8004c2e:	d062      	beq.n	8004cf6 <OTM8009A_Init+0x6b2>
 8004c30:	f1ba 0f02 	cmp.w	sl, #2
 8004c34:	d108      	bne.n	8004c48 <OTM8009A_Init+0x604>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004c36:	2300      	movs	r3, #0
 8004c38:	4a4b      	ldr	r2, [pc, #300]	; (8004d68 <OTM8009A_Init+0x724>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004c3a:	213a      	movs	r1, #58	; 0x3a
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	f000 f8bd 	bl	8004dbc <otm8009a_write_reg>
 8004c42:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004c44:	f8c5 a004 	str.w	sl, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004c48:	f1bb 0f01 	cmp.w	fp, #1
 8004c4c:	d156      	bne.n	8004cfc <OTM8009A_Init+0x6b8>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004c4e:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004c50:	f10d 0207 	add.w	r2, sp, #7
 8004c54:	2136      	movs	r1, #54	; 0x36
 8004c56:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004c58:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f000 f8ad 	bl	8004dbc <otm8009a_write_reg>
 8004c62:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004c64:	2304      	movs	r3, #4
 8004c66:	4a41      	ldr	r2, [pc, #260]	; (8004d6c <OTM8009A_Init+0x728>)
 8004c68:	212a      	movs	r1, #42	; 0x2a
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f000 f8a6 	bl	8004dbc <otm8009a_write_reg>
 8004c70:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004c72:	2304      	movs	r3, #4
 8004c74:	4a3e      	ldr	r2, [pc, #248]	; (8004d70 <OTM8009A_Init+0x72c>)
 8004c76:	212b      	movs	r1, #43	; 0x2b
 8004c78:	4640      	mov	r0, r8
 8004c7a:	f000 f89f 	bl	8004dbc <otm8009a_write_reg>
 8004c7e:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004c80:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004c84:	2300      	movs	r3, #0
 8004c86:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <OTM8009A_Init+0x730>)
 8004c88:	2151      	movs	r1, #81	; 0x51
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f000 f896 	bl	8004dbc <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004c90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004c92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004c94:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <OTM8009A_Init+0x734>)
 8004c96:	2153      	movs	r1, #83	; 0x53
 8004c98:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004c9a:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004c9c:	f000 f88e 	bl	8004dbc <otm8009a_write_reg>
 8004ca0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <OTM8009A_Init+0x738>)
 8004ca6:	2155      	movs	r1, #85	; 0x55
 8004ca8:	4640      	mov	r0, r8
 8004caa:	f000 f887 	bl	8004dbc <otm8009a_write_reg>
 8004cae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <OTM8009A_Init+0x73c>)
 8004cb4:	215e      	movs	r1, #94	; 0x5e
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f000 f880 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004cbc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8004cbe:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <OTM8009A_Init+0x740>)
 8004cc2:	2129      	movs	r1, #41	; 0x29
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	f000 f879 	bl	8004dbc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004ccc:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cce:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <OTM8009A_Init+0x710>)
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f000 f872 	bl	8004dbc <otm8009a_write_reg>
 8004cd8:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <OTM8009A_Init+0x744>)
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f000 f86b 	bl	8004dbc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004ce6:	42c5      	cmn	r5, r0
}
 8004ce8:	bf14      	ite	ne
 8004cea:	f04f 30ff 	movne.w	r0, #4294967295
 8004cee:	2000      	moveq	r0, #0
 8004cf0:	b003      	add	sp, #12
 8004cf2:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004cf6:	4653      	mov	r3, sl
 8004cf8:	4a24      	ldr	r2, [pc, #144]	; (8004d8c <OTM8009A_Init+0x748>)
 8004cfa:	e79e      	b.n	8004c3a <OTM8009A_Init+0x5f6>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	e7c0      	b.n	8004c84 <OTM8009A_Init+0x640>
 8004d02:	bf00      	nop
 8004d04:	08021d5f 	.word	0x08021d5f
 8004d08:	08021c97 	.word	0x08021c97
 8004d0c:	08021d3e 	.word	0x08021d3e
 8004d10:	08021ca1 	.word	0x08021ca1
 8004d14:	08021d5d 	.word	0x08021d5d
 8004d18:	08021cad 	.word	0x08021cad
 8004d1c:	08021d59 	.word	0x08021d59
 8004d20:	08021cbc 	.word	0x08021cbc
 8004d24:	08021d5a 	.word	0x08021d5a
 8004d28:	08021ccb 	.word	0x08021ccb
 8004d2c:	08021d5b 	.word	0x08021d5b
 8004d30:	08021cd5 	.word	0x08021cd5
 8004d34:	08021d5c 	.word	0x08021d5c
 8004d38:	08021ce4 	.word	0x08021ce4
 8004d3c:	08021d49 	.word	0x08021d49
 8004d40:	08021d6a 	.word	0x08021d6a
 8004d44:	08021d6b 	.word	0x08021d6b
 8004d48:	08021d6c 	.word	0x08021d6c
 8004d4c:	08021d6d 	.word	0x08021d6d
 8004d50:	08021d6e 	.word	0x08021d6e
 8004d54:	08021d3d 	.word	0x08021d3d
 8004d58:	08021cf3 	.word	0x08021cf3
 8004d5c:	08021cf6 	.word	0x08021cf6
 8004d60:	08021d06 	.word	0x08021d06
 8004d64:	08021d60 	.word	0x08021d60
 8004d68:	08021d61 	.word	0x08021d61
 8004d6c:	08021c28 	.word	0x08021c28
 8004d70:	08021c2c 	.word	0x08021c2c
 8004d74:	08021d63 	.word	0x08021d63
 8004d78:	08021d64 	.word	0x08021d64
 8004d7c:	08021d65 	.word	0x08021d65
 8004d80:	08021d66 	.word	0x08021d66
 8004d84:	08021d67 	.word	0x08021d67
 8004d88:	08021d68 	.word	0x08021d68
 8004d8c:	08021d62 	.word	0x08021d62

08004d90 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004d90:	b160      	cbz	r0, 8004dac <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d92:	684b      	ldr	r3, [r1, #4]
 8004d94:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d96:	688b      	ldr	r3, [r1, #8]
 8004d98:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d9a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8004d9c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d9e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <OTM8009A_RegisterBusIO+0x24>)
 8004da2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <OTM8009A_RegisterBusIO+0x28>)
 8004da6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8004da8:	2000      	movs	r0, #0
 8004daa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	0800460d 	.word	0x0800460d
 8004db8:	0800461b 	.word	0x0800461b

08004dbc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004dbc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004dbe:	6804      	ldr	r4, [r0, #0]
 8004dc0:	6880      	ldr	r0, [r0, #8]
 8004dc2:	46a4      	mov	ip, r4
}
 8004dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004dc8:	4760      	bx	ip
	...

08004dcc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8004dcc:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <BSP_I2C4_DeInit+0x44>)
{
 8004dce:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8004dd6:	b10b      	cbz	r3, 8004ddc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8004dd8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8004dda:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8004ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004de0:	480c      	ldr	r0, [pc, #48]	; (8004e14 <BSP_I2C4_DeInit+0x48>)
 8004de2:	f002 f853 	bl	8006e8c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8004de6:	480b      	ldr	r0, [pc, #44]	; (8004e14 <BSP_I2C4_DeInit+0x48>)
 8004de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dec:	f002 f84e 	bl	8006e8c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8004df0:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004df2:	480a      	ldr	r0, [pc, #40]	; (8004e1c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8004df4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8004df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004e00:	f002 faa3 	bl	800734a <HAL_I2C_DeInit>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d0e7      	beq.n	8004dd8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8004e08:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8004e0c:	e7e5      	b.n	8004dda <BSP_I2C4_DeInit+0xe>
 8004e0e:	bf00      	nop
 8004e10:	24005178 	.word	0x24005178
 8004e14:	58020c00 	.word	0x58020c00
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	2400efac 	.word	0x2400efac

08004e20 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004e20:	2300      	movs	r3, #0
 8004e22:	2201      	movs	r2, #1
{
 8004e24:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8004e26:	6041      	str	r1, [r0, #4]
{
 8004e28:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004e2a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004e2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8004e30:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004e34:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004e38:	f002 fa35 	bl	80072a6 <HAL_I2C_Init>
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	b108      	cbz	r0, 8004e44 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8004e40:	2001      	movs	r0, #1
}
 8004e42:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004e44:	4620      	mov	r0, r4
 8004e46:	f002 fc10 	bl	800766a <HAL_I2CEx_ConfigAnalogFilter>
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1f7      	bne.n	8004e40 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004e50:	4620      	mov	r0, r4
 8004e52:	f002 fc30 	bl	80076b6 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8004e56:	3800      	subs	r0, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2001      	movne	r0, #1
 8004e5c:	e7f1      	b.n	8004e42 <MX_I2C4_Init+0x22>
	...

08004e60 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8004e60:	4ba5      	ldr	r3, [pc, #660]	; (80050f8 <BSP_I2C4_Init+0x298>)
 8004e62:	48a6      	ldr	r0, [pc, #664]	; (80050fc <BSP_I2C4_Init+0x29c>)
{
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8004e68:	6003      	str	r3, [r0, #0]
{
 8004e6a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 8004e6c:	4ba4      	ldr	r3, [pc, #656]	; (8005100 <BSP_I2C4_Init+0x2a0>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	9200      	str	r2, [sp, #0]
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	f040 80d0 	bne.w	8005018 <BSP_I2C4_Init+0x1b8>
    I2c4InitCounter++;
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8004e7c:	f002 fbf0 	bl	8007660 <HAL_I2C_GetState>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f040 80c9 	bne.w	8005018 <BSP_I2C4_Init+0x1b8>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004e86:	4d9f      	ldr	r5, [pc, #636]	; (8005104 <BSP_I2C4_Init+0x2a4>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004e88:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8004e8c:	2702      	movs	r7, #2
 8004e8e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004e94:	a90d      	add	r1, sp, #52	; 0x34
 8004e96:	489c      	ldr	r0, [pc, #624]	; (8005108 <BSP_I2C4_Init+0x2a8>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004ea0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8004eac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004eb8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ec8:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ecc:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8004ece:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ed2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8004ed4:	f001 fef4 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8004ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004edc:	a90d      	add	r1, sp, #52	; 0x34
 8004ede:	488a      	ldr	r0, [pc, #552]	; (8005108 <BSP_I2C4_Init+0x2a8>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8004ee0:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8004ee2:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ee6:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ee8:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8004eec:	f001 fee8 	bl	8006cc0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8004ef0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8004efc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	930c      	str	r3, [sp, #48]	; 0x30
 8004f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8004f08:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f10:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8004f14:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f1c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004f20:	f003 fe12 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d071      	beq.n	800500c <BSP_I2C4_Init+0x1ac>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004f28:	4b78      	ldr	r3, [pc, #480]	; (800510c <BSP_I2C4_Init+0x2ac>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004f2a:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004f2e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8005114 <BSP_I2C4_Init+0x2b4>
 8004f32:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004f36:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004f3a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004f3e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f42:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004f46:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004f48:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f4c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004f50:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f58:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <BSP_I2C4_Init+0x2b0>)
 8004f5e:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004f62:	9a00      	ldr	r2, [sp, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4690      	mov	r8, r2
{
 8004f68:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004f6a:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8004f6c:	f240 3479 	movw	r4, #889	; 0x379
 8004f70:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004f72:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8004f74:	45a4      	cmp	ip, r4
 8004f76:	d95a      	bls.n	800502e <BSP_I2C4_Init+0x1ce>
 8004f78:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004f7a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004f7c:	45ab      	cmp	fp, r5
 8004f7e:	d852      	bhi.n	8005026 <BSP_I2C4_Init+0x1c6>
 8004f80:	9c02      	ldr	r4, [sp, #8]
 8004f82:	42ac      	cmp	r4, r5
 8004f84:	d34f      	bcc.n	8005026 <BSP_I2C4_Init+0x1c6>
            if(presc != prev_presc)
 8004f86:	4596      	cmp	lr, r2
 8004f88:	d04d      	beq.n	8005026 <BSP_I2C4_Init+0x1c6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004f8a:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8004f8e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004f90:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004f92:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004f96:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004f98:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004f9c:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004fa0:	d93e      	bls.n	8005020 <BSP_I2C4_Init+0x1c0>
 8004fa2:	4a5b      	ldr	r2, [pc, #364]	; (8005110 <BSP_I2C4_Init+0x2b0>)
 8004fa4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004fa6:	4b5a      	ldr	r3, [pc, #360]	; (8005110 <BSP_I2C4_Init+0x2b0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004fa8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8004fac:	4a59      	ldr	r2, [pc, #356]	; (8005114 <BSP_I2C4_Init+0x2b4>)
 8004fae:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004fb0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004fb2:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004fb6:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004fb8:	f242 7310 	movw	r3, #10000	; 0x2710
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 8004fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc4:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 8004fc8:	3b0a      	subs	r3, #10
 8004fca:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004fcc:	9b06      	ldr	r3, [sp, #24]
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	d138      	bne.n	8005044 <BSP_I2C4_Init+0x1e4>
        if (idx < I2C_VALID_TIMING_NBR)
 8004fd2:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8004fd6:	d819      	bhi.n	800500c <BSP_I2C4_Init+0x1ac>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004fd8:	2314      	movs	r3, #20
 8004fda:	fb03 f808 	mul.w	r8, r3, r8
 8004fde:	4b4d      	ldr	r3, [pc, #308]	; (8005114 <BSP_I2C4_Init+0x2b4>)
 8004fe0:	eb03 0208 	add.w	r2, r3, r8
 8004fe4:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004fe8:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004fea:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004fee:	6853      	ldr	r3, [r2, #4]
 8004ff0:	051b      	lsls	r3, r3, #20
 8004ff2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004ff6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004ff8:	6893      	ldr	r3, [r2, #8]
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005000:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005002:	68d3      	ldr	r3, [r2, #12]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005008:	4323      	orrs	r3, r4
 800500a:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800500c:	9900      	ldr	r1, [sp, #0]
 800500e:	483b      	ldr	r0, [pc, #236]	; (80050fc <BSP_I2C4_Init+0x29c>)
 8005010:	f7ff ff06 	bl	8004e20 <MX_I2C4_Init>
 8005014:	2800      	cmp	r0, #0
 8005016:	d16b      	bne.n	80050f0 <BSP_I2C4_Init+0x290>
  int32_t ret = BSP_ERROR_NONE;
 8005018:	2000      	movs	r0, #0
}
 800501a:	b013      	add	sp, #76	; 0x4c
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	4696      	mov	lr, r2
 8005022:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005026:	3701      	adds	r7, #1
 8005028:	440d      	add	r5, r1
 800502a:	2f10      	cmp	r7, #16
 800502c:	d1a6      	bne.n	8004f7c <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800502e:	2e10      	cmp	r6, #16
 8005030:	448c      	add	ip, r1
 8005032:	d19b      	bne.n	8004f6c <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005034:	3201      	adds	r2, #1
 8005036:	4401      	add	r1, r0
 8005038:	2a10      	cmp	r2, #16
 800503a:	d195      	bne.n	8004f68 <BSP_I2C4_Init+0x108>
 800503c:	f1b8 0f00 	cmp.w	r8, #0
 8005040:	d1af      	bne.n	8004fa2 <BSP_I2C4_Init+0x142>
 8005042:	e7b0      	b.n	8004fa6 <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005044:	6813      	ldr	r3, [r2, #0]
 8005046:	f06f 0401 	mvn.w	r4, #1
 800504a:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800504c:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800504e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005052:	4419      	add	r1, r3
 8005054:	9104      	str	r1, [sp, #16]
 8005056:	eb03 010b 	add.w	r1, r3, fp
 800505a:	4361      	muls	r1, r4
 800505c:	9c02      	ldr	r4, [sp, #8]
 800505e:	9101      	str	r1, [sp, #4]
 8005060:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005062:	9904      	ldr	r1, [sp, #16]
 8005064:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005066:	f241 245c 	movw	r4, #4700	; 0x125c
 800506a:	9707      	str	r7, [sp, #28]
 800506c:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005070:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005072:	42a1      	cmp	r1, r4
 8005074:	d931      	bls.n	80050da <BSP_I2C4_Init+0x27a>
 8005076:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 800507a:	d22e      	bcs.n	80050da <BSP_I2C4_Init+0x27a>
 800507c:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800507e:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005082:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005086:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 800508a:	9c08      	ldr	r4, [sp, #32]
 800508c:	f109 0918 	add.w	r9, r9, #24
 8005090:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005092:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 8005096:	f241 0447 	movw	r4, #4167	; 0x1047
 800509a:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800509e:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80050a2:	45a2      	cmp	sl, r4
 80050a4:	d812      	bhi.n	80050cc <BSP_I2C4_Init+0x26c>
 80050a6:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 80050aa:	d30f      	bcc.n	80050cc <BSP_I2C4_Init+0x26c>
 80050ac:	4570      	cmp	r0, lr
 80050ae:	d20d      	bcs.n	80050cc <BSP_I2C4_Init+0x26c>
              error = -error;
 80050b0:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 80050b4:	bf28      	it	cs
 80050b6:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80050b8:	9c03      	ldr	r4, [sp, #12]
 80050ba:	4554      	cmp	r4, sl
 80050bc:	d906      	bls.n	80050cc <BSP_I2C4_Init+0x26c>
              I2c_valid_timing[count].scll = scll;
 80050be:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 80050c0:	46b0      	mov	r8, r6
 80050c2:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80050c6:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 80050c8:	9c05      	ldr	r4, [sp, #20]
 80050ca:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80050cc:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80050d0:	eba9 0903 	sub.w	r9, r9, r3
 80050d4:	441d      	add	r5, r3
 80050d6:	449e      	add	lr, r3
 80050d8:	d1db      	bne.n	8005092 <BSP_I2C4_Init+0x232>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80050da:	9c01      	ldr	r4, [sp, #4]
 80050dc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80050e0:	4419      	add	r1, r3
 80050e2:	eba4 0403 	sub.w	r4, r4, r3
 80050e6:	9401      	str	r4, [sp, #4]
 80050e8:	d1bd      	bne.n	8005066 <BSP_I2C4_Init+0x206>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80050ea:	3601      	adds	r6, #1
 80050ec:	3214      	adds	r2, #20
 80050ee:	e76d      	b.n	8004fcc <BSP_I2C4_Init+0x16c>
          ret = BSP_ERROR_BUS_FAILURE;
 80050f0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80050f4:	e791      	b.n	800501a <BSP_I2C4_Init+0x1ba>
 80050f6:	bf00      	nop
 80050f8:	58001c00 	.word	0x58001c00
 80050fc:	2400efac 	.word	0x2400efac
 8005100:	24005178 	.word	0x24005178
 8005104:	58024400 	.word	0x58024400
 8005108:	58020c00 	.word	0x58020c00
 800510c:	3b9aca00 	.word	0x3b9aca00
 8005110:	24005b7c 	.word	0x24005b7c
 8005114:	2400517c 	.word	0x2400517c

08005118 <BSP_I2C4_WriteReg>:
{
 8005118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800511a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800511e:	9200      	str	r2, [sp, #0]
 8005120:	460a      	mov	r2, r1
 8005122:	4601      	mov	r1, r0
 8005124:	4808      	ldr	r0, [pc, #32]	; (8005148 <BSP_I2C4_WriteReg+0x30>)
 8005126:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800512a:	2301      	movs	r3, #1
 800512c:	f002 f926 	bl	800737c <HAL_I2C_Mem_Write>
 8005130:	b140      	cbz	r0, 8005144 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005132:	4805      	ldr	r0, [pc, #20]	; (8005148 <BSP_I2C4_WriteReg+0x30>)
 8005134:	f002 fa97 	bl	8007666 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005138:	2804      	cmp	r0, #4
 800513a:	bf0c      	ite	eq
 800513c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005140:	f06f 0003 	mvnne.w	r0, #3
}
 8005144:	b004      	add	sp, #16
 8005146:	bd10      	pop	{r4, pc}
 8005148:	2400efac 	.word	0x2400efac

0800514c <BSP_I2C4_ReadReg>:
{
 800514c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800514e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005152:	9200      	str	r2, [sp, #0]
 8005154:	460a      	mov	r2, r1
 8005156:	4601      	mov	r1, r0
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <BSP_I2C4_ReadReg+0x30>)
 800515a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800515e:	2301      	movs	r3, #1
 8005160:	f002 f9c2 	bl	80074e8 <HAL_I2C_Mem_Read>
 8005164:	b140      	cbz	r0, 8005178 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005166:	4805      	ldr	r0, [pc, #20]	; (800517c <BSP_I2C4_ReadReg+0x30>)
 8005168:	f002 fa7d 	bl	8007666 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800516c:	2804      	cmp	r0, #4
 800516e:	bf0c      	ite	eq
 8005170:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005174:	f06f 0003 	mvnne.w	r0, #3
}
 8005178:	b004      	add	sp, #16
 800517a:	bd10      	pop	{r4, pc}
 800517c:	2400efac 	.word	0x2400efac

08005180 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005180:	f000 bd0c 	b.w	8005b9c <HAL_GetTick>

08005184 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005184:	4a09      	ldr	r2, [pc, #36]	; (80051ac <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005186:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800518a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800518c:	684a      	ldr	r2, [r1, #4]
 800518e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005190:	2201      	movs	r2, #1
 8005192:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005198:	680a      	ldr	r2, [r1, #0]
 800519a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800519c:	2200      	movs	r2, #0
 800519e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80051a2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80051a4:	68ca      	ldr	r2, [r1, #12]
 80051a6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80051a8:	f002 be14 	b.w	8007dd4 <HAL_QSPI_Init>
 80051ac:	52005000 	.word	0x52005000

080051b0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 80051b0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80051b2:	b988      	cbnz	r0, 80051d8 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80051b4:	4c0a      	ldr	r4, [pc, #40]	; (80051e0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80051b6:	480b      	ldr	r0, [pc, #44]	; (80051e4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80051b8:	78a2      	ldrb	r2, [r4, #2]
 80051ba:	7861      	ldrb	r1, [r4, #1]
 80051bc:	b94a      	cbnz	r2, 80051d2 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80051be:	f7ff f99d 	bl	80044fc <MT25TL01G_EnableMemoryMappedModeSTR>
 80051c2:	b110      	cbz	r0, 80051ca <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80051c4:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80051c8:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80051ca:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80051cc:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80051ce:	7023      	strb	r3, [r4, #0]
 80051d0:	e7fa      	b.n	80051c8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80051d2:	f7ff f949 	bl	8004468 <MT25TL01G_EnableMemoryMappedModeDTR>
 80051d6:	e7f4      	b.n	80051c2 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80051d8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80051dc:	e7f4      	b.n	80051c8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80051de:	bf00      	nop
 80051e0:	2400eff8 	.word	0x2400eff8
 80051e4:	2400eef4 	.word	0x2400eef4

080051e8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	460e      	mov	r6, r1
 80051ec:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80051ee:	bb28      	cbnz	r0, 800523c <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80051f0:	4c17      	ldr	r4, [pc, #92]	; (8005250 <BSP_QSPI_ConfigFlash+0x68>)
 80051f2:	7823      	ldrb	r3, [r4, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d024      	beq.n	8005242 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	4d16      	ldr	r5, [pc, #88]	; (8005254 <BSP_QSPI_ConfigFlash+0x6c>)
 80051fc:	bf08      	it	eq
 80051fe:	2010      	moveq	r0, #16
 8005200:	60e8      	str	r0, [r5, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005202:	4628      	mov	r0, r5
 8005204:	f002 fde6 	bl	8007dd4 <HAL_QSPI_Init>
 8005208:	b9f0      	cbnz	r0, 8005248 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800520a:	7863      	ldrb	r3, [r4, #1]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d10f      	bne.n	8005230 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005210:	2e03      	cmp	r6, #3
 8005212:	d105      	bne.n	8005220 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005214:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005216:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005218:	7066      	strb	r6, [r4, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800521a:	7023      	strb	r3, [r4, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800521c:	70a7      	strb	r7, [r4, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005220:	4628      	mov	r0, r5
 8005222:	f7ff f905 	bl	8004430 <MT25TL01G_ExitQPIMode>
 8005226:	2800      	cmp	r0, #0
 8005228:	d0f4      	beq.n	8005214 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800522a:	f06f 0004 	mvn.w	r0, #4
 800522e:	e7f6      	b.n	800521e <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8005230:	2e03      	cmp	r6, #3
 8005232:	d1ef      	bne.n	8005214 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005234:	4628      	mov	r0, r5
 8005236:	f7ff f8df 	bl	80043f8 <MT25TL01G_EnterQPIMode>
 800523a:	e7f4      	b.n	8005226 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800523c:	f06f 0001 	mvn.w	r0, #1
 8005240:	e7ed      	b.n	800521e <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005242:	f06f 0019 	mvn.w	r0, #25
 8005246:	e7ea      	b.n	800521e <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005248:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800524c:	e7e7      	b.n	800521e <BSP_QSPI_ConfigFlash+0x36>
 800524e:	bf00      	nop
 8005250:	2400eff8 	.word	0x2400eff8
 8005254:	2400eef4 	.word	0x2400eef4

08005258 <BSP_QSPI_Init>:
{
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	460e      	mov	r6, r1
 800525e:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005260:	4604      	mov	r4, r0
 8005262:	2800      	cmp	r0, #0
 8005264:	f040 81ac 	bne.w	80055c0 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005268:	4d03      	ldr	r5, [pc, #12]	; (8005278 <BSP_QSPI_Init+0x20>)
 800526a:	782b      	ldrb	r3, [r5, #0]
 800526c:	b133      	cbz	r3, 800527c <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800526e:	2000      	movs	r0, #0
}
 8005270:	b024      	add	sp, #144	; 0x90
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	bf00      	nop
 8005278:	2400eff8 	.word	0x2400eff8
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800527c:	4bc2      	ldr	r3, [pc, #776]	; (8005588 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800527e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005282:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005284:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 8005286:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800528a:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800528e:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005296:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800529a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800529e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80052a2:	9201      	str	r2, [sp, #4]
 80052a4:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 80052a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80052a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ac:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80052ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80052b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 80052b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052ba:	f042 0202 	orr.w	r2, r2, #2
 80052be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052c6:	f002 0202 	and.w	r2, r2, #2
 80052ca:	9202      	str	r2, [sp, #8]
 80052cc:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80052ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052de:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80052e2:	9203      	str	r2, [sp, #12]
 80052e4:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80052e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052f6:	f002 0208 	and.w	r2, r2, #8
 80052fa:	9204      	str	r2, [sp, #16]
 80052fc:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80052fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005302:	f042 0220 	orr.w	r2, r2, #32
 8005306:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800530a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800530e:	f002 0220 	and.w	r2, r2, #32
 8005312:	9205      	str	r2, [sp, #20]
 8005314:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005316:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800531a:	f042 0220 	orr.w	r2, r2, #32
 800531e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005326:	f002 0220 	and.w	r2, r2, #32
 800532a:	9206      	str	r2, [sp, #24]
 800532c:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800532e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005332:	f042 0220 	orr.w	r2, r2, #32
 8005336:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800533a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800533e:	f002 0220 	and.w	r2, r2, #32
 8005342:	9207      	str	r2, [sp, #28]
 8005344:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005346:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800534a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800534e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005352:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005356:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800535a:	9208      	str	r2, [sp, #32]
 800535c:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800535e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005366:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800536a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800536e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005372:	9209      	str	r2, [sp, #36]	; 0x24
 8005374:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005376:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800537a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800537e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005382:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005386:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800538a:	920a      	str	r2, [sp, #40]	; 0x28
 800538c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800538e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005396:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800539a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800539e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80053a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80053a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80053a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	930c      	str	r3, [sp, #48]	; 0x30
 80053bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c4:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80053c6:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80053c8:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80053cc:	486f      	ldr	r0, [pc, #444]	; (800558c <BSP_QSPI_Init+0x334>)
 80053ce:	f001 fc77 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80053d2:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80053d4:	a916      	add	r1, sp, #88	; 0x58
 80053d6:	486e      	ldr	r0, [pc, #440]	; (8005590 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80053d8:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80053da:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80053de:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80053e2:	f001 fc6d 	bl	8006cc0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80053e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80053ea:	a916      	add	r1, sp, #88	; 0x58
 80053ec:	4869      	ldr	r0, [pc, #420]	; (8005594 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80053ee:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80053f0:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80053f2:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80053f4:	f001 fc64 	bl	8006cc0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80053f8:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80053fa:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80053fe:	4866      	ldr	r0, [pc, #408]	; (8005598 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005400:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005404:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005406:	f001 fc5b 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800540a:	a916      	add	r1, sp, #88	; 0x58
 800540c:	4863      	ldr	r0, [pc, #396]	; (800559c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800540e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005412:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005416:	f001 fc53 	bl	8006cc0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800541a:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800541c:	a916      	add	r1, sp, #88	; 0x58
 800541e:	485e      	ldr	r0, [pc, #376]	; (8005598 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005420:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005422:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005424:	f001 fc4c 	bl	8006cc0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005428:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800542a:	a916      	add	r1, sp, #88	; 0x58
 800542c:	485b      	ldr	r0, [pc, #364]	; (800559c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800542e:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005430:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005432:	f001 fc45 	bl	8006cc0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005436:	a916      	add	r1, sp, #88	; 0x58
 8005438:	4855      	ldr	r0, [pc, #340]	; (8005590 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800543a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800543e:	f001 fc3f 	bl	8006cc0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005442:	a916      	add	r1, sp, #88	; 0x58
 8005444:	4855      	ldr	r0, [pc, #340]	; (800559c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005446:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800544a:	f001 fc39 	bl	8006cc0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800544e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005452:	a916      	add	r1, sp, #88	; 0x58
 8005454:	484e      	ldr	r0, [pc, #312]	; (8005590 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005456:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005458:	f001 fc32 	bl	8006cc0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800545c:	4622      	mov	r2, r4
 800545e:	210f      	movs	r1, #15
 8005460:	205c      	movs	r0, #92	; 0x5c
 8005462:	f000 fbcb 	bl	8005bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005466:	205c      	movs	r0, #92	; 0x5c
 8005468:	f000 fbfa 	bl	8005c60 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800546c:	a811      	add	r0, sp, #68	; 0x44
 800546e:	f7fe ff1a 	bl	80042a6 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005472:	7872      	ldrb	r2, [r6, #1]
 8005474:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005476:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005482:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005486:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 8005488:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800548c:	a90d      	add	r1, sp, #52	; 0x34
 800548e:	4845      	ldr	r0, [pc, #276]	; (80055a4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005490:	bf08      	it	eq
 8005492:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005494:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005496:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005498:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800549a:	f7ff fe73 	bl	8005184 <MX_QSPI_Init>
 800549e:	2800      	cmp	r0, #0
 80054a0:	f040 8091 	bne.w	80055c6 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80054a4:	2103      	movs	r1, #3
 80054a6:	483f      	ldr	r0, [pc, #252]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054a8:	f7ff f86e 	bl	8004588 <MT25TL01G_ResetEnable>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d17c      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80054b0:	2103      	movs	r1, #3
 80054b2:	483c      	ldr	r0, [pc, #240]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054b4:	f7ff f889 	bl	80045ca <MT25TL01G_ResetMemory>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d176      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80054bc:	7869      	ldrb	r1, [r5, #1]
 80054be:	4839      	ldr	r0, [pc, #228]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054c0:	f7fe ff02 	bl	80042c8 <MT25TL01G_AutoPollingMemReady>
 80054c4:	4601      	mov	r1, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d16f      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80054ca:	4836      	ldr	r0, [pc, #216]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054cc:	f7ff f85c 	bl	8004588 <MT25TL01G_ResetEnable>
 80054d0:	4601      	mov	r1, r0
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d169      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80054d6:	4833      	ldr	r0, [pc, #204]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054d8:	f7ff f877 	bl	80045ca <MT25TL01G_ResetMemory>
 80054dc:	4601      	mov	r1, r0
 80054de:	2800      	cmp	r0, #0
 80054e0:	d163      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80054e2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80054e4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80054e6:	482f      	ldr	r0, [pc, #188]	; (80055a4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80054e8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80054ea:	f7fe feed 	bl	80042c8 <MT25TL01G_AutoPollingMemReady>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d15b      	bne.n	80055aa <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80054f2:	7869      	ldrb	r1, [r5, #1]
 80054f4:	482b      	ldr	r0, [pc, #172]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 80054f6:	f7fe ff56 	bl	80043a6 <MT25TL01G_Enter4BytesAddressMode>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d155      	bne.n	80055aa <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80054fe:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 8005502:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005506:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800550c:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800550e:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005510:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005512:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005514:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005518:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 800551a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800551c:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005520:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005524:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005528:	481e      	ldr	r0, [pc, #120]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 800552a:	f002 fca1 	bl	8007e70 <HAL_QSPI_Command>
 800552e:	2800      	cmp	r0, #0
 8005530:	d13b      	bne.n	80055aa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	f10d 0102 	add.w	r1, sp, #2
 800553a:	481a      	ldr	r0, [pc, #104]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 800553c:	f002 fd34 	bl	8007fa8 <HAL_QSPI_Receive>
 8005540:	bb98      	cbnz	r0, 80055aa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005542:	7869      	ldrb	r1, [r5, #1]
 8005544:	4817      	ldr	r0, [pc, #92]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 8005546:	f7fe feea 	bl	800431e <MT25TL01G_WriteEnable>
 800554a:	bb70      	cbnz	r0, 80055aa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800554c:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	a916      	add	r1, sp, #88	; 0x58
 8005554:	4813      	ldr	r0, [pc, #76]	; (80055a4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005556:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005558:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800555c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005560:	051b      	lsls	r3, r3, #20
 8005562:	0d1b      	lsrs	r3, r3, #20
 8005564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005570:	f002 fc7e 	bl	8007e70 <HAL_QSPI_Command>
 8005574:	b9c8      	cbnz	r0, 80055aa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	f10d 0102 	add.w	r1, sp, #2
 800557e:	4809      	ldr	r0, [pc, #36]	; (80055a4 <BSP_QSPI_Init+0x34c>)
 8005580:	f002 fcb9 	bl	8007ef6 <HAL_QSPI_Transmit>
 8005584:	e010      	b.n	80055a8 <BSP_QSPI_Init+0x350>
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	58020400 	.word	0x58020400
 8005590:	58021800 	.word	0x58021800
 8005594:	58020c00 	.word	0x58020c00
 8005598:	58021c00 	.word	0x58021c00
 800559c:	58021400 	.word	0x58021400
 80055a0:	08021d70 	.word	0x08021d70
 80055a4:	2400eef4 	.word	0x2400eef4
 80055a8:	b110      	cbz	r0, 80055b0 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80055aa:	f06f 0004 	mvn.w	r0, #4
 80055ae:	e65f      	b.n	8005270 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80055b0:	7872      	ldrb	r2, [r6, #1]
 80055b2:	7831      	ldrb	r1, [r6, #0]
 80055b4:	f7ff fe18 	bl	80051e8 <BSP_QSPI_ConfigFlash>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f43f ae58 	beq.w	800526e <BSP_QSPI_Init+0x16>
 80055be:	e7f4      	b.n	80055aa <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 80055c0:	f06f 0001 	mvn.w	r0, #1
 80055c4:	e654      	b.n	8005270 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80055c6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80055ca:	e651      	b.n	8005270 <BSP_QSPI_Init+0x18>

080055cc <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80055cc:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80055ce:	4604      	mov	r4, r0
 80055d0:	b970      	cbnz	r0, 80055f0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <BSP_SDRAM_DeInit+0x2c>)
 80055d4:	4809      	ldr	r0, [pc, #36]	; (80055fc <BSP_SDRAM_DeInit+0x30>)
 80055d6:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80055d8:	f004 fa40 	bl	8009a5c <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80055dc:	207a      	movs	r0, #122	; 0x7a
 80055de:	f000 fb4d 	bl	8005c7c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80055e2:	4807      	ldr	r0, [pc, #28]	; (8005600 <BSP_SDRAM_DeInit+0x34>)
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <BSP_SDRAM_DeInit+0x38>)
 80055e6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80055e8:	f002 fab5 	bl	8007b56 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80055ec:	4620      	mov	r0, r4
}
 80055ee:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80055f0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80055f4:	e7fb      	b.n	80055ee <BSP_SDRAM_DeInit+0x22>
 80055f6:	bf00      	nop
 80055f8:	52004140 	.word	0x52004140
 80055fc:	2400f004 	.word	0x2400f004
 8005600:	24005bec 	.word	0x24005bec
 8005604:	52000040 	.word	0x52000040

08005608 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005608:	2201      	movs	r2, #1
 800560a:	4915      	ldr	r1, [pc, #84]	; (8005660 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800560c:	4b15      	ldr	r3, [pc, #84]	; (8005664 <MX_SDRAM_Init+0x5c>)
{
 800560e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005610:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005614:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005616:	2104      	movs	r1, #4
 8005618:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800561a:	2440      	movs	r4, #64	; 0x40
{
 800561c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800561e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005622:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005626:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8005630:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005634:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8005638:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800563c:	2207      	movs	r2, #7
 800563e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005640:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005644:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005646:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005648:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800564c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005650:	f004 f9dc 	bl	8009a0c <HAL_SDRAM_Init>
}
 8005654:	3800      	subs	r0, #0
 8005656:	bf18      	it	ne
 8005658:	2001      	movne	r0, #1
 800565a:	b008      	add	sp, #32
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop
 8005660:	52004140 	.word	0x52004140
 8005664:	2400f004 	.word	0x2400f004

08005668 <BSP_SDRAM_Init>:
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800566a:	4605      	mov	r5, r0
{
 800566c:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800566e:	2800      	cmp	r0, #0
 8005670:	f040 80dd 	bne.w	800582e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005674:	4b71      	ldr	r3, [pc, #452]	; (800583c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005676:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005678:	a909      	add	r1, sp, #36	; 0x24
 800567a:	4871      	ldr	r0, [pc, #452]	; (8005840 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800567c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005680:	4c70      	ldr	r4, [pc, #448]	; (8005844 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005682:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005686:	4e70      	ldr	r6, [pc, #448]	; (8005848 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005688:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800568c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005690:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005694:	9201      	str	r2, [sp, #4]
 8005696:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005698:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80056a4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056a8:	f002 0201 	and.w	r2, r2, #1
 80056ac:	9202      	str	r2, [sp, #8]
 80056ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056b4:	f042 0208 	orr.w	r2, r2, #8
 80056b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80056bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056c0:	f002 0208 	and.w	r2, r2, #8
 80056c4:	9203      	str	r2, [sp, #12]
 80056c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056cc:	f042 0210 	orr.w	r2, r2, #16
 80056d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80056d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056d8:	f002 0210 	and.w	r2, r2, #16
 80056dc:	9204      	str	r2, [sp, #16]
 80056de:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056e4:	f042 0220 	orr.w	r2, r2, #32
 80056e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80056ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056f0:	f002 0220 	and.w	r2, r2, #32
 80056f4:	9205      	str	r2, [sp, #20]
 80056f6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80056f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005700:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005704:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005708:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800570c:	9206      	str	r2, [sp, #24]
 800570e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005710:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005718:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800571c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005720:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005724:	9207      	str	r2, [sp, #28]
 8005726:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005728:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800572c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005730:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005734:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	9308      	str	r3, [sp, #32]
 8005740:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005742:	2301      	movs	r3, #1
 8005744:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005748:	230c      	movs	r3, #12
 800574a:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800574e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005752:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005754:	f001 fab4 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005758:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800575c:	a909      	add	r1, sp, #36	; 0x24
 800575e:	483b      	ldr	r0, [pc, #236]	; (800584c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005760:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005762:	f001 faad 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005766:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800576a:	a909      	add	r1, sp, #36	; 0x24
 800576c:	4838      	ldr	r0, [pc, #224]	; (8005850 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800576e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005770:	f001 faa6 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005774:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005778:	a909      	add	r1, sp, #36	; 0x24
 800577a:	4836      	ldr	r0, [pc, #216]	; (8005854 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800577e:	f001 fa9f 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005782:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005786:	a909      	add	r1, sp, #36	; 0x24
 8005788:	4833      	ldr	r0, [pc, #204]	; (8005858 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800578c:	f001 fa98 	bl	8006cc0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005790:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005794:	a909      	add	r1, sp, #36	; 0x24
 8005796:	4831      	ldr	r0, [pc, #196]	; (800585c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005798:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800579a:	f001 fa91 	bl	8006cc0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800579e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80057a6:	f240 2002 	movw	r0, #514	; 0x202
 80057aa:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80057ae:	6334      	str	r4, [r6, #48]	; 0x30
 80057b0:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80057b2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80057b6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80057ba:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80057bc:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80057be:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80057c0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80057c2:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80057c6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80057ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80057d0:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80057d2:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80057d4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80057d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80057dc:	f002 f9bb 	bl	8007b56 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80057e0:	4620      	mov	r0, r4
 80057e2:	f002 f949 	bl	8007a78 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80057e6:	462a      	mov	r2, r5
 80057e8:	210f      	movs	r1, #15
 80057ea:	207a      	movs	r0, #122	; 0x7a
 80057ec:	f000 fa06 	bl	8005bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80057f0:	207a      	movs	r0, #122	; 0x7a
 80057f2:	f000 fa35 	bl	8005c60 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff ff06 	bl	8005608 <MX_SDRAM_Init>
 80057fc:	b9d0      	cbnz	r0, 8005834 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80057fe:	4919      	ldr	r1, [pc, #100]	; (8005864 <BSP_SDRAM_Init+0x1fc>)
 8005800:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005802:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005806:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800580a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800580c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005810:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005812:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005816:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800581a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800581c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800581e:	f7fe fd15 	bl	800424c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005822:	2800      	cmp	r0, #0
 8005824:	bf18      	it	ne
 8005826:	f06f 0004 	mvnne.w	r0, #4
}
 800582a:	b00f      	add	sp, #60	; 0x3c
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800582e:	f06f 0001 	mvn.w	r0, #1
 8005832:	e7fa      	b.n	800582a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	e7f7      	b.n	800582a <BSP_SDRAM_Init+0x1c2>
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
 8005840:	58020c00 	.word	0x58020c00
 8005844:	24005b80 	.word	0x24005b80
 8005848:	2400f004 	.word	0x2400f004
 800584c:	58021000 	.word	0x58021000
 8005850:	58021400 	.word	0x58021400
 8005854:	58021800 	.word	0x58021800
 8005858:	58021c00 	.word	0x58021c00
 800585c:	58022000 	.word	0x58022000
 8005860:	52000040 	.word	0x52000040
 8005864:	24005c58 	.word	0x24005c58

08005868 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005870:	4606      	mov	r6, r0
 8005872:	2800      	cmp	r0, #0
 8005874:	d171      	bne.n	800595a <BSP_TS_Init+0xf2>
 8005876:	680b      	ldr	r3, [r1, #0]
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800587e:	d26c      	bcs.n	800595a <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005880:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005882:	1e51      	subs	r1, r2, #1
 8005884:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8005888:	d267      	bcs.n	800595a <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800588a:	4293      	cmp	r3, r2
 800588c:	bf28      	it	cs
 800588e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005890:	68e2      	ldr	r2, [r4, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d861      	bhi.n	800595a <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005896:	2370      	movs	r3, #112	; 0x70
 8005898:	2254      	movs	r2, #84	; 0x54
 800589a:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800589e:	4f32      	ldr	r7, [pc, #200]	; (8005968 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 80058a0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005988 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80058a4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800598c <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80058a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80058ac:	4b2f      	ldr	r3, [pc, #188]	; (800596c <BSP_TS_Init+0x104>)
 80058ae:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80058b0:	4b2f      	ldr	r3, [pc, #188]	; (8005970 <BSP_TS_Init+0x108>)
 80058b2:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80058b4:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <BSP_TS_Init+0x10c>)
 80058b6:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <BSP_TS_Init+0x110>)
 80058ba:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80058bc:	4b2f      	ldr	r3, [pc, #188]	; (800597c <BSP_TS_Init+0x114>)
 80058be:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80058c0:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80058c4:	a906      	add	r1, sp, #24
 80058c6:	4828      	ldr	r0, [pc, #160]	; (8005968 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80058c8:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80058cc:	f7fe fbc4 	bl	8004058 <FT6X06_RegisterBusIO>
 80058d0:	b118      	cbz	r0, 80058da <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 80058d2:	2e01      	cmp	r6, #1
 80058d4:	d044      	beq.n	8005960 <BSP_TS_Init+0xf8>
 80058d6:	2601      	movs	r6, #1
 80058d8:	e7f2      	b.n	80058c0 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80058da:	4669      	mov	r1, sp
 80058dc:	4638      	mov	r0, r7
 80058de:	f7fe fb05 	bl	8003eec <FT6X06_ReadID>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1f5      	bne.n	80058d2 <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 80058e6:	9b00      	ldr	r3, [sp, #0]
 80058e8:	2b11      	cmp	r3, #17
 80058ea:	d1f2      	bne.n	80058d2 <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80058ec:	a903      	add	r1, sp, #12
 80058ee:	4638      	mov	r0, r7
 80058f0:	f7fe faa9 	bl	8003e46 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80058f6:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 80058f8:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80058fc:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4798      	blx	r3
 8005904:	4605      	mov	r5, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	d1e3      	bne.n	80058d2 <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800590a:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800590c:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800590e:	4e1d      	ldr	r6, [pc, #116]	; (8005984 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005910:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005914:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800591a:	68a3      	ldr	r3, [r4, #8]
 800591c:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800591e:	68e3      	ldr	r3, [r4, #12]
 8005920:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005922:	f8d9 3000 	ldr.w	r3, [r9]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	4798      	blx	r3
 800592a:	2800      	cmp	r0, #0
 800592c:	da02      	bge.n	8005934 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800592e:	f06f 0504 	mvn.w	r5, #4
 8005932:	e00e      	b.n	8005952 <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005934:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005936:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005938:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800593a:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800593c:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800593e:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005940:	68e3      	ldr	r3, [r4, #12]
 8005942:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005944:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005946:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005948:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800594a:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800594c:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800594e:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005952:	4628      	mov	r0, r5
 8005954:	b00c      	add	sp, #48	; 0x30
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800595a:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800595e:	e7f8      	b.n	8005952 <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8005960:	f04f 35ff 	mov.w	r5, #4294967295
 8005964:	e7f5      	b.n	8005952 <BSP_TS_Init+0xea>
 8005966:	bf00      	nop
 8005968:	24005c78 	.word	0x24005c78
 800596c:	08004e61 	.word	0x08004e61
 8005970:	08004dcd 	.word	0x08004dcd
 8005974:	0800514d 	.word	0x0800514d
 8005978:	08005119 	.word	0x08005119
 800597c:	08005181 	.word	0x08005181
 8005980:	24000030 	.word	0x24000030
 8005984:	24005ca4 	.word	0x24005ca4
 8005988:	24005ca0 	.word	0x24005ca0
 800598c:	24005ccc 	.word	0x24005ccc

08005990 <BSP_TS_GetState>:
{
 8005990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005994:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 8005996:	2800      	cmp	r0, #0
 8005998:	d14e      	bne.n	8005a38 <BSP_TS_GetState+0xa8>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <BSP_TS_GetState+0xb0>)
 800599c:	a901      	add	r1, sp, #4
 800599e:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <BSP_TS_GetState+0xb4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6810      	ldr	r0, [r2, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4798      	blx	r3
 80059a8:	2800      	cmp	r0, #0
 80059aa:	db42      	blt.n	8005a32 <BSP_TS_GetState+0xa2>
    else if(state.TouchDetected != 0U)
 80059ac:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <BSP_TS_GetState+0xb8>)
 80059ae:	9801      	ldr	r0, [sp, #4]
 80059b0:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80059b4:	6a1f      	ldr	r7, [r3, #32]
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d037      	beq.n	8005a2a <BSP_TS_GetState+0x9a>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80059c0:	070e      	lsls	r6, r1, #28
      y_oriented = state.TouchY;
 80059c2:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80059c6:	bf42      	ittt	mi
 80059c8:	462e      	movmi	r6, r5
        x_oriented = state.TouchY;
 80059ca:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 80059cc:	4632      	movmi	r2, r6
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80059ce:	078e      	lsls	r6, r1, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80059d0:	bf44      	itt	mi
 80059d2:	f108 36ff 	addmi.w	r6, r8, #4294967295
 80059d6:	1b75      	submi	r5, r6, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80059d8:	695e      	ldr	r6, [r3, #20]
 80059da:	0749      	lsls	r1, r1, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80059dc:	bf44      	itt	mi
 80059de:	f106 31ff 	addmi.w	r1, r6, #4294967295
 80059e2:	1a8a      	submi	r2, r1, r2
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	434d      	muls	r5, r1
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80059e8:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80059ea:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80059ec:	434a      	muls	r2, r1
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80059ee:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80059f0:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80059f4:	fbb2 f2f6 	udiv	r2, r2, r6
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80059f8:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80059fa:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80059fc:	60a2      	str	r2, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80059fe:	bf8c      	ite	hi
 8005a00:	eba5 060c 	subhi.w	r6, r5, ip
 8005a04:	ebac 0605 	subls.w	r6, ip, r5
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005a08:	42ba      	cmp	r2, r7
 8005a0a:	bf8c      	ite	hi
 8005a0c:	1bd1      	subhi	r1, r2, r7
 8005a0e:	1ab9      	subls	r1, r7, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005a10:	42b0      	cmp	r0, r6
 8005a12:	d301      	bcc.n	8005a18 <BSP_TS_GetState+0x88>
 8005a14:	4288      	cmp	r0, r1
 8005a16:	d205      	bcs.n	8005a24 <BSP_TS_GetState+0x94>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005a18:	619d      	str	r5, [r3, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005a1a:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005a1c:	2000      	movs	r0, #0
}
 8005a1e:	b004      	add	sp, #16
 8005a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005a24:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8005a28:	e7f8      	b.n	8005a1c <BSP_TS_GetState+0x8c>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8005a2a:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005a2e:	60a7      	str	r7, [r4, #8]
 8005a30:	e7f5      	b.n	8005a1e <BSP_TS_GetState+0x8e>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a32:	f06f 0004 	mvn.w	r0, #4
 8005a36:	e7f2      	b.n	8005a1e <BSP_TS_GetState+0x8e>
    ret = BSP_ERROR_WRONG_PARAM;
 8005a38:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005a3c:	e7ef      	b.n	8005a1e <BSP_TS_GetState+0x8e>
 8005a3e:	bf00      	nop
 8005a40:	24005ccc 	.word	0x24005ccc
 8005a44:	24005ca0 	.word	0x24005ca0
 8005a48:	24005ca4 	.word	0x24005ca4

08005a4c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <SystemInit+0xb0>)
 8005a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	f042 0210 	orr.w	r2, r2, #16
 8005a60:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <SystemInit+0xb4>)
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d805      	bhi.n	8005a7a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	f023 030f 	bic.w	r3, r3, #15
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005a7a:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <SystemInit+0xb8>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a84:	2200      	movs	r2, #0
 8005a86:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005a88:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <SystemInit+0xbc>)
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a8e:	491c      	ldr	r1, [pc, #112]	; (8005b00 <SystemInit+0xb4>)
  RCC->CR &= 0xEAF6ED7FU;
 8005a90:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a92:	680a      	ldr	r2, [r1, #0]
 8005a94:	0712      	lsls	r2, r2, #28
 8005a96:	d505      	bpl.n	8005aa4 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a98:	680a      	ldr	r2, [r1, #0]
 8005a9a:	f022 020f 	bic.w	r2, r2, #15
 8005a9e:	f042 0207 	orr.w	r2, r2, #7
 8005aa2:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005aa4:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005aa6:	4919      	ldr	r1, [pc, #100]	; (8005b0c <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8005aa8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005aaa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005aac:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005aae:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005ab0:	4917      	ldr	r1, [pc, #92]	; (8005b10 <SystemInit+0xc4>)
 8005ab2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ab4:	4917      	ldr	r1, [pc, #92]	; (8005b14 <SystemInit+0xc8>)
 8005ab6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005aba:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005abe:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005ac0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ac2:	6819      	ldr	r1, [r3, #0]
 8005ac4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005ac8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005aca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005acc:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <SystemInit+0xcc>)
 8005ace:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <SystemInit+0xd0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae2:	d202      	bcs.n	8005aea <SystemInit+0x9e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <SystemInit+0xd4>)
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005aea:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <SystemInit+0xd8>)
 8005aec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005af0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8005af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005af6:	4b01      	ldr	r3, [pc, #4]	; (8005afc <SystemInit+0xb0>)
 8005af8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00
 8005b00:	52002000 	.word	0x52002000
 8005b04:	58024400 	.word	0x58024400
 8005b08:	eaf6ed7f 	.word	0xeaf6ed7f
 8005b0c:	02020200 	.word	0x02020200
 8005b10:	01ff0000 	.word	0x01ff0000
 8005b14:	01010280 	.word	0x01010280
 8005b18:	580000c0 	.word	0x580000c0
 8005b1c:	5c001000 	.word	0x5c001000
 8005b20:	51008108 	.word	0x51008108
 8005b24:	52004000 	.word	0x52004000

08005b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b28:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b2a:	2003      	movs	r0, #3
 8005b2c:	f000 f854 	bl	8005bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b30:	f002 fe10 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 8005b34:	490f      	ldr	r1, [pc, #60]	; (8005b74 <HAL_Init+0x4c>)
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <HAL_Init+0x50>)
 8005b38:	698b      	ldr	r3, [r1, #24]
 8005b3a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005b3e:	5cd3      	ldrb	r3, [r2, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b46:	698b      	ldr	r3, [r1, #24]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	5cd3      	ldrb	r3, [r2, r3]
 8005b4e:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <HAL_Init+0x54>)
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	fa20 f303 	lsr.w	r3, r0, r3
 8005b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_Init+0x58>)
 8005b5c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f7fb fd28 	bl	80015b4 <HAL_InitTick>
 8005b64:	4604      	mov	r4, r0
 8005b66:	b918      	cbnz	r0, 8005b70 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b68:	f7fb fa58 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b70:	2401      	movs	r4, #1
 8005b72:	e7fb      	b.n	8005b6c <HAL_Init+0x44>
 8005b74:	58024400 	.word	0x58024400
 8005b78:	08021d78 	.word	0x08021d78
 8005b7c:	24000064 	.word	0x24000064
 8005b80:	24000060 	.word	0x24000060

08005b84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005b84:	4a03      	ldr	r2, [pc, #12]	; (8005b94 <HAL_IncTick+0x10>)
 8005b86:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <HAL_IncTick+0x14>)
 8005b88:	6811      	ldr	r1, [r2, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	440b      	add	r3, r1
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	2400f038 	.word	0x2400f038
 8005b98:	24000068 	.word	0x24000068

08005b9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005b9c:	4b01      	ldr	r3, [pc, #4]	; (8005ba4 <HAL_GetTick+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	2400f038 	.word	0x2400f038

08005ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7ff fff6 	bl	8005b9c <HAL_GetTick>
 8005bb0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bb2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005bb4:	bf1e      	ittt	ne
 8005bb6:	4b04      	ldrne	r3, [pc, #16]	; (8005bc8 <HAL_Delay+0x20>)
 8005bb8:	781b      	ldrbne	r3, [r3, #0]
 8005bba:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bbc:	f7ff ffee 	bl	8005b9c <HAL_GetTick>
 8005bc0:	1b43      	subs	r3, r0, r5
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	d3fa      	bcc.n	8005bbc <HAL_Delay+0x14>
  {
  }
}
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	24000068 	.word	0x24000068

08005bcc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005bcc:	4b01      	ldr	r3, [pc, #4]	; (8005bd4 <HAL_GetREVID+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
}
 8005bd0:	0c00      	lsrs	r0, r0, #16
 8005bd2:	4770      	bx	lr
 8005bd4:	5c001000 	.word	0x5c001000

08005bd8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bd8:	4907      	ldr	r1, [pc, #28]	; (8005bf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bda:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bdc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be6:	0412      	lsls	r2, r2, #16
 8005be8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005bf4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005bf6:	4770      	bx	lr
 8005bf8:	e000ed00 	.word	0xe000ed00

08005bfc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bfe:	b530      	push	{r4, r5, lr}
 8005c00:	68dc      	ldr	r4, [r3, #12]
 8005c02:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c06:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c0a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c0c:	2d04      	cmp	r5, #4
 8005c0e:	bf28      	it	cs
 8005c10:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c12:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c18:	bf8c      	ite	hi
 8005c1a:	3c03      	subhi	r4, #3
 8005c1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c1e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8005c22:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c24:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c2c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c30:	fa01 f104 	lsl.w	r1, r1, r4
 8005c34:	ea41 0302 	orr.w	r3, r1, r2
 8005c38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005c3c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005c3e:	db06      	blt.n	8005c4e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c40:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005c44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005c48:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005c4c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4e:	f000 000f 	and.w	r0, r0, #15
 8005c52:	4a02      	ldr	r2, [pc, #8]	; (8005c5c <HAL_NVIC_SetPriority+0x60>)
 8005c54:	5413      	strb	r3, [r2, r0]
 8005c56:	e7f9      	b.n	8005c4c <HAL_NVIC_SetPriority+0x50>
 8005c58:	e000ed00 	.word	0xe000ed00
 8005c5c:	e000ed14 	.word	0xe000ed14

08005c60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c60:	2800      	cmp	r0, #0
 8005c62:	db08      	blt.n	8005c76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c64:	2301      	movs	r3, #1
 8005c66:	0942      	lsrs	r2, r0, #5
 8005c68:	f000 001f 	and.w	r0, r0, #31
 8005c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c70:	4b01      	ldr	r3, [pc, #4]	; (8005c78 <HAL_NVIC_EnableIRQ+0x18>)
 8005c72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005c76:	4770      	bx	lr
 8005c78:	e000e100 	.word	0xe000e100

08005c7c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	db0d      	blt.n	8005c9c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c80:	0943      	lsrs	r3, r0, #5
 8005c82:	2201      	movs	r2, #1
 8005c84:	f000 001f 	and.w	r0, r0, #31
 8005c88:	3320      	adds	r3, #32
 8005c8a:	fa02 f000 	lsl.w	r0, r2, r0
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_NVIC_DisableIRQ+0x24>)
 8005c90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005c98:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	e000e100 	.word	0xe000e100

08005ca4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005ca4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ca8:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <HAL_MPU_Disable+0x18>)
 8005caa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <HAL_MPU_Disable+0x1c>)
 8005cb6:	605a      	str	r2, [r3, #4]
}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed00 	.word	0xe000ed00
 8005cc0:	e000ed90 	.word	0xe000ed90

08005cc4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005cc4:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005cc6:	f040 0001 	orr.w	r0, r0, #1
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_MPU_Enable+0x20>)
 8005ccc:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005cce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005cda:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005cde:	4770      	bx	lr
 8005ce0:	e000ed00 	.word	0xe000ed00
 8005ce4:	e000ed90 	.word	0xe000ed90

08005ce8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ce8:	7843      	ldrb	r3, [r0, #1]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <HAL_MPU_ConfigRegion+0x4c>)
{
 8005cec:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8005cee:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005cf0:	7801      	ldrb	r1, [r0, #0]
 8005cf2:	b1d9      	cbz	r1, 8005d2c <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005cf4:	6843      	ldr	r3, [r0, #4]
 8005cf6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cf8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cfa:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cfc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cfe:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d02:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d04:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d06:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d0a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d0c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d10:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d12:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d16:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d1c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d22:	7a01      	ldrb	r1, [r0, #8]
 8005d24:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d28:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005d2a:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005d2c:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8005d2e:	6111      	str	r1, [r2, #16]
}
 8005d30:	e7fb      	b.n	8005d2a <HAL_MPU_ConfigRegion+0x42>
 8005d32:	bf00      	nop
 8005d34:	e000ed90 	.word	0xe000ed90

08005d38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d38:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	b908      	cbnz	r0, 8005d42 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005d3e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005d40:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d42:	7f43      	ldrb	r3, [r0, #29]
 8005d44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d48:	b913      	cbnz	r3, 8005d50 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005d4a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005d4c:	f7fb f97e 	bl	800104c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d50:	2302      	movs	r3, #2
 8005d52:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005d54:	7923      	ldrb	r3, [r4, #4]
 8005d56:	b9e3      	cbnz	r3, 8005d92 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <HAL_CRC_Init+0x70>)
 8005d5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	f022 0218 	bic.w	r2, r2, #24
 8005d64:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d66:	7962      	ldrb	r2, [r4, #5]
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	b9d2      	cbnz	r2, 8005da2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d70:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8005d72:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	6961      	ldr	r1, [r4, #20]
 8005d78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d7c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d7e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005d90:	e7d6      	b.n	8005d40 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005d92:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f808 	bl	8005dac <HAL_CRCEx_Polynomial_Set>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d0e2      	beq.n	8005d66 <HAL_CRC_Init+0x2e>
 8005da0:	e7cd      	b.n	8005d3e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005da2:	6922      	ldr	r2, [r4, #16]
 8005da4:	e7e4      	b.n	8005d70 <HAL_CRC_Init+0x38>
 8005da6:	bf00      	nop
 8005da8:	04c11db7 	.word	0x04c11db7

08005dac <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005dac:	231f      	movs	r3, #31
{
 8005dae:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005db0:	3b01      	subs	r3, #1
 8005db2:	d306      	bcc.n	8005dc2 <HAL_CRCEx_Polynomial_Set+0x16>
 8005db4:	fa21 f403 	lsr.w	r4, r1, r3
 8005db8:	07e4      	lsls	r4, r4, #31
 8005dba:	d5f9      	bpl.n	8005db0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8005dbc:	2a08      	cmp	r2, #8
 8005dbe:	d014      	beq.n	8005dea <HAL_CRCEx_Polynomial_Set+0x3e>
 8005dc0:	d802      	bhi.n	8005dc8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8005dc2:	b13a      	cbz	r2, 8005dd4 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8005dc4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8005dc6:	e00d      	b.n	8005de4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8005dc8:	2a10      	cmp	r2, #16
 8005dca:	d00c      	beq.n	8005de6 <HAL_CRCEx_Polynomial_Set+0x3a>
 8005dcc:	2a18      	cmp	r2, #24
 8005dce:	d1f9      	bne.n	8005dc4 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005dd0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005dd2:	d8f7      	bhi.n	8005dc4 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005dd4:	6800      	ldr	r0, [r0, #0]
 8005dd6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005dd8:	6883      	ldr	r3, [r0, #8]
 8005dda:	f023 0318 	bic.w	r3, r3, #24
 8005dde:	431a      	orrs	r2, r3
 8005de0:	6082      	str	r2, [r0, #8]
 8005de2:	2000      	movs	r0, #0
}
 8005de4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005de6:	2b07      	cmp	r3, #7
 8005de8:	e7f3      	b.n	8005dd2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	e7f1      	b.n	8005dd2 <HAL_CRCEx_Polynomial_Set+0x26>
	...

08005df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005df4:	f7ff fed2 	bl	8005b9c <HAL_GetTick>
 8005df8:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dfa:	b145      	cbz	r5, 8005e0e <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dfc:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d006      	beq.n	8005e12 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	656b      	str	r3, [r5, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8005e0e:	2001      	movs	r0, #1
 8005e10:	e157      	b.n	80060c2 <HAL_DMA_Abort+0x2d2>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e12:	682c      	ldr	r4, [r5, #0]
 8005e14:	4ec7      	ldr	r6, [pc, #796]	; (8006134 <HAL_DMA_Abort+0x344>)
 8005e16:	42b4      	cmp	r4, r6
 8005e18:	d04a      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e1a:	4bc7      	ldr	r3, [pc, #796]	; (8006138 <HAL_DMA_Abort+0x348>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	d047      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e20:	3318      	adds	r3, #24
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d044      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e26:	3318      	adds	r3, #24
 8005e28:	429c      	cmp	r4, r3
 8005e2a:	d041      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	429c      	cmp	r4, r3
 8005e30:	d03e      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e32:	3318      	adds	r3, #24
 8005e34:	429c      	cmp	r4, r3
 8005e36:	d03b      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e38:	3318      	adds	r3, #24
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d038      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e3e:	3318      	adds	r3, #24
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d035      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d031      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e4c:	3318      	adds	r3, #24
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	d02e      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e52:	3318      	adds	r3, #24
 8005e54:	429c      	cmp	r4, r3
 8005e56:	d02b      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e58:	3318      	adds	r3, #24
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	d028      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e5e:	3318      	adds	r3, #24
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d025      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e64:	3318      	adds	r3, #24
 8005e66:	429c      	cmp	r4, r3
 8005e68:	d022      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d01f      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
 8005e70:	3318      	adds	r3, #24
 8005e72:	429c      	cmp	r4, r3
 8005e74:	d01c      	beq.n	8005eb0 <HAL_DMA_Abort+0xc0>
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	f023 030e 	bic.w	r3, r3, #14
 8005e7c:	6023      	str	r3, [r4, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e7e:	4baf      	ldr	r3, [pc, #700]	; (800613c <HAL_DMA_Abort+0x34c>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d01f      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005e84:	3314      	adds	r3, #20
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d01c      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d019      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005e90:	3314      	adds	r3, #20
 8005e92:	429c      	cmp	r4, r3
 8005e94:	d016      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005e96:	3314      	adds	r3, #20
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d013      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d010      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d112      	bne.n	8005ed4 <HAL_DMA_Abort+0xe4>
 8005eae:	e009      	b.n	8005ec4 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005eb0:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eb2:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005eb4:	f023 031e 	bic.w	r3, r3, #30
 8005eb8:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec0:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ec2:	d178      	bne.n	8005fb6 <HAL_DMA_Abort+0x1c6>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ec4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec6:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ec8:	6813      	ldr	r3, [r2, #0]
 8005eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ed0:	f040 80ad 	bne.w	800602e <HAL_DMA_Abort+0x23e>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6023      	str	r3, [r4, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07db      	lsls	r3, r3, #31
 8005ee0:	f100 80cf 	bmi.w	8006082 <HAL_DMA_Abort+0x292>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eec:	f002 021f 	and.w	r2, r2, #31
 8005ef0:	f000 80d6 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005ef4:	4990      	ldr	r1, [pc, #576]	; (8006138 <HAL_DMA_Abort+0x348>)
 8005ef6:	428b      	cmp	r3, r1
 8005ef8:	f000 80d2 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005efc:	3118      	adds	r1, #24
 8005efe:	428b      	cmp	r3, r1
 8005f00:	f000 80ce 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f04:	3118      	adds	r1, #24
 8005f06:	428b      	cmp	r3, r1
 8005f08:	f000 80ca 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f0c:	3118      	adds	r1, #24
 8005f0e:	428b      	cmp	r3, r1
 8005f10:	f000 80c6 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f14:	3118      	adds	r1, #24
 8005f16:	428b      	cmp	r3, r1
 8005f18:	f000 80c2 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f1c:	3118      	adds	r1, #24
 8005f1e:	428b      	cmp	r3, r1
 8005f20:	f000 80be 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f24:	3118      	adds	r1, #24
 8005f26:	428b      	cmp	r3, r1
 8005f28:	f000 80ba 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f2c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005f30:	428b      	cmp	r3, r1
 8005f32:	f000 80b5 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f36:	3118      	adds	r1, #24
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	f000 80b1 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f3e:	3118      	adds	r1, #24
 8005f40:	428b      	cmp	r3, r1
 8005f42:	f000 80ad 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f46:	3118      	adds	r1, #24
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	f000 80a9 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f4e:	3118      	adds	r1, #24
 8005f50:	428b      	cmp	r3, r1
 8005f52:	f000 80a5 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f56:	3118      	adds	r1, #24
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	f000 80a1 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f5e:	3118      	adds	r1, #24
 8005f60:	428b      	cmp	r3, r1
 8005f62:	f000 809d 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
 8005f66:	3118      	adds	r1, #24
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	f000 8099 	beq.w	80060a0 <HAL_DMA_Abort+0x2b0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f202 	lsl.w	r2, r1, r2
 8005f74:	6042      	str	r2, [r0, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f76:	4a71      	ldr	r2, [pc, #452]	; (800613c <HAL_DMA_Abort+0x34c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	f000 8097 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005f7e:	3214      	adds	r2, #20
 8005f80:	4293      	cmp	r3, r2
 8005f82:	f000 8093 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005f86:	3214      	adds	r2, #20
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	f000 808f 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005f8e:	3214      	adds	r2, #20
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f000 808b 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005f96:	3214      	adds	r2, #20
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	f000 8087 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005f9e:	3214      	adds	r2, #20
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f000 8083 	beq.w	80060ac <HAL_DMA_Abort+0x2bc>
 8005fa6:	3214      	adds	r2, #20
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d07f      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 8005fac:	3214      	adds	r2, #20
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f040 8081 	bne.w	80060b6 <HAL_DMA_Abort+0x2c6>
 8005fb4:	e07a      	b.n	80060ac <HAL_DMA_Abort+0x2bc>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fb6:	4b60      	ldr	r3, [pc, #384]	; (8006138 <HAL_DMA_Abort+0x348>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	d083      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	429c      	cmp	r4, r3
 8005fc0:	d080      	beq.n	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fc2:	3318      	adds	r3, #24
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	f43f af7d 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fca:	3318      	adds	r3, #24
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	f43f af79 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	f43f af75 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fda:	3318      	adds	r3, #24
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	f43f af71 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	f43f af6d 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005fea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fee:	429c      	cmp	r4, r3
 8005ff0:	f43f af68 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005ff4:	3318      	adds	r3, #24
 8005ff6:	429c      	cmp	r4, r3
 8005ff8:	f43f af64 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	429c      	cmp	r4, r3
 8006000:	f43f af60 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8006004:	3318      	adds	r3, #24
 8006006:	429c      	cmp	r4, r3
 8006008:	f43f af5c 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 800600c:	3318      	adds	r3, #24
 800600e:	429c      	cmp	r4, r3
 8006010:	f43f af58 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8006014:	3318      	adds	r3, #24
 8006016:	429c      	cmp	r4, r3
 8006018:	f43f af54 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 800601c:	3318      	adds	r3, #24
 800601e:	429c      	cmp	r4, r3
 8006020:	f43f af50 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 8006024:	3318      	adds	r3, #24
 8006026:	429c      	cmp	r4, r3
 8006028:	f43f af4c 	beq.w	8005ec4 <HAL_DMA_Abort+0xd4>
 800602c:	e727      	b.n	8005e7e <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 800602e:	4b42      	ldr	r3, [pc, #264]	; (8006138 <HAL_DMA_Abort+0x348>)
 8006030:	429c      	cmp	r4, r3
 8006032:	f43f af4f 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006036:	3318      	adds	r3, #24
 8006038:	429c      	cmp	r4, r3
 800603a:	f43f af4b 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 800603e:	3318      	adds	r3, #24
 8006040:	429c      	cmp	r4, r3
 8006042:	f43f af47 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006046:	3318      	adds	r3, #24
 8006048:	429c      	cmp	r4, r3
 800604a:	f43f af43 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 800604e:	3318      	adds	r3, #24
 8006050:	429c      	cmp	r4, r3
 8006052:	f43f af3f 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006056:	3318      	adds	r3, #24
 8006058:	429c      	cmp	r4, r3
 800605a:	f43f af3b 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 800605e:	3318      	adds	r3, #24
 8006060:	429c      	cmp	r4, r3
 8006062:	f43f af37 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006066:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800606a:	429c      	cmp	r4, r3
 800606c:	f43f af32 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006070:	3318      	adds	r3, #24
 8006072:	429c      	cmp	r4, r3
 8006074:	f43f af2e 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006078:	3318      	adds	r3, #24
 800607a:	429c      	cmp	r4, r3
 800607c:	f43f af2a 	beq.w	8005ed4 <HAL_DMA_Abort+0xe4>
 8006080:	e728      	b.n	8005ed4 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006082:	f7ff fd8b 	bl	8005b9c <HAL_GetTick>
 8006086:	1bc0      	subs	r0, r0, r7
 8006088:	2805      	cmp	r0, #5
 800608a:	f67f af27 	bls.w	8005edc <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800608e:	2320      	movs	r3, #32
 8006090:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006092:	2300      	movs	r3, #0
 8006094:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8006098:	2303      	movs	r3, #3
 800609a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
        return HAL_ERROR;
 800609e:	e6b6      	b.n	8005e0e <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060a0:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060a2:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060a4:	fa01 f202 	lsl.w	r2, r1, r2
 80060a8:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060aa:	d10b      	bne.n	80060c4 <HAL_DMA_Abort+0x2d4>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ac:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 80060b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80060b2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80060b4:	bbab      	cbnz	r3, 8006122 <HAL_DMA_Abort+0x332>
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b6:	2000      	movs	r0, #0

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060b8:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80060ba:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80060be:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  }

  return HAL_OK;
}
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060c4:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_DMA_Abort+0x348>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d0f0      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060ca:	3218      	adds	r2, #24
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d0ed      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060d0:	3218      	adds	r2, #24
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d0ea      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060d6:	3218      	adds	r2, #24
 80060d8:	4293      	cmp	r3, r2
 80060da:	d0e7      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060dc:	3218      	adds	r2, #24
 80060de:	4293      	cmp	r3, r2
 80060e0:	d0e4      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060e2:	3218      	adds	r2, #24
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d0e1      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060e8:	3218      	adds	r2, #24
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d0de      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060ee:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d0da      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060f6:	3218      	adds	r2, #24
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d0d7      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 80060fc:	3218      	adds	r2, #24
 80060fe:	4293      	cmp	r3, r2
 8006100:	d0d4      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 8006102:	3218      	adds	r2, #24
 8006104:	4293      	cmp	r3, r2
 8006106:	d0d1      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 8006108:	3218      	adds	r2, #24
 800610a:	4293      	cmp	r3, r2
 800610c:	d0ce      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 800610e:	3218      	adds	r2, #24
 8006110:	4293      	cmp	r3, r2
 8006112:	d0cb      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 8006114:	3218      	adds	r2, #24
 8006116:	4293      	cmp	r3, r2
 8006118:	d0c8      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 800611a:	3218      	adds	r2, #24
 800611c:	4293      	cmp	r3, r2
 800611e:	d0c5      	beq.n	80060ac <HAL_DMA_Abort+0x2bc>
 8006120:	e729      	b.n	8005f76 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006128:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800612a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	e7c1      	b.n	80060b6 <HAL_DMA_Abort+0x2c6>
 8006132:	bf00      	nop
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	58025408 	.word	0x58025408

08006140 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006140:	b510      	push	{r4, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006142:	b128      	cbz	r0, 8006150 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006144:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006148:	2b02      	cmp	r3, #2
 800614a:	d003      	beq.n	8006154 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006150:	2001      	movs	r0, #1
 8006152:	e07f      	b.n	8006254 <HAL_DMA_Abort_IT+0x114>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006154:	6803      	ldr	r3, [r0, #0]
 8006156:	4a50      	ldr	r2, [pc, #320]	; (8006298 <HAL_DMA_Abort_IT+0x158>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d052      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 800615c:	494f      	ldr	r1, [pc, #316]	; (800629c <HAL_DMA_Abort_IT+0x15c>)
 800615e:	428b      	cmp	r3, r1
 8006160:	d04f      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006162:	3118      	adds	r1, #24
 8006164:	428b      	cmp	r3, r1
 8006166:	d04c      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006168:	3118      	adds	r1, #24
 800616a:	428b      	cmp	r3, r1
 800616c:	d049      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 800616e:	3118      	adds	r1, #24
 8006170:	428b      	cmp	r3, r1
 8006172:	d046      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006174:	3118      	adds	r1, #24
 8006176:	428b      	cmp	r3, r1
 8006178:	d043      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 800617a:	3118      	adds	r1, #24
 800617c:	428b      	cmp	r3, r1
 800617e:	d040      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006180:	3118      	adds	r1, #24
 8006182:	428b      	cmp	r3, r1
 8006184:	d03d      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006186:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800618a:	428b      	cmp	r3, r1
 800618c:	d039      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 800618e:	3118      	adds	r1, #24
 8006190:	428b      	cmp	r3, r1
 8006192:	d036      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 8006194:	3118      	adds	r1, #24
 8006196:	428b      	cmp	r3, r1
 8006198:	d033      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 800619a:	3118      	adds	r1, #24
 800619c:	428b      	cmp	r3, r1
 800619e:	d030      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 80061a0:	3118      	adds	r1, #24
 80061a2:	428b      	cmp	r3, r1
 80061a4:	d02d      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 80061a6:	3118      	adds	r1, #24
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d02a      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 80061ac:	3118      	adds	r1, #24
 80061ae:	428b      	cmp	r3, r1
 80061b0:	d027      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
 80061b2:	3118      	adds	r1, #24
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d024      	beq.n	8006202 <HAL_DMA_Abort_IT+0xc2>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f022 020e 	bic.w	r2, r2, #14
 80061be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061c8:	4a35      	ldr	r2, [pc, #212]	; (80062a0 <HAL_DMA_Abort_IT+0x160>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d143      	bne.n	8006256 <HAL_DMA_Abort_IT+0x116>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061ce:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d6:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061d8:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 80061dc:	f003 021f 	and.w	r2, r3, #31
 80061e0:	2301      	movs	r3, #1
 80061e2:	4093      	lsls	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061e6:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 80061ea:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80061ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d046      	beq.n	8006280 <HAL_DMA_Abort_IT+0x140>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061fa:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	e03e      	b.n	8006280 <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006202:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8006204:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8006206:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800620a:	d01e      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 800620c:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_DMA_Abort_IT+0x15c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01b      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006212:	3218      	adds	r2, #24
 8006214:	4293      	cmp	r3, r2
 8006216:	d018      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006218:	3218      	adds	r2, #24
 800621a:	4293      	cmp	r3, r2
 800621c:	d015      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 800621e:	3218      	adds	r2, #24
 8006220:	4293      	cmp	r3, r2
 8006222:	d012      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006224:	3218      	adds	r2, #24
 8006226:	4293      	cmp	r3, r2
 8006228:	d00f      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 800622a:	3218      	adds	r2, #24
 800622c:	4293      	cmp	r3, r2
 800622e:	d00c      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006230:	3218      	adds	r2, #24
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006236:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800623a:	4293      	cmp	r3, r2
 800623c:	d005      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 800623e:	3218      	adds	r2, #24
 8006240:	4293      	cmp	r3, r2
 8006242:	d002      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 8006244:	3218      	adds	r2, #24
 8006246:	4293      	cmp	r3, r2
 8006248:	d0ff      	beq.n	800624a <HAL_DMA_Abort_IT+0x10a>
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8006252:	2000      	movs	r0, #0
}
 8006254:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <HAL_DMA_Abort_IT+0x164>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d0b8      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 800625c:	3214      	adds	r2, #20
 800625e:	4293      	cmp	r3, r2
 8006260:	d0b5      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 8006262:	3214      	adds	r2, #20
 8006264:	4293      	cmp	r3, r2
 8006266:	d0b2      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 8006268:	3214      	adds	r2, #20
 800626a:	4293      	cmp	r3, r2
 800626c:	d0af      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 800626e:	3214      	adds	r2, #20
 8006270:	4293      	cmp	r3, r2
 8006272:	d0ac      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 8006274:	3214      	adds	r2, #20
 8006276:	4293      	cmp	r3, r2
 8006278:	d0a9      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
 800627a:	3214      	adds	r2, #20
 800627c:	4293      	cmp	r3, r2
 800627e:	d0a6      	beq.n	80061ce <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8006280:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8006282:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006284:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8006288:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800628a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800628e:	b10b      	cbz	r3, 8006294 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 8006290:	4798      	blx	r3
 8006292:	e7de      	b.n	8006252 <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8006294:	4618      	mov	r0, r3
 8006296:	e7dd      	b.n	8006254 <HAL_DMA_Abort_IT+0x114>
 8006298:	40020010 	.word	0x40020010
 800629c:	40020028 	.word	0x40020028
 80062a0:	58025408 	.word	0x58025408
 80062a4:	5802541c 	.word	0x5802541c

080062a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80062a8:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80062aa:	4604      	mov	r4, r0
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d036      	beq.n	800631e <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80062b0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80062b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062b8:	b91b      	cbnz	r3, 80062c2 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80062ba:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80062be:	f7fa fedd 	bl	800107c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80062c2:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80062c4:	69e0      	ldr	r0, [r4, #28]
 80062c6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80062c8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80062d0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80062d8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80062dc:	430a      	orrs	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80062e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062e2:	68a2      	ldr	r2, [r4, #8]
 80062e4:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 80062e8:	4302      	orrs	r2, r0
 80062ea:	f021 0101 	bic.w	r1, r1, #1
 80062ee:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80062f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80062f2:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80062f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f6:	0c12      	lsrs	r2, r2, #16
 80062f8:	0412      	lsls	r2, r2, #16
 80062fa:	430a      	orrs	r2, r1
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80062fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006300:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006304:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006308:	0552      	lsls	r2, r2, #21
 800630a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800630e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006310:	430a      	orrs	r2, r1
 8006312:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006314:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006316:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006318:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800631c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800631e:	2001      	movs	r0, #1
 8006320:	e7fc      	b.n	800631c <HAL_DMA2D_Init+0x74>

08006322 <HAL_DMA2D_LineEventCallback>:
 8006322:	4770      	bx	lr

08006324 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8006324:	4770      	bx	lr

08006326 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006326:	6803      	ldr	r3, [r0, #0]
{
 8006328:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800632a:	685e      	ldr	r6, [r3, #4]
{
 800632c:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800632e:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006330:	07f2      	lsls	r2, r6, #31
 8006332:	d514      	bpl.n	800635e <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006334:	05e9      	lsls	r1, r5, #23
 8006336:	d512      	bpl.n	800635e <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800633e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006340:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006348:	2201      	movs	r2, #1
 800634a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800634c:	2304      	movs	r3, #4
 800634e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006352:	2300      	movs	r3, #0
 8006354:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800635a:	b103      	cbz	r3, 800635e <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800635c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800635e:	06b2      	lsls	r2, r6, #26
 8006360:	d516      	bpl.n	8006390 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006362:	04ab      	lsls	r3, r5, #18
 8006364:	d514      	bpl.n	8006390 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006370:	2220      	movs	r2, #32
 8006372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800637c:	2304      	movs	r3, #4
 800637e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006382:	2300      	movs	r3, #0
 8006384:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638a:	b10b      	cbz	r3, 8006390 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800638c:	4620      	mov	r0, r4
 800638e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006390:	0730      	lsls	r0, r6, #28
 8006392:	d516      	bpl.n	80063c2 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006394:	0529      	lsls	r1, r5, #20
 8006396:	d514      	bpl.n	80063c2 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80063a2:	2208      	movs	r2, #8
 80063a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80063a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063a8:	f043 0304 	orr.w	r3, r3, #4
 80063ac:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80063ae:	2304      	movs	r3, #4
 80063b0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80063b4:	2300      	movs	r3, #0
 80063b6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80063ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063bc:	b10b      	cbz	r3, 80063c2 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80063be:	4620      	mov	r0, r4
 80063c0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80063c2:	0772      	lsls	r2, r6, #29
 80063c4:	d50b      	bpl.n	80063de <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80063c6:	056b      	lsls	r3, r5, #21
 80063c8:	d509      	bpl.n	80063de <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80063ca:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80063cc:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80063d6:	2204      	movs	r2, #4
 80063d8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80063da:	f7ff ffa2 	bl	8006322 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80063de:	07b0      	lsls	r0, r6, #30
 80063e0:	d514      	bpl.n	800640c <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80063e2:	05a9      	lsls	r1, r5, #22
 80063e4:	d512      	bpl.n	800640c <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80063f0:	2202      	movs	r2, #2
 80063f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80063f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f6:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80063fe:	2300      	movs	r3, #0
 8006400:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8006404:	6a23      	ldr	r3, [r4, #32]
 8006406:	b10b      	cbz	r3, 800640c <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006408:	4620      	mov	r0, r4
 800640a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800640c:	06f2      	lsls	r2, r6, #27
 800640e:	d513      	bpl.n	8006438 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006410:	04eb      	lsls	r3, r5, #19
 8006412:	d511      	bpl.n	8006438 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006414:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006416:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800641e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006420:	2210      	movs	r2, #16
 8006422:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006426:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006428:	2301      	movs	r3, #1
 800642a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800642e:	2300      	movs	r3, #0
 8006430:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006434:	f7ff ff76 	bl	8006324 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006438:	bd70      	pop	{r4, r5, r6, pc}

0800643a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800643a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	4607      	mov	r7, r0
 8006440:	460d      	mov	r5, r1
 8006442:	4614      	mov	r4, r2
 8006444:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006446:	f7ff fba9 	bl	8005b9c <HAL_GetTick>
 800644a:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	d50a      	bpl.n	800646a <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006454:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
 8006458:	9c06      	ldr	r4, [sp, #24]

  return HAL_OK;
 800645a:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800645c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006460:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006464:	66d4      	str	r4, [r2, #108]	; 0x6c
}
 8006466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800646a:	f7ff fb97 	bl	8005b9c <HAL_GetTick>
 800646e:	eba0 0008 	sub.w	r0, r0, r8
 8006472:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006476:	d9e9      	bls.n	800644c <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8006478:	2003      	movs	r0, #3
 800647a:	e7f4      	b.n	8006466 <DSI_ShortWrite+0x2c>

0800647c <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800647c:	7c03      	ldrb	r3, [r0, #16]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d05c      	beq.n	800653c <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006482:	2200      	movs	r2, #0
 8006484:	6803      	ldr	r3, [r0, #0]
 8006486:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800648a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800648e:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006490:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006492:	d507      	bpl.n	80064a4 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006494:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006498:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800649c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80064a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80064a4:	078a      	lsls	r2, r1, #30
 80064a6:	d505      	bpl.n	80064b4 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80064a8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80064ac:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80064b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80064b4:	074a      	lsls	r2, r1, #29
 80064b6:	d505      	bpl.n	80064c4 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80064b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80064bc:	f042 0201 	orr.w	r2, r2, #1
 80064c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80064c4:	070a      	lsls	r2, r1, #28
 80064c6:	d505      	bpl.n	80064d4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80064c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80064cc:	f042 0202 	orr.w	r2, r2, #2
 80064d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80064d4:	06ca      	lsls	r2, r1, #27
 80064d6:	d505      	bpl.n	80064e4 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80064d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80064dc:	f042 020c 	orr.w	r2, r2, #12
 80064e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80064e4:	068a      	lsls	r2, r1, #26
 80064e6:	d505      	bpl.n	80064f4 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80064e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80064ec:	f042 0210 	orr.w	r2, r2, #16
 80064f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80064f4:	064a      	lsls	r2, r1, #25
 80064f6:	d505      	bpl.n	8006504 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80064f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80064fc:	f042 0220 	orr.w	r2, r2, #32
 8006500:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006504:	060a      	lsls	r2, r1, #24
 8006506:	d505      	bpl.n	8006514 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006508:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800650c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006510:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006514:	05ca      	lsls	r2, r1, #23
 8006516:	d505      	bpl.n	8006524 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006518:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800651c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006520:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006524:	058a      	lsls	r2, r1, #22
 8006526:	d505      	bpl.n	8006534 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006528:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800652c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006530:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006534:	2300      	movs	r3, #0
 8006536:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006538:	4618      	mov	r0, r3
 800653a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800653c:	2002      	movs	r0, #2
}
 800653e:	4770      	bx	lr

08006540 <HAL_DSI_Init>:
{
 8006540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006542:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006544:	4604      	mov	r4, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	f000 80a7 	beq.w	800669a <HAL_DSI_Init+0x15a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800654c:	7c43      	ldrb	r3, [r0, #17]
 800654e:	b90b      	cbnz	r3, 8006554 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006550:	f7fa fdb8 	bl	80010c4 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006554:	2303      	movs	r3, #3
 8006556:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006558:	2300      	movs	r3, #0
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006562:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006566:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800656a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800656e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006576:	f7ff fb11 	bl	8005b9c <HAL_GetTick>
 800657a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8006582:	04d9      	lsls	r1, r3, #19
 8006584:	d578      	bpl.n	8006678 <HAL_DSI_Init+0x138>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006586:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800658a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800658e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8006592:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006596:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 800659a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800659e:	02db      	lsls	r3, r3, #11
 80065a0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80065a4:	68a8      	ldr	r0, [r5, #8]
 80065a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80065aa:	430b      	orrs	r3, r1
 80065ac:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80065b0:	2300      	movs	r3, #0
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80065c0:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80065cc:	f7ff fae6 	bl	8005b9c <HAL_GetTick>
 80065d0:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80065d8:	05d2      	lsls	r2, r2, #23
 80065da:	d557      	bpl.n	800668c <HAL_DSI_Init+0x14c>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80065dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80065e0:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80065e2:	f042 0206 	orr.w	r2, r2, #6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80065e6:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80065e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80065ec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80065f0:	f022 0203 	bic.w	r2, r2, #3
 80065f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80065f8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80065fc:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80065fe:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006608:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800660c:	f022 0203 	bic.w	r2, r2, #3
 8006610:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006614:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006618:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800661a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800661c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006626:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800662e:	686a      	ldr	r2, [r5, #4]
 8006630:	2a01      	cmp	r2, #1
 8006632:	bf38      	it	cc
 8006634:	2201      	movcc	r2, #1
 8006636:	4611      	mov	r1, r2
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_DSI_Init+0x160>)
 800663a:	434a      	muls	r2, r1
 800663c:	68a9      	ldr	r1, [r5, #8]
 800663e:	f001 0103 	and.w	r1, r1, #3
 8006642:	408a      	lsls	r2, r1
 8006644:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006648:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800664a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800664c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006650:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006654:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006658:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800665c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006660:	430a      	orrs	r2, r1
 8006662:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006666:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800666a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800666e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006670:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8006672:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006674:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8006676:	e007      	b.n	8006688 <HAL_DSI_Init+0x148>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006678:	f7ff fa90 	bl	8005b9c <HAL_GetTick>
 800667c:	1b80      	subs	r0, r0, r6
 800667e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006682:	f67f af7b 	bls.w	800657c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006686:	2003      	movs	r0, #3
}
 8006688:	b002      	add	sp, #8
 800668a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800668c:	f7ff fa86 	bl	8005b9c <HAL_GetTick>
 8006690:	1b80      	subs	r0, r0, r6
 8006692:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006696:	d99c      	bls.n	80065d2 <HAL_DSI_Init+0x92>
 8006698:	e7f5      	b.n	8006686 <HAL_DSI_Init+0x146>
    return HAL_ERROR;
 800669a:	2001      	movs	r0, #1
 800669c:	e7f4      	b.n	8006688 <HAL_DSI_Init+0x148>
 800669e:	bf00      	nop
 80066a0:	003d0900 	.word	0x003d0900

080066a4 <HAL_DSI_ErrorCallback>:
 80066a4:	4770      	bx	lr

080066a6 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80066ac:	07d1      	lsls	r1, r2, #31
{
 80066ae:	b510      	push	{r4, lr}
 80066b0:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80066b2:	d508      	bpl.n	80066c6 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80066b4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80066b8:	07d2      	lsls	r2, r2, #31
 80066ba:	d504      	bpl.n	80066c6 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80066bc:	2201      	movs	r2, #1
 80066be:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80066c2:	f7fb fb1d 	bl	8001d00 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80066cc:	0791      	lsls	r1, r2, #30
 80066ce:	d509      	bpl.n	80066e4 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80066d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80066d4:	0792      	lsls	r2, r2, #30
 80066d6:	d505      	bpl.n	80066e4 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80066d8:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80066da:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80066dc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80066e0:	f7fb fb40 	bl	8001d64 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80066e4:	69a3      	ldr	r3, [r4, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04e      	beq.n	8006788 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80066ea:	6821      	ldr	r1, [r4, #0]
 80066ec:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80066f0:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80066f4:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80066f8:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80066fa:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80066fe:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006700:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006702:	b119      	cbz	r1, 800670c <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006704:	6961      	ldr	r1, [r4, #20]
 8006706:	f041 0101 	orr.w	r1, r1, #1
 800670a:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800670c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8006710:	d003      	beq.n	800671a <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006712:	6962      	ldr	r2, [r4, #20]
 8006714:	f042 0202 	orr.w	r2, r2, #2
 8006718:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800671a:	07d8      	lsls	r0, r3, #31
 800671c:	d503      	bpl.n	8006726 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800671e:	6962      	ldr	r2, [r4, #20]
 8006720:	f042 0204 	orr.w	r2, r2, #4
 8006724:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006726:	0799      	lsls	r1, r3, #30
 8006728:	d503      	bpl.n	8006732 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800672a:	6962      	ldr	r2, [r4, #20]
 800672c:	f042 0208 	orr.w	r2, r2, #8
 8006730:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006732:	f013 0f0c 	tst.w	r3, #12
 8006736:	d003      	beq.n	8006740 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006738:	6962      	ldr	r2, [r4, #20]
 800673a:	f042 0210 	orr.w	r2, r2, #16
 800673e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006740:	06da      	lsls	r2, r3, #27
 8006742:	d503      	bpl.n	800674c <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006744:	6962      	ldr	r2, [r4, #20]
 8006746:	f042 0220 	orr.w	r2, r2, #32
 800674a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800674c:	0698      	lsls	r0, r3, #26
 800674e:	d503      	bpl.n	8006758 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006750:	6962      	ldr	r2, [r4, #20]
 8006752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006756:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006758:	0659      	lsls	r1, r3, #25
 800675a:	d503      	bpl.n	8006764 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800675c:	6962      	ldr	r2, [r4, #20]
 800675e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006762:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006764:	061a      	lsls	r2, r3, #24
 8006766:	d503      	bpl.n	8006770 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006768:	6962      	ldr	r2, [r4, #20]
 800676a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006770:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006774:	d003      	beq.n	800677e <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800677c:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	b113      	cbz	r3, 8006788 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ff8e 	bl	80066a4 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006788:	bd10      	pop	{r4, pc}

0800678a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800678a:	7c03      	ldrb	r3, [r0, #16]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d00b      	beq.n	80067a8 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006790:	6803      	ldr	r3, [r0, #0]
 8006792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006794:	f022 0203 	bic.w	r2, r2, #3
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800679a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679c:	4311      	orrs	r1, r2
 800679e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80067a0:	2300      	movs	r3, #0
 80067a2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80067a4:	4618      	mov	r0, r3
 80067a6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80067a8:	2002      	movs	r0, #2
}
 80067aa:	4770      	bx	lr

080067ac <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80067ac:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80067ae:	7c03      	ldrb	r3, [r0, #16]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d06a      	beq.n	800688a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80067b4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80067b6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80067b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80067c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80067cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	f022 0203 	bic.w	r2, r2, #3
 80067de:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	4322      	orrs	r2, r4
 80067e4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80067e6:	695a      	ldr	r2, [r3, #20]
 80067e8:	f022 0207 	bic.w	r2, r2, #7
 80067ec:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80067ee:	695c      	ldr	r4, [r3, #20]
 80067f0:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80067f4:	432a      	orrs	r2, r5
 80067f6:	694d      	ldr	r5, [r1, #20]
 80067f8:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80067fa:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80067fc:	4322      	orrs	r2, r4
 80067fe:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	f022 020f 	bic.w	r2, r2, #15
 8006806:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006808:	691c      	ldr	r4, [r3, #16]
 800680a:	432c      	orrs	r4, r5
 800680c:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800680e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006812:	f024 040e 	bic.w	r4, r4, #14
 8006816:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800681a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800681e:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006820:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006824:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006828:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800682a:	0c12      	lsrs	r2, r2, #16
 800682c:	0412      	lsls	r2, r2, #16
 800682e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006832:	4322      	orrs	r2, r4
 8006834:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006836:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800683a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800683e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006842:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006846:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800684a:	432a      	orrs	r2, r5
 800684c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800684e:	432a      	orrs	r2, r5
 8006850:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006852:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006854:	432a      	orrs	r2, r5
 8006856:	4322      	orrs	r2, r4
 8006858:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800685c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006864:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006866:	430a      	orrs	r2, r1
 8006868:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800686a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006876:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800687a:	f042 0202 	orr.w	r2, r2, #2
 800687e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006882:	2300      	movs	r3, #0
 8006884:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006886:	4618      	mov	r0, r3
}
 8006888:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800688a:	2002      	movs	r0, #2
 800688c:	e7fc      	b.n	8006888 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006890 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006890:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006892:	7c03      	ldrb	r3, [r0, #16]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d02a      	beq.n	80068ee <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006898:	6802      	ldr	r2, [r0, #0]
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <HAL_DSI_ConfigCommand+0x64>)
 800689c:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800689e:	4023      	ands	r3, r4
 80068a0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80068a2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80068a4:	e9d1 3500 	ldrd	r3, r5, [r1]
 80068a8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80068aa:	688d      	ldr	r5, [r1, #8]
 80068ac:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80068ae:	68cd      	ldr	r5, [r1, #12]
 80068b0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80068b2:	690d      	ldr	r5, [r1, #16]
 80068b4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80068b6:	694d      	ldr	r5, [r1, #20]
 80068b8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80068ba:	698d      	ldr	r5, [r1, #24]
 80068bc:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80068be:	69cd      	ldr	r5, [r1, #28]
 80068c0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80068c2:	6a0d      	ldr	r5, [r1, #32]
 80068c4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80068c6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80068c8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80068ca:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80068cc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80068ce:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80068d0:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80068d2:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80068d4:	4323      	orrs	r3, r4
 80068d6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80068d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80068da:	f023 0302 	bic.w	r3, r3, #2
 80068de:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80068e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80068e2:	430b      	orrs	r3, r1
 80068e4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068e6:	2300      	movs	r3, #0
 80068e8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80068ea:	4618      	mov	r0, r3
}
 80068ec:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80068ee:	2002      	movs	r0, #2
 80068f0:	e7fc      	b.n	80068ec <HAL_DSI_ConfigCommand+0x5c>
 80068f2:	bf00      	nop
 80068f4:	fef080ff 	.word	0xfef080ff

080068f8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068f8:	7c03      	ldrb	r3, [r0, #16]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d00b      	beq.n	8006916 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80068fe:	6803      	ldr	r3, [r0, #0]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	f022 021f 	bic.w	r2, r2, #31
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690a:	4311      	orrs	r1, r2
 800690c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800690e:	2300      	movs	r3, #0
 8006910:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006912:	4618      	mov	r0, r3
 8006914:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006916:	2002      	movs	r0, #2
}
 8006918:	4770      	bx	lr

0800691a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800691a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800691c:	7c03      	ldrb	r3, [r0, #16]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d035      	beq.n	800698e <HAL_DSI_ConfigPhyTimer+0x74>
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006922:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006924:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006928:	4294      	cmp	r4, r2
 800692a:	bf38      	it	cc
 800692c:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800692e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006932:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8006936:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800693a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800693e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006942:	4322      	orrs	r2, r4
 8006944:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006948:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800694c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006954:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006958:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800695c:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800695e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006962:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006964:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006966:	432a      	orrs	r2, r5
 8006968:	4322      	orrs	r2, r4
 800696a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800696e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006972:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006976:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800697a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800697e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006982:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006986:	2300      	movs	r3, #0
 8006988:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800698a:	4618      	mov	r0, r3
}
 800698c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800698e:	2002      	movs	r0, #2
 8006990:	e7fc      	b.n	800698c <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006994 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006994:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006996:	7c03      	ldrb	r3, [r0, #16]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d05c      	beq.n	8006a56 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800699c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800699e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80069a0:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80069a2:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80069a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80069a8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80069b0:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80069b2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80069b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80069b6:	b292      	uxth	r2, r2
 80069b8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80069ba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80069bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80069c2:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80069c4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80069c6:	4014      	ands	r4, r2
 80069c8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80069ca:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80069cc:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80069ce:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80069d0:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80069d2:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80069d4:	4014      	ands	r4, r2
 80069d6:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80069d8:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80069da:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80069dc:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80069de:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80069e0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80069e4:	4014      	ands	r4, r2
 80069e6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80069ea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80069ee:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80069f0:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80069f2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80069f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80069fa:	4014      	ands	r4, r2
 80069fc:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006a00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006a04:	432c      	orrs	r4, r5
 8006a06:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006a0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006a0e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006a12:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006a16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006a1a:	698d      	ldr	r5, [r1, #24]
 8006a1c:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006a1e:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006a20:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006a22:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006a26:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006a2a:	4014      	ands	r4, r2
 8006a2c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006a30:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006a34:	432c      	orrs	r4, r5
 8006a36:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006a3a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006a3e:	4022      	ands	r2, r4
 8006a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006a44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006a52:	4618      	mov	r0, r3
}
 8006a54:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a56:	2002      	movs	r0, #2
 8006a58:	e7fc      	b.n	8006a54 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006a5a:	bf00      	nop
 8006a5c:	ffff0000 	.word	0xffff0000

08006a60 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a60:	7c03      	ldrb	r3, [r0, #16]
{
 8006a62:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d01c      	beq.n	8006aa2 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006a68:	6802      	ldr	r2, [r0, #0]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6851      	ldr	r1, [r2, #4]
 8006a70:	f041 0101 	orr.w	r1, r1, #1
 8006a74:	6051      	str	r1, [r2, #4]
 8006a76:	6851      	ldr	r1, [r2, #4]
 8006a78:	f001 0101 	and.w	r1, r1, #1
 8006a7c:	9100      	str	r1, [sp, #0]
 8006a7e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8006a86:	f041 0108 	orr.w	r1, r1, #8
 8006a8a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8006a8e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a92:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006a94:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006a96:	f002 0208 	and.w	r2, r2, #8
 8006a9a:	9201      	str	r2, [sp, #4]
 8006a9c:	9a01      	ldr	r2, [sp, #4]
}
 8006a9e:	b002      	add	sp, #8
 8006aa0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006aa2:	2002      	movs	r0, #2
 8006aa4:	e7fb      	b.n	8006a9e <HAL_DSI_Start+0x3e>

08006aa6 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006aa6:	7c03      	ldrb	r3, [r0, #16]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006aac:	6802      	ldr	r2, [r0, #0]
 8006aae:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8006ab2:	f043 0304 	orr.w	r3, r3, #4
 8006ab6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006aba:	2300      	movs	r3, #0
 8006abc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006abe:	4618      	mov	r0, r3
 8006ac0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006ac2:	2002      	movs	r0, #2
}
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006ac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ac8:	7c05      	ldrb	r5, [r0, #16]
{
 8006aca:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006acc:	2d01      	cmp	r5, #1
 8006ace:	d009      	beq.n	8006ae4 <HAL_DSI_ShortWrite+0x1e>
 8006ad0:	2501      	movs	r5, #1
 8006ad2:	7405      	strb	r5, [r0, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006ad4:	9d06      	ldr	r5, [sp, #24]
 8006ad6:	9500      	str	r5, [sp, #0]
 8006ad8:	f7ff fcaf 	bl	800643a <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006adc:	2300      	movs	r3, #0
 8006ade:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006ae0:	b003      	add	sp, #12
 8006ae2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006ae4:	2002      	movs	r0, #2
 8006ae6:	e7fb      	b.n	8006ae0 <HAL_DSI_ShortWrite+0x1a>

08006ae8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006aee:	7c03      	ldrb	r3, [r0, #16]
{
 8006af0:	4606      	mov	r6, r0
 8006af2:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006af4:	2b01      	cmp	r3, #1
{
 8006af6:	4615      	mov	r5, r2
 8006af8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8006afc:	d053      	beq.n	8006ba6 <HAL_DSI_LongWrite+0xbe>
 8006afe:	2301      	movs	r3, #1
 8006b00:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b02:	f7ff f84b 	bl	8005b9c <HAL_GetTick>
 8006b06:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006b08:	6832      	ldr	r2, [r6, #0]
 8006b0a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006b0c:	f013 0a01 	ands.w	sl, r3, #1
 8006b10:	d01a      	beq.n	8006b48 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006b12:	2c03      	cmp	r4, #3
 8006b14:	4621      	mov	r1, r4

  for (count = 0U; count < nbBytes; count++)
 8006b16:	f04f 0000 	mov.w	r0, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006b1a:	bf28      	it	cs
 8006b1c:	2103      	movcs	r1, #3
  for (count = 0U; count < nbBytes; count++)
 8006b1e:	4288      	cmp	r0, r1
 8006b20:	d11e      	bne.n	8006b60 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006b22:	1a23      	subs	r3, r4, r0
  pparams += nbBytes;
 8006b24:	4440      	add	r0, r8
  hdsi->Instance->GPDR = fifoword;
 8006b26:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006b2a:	bb1b      	cbnz	r3, 8006b74 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006b2c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b2e:	ea45 1187 	orr.w	r1, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006b32:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b34:	0225      	lsls	r5, r4, #8
 8006b36:	0224      	lsls	r4, r4, #8
 8006b38:	b2ad      	uxth	r5, r5
 8006b3a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8006b3e:	430d      	orrs	r5, r1
 8006b40:	432c      	orrs	r4, r5
 8006b42:	66d4      	str	r4, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006b44:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8006b46:	e009      	b.n	8006b5c <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b48:	f7ff f828 	bl	8005b9c <HAL_GetTick>
 8006b4c:	eba0 000b 	sub.w	r0, r0, fp
 8006b50:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006b54:	d9d8      	bls.n	8006b08 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006b56:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006b58:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006b60:	f818 3000 	ldrb.w	r3, [r8, r0]
 8006b64:	3001      	adds	r0, #1
 8006b66:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8006b6a:	fa03 f30c 	lsl.w	r3, r3, ip
 8006b6e:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8006b72:	e7d4      	b.n	8006b1e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006b74:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8006b76:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006b7a:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8006b7c:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006b7e:	bf28      	it	cs
 8006b80:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006b84:	f810 8001 	ldrb.w	r8, [r0, r1]
 8006b88:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006b8c:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006b8e:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006b92:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006b94:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006b98:	d1f4      	bne.n	8006b84 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 8006b9a:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8006b9e:	4470      	add	r0, lr
    hdsi->Instance->GPDR = fifoword;
 8006ba0:	f8c2 c070 	str.w	ip, [r2, #112]	; 0x70
    pparams += nbBytes;
 8006ba4:	e7c1      	b.n	8006b2a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006ba6:	2002      	movs	r0, #2
 8006ba8:	e7d8      	b.n	8006b5c <HAL_DSI_LongWrite+0x74>

08006baa <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006baa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bae:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bb0:	7c03      	ldrb	r3, [r0, #16]
{
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006bb6:	2b01      	cmp	r3, #1
{
 8006bb8:	4617      	mov	r7, r2
 8006bba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8006bbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 8006bc2:	d065      	beq.n	8006c90 <HAL_DSI_Read+0xe6>
 8006bc4:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006bc6:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006bc8:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006bca:	d90d      	bls.n	8006be8 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006bcc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006bd0:	2237      	movs	r2, #55	; 0x37
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	b2f3      	uxtb	r3, r6
 8006bd6:	f7ff fc30 	bl	800643a <DSI_ShortWrite>
 8006bda:	b128      	cbz	r0, 8006be8 <HAL_DSI_Read+0x3e>
                           (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006bdc:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006bde:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006be0:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006be2:	b003      	add	sp, #12
 8006be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006be8:	f1b9 0f06 	cmp.w	r9, #6
 8006bec:	d10f      	bne.n	8006c0e <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006bf0:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006bf2:	0209      	lsls	r1, r1, #8
 8006bf4:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
 8006bf8:	f044 0406 	orr.w	r4, r4, #6
 8006bfc:	66dc      	str	r4, [r3, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006bfe:	f7fe ffcd 	bl	8005b9c <HAL_GetTick>
 8006c02:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	dc26      	bgt.n	8006c56 <HAL_DSI_Read+0xac>
  __HAL_UNLOCK(hdsi);
 8006c08:	2000      	movs	r0, #0
 8006c0a:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006c0c:	e7e9      	b.n	8006be2 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006c0e:	f1b9 0f04 	cmp.w	r9, #4
 8006c12:	d104      	bne.n	8006c1e <HAL_DSI_Read+0x74>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c14:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006c16:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c18:	f044 0404 	orr.w	r4, r4, #4
 8006c1c:	e7ee      	b.n	8006bfc <HAL_DSI_Read+0x52>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006c1e:	f1b9 0f14 	cmp.w	r9, #20
 8006c22:	d108      	bne.n	8006c36 <HAL_DSI_Read+0x8c>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006c24:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c28:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006c2a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c2c:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8006c30:	f044 0414 	orr.w	r4, r4, #20
 8006c34:	e7e2      	b.n	8006bfc <HAL_DSI_Read+0x52>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006c36:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8006c3a:	d1cf      	bne.n	8006bdc <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006c3c:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c40:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006c42:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c46:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006c4a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c4c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006c50:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 8006c54:	e7d2      	b.n	8006bfc <HAL_DSI_Read+0x52>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006c56:	682a      	ldr	r2, [r5, #0]
 8006c58:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006c5a:	f013 0310 	ands.w	r3, r3, #16
 8006c5e:	d10d      	bne.n	8006c7c <HAL_DSI_Read+0xd2>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006c60:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006c62:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006c64:	4632      	mov	r2, r6
 8006c66:	bf28      	it	cs
 8006c68:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006c6a:	00d9      	lsls	r1, r3, #3
 8006c6c:	fa20 f101 	lsr.w	r1, r0, r1
 8006c70:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006c72:	3301      	adds	r3, #1
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1f8      	bne.n	8006c6a <HAL_DSI_Read+0xc0>
 8006c78:	4417      	add	r7, r2
 8006c7a:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006c7c:	f7fe ff8e 	bl	8005b9c <HAL_GetTick>
 8006c80:	1b00      	subs	r0, r0, r4
 8006c82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006c86:	d9bd      	bls.n	8006c04 <HAL_DSI_Read+0x5a>
      __HAL_UNLOCK(hdsi);
 8006c88:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006c8a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006c8c:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006c8e:	e7a8      	b.n	8006be2 <HAL_DSI_Read+0x38>
  __HAL_LOCK(hdsi);
 8006c90:	2002      	movs	r0, #2
 8006c92:	e7a6      	b.n	8006be2 <HAL_DSI_Read+0x38>

08006c94 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c94:	7c03      	ldrb	r3, [r0, #16]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d010      	beq.n	8006cbc <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006ca0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006ca4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006ca8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006cac:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8006cb0:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006cb8:	4618      	mov	r0, r3
 8006cba:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006cbc:	2002      	movs	r0, #2
}
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006cc4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e84 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006cca:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8006e88 <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cce:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cd2:	680a      	ldr	r2, [r1, #0]
 8006cd4:	fa32 f403 	lsrs.w	r4, r2, r3
 8006cd8:	d102      	bne.n	8006ce0 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8006cda:	b003      	add	sp, #12
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ce0:	2701      	movs	r7, #1
 8006ce2:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8006ce4:	403a      	ands	r2, r7
 8006ce6:	f000 80b6 	beq.w	8006e56 <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006cea:	684c      	ldr	r4, [r1, #4]
 8006cec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006cf0:	2503      	movs	r5, #3
 8006cf2:	f024 0a10 	bic.w	sl, r4, #16
 8006cf6:	fa05 f50e 	lsl.w	r5, r5, lr
 8006cfa:	f10a 36ff 	add.w	r6, sl, #4294967295
 8006cfe:	43ed      	mvns	r5, r5
 8006d00:	2e01      	cmp	r6, #1
 8006d02:	d810      	bhi.n	8006d26 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8006d04:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d06:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d0a:	68ce      	ldr	r6, [r1, #12]
 8006d0c:	fa06 f60e 	lsl.w	r6, r6, lr
 8006d10:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8006d14:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8006d16:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d18:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d1c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8006d20:	409e      	lsls	r6, r3
 8006d22:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8006d24:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006d26:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d28:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d2c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d2e:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d32:	fa06 f60e 	lsl.w	r6, r6, lr
 8006d36:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8006d3a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d3c:	d114      	bne.n	8006d68 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 8006d3e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d42:	f003 0b07 	and.w	fp, r3, #7
 8006d46:	270f      	movs	r7, #15
 8006d48:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8006d4c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006d50:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d54:	fa07 f70b 	lsl.w	r7, r7, fp
 8006d58:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d5c:	690e      	ldr	r6, [r1, #16]
 8006d5e:	fa06 f60b 	lsl.w	r6, r6, fp
 8006d62:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8006d64:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8006d68:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d6a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d6c:	f004 0603 	and.w	r6, r4, #3
 8006d70:	fa06 fe0e 	lsl.w	lr, r6, lr
 8006d74:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8006d78:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d7a:	00e5      	lsls	r5, r4, #3
 8006d7c:	d56b      	bpl.n	8006e56 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d7e:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8006d82:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d86:	f003 0703 	and.w	r7, r3, #3
 8006d8a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8e:	f045 0502 	orr.w	r5, r5, #2
 8006d92:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d96:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d98:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 8006d9c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006da0:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 8006da4:	f005 0502 	and.w	r5, r5, #2
 8006da8:	9501      	str	r5, [sp, #4]
 8006daa:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dac:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8006db0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006db4:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006db8:	4d31      	ldr	r5, [pc, #196]	; (8006e80 <HAL_GPIO_Init+0x1c0>)
 8006dba:	42a8      	cmp	r0, r5
 8006dbc:	d04d      	beq.n	8006e5a <HAL_GPIO_Init+0x19a>
 8006dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dc2:	42a8      	cmp	r0, r5
 8006dc4:	d04b      	beq.n	8006e5e <HAL_GPIO_Init+0x19e>
 8006dc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dca:	42a8      	cmp	r0, r5
 8006dcc:	d049      	beq.n	8006e62 <HAL_GPIO_Init+0x1a2>
 8006dce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dd2:	42a8      	cmp	r0, r5
 8006dd4:	d047      	beq.n	8006e66 <HAL_GPIO_Init+0x1a6>
 8006dd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dda:	42a8      	cmp	r0, r5
 8006ddc:	d045      	beq.n	8006e6a <HAL_GPIO_Init+0x1aa>
 8006dde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006de2:	42a8      	cmp	r0, r5
 8006de4:	d043      	beq.n	8006e6e <HAL_GPIO_Init+0x1ae>
 8006de6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dea:	42a8      	cmp	r0, r5
 8006dec:	d041      	beq.n	8006e72 <HAL_GPIO_Init+0x1b2>
 8006dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006df2:	42a8      	cmp	r0, r5
 8006df4:	d03f      	beq.n	8006e76 <HAL_GPIO_Init+0x1b6>
 8006df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006dfa:	42a8      	cmp	r0, r5
 8006dfc:	d03d      	beq.n	8006e7a <HAL_GPIO_Init+0x1ba>
 8006dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006e02:	42a8      	cmp	r0, r5
 8006e04:	bf0c      	ite	eq
 8006e06:	2509      	moveq	r5, #9
 8006e08:	250a      	movne	r5, #10
 8006e0a:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e0c:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e0e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e12:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 8006e14:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 8006e18:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 8006e1c:	bf54      	ite	pl
 8006e1e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006e20:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e22:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8006e24:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8006e28:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 8006e2c:	bf54      	ite	pl
 8006e2e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006e30:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e32:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 8006e34:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8006e38:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 8006e3c:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 8006e40:	bf54      	ite	pl
 8006e42:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006e44:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e46:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 8006e48:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8006e4a:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 8006e4c:	bf54      	ite	pl
 8006e4e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8006e50:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 8006e52:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 8006e56:	3301      	adds	r3, #1
 8006e58:	e73b      	b.n	8006cd2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	e7d5      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e5e:	2501      	movs	r5, #1
 8006e60:	e7d3      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e62:	2502      	movs	r5, #2
 8006e64:	e7d1      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e66:	2503      	movs	r5, #3
 8006e68:	e7cf      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e6a:	2504      	movs	r5, #4
 8006e6c:	e7cd      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e6e:	2505      	movs	r5, #5
 8006e70:	e7cb      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e72:	2506      	movs	r5, #6
 8006e74:	e7c9      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e76:	2507      	movs	r5, #7
 8006e78:	e7c7      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e7a:	2508      	movs	r5, #8
 8006e7c:	e7c5      	b.n	8006e0a <HAL_GPIO_Init+0x14a>
 8006e7e:	bf00      	nop
 8006e80:	58020000 	.word	0x58020000
 8006e84:	58024400 	.word	0x58024400
 8006e88:	58000080 	.word	0x58000080

08006e8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006e90:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006e92:	4d4c      	ldr	r5, [pc, #304]	; (8006fc4 <HAL_GPIO_DeInit+0x138>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006e94:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8006fcc <HAL_GPIO_DeInit+0x140>
 8006e98:	f8df a134 	ldr.w	sl, [pc, #308]	; 8006fd0 <HAL_GPIO_DeInit+0x144>
 8006e9c:	f8df b134 	ldr.w	fp, [pc, #308]	; 8006fd4 <HAL_GPIO_DeInit+0x148>
  while ((GPIO_Pin >> position) != 0x00U)
 8006ea0:	fa31 f302 	lsrs.w	r3, r1, r2
 8006ea4:	d101      	bne.n	8006eaa <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 8006eb0:	ea1e 0701 	ands.w	r7, lr, r1
 8006eb4:	d072      	beq.n	8006f9c <HAL_GPIO_DeInit+0x110>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006eb6:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006eba:	f002 0c03 	and.w	ip, r2, #3
 8006ebe:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006ec0:	4b41      	ldr	r3, [pc, #260]	; (8006fc8 <HAL_GPIO_DeInit+0x13c>)
 8006ec2:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ec6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006eca:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ecc:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006ed0:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ed4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006ed8:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006edc:	d060      	beq.n	8006fa0 <HAL_GPIO_DeInit+0x114>
 8006ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	d05e      	beq.n	8006fa4 <HAL_GPIO_DeInit+0x118>
 8006ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eea:	4298      	cmp	r0, r3
 8006eec:	d05c      	beq.n	8006fa8 <HAL_GPIO_DeInit+0x11c>
 8006eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	d05a      	beq.n	8006fac <HAL_GPIO_DeInit+0x120>
 8006ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efa:	4298      	cmp	r0, r3
 8006efc:	d058      	beq.n	8006fb0 <HAL_GPIO_DeInit+0x124>
 8006efe:	4548      	cmp	r0, r9
 8006f00:	d058      	beq.n	8006fb4 <HAL_GPIO_DeInit+0x128>
 8006f02:	4550      	cmp	r0, sl
 8006f04:	d058      	beq.n	8006fb8 <HAL_GPIO_DeInit+0x12c>
 8006f06:	4558      	cmp	r0, fp
 8006f08:	d058      	beq.n	8006fbc <HAL_GPIO_DeInit+0x130>
 8006f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	d056      	beq.n	8006fc0 <HAL_GPIO_DeInit+0x134>
 8006f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f16:	4298      	cmp	r0, r3
 8006f18:	bf0c      	ite	eq
 8006f1a:	2309      	moveq	r3, #9
 8006f1c:	230a      	movne	r3, #10
 8006f1e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006f22:	4543      	cmp	r3, r8
 8006f24:	d118      	bne.n	8006f58 <HAL_GPIO_DeInit+0xcc>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	ea23 0307 	bic.w	r3, r3, r7
 8006f2c:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006f2e:	686b      	ldr	r3, [r5, #4]
 8006f30:	ea23 0307 	bic.w	r3, r3, r7
 8006f34:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3a:	f8d3 c000 	ldr.w	ip, [r3]
 8006f3e:	ea2c 0c07 	bic.w	ip, ip, r7
 8006f42:	f8c3 c000 	str.w	ip, [r3]
        EXTI->FTSR1 &= ~(iocurrent);
 8006f46:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006f4a:	ea2c 0707 	bic.w	r7, ip, r7
 8006f4e:	605f      	str	r7, [r3, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	ea23 0606 	bic.w	r6, r3, r6
 8006f56:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006f58:	2603      	movs	r6, #3
 8006f5a:	0053      	lsls	r3, r2, #1
 8006f5c:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006f5e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006f62:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006f66:	270f      	movs	r7, #15
 8006f68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006f6c:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006f6e:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006f72:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006f74:	fa22 f406 	lsr.w	r4, r2, r6
 8006f78:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006f7c:	6a26      	ldr	r6, [r4, #32]
 8006f7e:	ea26 0707 	bic.w	r7, r6, r7
 8006f82:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f84:	68c4      	ldr	r4, [r0, #12]
 8006f86:	ea24 0403 	bic.w	r4, r4, r3
 8006f8a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f8c:	6844      	ldr	r4, [r0, #4]
 8006f8e:	ea24 040e 	bic.w	r4, r4, lr
 8006f92:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f94:	6884      	ldr	r4, [r0, #8]
 8006f96:	ea24 0303 	bic.w	r3, r4, r3
 8006f9a:	6083      	str	r3, [r0, #8]
    position++;
 8006f9c:	3201      	adds	r2, #1
 8006f9e:	e77f      	b.n	8006ea0 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e7bc      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e7ba      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e7b8      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fac:	2303      	movs	r3, #3
 8006fae:	e7b6      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	e7b4      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fb4:	2305      	movs	r3, #5
 8006fb6:	e7b2      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	e7b0      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fbc:	2307      	movs	r3, #7
 8006fbe:	e7ae      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	e7ac      	b.n	8006f1e <HAL_GPIO_DeInit+0x92>
 8006fc4:	58000080 	.word	0x58000080
 8006fc8:	58020000 	.word	0x58020000
 8006fcc:	58021400 	.word	0x58021400
 8006fd0:	58021800 	.word	0x58021800
 8006fd4:	58021c00 	.word	0x58021c00

08006fd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fd8:	b10a      	cbz	r2, 8006fde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fda:	6181      	str	r1, [r0, #24]
  }
}
 8006fdc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fde:	0409      	lsls	r1, r1, #16
 8006fe0:	e7fb      	b.n	8006fda <HAL_GPIO_WritePin+0x2>

08006fe2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006fe2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fe4:	ea01 0203 	and.w	r2, r1, r3
 8006fe8:	ea21 0103 	bic.w	r1, r1, r3
 8006fec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ff0:	6181      	str	r1, [r0, #24]
}
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <HAL_HSEM_FastTake+0x14>)
 8006ff6:	3020      	adds	r0, #32
 8006ff8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <HAL_HSEM_FastTake+0x18>)
 8006ffe:	1ac0      	subs	r0, r0, r3
 8007000:	bf18      	it	ne
 8007002:	2001      	movne	r0, #1
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	58026400 	.word	0x58026400
 800700c:	80000300 	.word	0x80000300

08007010 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007010:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007014:	4b01      	ldr	r3, [pc, #4]	; (800701c <HAL_HSEM_Release+0xc>)
 8007016:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800701a:	4770      	bx	lr
 800701c:	58026400 	.word	0x58026400

08007020 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007020:	6803      	ldr	r3, [r0, #0]
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	0791      	lsls	r1, r2, #30
 8007026:	d501      	bpl.n	800702c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007028:	2200      	movs	r2, #0
 800702a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	07d2      	lsls	r2, r2, #31
 8007030:	d403      	bmi.n	800703a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	619a      	str	r2, [r3, #24]
  }
}
 800703a:	4770      	bx	lr

0800703c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800703c:	b530      	push	{r4, r5, lr}
 800703e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007040:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007044:	6804      	ldr	r4, [r0, #0]
 8007046:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800704a:	6860      	ldr	r0, [r4, #4]
 800704c:	431a      	orrs	r2, r3
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <I2C_TransferConfig+0x24>)
 8007050:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8007054:	430a      	orrs	r2, r1
 8007056:	ea20 0003 	bic.w	r0, r0, r3
 800705a:	4302      	orrs	r2, r0
 800705c:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800705e:	bd30      	pop	{r4, r5, pc}
 8007060:	03ff63ff 	.word	0x03ff63ff

08007064 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007064:	6803      	ldr	r3, [r0, #0]
{
 8007066:	b570      	push	{r4, r5, r6, lr}
 8007068:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800706a:	6998      	ldr	r0, [r3, #24]
{
 800706c:	460d      	mov	r5, r1
 800706e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007070:	f010 0010 	ands.w	r0, r0, #16
 8007074:	d116      	bne.n	80070a4 <I2C_IsAcknowledgeFailed+0x40>
}
 8007076:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8007078:	1c69      	adds	r1, r5, #1
 800707a:	d014      	beq.n	80070a6 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707c:	f7fe fd8e 	bl	8005b9c <HAL_GetTick>
 8007080:	1b80      	subs	r0, r0, r6
 8007082:	42a8      	cmp	r0, r5
 8007084:	d800      	bhi.n	8007088 <I2C_IsAcknowledgeFailed+0x24>
 8007086:	b96d      	cbnz	r5, 80070a4 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007088:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800708a:	f043 0320 	orr.w	r3, r3, #32
 800708e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007090:	2320      	movs	r3, #32
 8007092:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007096:	2300      	movs	r3, #0
    return HAL_ERROR;
 8007098:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800709e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80070a2:	e7e8      	b.n	8007076 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	0692      	lsls	r2, r2, #26
 80070aa:	d5e5      	bpl.n	8007078 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ae:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80070b0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80070b6:	f7ff ffb3 	bl	8007020 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	6853      	ldr	r3, [r2, #4]
 80070be:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80070c2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80070c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070d2:	f043 0304 	orr.w	r3, r3, #4
 80070d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070d8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80070dc:	e7db      	b.n	8007096 <I2C_IsAcknowledgeFailed+0x32>

080070de <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80070de:	b570      	push	{r4, r5, r6, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	069b      	lsls	r3, r3, #26
 80070ec:	d501      	bpl.n	80070f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80070ee:	2000      	movs	r0, #0
}
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f2:	4632      	mov	r2, r6
 80070f4:	4629      	mov	r1, r5
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ffb4 	bl	8007064 <I2C_IsAcknowledgeFailed>
 80070fc:	b990      	cbnz	r0, 8007124 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fe:	f7fe fd4d 	bl	8005b9c <HAL_GetTick>
 8007102:	1b80      	subs	r0, r0, r6
 8007104:	42a8      	cmp	r0, r5
 8007106:	d801      	bhi.n	800710c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007108:	2d00      	cmp	r5, #0
 800710a:	d1ec      	bne.n	80070e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800710c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800710e:	f043 0320 	orr.w	r3, r3, #32
 8007112:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007114:	2320      	movs	r3, #32
 8007116:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8007120:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007124:	2001      	movs	r0, #1
 8007126:	e7e3      	b.n	80070f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08007128 <I2C_WaitOnFlagUntilTimeout>:
{
 8007128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712c:	9f06      	ldr	r7, [sp, #24]
 800712e:	4604      	mov	r4, r0
 8007130:	4688      	mov	r8, r1
 8007132:	4616      	mov	r6, r2
 8007134:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	6993      	ldr	r3, [r2, #24]
 800713a:	ea38 0303 	bics.w	r3, r8, r3
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	42b3      	cmp	r3, r6
 8007146:	d001      	beq.n	800714c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8007148:	2000      	movs	r0, #0
 800714a:	e015      	b.n	8007178 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800714c:	1c6b      	adds	r3, r5, #1
 800714e:	d0f3      	beq.n	8007138 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007150:	f7fe fd24 	bl	8005b9c <HAL_GetTick>
 8007154:	1bc0      	subs	r0, r0, r7
 8007156:	42a8      	cmp	r0, r5
 8007158:	d801      	bhi.n	800715e <I2C_WaitOnFlagUntilTimeout+0x36>
 800715a:	2d00      	cmp	r5, #0
 800715c:	d1eb      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800715e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8007160:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007162:	f043 0320 	orr.w	r3, r3, #32
 8007166:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007168:	2320      	movs	r3, #32
 800716a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800716e:	2300      	movs	r3, #0
 8007170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8007174:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800717c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	079b      	lsls	r3, r3, #30
 800718a:	d501      	bpl.n	8007190 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800718c:	2000      	movs	r0, #0
}
 800718e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007190:	4632      	mov	r2, r6
 8007192:	4629      	mov	r1, r5
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff ff65 	bl	8007064 <I2C_IsAcknowledgeFailed>
 800719a:	b9a0      	cbnz	r0, 80071c6 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800719c:	1c6a      	adds	r2, r5, #1
 800719e:	d0f1      	beq.n	8007184 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a0:	f7fe fcfc 	bl	8005b9c <HAL_GetTick>
 80071a4:	1b80      	subs	r0, r0, r6
 80071a6:	42a8      	cmp	r0, r5
 80071a8:	d801      	bhi.n	80071ae <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	d1ea      	bne.n	8007184 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071b6:	2320      	movs	r3, #32
 80071b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071bc:	2300      	movs	r3, #0
 80071be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80071c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80071c6:	2001      	movs	r0, #1
 80071c8:	e7e1      	b.n	800718e <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

080071cc <I2C_RequestMemoryWrite>:
{
 80071cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071d0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <I2C_RequestMemoryWrite+0x68>)
{
 80071d4:	4605      	mov	r5, r0
 80071d6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	b2f2      	uxtb	r2, r6
 80071dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80071e0:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071e4:	f7ff ff2a 	bl	800703c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e8:	4628      	mov	r0, r5
 80071ea:	4642      	mov	r2, r8
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7ff ffc5 	bl	800717c <I2C_WaitOnTXISFlagUntilTimeout>
 80071f2:	b118      	cbz	r0, 80071fc <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80071f4:	2001      	movs	r0, #1
}
 80071f6:	b002      	add	sp, #8
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071fc:	2e01      	cmp	r6, #1
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	d10d      	bne.n	800721e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007202:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	2200      	movs	r2, #0
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800720a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800720c:	463b      	mov	r3, r7
 800720e:	f8cd 8000 	str.w	r8, [sp]
 8007212:	f7ff ff89 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007216:	3800      	subs	r0, #0
 8007218:	bf18      	it	ne
 800721a:	2001      	movne	r0, #1
 800721c:	e7eb      	b.n	80071f6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800721e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007220:	4639      	mov	r1, r7
 8007222:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007224:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007226:	4642      	mov	r2, r8
 8007228:	f7ff ffa8 	bl	800717c <I2C_WaitOnTXISFlagUntilTimeout>
 800722c:	2800      	cmp	r0, #0
 800722e:	d1e1      	bne.n	80071f4 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	e7e6      	b.n	8007202 <I2C_RequestMemoryWrite+0x36>
 8007234:	80002000 	.word	0x80002000

08007238 <I2C_RequestMemoryRead>:
{
 8007238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800723c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <I2C_RequestMemoryRead+0x68>)
{
 8007240:	4605      	mov	r5, r0
 8007242:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	b2f2      	uxtb	r2, r6
 8007248:	2300      	movs	r3, #0
{
 800724a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800724e:	f7ff fef5 	bl	800703c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007252:	4628      	mov	r0, r5
 8007254:	4642      	mov	r2, r8
 8007256:	4639      	mov	r1, r7
 8007258:	f7ff ff90 	bl	800717c <I2C_WaitOnTXISFlagUntilTimeout>
 800725c:	b118      	cbz	r0, 8007266 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800725e:	2001      	movs	r0, #1
}
 8007260:	b002      	add	sp, #8
 8007262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007266:	2e01      	cmp	r6, #1
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	d10d      	bne.n	8007288 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800726c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800726e:	2200      	movs	r2, #0
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007274:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007276:	463b      	mov	r3, r7
 8007278:	f8cd 8000 	str.w	r8, [sp]
 800727c:	f7ff ff54 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007280:	3800      	subs	r0, #0
 8007282:	bf18      	it	ne
 8007284:	2001      	movne	r0, #1
 8007286:	e7eb      	b.n	8007260 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007288:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728a:	4639      	mov	r1, r7
 800728c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007290:	4642      	mov	r2, r8
 8007292:	f7ff ff73 	bl	800717c <I2C_WaitOnTXISFlagUntilTimeout>
 8007296:	2800      	cmp	r0, #0
 8007298:	d1e1      	bne.n	800725e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	e7e6      	b.n	800726c <I2C_RequestMemoryRead+0x34>
 800729e:	bf00      	nop
 80072a0:	80002000 	.word	0x80002000

080072a4 <HAL_I2C_MspInit>:
}
 80072a4:	4770      	bx	lr

080072a6 <HAL_I2C_Init>:
{
 80072a6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80072a8:	4604      	mov	r4, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d04a      	beq.n	8007344 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80072b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072b6:	b91b      	cbnz	r3, 80072c0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80072b8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80072bc:	f7ff fff2 	bl	80072a4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80072c0:	2324      	movs	r3, #36	; 0x24
 80072c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	f022 0201 	bic.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072d6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072de:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80072e4:	2901      	cmp	r1, #1
 80072e6:	d124      	bne.n	8007332 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ec:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072ee:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f0:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80072f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072fa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007302:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007304:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007308:	430a      	orrs	r2, r1
 800730a:	69a1      	ldr	r1, [r4, #24]
 800730c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007310:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007312:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	f042 0201 	orr.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007322:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007324:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007326:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800732a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007330:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007332:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007336:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007338:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800733a:	d1d8      	bne.n	80072ee <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800733c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	e7d4      	b.n	80072ee <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8007344:	2001      	movs	r0, #1
 8007346:	e7f3      	b.n	8007330 <HAL_I2C_Init+0x8a>

08007348 <HAL_I2C_MspDeInit>:
 8007348:	4770      	bx	lr

0800734a <HAL_I2C_DeInit>:
{
 800734a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800734c:	4604      	mov	r4, r0
 800734e:	b198      	cbz	r0, 8007378 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007350:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007352:	2324      	movs	r3, #36	; 0x24
 8007354:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007360:	f7ff fff2 	bl	8007348 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007364:	2000      	movs	r0, #0
 8007366:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8007368:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800736c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007372:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007376:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007378:	2001      	movs	r0, #1
 800737a:	e7fc      	b.n	8007376 <HAL_I2C_DeInit+0x2c>

0800737c <HAL_I2C_Mem_Write>:
{
 800737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007380:	b085      	sub	sp, #20
 8007382:	469b      	mov	fp, r3
 8007384:	4604      	mov	r4, r0
 8007386:	460f      	mov	r7, r1
 8007388:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800738c:	4692      	mov	sl, r2
 800738e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8007392:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007394:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007398:	2b20      	cmp	r3, #32
 800739a:	f040 80a3 	bne.w	80074e4 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800739e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a0:	b10b      	cbz	r3, 80073a6 <HAL_I2C_Mem_Write+0x2a>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	b933      	cbnz	r3, 80073b4 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073aa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80073ac:	2001      	movs	r0, #1
}
 80073ae:	b005      	add	sp, #20
 80073b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80073b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	f000 8093 	beq.w	80074e4 <HAL_I2C_Mem_Write+0x168>
 80073be:	2501      	movs	r5, #1
 80073c0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80073c4:	f7fe fbea 	bl	8005b9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073c8:	2319      	movs	r3, #25
 80073ca:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80073cc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073ce:	462a      	mov	r2, r5
 80073d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073d4:	4620      	mov	r0, r4
 80073d6:	f7ff fea7 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 80073da:	4680      	mov	r8, r0
 80073dc:	2800      	cmp	r0, #0
 80073de:	d1e5      	bne.n	80073ac <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073e0:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80073e2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073e4:	4652      	mov	r2, sl
 80073e6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80073f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073f4:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073f6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80073f8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80073fa:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073fc:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8007400:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007402:	465b      	mov	r3, fp
 8007404:	f7ff fee2 	bl	80071cc <I2C_RequestMemoryWrite>
 8007408:	b110      	cbz	r0, 8007410 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800740a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800740e:	e7cd      	b.n	80073ac <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007412:	b29b      	uxth	r3, r3
 8007414:	2bff      	cmp	r3, #255	; 0xff
 8007416:	d955      	bls.n	80074c4 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007418:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800741a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800741e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007420:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007422:	4639      	mov	r1, r7
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff fe09 	bl	800703c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742a:	4632      	mov	r2, r6
 800742c:	4649      	mov	r1, r9
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff fea4 	bl	800717c <I2C_WaitOnTXISFlagUntilTimeout>
 8007434:	2800      	cmp	r0, #0
 8007436:	d1b9      	bne.n	80073ac <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007440:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007442:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007444:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007446:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007448:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800744a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800744c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800744e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007450:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007454:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007456:	b29b      	uxth	r3, r3
 8007458:	b1ab      	cbz	r3, 8007486 <HAL_I2C_Mem_Write+0x10a>
 800745a:	b9a2      	cbnz	r2, 8007486 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800745c:	464b      	mov	r3, r9
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	4620      	mov	r0, r4
 8007462:	9600      	str	r6, [sp, #0]
 8007464:	f7ff fe60 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8007468:	2800      	cmp	r0, #0
 800746a:	d19f      	bne.n	80073ac <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800746c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	2bff      	cmp	r3, #255	; 0xff
 8007472:	d92f      	bls.n	80074d4 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007474:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800747a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800747c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800747e:	4639      	mov	r1, r7
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff fddb 	bl	800703c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1cd      	bne.n	800742a <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748e:	4632      	mov	r2, r6
 8007490:	4649      	mov	r1, r9
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff fe23 	bl	80070de <I2C_WaitOnSTOPFlagUntilTimeout>
 8007498:	2800      	cmp	r0, #0
 800749a:	d187      	bne.n	80073ac <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	2120      	movs	r1, #32
 80074a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80074a8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80074ac:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80074b6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80074ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80074c2:	e774      	b.n	80073ae <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80074c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074ca:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80074cc:	b292      	uxth	r2, r2
 80074ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	e7a6      	b.n	8007422 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80074d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074da:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80074dc:	b292      	uxth	r2, r2
 80074de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	e7cc      	b.n	800747e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80074e4:	2002      	movs	r0, #2
 80074e6:	e762      	b.n	80073ae <HAL_I2C_Mem_Write+0x32>

080074e8 <HAL_I2C_Mem_Read>:
{
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b085      	sub	sp, #20
 80074ee:	469b      	mov	fp, r3
 80074f0:	4604      	mov	r4, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80074f8:	4692      	mov	sl, r2
 80074fa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80074fe:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007500:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007504:	2b20      	cmp	r3, #32
 8007506:	f040 80a7 	bne.w	8007658 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800750a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800750c:	b10b      	cbz	r3, 8007512 <HAL_I2C_Mem_Read+0x2a>
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	b933      	cbnz	r3, 8007520 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007516:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007518:	2001      	movs	r0, #1
}
 800751a:	b005      	add	sp, #20
 800751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007520:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007524:	2b01      	cmp	r3, #1
 8007526:	f000 8097 	beq.w	8007658 <HAL_I2C_Mem_Read+0x170>
 800752a:	2501      	movs	r5, #1
 800752c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007530:	f7fe fb34 	bl	8005b9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007534:	2319      	movs	r3, #25
 8007536:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007538:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800753a:	462a      	mov	r2, r5
 800753c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff fdf1 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 8007546:	4680      	mov	r8, r0
 8007548:	2800      	cmp	r0, #0
 800754a:	d1e5      	bne.n	8007518 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800754c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800754e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007550:	4652      	mov	r2, sl
 8007552:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007554:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007558:	2340      	movs	r3, #64	; 0x40
 800755a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800755e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007560:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007562:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007564:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007566:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007568:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 800756c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800756e:	465b      	mov	r3, fp
 8007570:	f7ff fe62 	bl	8007238 <I2C_RequestMemoryRead>
 8007574:	b110      	cbz	r0, 800757c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8007576:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800757a:	e7cd      	b.n	8007518 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800757c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	2bff      	cmp	r3, #255	; 0xff
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <HAL_I2C_Mem_Read+0x174>)
 8007584:	d958      	bls.n	8007638 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007586:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800758e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007590:	4639      	mov	r1, r7
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff fd52 	bl	800703c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007598:	464b      	mov	r3, r9
 800759a:	2200      	movs	r2, #0
 800759c:	2104      	movs	r1, #4
 800759e:	4620      	mov	r0, r4
 80075a0:	9600      	str	r6, [sp, #0]
 80075a2:	f7ff fdc1 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1b6      	bne.n	8007518 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075b0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80075b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80075b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80075b6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80075b8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80075ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80075bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80075be:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80075c0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80075c2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	b1ab      	cbz	r3, 80075fa <HAL_I2C_Mem_Read+0x112>
 80075ce:	b9a2      	cbnz	r2, 80075fa <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075d0:	464b      	mov	r3, r9
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	4620      	mov	r0, r4
 80075d6:	9600      	str	r6, [sp, #0]
 80075d8:	f7ff fda6 	bl	8007128 <I2C_WaitOnFlagUntilTimeout>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d19b      	bne.n	8007518 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2bff      	cmp	r3, #255	; 0xff
 80075e6:	d92f      	bls.n	8007648 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ee:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075f2:	4639      	mov	r1, r7
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7ff fd21 	bl	800703c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80075fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1ca      	bne.n	8007598 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007602:	4632      	mov	r2, r6
 8007604:	4649      	mov	r1, r9
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff fd69 	bl	80070de <I2C_WaitOnSTOPFlagUntilTimeout>
 800760c:	2800      	cmp	r0, #0
 800760e:	d183      	bne.n	8007518 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	2120      	movs	r1, #32
 8007614:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800761c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007620:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800762e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007632:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007636:	e770      	b.n	800751a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8007638:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007640:	b292      	uxth	r2, r2
 8007642:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	e7a3      	b.n	8007590 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8007648:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800764a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007650:	b292      	uxth	r2, r2
 8007652:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	e7cc      	b.n	80075f2 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8007658:	2002      	movs	r0, #2
 800765a:	e75e      	b.n	800751a <HAL_I2C_Mem_Read+0x32>
 800765c:	80002400 	.word	0x80002400

08007660 <HAL_I2C_GetState>:
  return hi2c->State;
 8007660:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007664:	4770      	bx	lr

08007666 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007666:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007668:	4770      	bx	lr

0800766a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800766a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007670:	2b20      	cmp	r3, #32
 8007672:	b2dc      	uxtb	r4, r3
 8007674:	d11d      	bne.n	80076b2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007676:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800767a:	2b01      	cmp	r3, #1
 800767c:	d019      	beq.n	80076b2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800767e:	2324      	movs	r3, #36	; 0x24
 8007680:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007684:	6803      	ldr	r3, [r0, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007694:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	4311      	orrs	r1, r2
 800769a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80076a6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80076aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80076ae:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80076b0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80076b2:	2002      	movs	r0, #2
 80076b4:	e7fc      	b.n	80076b0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080076b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076b6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80076bc:	2b20      	cmp	r3, #32
 80076be:	b2dc      	uxtb	r4, r3
 80076c0:	d11c      	bne.n	80076fc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d018      	beq.n	80076fc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ca:	2324      	movs	r3, #36	; 0x24
 80076cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076d0:	6803      	ldr	r3, [r0, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	f022 0201 	bic.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076da:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076dc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076e0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076e4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80076f0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80076f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80076f8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80076fa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80076fc:	2002      	movs	r0, #2
 80076fe:	e7fc      	b.n	80076fa <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007700 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007700:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007702:	f8d1 c000 	ldr.w	ip, [r1]
{
 8007706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800770a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800770c:	6804      	ldr	r4, [r0, #0]
 800770e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007710:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007714:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007716:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007718:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800771c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007720:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007722:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007726:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800772a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800772c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007734:	4430      	add	r0, r6
 8007736:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800773a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800773c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800773e:	68e0      	ldr	r0, [r4, #12]
 8007740:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8007744:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007746:	6898      	ldr	r0, [r3, #8]
 8007748:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800774c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800774e:	6888      	ldr	r0, [r1, #8]
 8007750:	68e6      	ldr	r6, [r4, #12]
 8007752:	3001      	adds	r0, #1
 8007754:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8007758:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800775a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800775c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007760:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007762:	6918      	ldr	r0, [r3, #16]
 8007764:	f020 0007 	bic.w	r0, r0, #7
 8007768:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800776a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800776c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800776e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007772:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007776:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800777a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800777e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8007782:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007786:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800778a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800778c:	6958      	ldr	r0, [r3, #20]
 800778e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8007792:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007794:	6948      	ldr	r0, [r1, #20]
 8007796:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007798:	69d8      	ldr	r0, [r3, #28]
 800779a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800779e:	f020 0007 	bic.w	r0, r0, #7
 80077a2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80077a4:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 80077a8:	4305      	orrs	r5, r0
 80077aa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80077ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80077ae:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80077b0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80077b4:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80077b6:	b31e      	cbz	r6, 8007800 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80077b8:	2e01      	cmp	r6, #1
 80077ba:	d023      	beq.n	8007804 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077bc:	1eb0      	subs	r0, r6, #2
 80077be:	2802      	cmp	r0, #2
 80077c0:	d922      	bls.n	8007808 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077c2:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80077c4:	bf0c      	ite	eq
 80077c6:	2002      	moveq	r0, #2
 80077c8:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077ca:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80077cc:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077d0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80077d4:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80077d6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077d8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80077da:	4345      	muls	r5, r0
 80077dc:	4378      	muls	r0, r7
 80077de:	3007      	adds	r0, #7
 80077e0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80077e4:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80077e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077e8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80077ec:	f020 0007 	bic.w	r0, r0, #7
 80077f0:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077f2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077f4:	58a3      	ldr	r3, [r4, r2]
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	50a3      	str	r3, [r4, r2]
}
 80077fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8007800:	2004      	movs	r0, #4
 8007802:	e7e2      	b.n	80077ca <LTDC_SetConfig+0xca>
    tmp = 3U;
 8007804:	2003      	movs	r0, #3
 8007806:	e7e0      	b.n	80077ca <LTDC_SetConfig+0xca>
    tmp = 2U;
 8007808:	2002      	movs	r0, #2
 800780a:	e7de      	b.n	80077ca <LTDC_SetConfig+0xca>

0800780c <HAL_LTDC_Init>:
{
 800780c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800780e:	4604      	mov	r4, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	d063      	beq.n	80078dc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007814:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007818:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800781c:	b91b      	cbnz	r3, 8007826 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800781e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007822:	f7f9 fc9f 	bl	8001164 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007826:	2302      	movs	r3, #2
 8007828:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007834:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007836:	6999      	ldr	r1, [r3, #24]
 8007838:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800783c:	4302      	orrs	r2, r0
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007842:	6920      	ldr	r0, [r4, #16]
 8007844:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007846:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007848:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800784a:	4925      	ldr	r1, [pc, #148]	; (80078e0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800784c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	400a      	ands	r2, r1
 8007852:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800785a:	69a0      	ldr	r0, [r4, #24]
 800785c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800785e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007860:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	400a      	ands	r2, r1
 8007866:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800786e:	6a20      	ldr	r0, [r4, #32]
 8007870:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007872:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007874:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	400a      	ands	r2, r1
 800787a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007882:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007884:	4302      	orrs	r2, r0
 8007886:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	4011      	ands	r1, r2
 800788c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800788e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007896:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007898:	430a      	orrs	r2, r1
 800789a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800789c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800789e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80078a2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80078a6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80078aa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80078ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078ae:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80078b2:	430a      	orrs	r2, r1
 80078b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80078b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80078bc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80078c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c2:	f042 0206 	orr.w	r2, r2, #6
 80078c6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80078d0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80078d2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80078d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80078da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80078dc:	2001      	movs	r0, #1
 80078de:	e7fc      	b.n	80078da <HAL_LTDC_Init+0xce>
 80078e0:	f000f800 	.word	0xf000f800

080078e4 <HAL_LTDC_ErrorCallback>:
 80078e4:	4770      	bx	lr

080078e6 <HAL_LTDC_LineEventCallback>:
 80078e6:	4770      	bx	lr

080078e8 <HAL_LTDC_ReloadEventCallback>:
 80078e8:	4770      	bx	lr

080078ea <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80078ea:	6803      	ldr	r3, [r0, #0]
{
 80078ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80078ee:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80078f0:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80078f2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80078f4:	0772      	lsls	r2, r6, #29
 80078f6:	d514      	bpl.n	8007922 <HAL_LTDC_IRQHandler+0x38>
 80078f8:	0769      	lsls	r1, r5, #29
 80078fa:	d512      	bpl.n	8007922 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80078fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078fe:	f022 0204 	bic.w	r2, r2, #4
 8007902:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007904:	2204      	movs	r2, #4
 8007906:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007908:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007914:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007916:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800791a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800791e:	f7ff ffe1 	bl	80078e4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007922:	07b2      	lsls	r2, r6, #30
 8007924:	d516      	bpl.n	8007954 <HAL_LTDC_IRQHandler+0x6a>
 8007926:	07ab      	lsls	r3, r5, #30
 8007928:	d514      	bpl.n	8007954 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800792a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800792c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800792e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007930:	f022 0202 	bic.w	r2, r2, #2
 8007934:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007936:	2202      	movs	r2, #2
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800793a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007944:	2304      	movs	r3, #4
 8007946:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800794a:	2300      	movs	r3, #0
 800794c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007950:	f7ff ffc8 	bl	80078e4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007954:	07f0      	lsls	r0, r6, #31
 8007956:	d510      	bpl.n	800797a <HAL_LTDC_IRQHandler+0x90>
 8007958:	07e9      	lsls	r1, r5, #31
 800795a:	d50e      	bpl.n	800797a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800795c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800795e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007962:	f022 0201 	bic.w	r2, r2, #1
 8007966:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007968:	2201      	movs	r2, #1
 800796a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800796c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800796e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007972:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007976:	f7ff ffb6 	bl	80078e6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800797a:	0732      	lsls	r2, r6, #28
 800797c:	d511      	bpl.n	80079a2 <HAL_LTDC_IRQHandler+0xb8>
 800797e:	072b      	lsls	r3, r5, #28
 8007980:	d50f      	bpl.n	80079a2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007982:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007984:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007988:	f022 0208 	bic.w	r2, r2, #8
 800798c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800798e:	2208      	movs	r2, #8
 8007990:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007992:	2301      	movs	r3, #1
 8007994:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007998:	2300      	movs	r3, #0
 800799a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800799e:	f7ff ffa3 	bl	80078e8 <HAL_LTDC_ReloadEventCallback>
}
 80079a2:	bd70      	pop	{r4, r5, r6, pc}

080079a4 <HAL_LTDC_ConfigLayer>:
{
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80079a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	f04f 0002 	mov.w	r0, #2
 80079b8:	d01f      	beq.n	80079fa <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079ba:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80079bc:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079c0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079c2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079c6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80079ca:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079ce:	3438      	adds	r4, #56	; 0x38
 80079d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079dc:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079de:	4630      	mov	r0, r6
 80079e0:	4662      	mov	r2, ip
 80079e2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079e4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079e6:	f7ff fe8b 	bl	8007700 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079ea:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80079ec:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079ee:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80079f2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80079f6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007a00 <HAL_LTDC_SetPitch>:
{
 8007a00:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8007a02:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	f04f 0302 	mov.w	r3, #2
 8007a0c:	d02c      	beq.n	8007a68 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007a0e:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a10:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007a14:	fb04 0402 	mla	r4, r4, r2, r0
 8007a18:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a1a:	b33c      	cbz	r4, 8007a6c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a1c:	2c01      	cmp	r4, #1
 8007a1e:	d027      	beq.n	8007a70 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a20:	1ea5      	subs	r5, r4, #2
 8007a22:	429d      	cmp	r5, r3
 8007a24:	d902      	bls.n	8007a2c <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8007a26:	2c07      	cmp	r4, #7
 8007a28:	bf18      	it	ne
 8007a2a:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007a2c:	01d2      	lsls	r2, r2, #7
 8007a2e:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007a30:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007a32:	3284      	adds	r2, #132	; 0x84
 8007a34:	4422      	add	r2, r4
 8007a36:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007a38:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a3c:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8007a40:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007a42:	4c0c      	ldr	r4, [pc, #48]	; (8007a74 <HAL_LTDC_SetPitch+0x74>)
 8007a44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007a46:	f045 0501 	orr.w	r5, r5, #1
 8007a4a:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007a4c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8007a4e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007a52:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007a62:	2300      	movs	r3, #0
 8007a64:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	e7dd      	b.n	8007a2c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e7db      	b.n	8007a2c <HAL_LTDC_SetPitch+0x2c>
 8007a74:	50001000 	.word	0x50001000

08007a78 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007a7c:	f7fe f88e 	bl	8005b9c <HAL_GetTick>
 8007a80:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007a82:	2c00      	cmp	r4, #0
 8007a84:	d061      	beq.n	8007b4a <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007a86:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007a88:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8007a94:	68d3      	ldr	r3, [r2, #12]
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	07d2      	lsls	r2, r2, #31
 8007aa2:	d448      	bmi.n	8007b36 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007aa4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007aac:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	69e1      	ldr	r1, [r4, #28]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007abc:	430a      	orrs	r2, r1
 8007abe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	68a1      	ldr	r1, [r4, #8]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007acc:	3901      	subs	r1, #1
 8007ace:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007ad2:	6861      	ldr	r1, [r4, #4]
 8007ad4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007ad8:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007ada:	d103      	bne.n	8007ae4 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007ae2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007ae8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	da04      	bge.n	8007af8 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007aee:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007af0:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007af2:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8007af6:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007af8:	b292      	uxth	r2, r2
 8007afa:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007afc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	da25      	bge.n	8007b4e <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007b02:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007b04:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007b06:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007b0a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b0c:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b0e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007b12:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b16:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	d019      	beq.n	8007b52 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007b1e:	b2c9      	uxtb	r1, r1
 8007b20:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007b24:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007b26:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007b28:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007b2a:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8007b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007b30:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007b36:	f7fe f831 	bl	8005b9c <HAL_GetTick>
 8007b3a:	1b40      	subs	r0, r0, r5
 8007b3c:	2805      	cmp	r0, #5
 8007b3e:	d9ad      	bls.n	8007a9c <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007b44:	2303      	movs	r3, #3
 8007b46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e7f2      	b.n	8007b34 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007b4e:	6a18      	ldr	r0, [r3, #32]
 8007b50:	e7dd      	b.n	8007b0e <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28
 8007b54:	e7e5      	b.n	8007b22 <HAL_MDMA_Init+0xaa>

08007b56 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007b56:	b1d8      	cbz	r0, 8007b90 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8007b58:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007b5a:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007b5c:	68d3      	ldr	r3, [r2, #12]
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8007b68:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8007b6a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007b6c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007b6e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007b70:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8007b72:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007b74:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007b76:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007b78:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007b7a:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007b7c:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007b7e:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007b80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8007b84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007b88:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	4770      	bx	lr
    return HAL_ERROR;
 8007b90:	2001      	movs	r0, #1
}
 8007b92:	4770      	bx	lr

08007b94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007b94:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007b96:	4d1c      	ldr	r5, [pc, #112]	; (8007c08 <HAL_PWREx_ConfigSupply+0x74>)
{
 8007b98:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007b9a:	68eb      	ldr	r3, [r5, #12]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	d006      	beq.n	8007bb2 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ba4:	68e8      	ldr	r0, [r5, #12]
 8007ba6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007baa:	1b00      	subs	r0, r0, r4
 8007bac:	bf18      	it	ne
 8007bae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bb2:	68eb      	ldr	r3, [r5, #12]
 8007bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bb8:	4303      	orrs	r3, r0
 8007bba:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8007bbc:	f7fd ffee 	bl	8005b9c <HAL_GetTick>
 8007bc0:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bc2:	686b      	ldr	r3, [r5, #4]
 8007bc4:	049a      	lsls	r2, r3, #18
 8007bc6:	d508      	bpl.n	8007bda <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007bc8:	f1a4 031d 	sub.w	r3, r4, #29
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d90c      	bls.n	8007bea <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007bd0:	3c2d      	subs	r4, #45	; 0x2d
 8007bd2:	2c01      	cmp	r4, #1
 8007bd4:	d909      	bls.n	8007bea <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e7ea      	b.n	8007bb0 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bda:	f7fd ffdf 	bl	8005b9c <HAL_GetTick>
 8007bde:	1b80      	subs	r0, r0, r6
 8007be0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007be4:	d9ed      	bls.n	8007bc2 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7e2      	b.n	8007bb0 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8007bea:	f7fd ffd7 	bl	8005b9c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8007bf0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007bf2:	68eb      	ldr	r3, [r5, #12]
 8007bf4:	03db      	lsls	r3, r3, #15
 8007bf6:	d4ee      	bmi.n	8007bd6 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bf8:	f7fd ffd0 	bl	8005b9c <HAL_GetTick>
 8007bfc:	1b00      	subs	r0, r0, r4
 8007bfe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007c02:	d9f6      	bls.n	8007bf2 <HAL_PWREx_ConfigSupply+0x5e>
 8007c04:	e7ef      	b.n	8007be6 <HAL_PWREx_ConfigSupply+0x52>
 8007c06:	bf00      	nop
 8007c08:	58024800 	.word	0x58024800

08007c0c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007c10:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8007c12:	b136      	cbz	r6, 8007c22 <QSPI_Config+0x16>
 8007c14:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8007c18:	d003      	beq.n	8007c22 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007c1a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007c1c:	6804      	ldr	r4, [r0, #0]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007c22:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8007c26:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8007c2a:	f1ba 0f00 	cmp.w	sl, #0
 8007c2e:	d04e      	beq.n	8007cce <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007c30:	694b      	ldr	r3, [r1, #20]
 8007c32:	ea46 0a0a 	orr.w	sl, r6, sl
 8007c36:	6805      	ldr	r5, [r0, #0]
 8007c38:	f8d1 8000 	ldr.w	r8, [r1]
 8007c3c:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 8007c40:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007c42:	ea4a 0a02 	orr.w	sl, sl, r2
 8007c46:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 8007c4a:	f1bc 0f00 	cmp.w	ip, #0
 8007c4e:	d026      	beq.n	8007c9e <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007c50:	688b      	ldr	r3, [r1, #8]
 8007c52:	ea4c 0c0a 	orr.w	ip, ip, sl
 8007c56:	690e      	ldr	r6, [r1, #16]
 8007c58:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007c5a:	b1a7      	cbz	r7, 8007c86 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c5c:	ea48 0307 	orr.w	r3, r8, r7
 8007c60:	4323      	orrs	r3, r4
 8007c62:	ea43 0309 	orr.w	r3, r3, r9
 8007c66:	4303      	orrs	r3, r0
 8007c68:	68c8      	ldr	r0, [r1, #12]
 8007c6a:	4333      	orrs	r3, r6
 8007c6c:	4303      	orrs	r3, r0
 8007c6e:	ea43 030e 	orr.w	r3, r3, lr
 8007c72:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007c76:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c7a:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007c7c:	d001      	beq.n	8007c82 <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007c7e:	684b      	ldr	r3, [r1, #4]
 8007c80:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c86:	ea48 0304 	orr.w	r3, r8, r4
 8007c8a:	ea43 0309 	orr.w	r3, r3, r9
 8007c8e:	4303      	orrs	r3, r0
 8007c90:	4333      	orrs	r3, r6
 8007c92:	ea43 030e 	orr.w	r3, r3, lr
 8007c96:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c9a:	616b      	str	r3, [r5, #20]
 8007c9c:	e7f1      	b.n	8007c82 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007c9e:	b167      	cbz	r7, 8007cba <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ca0:	ea48 0307 	orr.w	r3, r8, r7
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	ea43 0309 	orr.w	r3, r3, r9
 8007caa:	4303      	orrs	r3, r0
 8007cac:	68c8      	ldr	r0, [r1, #12]
 8007cae:	4303      	orrs	r3, r0
 8007cb0:	ea43 030e 	orr.w	r3, r3, lr
 8007cb4:	ea43 030a 	orr.w	r3, r3, sl
 8007cb8:	e7dd      	b.n	8007c76 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007cba:	ea48 0304 	orr.w	r3, r8, r4
 8007cbe:	ea43 0309 	orr.w	r3, r3, r9
 8007cc2:	4303      	orrs	r3, r0
 8007cc4:	ea43 030e 	orr.w	r3, r3, lr
 8007cc8:	ea43 030a 	orr.w	r3, r3, sl
 8007ccc:	e7e5      	b.n	8007c9a <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007cce:	f1bc 0f00 	cmp.w	ip, #0
 8007cd2:	d02c      	beq.n	8007d2e <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007cd4:	6804      	ldr	r4, [r0, #0]
 8007cd6:	688b      	ldr	r3, [r1, #8]
 8007cd8:	6908      	ldr	r0, [r1, #16]
 8007cda:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007cdc:	ea46 030c 	orr.w	r3, r6, ip
 8007ce0:	694e      	ldr	r6, [r1, #20]
 8007ce2:	ea43 0502 	orr.w	r5, r3, r2
 8007ce6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8007cea:	04b6      	lsls	r6, r6, #18
 8007cec:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 8007cf0:	b1a7      	cbz	r7, 8007d1c <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007cf2:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007cf4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007cf8:	ea40 0008 	orr.w	r0, r0, r8
 8007cfc:	ea43 0300 	orr.w	r3, r3, r0
 8007d00:	68c8      	ldr	r0, [r1, #12]
 8007d02:	ea43 030c 	orr.w	r3, r3, ip
 8007d06:	ea43 0300 	orr.w	r3, r3, r0
 8007d0a:	ea43 0306 	orr.w	r3, r3, r6
 8007d0e:	ea43 0305 	orr.w	r3, r3, r5
 8007d12:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d14:	d0b5      	beq.n	8007c82 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007d16:	684b      	ldr	r3, [r1, #4]
 8007d18:	61a3      	str	r3, [r4, #24]
 8007d1a:	e7b2      	b.n	8007c82 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d1c:	ea40 0008 	orr.w	r0, r0, r8
 8007d20:	4303      	orrs	r3, r0
 8007d22:	ea43 030c 	orr.w	r3, r3, ip
 8007d26:	4333      	orrs	r3, r6
 8007d28:	432b      	orrs	r3, r5
 8007d2a:	6163      	str	r3, [r4, #20]
 8007d2c:	e7a9      	b.n	8007c82 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d2e:	b1d7      	cbz	r7, 8007d66 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d30:	ea46 0307 	orr.w	r3, r6, r7
 8007d34:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007d36:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d38:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d3c:	ea43 0302 	orr.w	r3, r3, r2
 8007d40:	ea43 0304 	orr.w	r3, r3, r4
 8007d44:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8007d46:	ea43 0304 	orr.w	r3, r3, r4
 8007d4a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007d4c:	ea43 0304 	orr.w	r3, r3, r4
 8007d50:	68cc      	ldr	r4, [r1, #12]
 8007d52:	ea43 0304 	orr.w	r3, r3, r4
 8007d56:	694c      	ldr	r4, [r1, #20]
 8007d58:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007d5c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d5e:	d090      	beq.n	8007c82 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007d60:	684b      	ldr	r3, [r1, #4]
 8007d62:	6183      	str	r3, [r0, #24]
 8007d64:	e78d      	b.n	8007c82 <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	d08b      	beq.n	8007c82 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007d6c:	6800      	ldr	r0, [r0, #0]
 8007d6e:	4333      	orrs	r3, r6
 8007d70:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8007d72:	431a      	orrs	r2, r3
 8007d74:	694b      	ldr	r3, [r1, #20]
 8007d76:	4332      	orrs	r2, r6
 8007d78:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8007d7a:	4332      	orrs	r2, r6
 8007d7c:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8007d80:	6142      	str	r2, [r0, #20]
}
 8007d82:	e77e      	b.n	8007c82 <QSPI_Config+0x76>

08007d84 <QSPI_WaitFlagStateUntilTimeout>:
{
 8007d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460e      	mov	r6, r1
 8007d90:	4615      	mov	r5, r2
 8007d92:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007d94:	6822      	ldr	r2, [r4, #0]
 8007d96:	6893      	ldr	r3, [r2, #8]
 8007d98:	4233      	tst	r3, r6
 8007d9a:	bf14      	ite	ne
 8007d9c:	2301      	movne	r3, #1
 8007d9e:	2300      	moveq	r3, #0
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	d101      	bne.n	8007da8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8007da4:	2000      	movs	r0, #0
 8007da6:	e012      	b.n	8007dce <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007da8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007dac:	d0f3      	beq.n	8007d96 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fd fef5 	bl	8005b9c <HAL_GetTick>
 8007db2:	1bc0      	subs	r0, r0, r7
 8007db4:	4540      	cmp	r0, r8
 8007db6:	d802      	bhi.n	8007dbe <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	d1ea      	bne.n	8007d94 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007dbe:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007dc0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007dc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007dc8:	f043 0301 	orr.w	r3, r3, #1
 8007dcc:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007dd4 <HAL_QSPI_Init>:
{
 8007dd4:	b530      	push	{r4, r5, lr}
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8007dda:	f7fd fedf 	bl	8005b9c <HAL_GetTick>
 8007dde:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8007de0:	2c00      	cmp	r4, #0
 8007de2:	d040      	beq.n	8007e66 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007de4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007de8:	b93a      	cbnz	r2, 8007dfa <HAL_QSPI_Init+0x26>
 8007dea:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7f9 f9f9 	bl	80011e4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8007df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	68a1      	ldr	r1, [r4, #8]
 8007dfe:	6802      	ldr	r2, [r0, #0]
 8007e00:	3901      	subs	r1, #1
 8007e02:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007e06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007e0a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007e0c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007e0e:	4620      	mov	r0, r4
 8007e10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007e12:	9200      	str	r2, [sp, #0]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f7ff ffb5 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007e1a:	bb10      	cbnz	r0, 8007e62 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	69e5      	ldr	r5, [r4, #28]
 8007e20:	68e3      	ldr	r3, [r4, #12]
 8007e22:	6811      	ldr	r1, [r2, #0]
 8007e24:	432b      	orrs	r3, r5
 8007e26:	6a25      	ldr	r5, [r4, #32]
 8007e28:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007e2c:	432b      	orrs	r3, r5
 8007e2e:	6865      	ldr	r5, [r4, #4]
 8007e30:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8007e34:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007e3c:	6855      	ldr	r5, [r2, #4]
 8007e3e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6921      	ldr	r1, [r4, #16]
 8007e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007e4a:	4908      	ldr	r1, [pc, #32]	; (8007e6c <HAL_QSPI_Init+0x98>)
 8007e4c:	4029      	ands	r1, r5
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007e5a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007e5c:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007e5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8007e62:	b005      	add	sp, #20
 8007e64:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007e66:	2001      	movs	r0, #1
 8007e68:	e7fb      	b.n	8007e62 <HAL_QSPI_Init+0x8e>
 8007e6a:	bf00      	nop
 8007e6c:	ffe0f8fe 	.word	0xffe0f8fe

08007e70 <HAL_QSPI_Command>:
{
 8007e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e74:	4604      	mov	r4, r0
 8007e76:	b085      	sub	sp, #20
 8007e78:	4617      	mov	r7, r2
 8007e7a:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8007e7c:	f7fd fe8e 	bl	8005b9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007e80:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007e84:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007e86:	2a01      	cmp	r2, #1
 8007e88:	d033      	beq.n	8007ef2 <HAL_QSPI_Command+0x82>
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2602      	movs	r6, #2
 8007e8e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007e92:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	fa5f f882 	uxtb.w	r8, r2
 8007e9c:	d127      	bne.n	8007eee <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007e9e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007ea0:	9003      	str	r0, [sp, #12]
 8007ea2:	2120      	movs	r1, #32
 8007ea4:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ea6:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007ea8:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007eaa:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007eae:	f7ff ff69 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b9a0      	cbnz	r0, 8007ee0 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff fea6 	bl	8007c0c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8007ec0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	b94a      	cbnz	r2, 8007edc <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007ec8:	4642      	mov	r2, r8
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4620      	mov	r0, r4
 8007ece:	9700      	str	r7, [sp, #0]
 8007ed0:	f7ff ff58 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b918      	cbnz	r0, 8007ee0 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007edc:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	b005      	add	sp, #20
 8007eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8007eee:	4635      	mov	r5, r6
 8007ef0:	e7f6      	b.n	8007ee0 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8007ef2:	2502      	movs	r5, #2
 8007ef4:	e7f7      	b.n	8007ee6 <HAL_QSPI_Command+0x76>

08007ef6 <HAL_QSPI_Transmit>:
{
 8007ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	b085      	sub	sp, #20
 8007efc:	4616      	mov	r6, r2
 8007efe:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007f00:	f7fd fe4c 	bl	8005b9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007f04:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007f08:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007f0a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8007f0c:	2a01      	cmp	r2, #1
 8007f0e:	d049      	beq.n	8007fa4 <HAL_QSPI_Transmit+0xae>
 8007f10:	2201      	movs	r2, #1
 8007f12:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007f16:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	b2d0      	uxtb	r0, r2
 8007f1e:	d13f      	bne.n	8007fa0 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f20:	2200      	movs	r2, #0
 8007f22:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007f24:	2f00      	cmp	r7, #0
 8007f26:	d036      	beq.n	8007f96 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007f28:	2212      	movs	r2, #18
 8007f2a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007f2e:	692a      	ldr	r2, [r5, #16]
 8007f30:	3201      	adds	r2, #1
 8007f32:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007f34:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8007f36:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007f38:	3201      	adds	r2, #1
 8007f3a:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007f3c:	696a      	ldr	r2, [r5, #20]
 8007f3e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007f42:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8007f44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f46:	b98a      	cbnz	r2, 8007f6c <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007f48:	2201      	movs	r2, #1
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	9600      	str	r6, [sp, #0]
 8007f50:	f7ff ff18 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007f54:	b910      	cbnz	r0, 8007f5c <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007f62:	2300      	movs	r3, #0
 8007f64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007f68:	b005      	add	sp, #20
 8007f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	2104      	movs	r1, #4
 8007f70:	4620      	mov	r0, r4
 8007f72:	9600      	str	r6, [sp, #0]
 8007f74:	9303      	str	r3, [sp, #12]
 8007f76:	f7ff ff05 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1ee      	bne.n	8007f5c <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007f7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8007f80:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8007f88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8007f8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f90:	3a01      	subs	r2, #1
 8007f92:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007f94:	e7d6      	b.n	8007f44 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8007f9e:	e7e0      	b.n	8007f62 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8007fa0:	2002      	movs	r0, #2
 8007fa2:	e7de      	b.n	8007f62 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8007fa4:	2002      	movs	r0, #2
 8007fa6:	e7df      	b.n	8007f68 <HAL_QSPI_Transmit+0x72>

08007fa8 <HAL_QSPI_Receive>:
{
 8007fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007faa:	4604      	mov	r4, r0
 8007fac:	b085      	sub	sp, #20
 8007fae:	4616      	mov	r6, r2
 8007fb0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007fb2:	f7fd fdf3 	bl	8005b9c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007fb6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8007fb8:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007fba:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8007fbe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007fc2:	2a01      	cmp	r2, #1
 8007fc4:	d04d      	beq.n	8008062 <HAL_QSPI_Receive+0xba>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007fcc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007fd0:	2a01      	cmp	r2, #1
 8007fd2:	b2d0      	uxtb	r0, r2
 8007fd4:	d143      	bne.n	800805e <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	d03a      	beq.n	8008054 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007fde:	2222      	movs	r2, #34	; 0x22
 8007fe0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fe4:	692a      	ldr	r2, [r5, #16]
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fea:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8007fec:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fee:	3201      	adds	r2, #1
 8007ff0:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ff2:	6969      	ldr	r1, [r5, #20]
 8007ff4:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8007ff8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8007ffc:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007ffe:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8008002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008004:	b98a      	cbnz	r2, 800802a <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008006:	2201      	movs	r2, #1
 8008008:	2102      	movs	r1, #2
 800800a:	4620      	mov	r0, r4
 800800c:	9600      	str	r6, [sp, #0]
 800800e:	f7ff feb9 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8008012:	b910      	cbnz	r0, 800801a <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	2202      	movs	r2, #2
 8008018:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800801a:	2301      	movs	r3, #1
 800801c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008020:	2300      	movs	r3, #0
 8008022:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008026:	b005      	add	sp, #20
 8008028:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800802a:	2201      	movs	r2, #1
 800802c:	2106      	movs	r1, #6
 800802e:	4620      	mov	r0, r4
 8008030:	9600      	str	r6, [sp, #0]
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	f7ff fea6 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8008038:	2800      	cmp	r0, #0
 800803a:	d1ee      	bne.n	800801a <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800803c:	f895 1020 	ldrb.w	r1, [r5, #32]
 8008040:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8008042:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008044:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8008046:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008048:	3201      	adds	r2, #1
 800804a:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800804c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800804e:	3a01      	subs	r2, #1
 8008050:	63a2      	str	r2, [r4, #56]	; 0x38
 8008052:	e7d6      	b.n	8008002 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008054:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008056:	f043 0308 	orr.w	r3, r3, #8
 800805a:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800805c:	e7e0      	b.n	8008020 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800805e:	2002      	movs	r0, #2
 8008060:	e7de      	b.n	8008020 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8008062:	2002      	movs	r0, #2
 8008064:	e7df      	b.n	8008026 <HAL_QSPI_Receive+0x7e>

08008066 <HAL_QSPI_AutoPolling>:
{
 8008066:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800806a:	4604      	mov	r4, r0
 800806c:	4615      	mov	r5, r2
 800806e:	461e      	mov	r6, r3
 8008070:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8008072:	f7fd fd93 	bl	8005b9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008076:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800807a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800807c:	2a01      	cmp	r2, #1
 800807e:	d040      	beq.n	8008102 <HAL_QSPI_AutoPolling+0x9c>
 8008080:	2201      	movs	r2, #1
 8008082:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008086:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800808a:	2a01      	cmp	r2, #1
 800808c:	b2d7      	uxtb	r7, r2
 800808e:	d136      	bne.n	80080fe <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008090:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008092:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008094:	9003      	str	r0, [sp, #12]
 8008096:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008098:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800809a:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800809c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80080a0:	2120      	movs	r1, #32
 80080a2:	f7ff fe6f 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80080a6:	bb20      	cbnz	r0, 80080f2 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80080a8:	6821      	ldr	r1, [r4, #0]
 80080aa:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80080ac:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80080ae:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80080b0:	686a      	ldr	r2, [r5, #4]
 80080b2:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80080b4:	68aa      	ldr	r2, [r5, #8]
 80080b6:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80080b8:	680a      	ldr	r2, [r1, #0]
 80080ba:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80080be:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80080c0:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80080c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80080c6:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80080c8:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80080ca:	68ea      	ldr	r2, [r5, #12]
 80080cc:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80080d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080d4:	f7ff fd9a 	bl	8007c0c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	463a      	mov	r2, r7
 80080dc:	2108      	movs	r1, #8
 80080de:	4620      	mov	r0, r4
 80080e0:	9600      	str	r6, [sp, #0]
 80080e2:	f7ff fe4f 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80080e6:	b920      	cbnz	r0, 80080f2 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80080ee:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80080f2:	2300      	movs	r3, #0
 80080f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 80080fe:	2002      	movs	r0, #2
 8008100:	e7f7      	b.n	80080f2 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8008102:	2002      	movs	r0, #2
 8008104:	e7f8      	b.n	80080f8 <HAL_QSPI_AutoPolling+0x92>

08008106 <HAL_QSPI_MemoryMapped>:
{
 8008106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008108:	4604      	mov	r4, r0
 800810a:	4616      	mov	r6, r2
 800810c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800810e:	f7fd fd45 	bl	8005b9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008112:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008116:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008118:	2a01      	cmp	r2, #1
 800811a:	d033      	beq.n	8008184 <HAL_QSPI_MemoryMapped+0x7e>
 800811c:	2201      	movs	r2, #1
 800811e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008122:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008126:	2a01      	cmp	r2, #1
 8008128:	d12a      	bne.n	8008180 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800812a:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800812c:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800812e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008130:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008132:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008136:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008138:	9100      	str	r1, [sp, #0]
 800813a:	2120      	movs	r1, #32
 800813c:	f7ff fe22 	bl	8007d84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008140:	4605      	mov	r5, r0
 8008142:	b9b8      	cbnz	r0, 8008174 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	6872      	ldr	r2, [r6, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800814a:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800814c:	f020 0008 	bic.w	r0, r0, #8
 8008150:	ea40 0002 	orr.w	r0, r0, r2
 8008154:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008156:	d107      	bne.n	8008168 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008158:	6832      	ldr	r2, [r6, #0]
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800815c:	2210      	movs	r2, #16
 800815e:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008166:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008168:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800816c:	4639      	mov	r1, r7
 800816e:	4620      	mov	r0, r4
 8008170:	f7ff fd4c 	bl	8007c0c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8008174:	2300      	movs	r3, #0
 8008176:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800817a:	4628      	mov	r0, r5
 800817c:	b003      	add	sp, #12
 800817e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8008180:	2502      	movs	r5, #2
 8008182:	e7f7      	b.n	8008174 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8008184:	2502      	movs	r5, #2
 8008186:	e7f8      	b.n	800817a <HAL_QSPI_MemoryMapped+0x74>

08008188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800818a:	4604      	mov	r4, r0
 800818c:	2800      	cmp	r0, #0
 800818e:	d074      	beq.n	800827a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008190:	6803      	ldr	r3, [r0, #0]
 8008192:	07d8      	lsls	r0, r3, #31
 8008194:	d45e      	bmi.n	8008254 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	0799      	lsls	r1, r3, #30
 800819a:	f100 80b0 	bmi.w	80082fe <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	06da      	lsls	r2, r3, #27
 80081a2:	d527      	bpl.n	80081f4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081a4:	4baa      	ldr	r3, [pc, #680]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 80081a6:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081aa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081ae:	2a08      	cmp	r2, #8
 80081b0:	d007      	beq.n	80081c2 <HAL_RCC_OscConfig+0x3a>
 80081b2:	2a18      	cmp	r2, #24
 80081b4:	f040 810e 	bne.w	80083d4 <HAL_RCC_OscConfig+0x24c>
 80081b8:	f001 0203 	and.w	r2, r1, #3
 80081bc:	2a01      	cmp	r2, #1
 80081be:	f040 8109 	bne.w	80083d4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	05db      	lsls	r3, r3, #23
 80081c6:	d502      	bpl.n	80081ce <HAL_RCC_OscConfig+0x46>
 80081c8:	69e3      	ldr	r3, [r4, #28]
 80081ca:	2b80      	cmp	r3, #128	; 0x80
 80081cc:	d155      	bne.n	800827a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081ce:	f7fd fcfd 	bl	8005bcc <HAL_GetREVID>
 80081d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80081d6:	6a21      	ldr	r1, [r4, #32]
 80081d8:	4298      	cmp	r0, r3
 80081da:	4b9d      	ldr	r3, [pc, #628]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 80081dc:	f200 80f3 	bhi.w	80083c6 <HAL_RCC_OscConfig+0x23e>
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	2920      	cmp	r1, #32
 80081e4:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80081e8:	bf0c      	ite	eq
 80081ea:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80081ee:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80081f2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	0719      	lsls	r1, r3, #28
 80081f8:	f100 812e 	bmi.w	8008458 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	069a      	lsls	r2, r3, #26
 8008200:	f100 814f 	bmi.w	80084a2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	075d      	lsls	r5, r3, #29
 8008208:	d51e      	bpl.n	8008248 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800820a:	4d92      	ldr	r5, [pc, #584]	; (8008454 <HAL_RCC_OscConfig+0x2cc>)
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008212:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008214:	f7fd fcc2 	bl	8005b9c <HAL_GetTick>
 8008218:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800821a:	682b      	ldr	r3, [r5, #0]
 800821c:	05da      	lsls	r2, r3, #23
 800821e:	f140 8165 	bpl.w	80084ec <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	4d8a      	ldr	r5, [pc, #552]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 8008226:	2b01      	cmp	r3, #1
 8008228:	f040 8167 	bne.w	80084fa <HAL_RCC_OscConfig+0x372>
 800822c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008234:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008238:	f7fd fcb0 	bl	8005b9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800823c:	4e84      	ldr	r6, [pc, #528]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800823e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008240:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008242:	079b      	lsls	r3, r3, #30
 8008244:	f140 817f 	bpl.w	8008546 <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008248:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800824a:	2900      	cmp	r1, #0
 800824c:	f040 8182 	bne.w	8008554 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008250:	2000      	movs	r0, #0
 8008252:	e02a      	b.n	80082aa <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008254:	4b7e      	ldr	r3, [pc, #504]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 8008256:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008258:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800825e:	2a10      	cmp	r2, #16
 8008260:	d005      	beq.n	800826e <HAL_RCC_OscConfig+0xe6>
 8008262:	2a18      	cmp	r2, #24
 8008264:	d10b      	bne.n	800827e <HAL_RCC_OscConfig+0xf6>
 8008266:	f001 0203 	and.w	r2, r1, #3
 800826a:	2a02      	cmp	r2, #2
 800826c:	d107      	bne.n	800827e <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	039a      	lsls	r2, r3, #14
 8008272:	d590      	bpl.n	8008196 <HAL_RCC_OscConfig+0xe>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d18d      	bne.n	8008196 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800827a:	2001      	movs	r0, #1
 800827c:	e015      	b.n	80082aa <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800827e:	6862      	ldr	r2, [r4, #4]
 8008280:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008284:	d112      	bne.n	80082ac <HAL_RCC_OscConfig+0x124>
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800828c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800828e:	f7fd fc85 	bl	8005b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008292:	4e6f      	ldr	r6, [pc, #444]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8008294:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008296:	6833      	ldr	r3, [r6, #0]
 8008298:	039b      	lsls	r3, r3, #14
 800829a:	f53f af7c 	bmi.w	8008196 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800829e:	f7fd fc7d 	bl	8005b9c <HAL_GetTick>
 80082a2:	1b40      	subs	r0, r0, r5
 80082a4:	2864      	cmp	r0, #100	; 0x64
 80082a6:	d9f6      	bls.n	8008296 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80082a8:	2003      	movs	r0, #3
}
 80082aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082ac:	4d68      	ldr	r5, [pc, #416]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b99a      	cbnz	r2, 80082da <HAL_RCC_OscConfig+0x152>
 80082b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082c0:	f7fd fc6c 	bl	8005b9c <HAL_GetTick>
 80082c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082c6:	682b      	ldr	r3, [r5, #0]
 80082c8:	039f      	lsls	r7, r3, #14
 80082ca:	f57f af64 	bpl.w	8008196 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082ce:	f7fd fc65 	bl	8005b9c <HAL_GetTick>
 80082d2:	1b80      	subs	r0, r0, r6
 80082d4:	2864      	cmp	r0, #100	; 0x64
 80082d6:	d9f6      	bls.n	80082c6 <HAL_RCC_OscConfig+0x13e>
 80082d8:	e7e6      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082da:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80082de:	d107      	bne.n	80082f0 <HAL_RCC_OscConfig+0x168>
 80082e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	e7ce      	b.n	800828e <HAL_RCC_OscConfig+0x106>
 80082f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082fc:	e7f6      	b.n	80082ec <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082fe:	4b54      	ldr	r3, [pc, #336]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 8008300:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008302:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008304:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008308:	d003      	beq.n	8008312 <HAL_RCC_OscConfig+0x18a>
 800830a:	2a18      	cmp	r2, #24
 800830c:	d11f      	bne.n	800834e <HAL_RCC_OscConfig+0x1c6>
 800830e:	078e      	lsls	r6, r1, #30
 8008310:	d11d      	bne.n	800834e <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	075d      	lsls	r5, r3, #29
 8008316:	d502      	bpl.n	800831e <HAL_RCC_OscConfig+0x196>
 8008318:	68e3      	ldr	r3, [r4, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0ad      	beq.n	800827a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800831e:	f7fd fc55 	bl	8005bcc <HAL_GetREVID>
 8008322:	f241 0303 	movw	r3, #4099	; 0x1003
 8008326:	6921      	ldr	r1, [r4, #16]
 8008328:	4298      	cmp	r0, r3
 800832a:	4b49      	ldr	r3, [pc, #292]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	d809      	bhi.n	8008344 <HAL_RCC_OscConfig+0x1bc>
 8008330:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8008334:	2940      	cmp	r1, #64	; 0x40
 8008336:	bf0c      	ite	eq
 8008338:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800833c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	e72c      	b.n	800819e <HAL_RCC_OscConfig+0x16>
 8008344:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8008348:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800834c:	e7f8      	b.n	8008340 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800834e:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008350:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008352:	b339      	cbz	r1, 80083a4 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008354:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008358:	4d3d      	ldr	r5, [pc, #244]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800835a:	430a      	orrs	r2, r1
 800835c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800835e:	f7fd fc1d 	bl	8005b9c <HAL_GetTick>
 8008362:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	0758      	lsls	r0, r3, #29
 8008368:	d511      	bpl.n	800838e <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800836a:	f7fd fc2f 	bl	8005bcc <HAL_GetREVID>
 800836e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008372:	6922      	ldr	r2, [r4, #16]
 8008374:	4298      	cmp	r0, r3
 8008376:	686b      	ldr	r3, [r5, #4]
 8008378:	d80f      	bhi.n	800839a <HAL_RCC_OscConfig+0x212>
 800837a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800837e:	2a40      	cmp	r2, #64	; 0x40
 8008380:	bf0c      	ite	eq
 8008382:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008386:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800838a:	606b      	str	r3, [r5, #4]
 800838c:	e707      	b.n	800819e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800838e:	f7fd fc05 	bl	8005b9c <HAL_GetTick>
 8008392:	1b80      	subs	r0, r0, r6
 8008394:	2802      	cmp	r0, #2
 8008396:	d9e5      	bls.n	8008364 <HAL_RCC_OscConfig+0x1dc>
 8008398:	e786      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800839a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800839e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80083a2:	e7f2      	b.n	800838a <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 80083a4:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083a8:	4e29      	ldr	r6, [pc, #164]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80083aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083ac:	f7fd fbf6 	bl	8005b9c <HAL_GetTick>
 80083b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083b2:	6833      	ldr	r3, [r6, #0]
 80083b4:	0759      	lsls	r1, r3, #29
 80083b6:	f57f aef2 	bpl.w	800819e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083ba:	f7fd fbef 	bl	8005b9c <HAL_GetTick>
 80083be:	1b40      	subs	r0, r0, r5
 80083c0:	2802      	cmp	r0, #2
 80083c2:	d9f6      	bls.n	80083b2 <HAL_RCC_OscConfig+0x22a>
 80083c4:	e770      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80083cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	e70f      	b.n	80081f4 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80083d4:	69e2      	ldr	r2, [r4, #28]
 80083d6:	b34a      	cbz	r2, 800842c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 80083d8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083da:	4d1d      	ldr	r5, [pc, #116]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 80083dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083e2:	f7fd fbdb 	bl	8005b9c <HAL_GetTick>
 80083e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	05df      	lsls	r7, r3, #23
 80083ec:	d511      	bpl.n	8008412 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ee:	f7fd fbed 	bl	8005bcc <HAL_GetREVID>
 80083f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80083f6:	6a22      	ldr	r2, [r4, #32]
 80083f8:	4298      	cmp	r0, r3
 80083fa:	d810      	bhi.n	800841e <HAL_RCC_OscConfig+0x296>
 80083fc:	686b      	ldr	r3, [r5, #4]
 80083fe:	2a20      	cmp	r2, #32
 8008400:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008404:	bf0c      	ite	eq
 8008406:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800840a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800840e:	606b      	str	r3, [r5, #4]
 8008410:	e6f0      	b.n	80081f4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008412:	f7fd fbc3 	bl	8005b9c <HAL_GetTick>
 8008416:	1b80      	subs	r0, r0, r6
 8008418:	2802      	cmp	r0, #2
 800841a:	d9e5      	bls.n	80083e8 <HAL_RCC_OscConfig+0x260>
 800841c:	e744      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800841e:	68eb      	ldr	r3, [r5, #12]
 8008420:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008424:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008428:	60eb      	str	r3, [r5, #12]
 800842a:	e6e3      	b.n	80081f4 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 800842c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800842e:	4e08      	ldr	r6, [pc, #32]	; (8008450 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 8008430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008434:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008436:	f7fd fbb1 	bl	8005b9c <HAL_GetTick>
 800843a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	05d8      	lsls	r0, r3, #23
 8008440:	f57f aed8 	bpl.w	80081f4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008444:	f7fd fbaa 	bl	8005b9c <HAL_GetTick>
 8008448:	1b40      	subs	r0, r0, r5
 800844a:	2802      	cmp	r0, #2
 800844c:	d9f6      	bls.n	800843c <HAL_RCC_OscConfig+0x2b4>
 800844e:	e72b      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
 8008450:	58024400 	.word	0x58024400
 8008454:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008458:	6963      	ldr	r3, [r4, #20]
 800845a:	4d96      	ldr	r5, [pc, #600]	; (80086b4 <HAL_RCC_OscConfig+0x52c>)
 800845c:	b183      	cbz	r3, 8008480 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 800845e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008460:	f043 0301 	orr.w	r3, r3, #1
 8008464:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008466:	f7fd fb99 	bl	8005b9c <HAL_GetTick>
 800846a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800846c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800846e:	079b      	lsls	r3, r3, #30
 8008470:	f53f aec4 	bmi.w	80081fc <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008474:	f7fd fb92 	bl	8005b9c <HAL_GetTick>
 8008478:	1b80      	subs	r0, r0, r6
 800847a:	2802      	cmp	r0, #2
 800847c:	d9f6      	bls.n	800846c <HAL_RCC_OscConfig+0x2e4>
 800847e:	e713      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8008480:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008488:	f7fd fb88 	bl	8005b9c <HAL_GetTick>
 800848c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800848e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008490:	079f      	lsls	r7, r3, #30
 8008492:	f57f aeb3 	bpl.w	80081fc <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008496:	f7fd fb81 	bl	8005b9c <HAL_GetTick>
 800849a:	1b80      	subs	r0, r0, r6
 800849c:	2802      	cmp	r0, #2
 800849e:	d9f6      	bls.n	800848e <HAL_RCC_OscConfig+0x306>
 80084a0:	e702      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80084a2:	69a3      	ldr	r3, [r4, #24]
 80084a4:	4d83      	ldr	r5, [pc, #524]	; (80086b4 <HAL_RCC_OscConfig+0x52c>)
 80084a6:	b183      	cbz	r3, 80084ca <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80084b0:	f7fd fb74 	bl	8005b9c <HAL_GetTick>
 80084b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	0498      	lsls	r0, r3, #18
 80084ba:	f53f aea3 	bmi.w	8008204 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084be:	f7fd fb6d 	bl	8005b9c <HAL_GetTick>
 80084c2:	1b80      	subs	r0, r0, r6
 80084c4:	2802      	cmp	r0, #2
 80084c6:	d9f6      	bls.n	80084b6 <HAL_RCC_OscConfig+0x32e>
 80084c8:	e6ee      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084d0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80084d2:	f7fd fb63 	bl	8005b9c <HAL_GetTick>
 80084d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	0499      	lsls	r1, r3, #18
 80084dc:	f57f ae92 	bpl.w	8008204 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084e0:	f7fd fb5c 	bl	8005b9c <HAL_GetTick>
 80084e4:	1b80      	subs	r0, r0, r6
 80084e6:	2802      	cmp	r0, #2
 80084e8:	d9f6      	bls.n	80084d8 <HAL_RCC_OscConfig+0x350>
 80084ea:	e6dd      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084ec:	f7fd fb56 	bl	8005b9c <HAL_GetTick>
 80084f0:	1b80      	subs	r0, r0, r6
 80084f2:	2864      	cmp	r0, #100	; 0x64
 80084f4:	f67f ae91 	bls.w	800821a <HAL_RCC_OscConfig+0x92>
 80084f8:	e6d6      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084fa:	b9b3      	cbnz	r3, 800852a <HAL_RCC_OscConfig+0x3a2>
 80084fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084fe:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	672b      	str	r3, [r5, #112]	; 0x70
 8008508:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800850a:	f023 0304 	bic.w	r3, r3, #4
 800850e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008510:	f7fd fb44 	bl	8005b9c <HAL_GetTick>
 8008514:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008516:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008518:	0798      	lsls	r0, r3, #30
 800851a:	f57f ae95 	bpl.w	8008248 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800851e:	f7fd fb3d 	bl	8005b9c <HAL_GetTick>
 8008522:	1b80      	subs	r0, r0, r6
 8008524:	42b8      	cmp	r0, r7
 8008526:	d9f6      	bls.n	8008516 <HAL_RCC_OscConfig+0x38e>
 8008528:	e6be      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800852a:	2b05      	cmp	r3, #5
 800852c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800852e:	d103      	bne.n	8008538 <HAL_RCC_OscConfig+0x3b0>
 8008530:	f043 0304 	orr.w	r3, r3, #4
 8008534:	672b      	str	r3, [r5, #112]	; 0x70
 8008536:	e679      	b.n	800822c <HAL_RCC_OscConfig+0xa4>
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	672b      	str	r3, [r5, #112]	; 0x70
 800853e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008540:	f023 0304 	bic.w	r3, r3, #4
 8008544:	e675      	b.n	8008232 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008546:	f7fd fb29 	bl	8005b9c <HAL_GetTick>
 800854a:	1b40      	subs	r0, r0, r5
 800854c:	42b8      	cmp	r0, r7
 800854e:	f67f ae77 	bls.w	8008240 <HAL_RCC_OscConfig+0xb8>
 8008552:	e6a9      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008554:	4d57      	ldr	r5, [pc, #348]	; (80086b4 <HAL_RCC_OscConfig+0x52c>)
 8008556:	692b      	ldr	r3, [r5, #16]
 8008558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800855c:	2b18      	cmp	r3, #24
 800855e:	d07a      	beq.n	8008656 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8008560:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008562:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8008564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008568:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800856a:	d167      	bne.n	800863c <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 800856c:	f7fd fb16 	bl	8005b9c <HAL_GetTick>
 8008570:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	0199      	lsls	r1, r3, #6
 8008576:	d45b      	bmi.n	8008630 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008578:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800857a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800857c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	4313      	orrs	r3, r2
 8008586:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008588:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800858c:	62ab      	str	r3, [r5, #40]	; 0x28
 800858e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008590:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008592:	3b01      	subs	r3, #1
 8008594:	3a01      	subs	r2, #1
 8008596:	025b      	lsls	r3, r3, #9
 8008598:	0412      	lsls	r2, r2, #16
 800859a:	b29b      	uxth	r3, r3
 800859c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80085a0:	4313      	orrs	r3, r2
 80085a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80085a4:	3a01      	subs	r2, #1
 80085a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085aa:	4313      	orrs	r3, r2
 80085ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80085ae:	3a01      	subs	r2, #1
 80085b0:	0612      	lsls	r2, r2, #24
 80085b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80085b6:	4313      	orrs	r3, r2
 80085b8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80085ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80085c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80085c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80085ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80085d2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085d8:	f023 030c 	bic.w	r3, r3, #12
 80085dc:	4313      	orrs	r3, r2
 80085de:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80085e4:	f023 0302 	bic.w	r3, r3, #2
 80085e8:	4313      	orrs	r3, r2
 80085ea:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085fa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80085fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80085fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008602:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008604:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008612:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008614:	f7fd fac2 	bl	8005b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008618:	4d26      	ldr	r5, [pc, #152]	; (80086b4 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 800861a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	019a      	lsls	r2, r3, #6
 8008620:	f53f ae16 	bmi.w	8008250 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008624:	f7fd faba 	bl	8005b9c <HAL_GetTick>
 8008628:	1b00      	subs	r0, r0, r4
 800862a:	2802      	cmp	r0, #2
 800862c:	d9f6      	bls.n	800861c <HAL_RCC_OscConfig+0x494>
 800862e:	e63b      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008630:	f7fd fab4 	bl	8005b9c <HAL_GetTick>
 8008634:	1b80      	subs	r0, r0, r6
 8008636:	2802      	cmp	r0, #2
 8008638:	d99b      	bls.n	8008572 <HAL_RCC_OscConfig+0x3ea>
 800863a:	e635      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800863c:	f7fd faae 	bl	8005b9c <HAL_GetTick>
 8008640:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	019b      	lsls	r3, r3, #6
 8008646:	f57f ae03 	bpl.w	8008250 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800864a:	f7fd faa7 	bl	8005b9c <HAL_GetTick>
 800864e:	1b00      	subs	r0, r0, r4
 8008650:	2802      	cmp	r0, #2
 8008652:	d9f6      	bls.n	8008642 <HAL_RCC_OscConfig+0x4ba>
 8008654:	e628      	b.n	80082a8 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008656:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008658:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800865a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800865c:	f43f ae0d 	beq.w	800827a <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008660:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008664:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008666:	4281      	cmp	r1, r0
 8008668:	f47f ae07 	bne.w	800827a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800866c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008670:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008672:	428a      	cmp	r2, r1
 8008674:	f47f ae01 	bne.w	800827a <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008678:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800867a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800867e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008680:	4291      	cmp	r1, r2
 8008682:	f47f adfa 	bne.w	800827a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008686:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008688:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800868c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800868e:	4291      	cmp	r1, r2
 8008690:	f47f adf3 	bne.w	800827a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008694:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008696:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800869a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800869c:	4291      	cmp	r1, r2
 800869e:	f47f adec 	bne.w	800827a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80086a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80086a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80086a8:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086aa:	4293      	cmp	r3, r2
 80086ac:	f43f add0 	beq.w	8008250 <HAL_RCC_OscConfig+0xc8>
 80086b0:	e5e3      	b.n	800827a <HAL_RCC_OscConfig+0xf2>
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400

080086b8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4c23      	ldr	r4, [pc, #140]	; (8008748 <HAL_RCC_MCOConfig+0x90>)
 80086bc:	b088      	sub	sp, #32
 80086be:	460e      	mov	r6, r1
 80086c0:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80086c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 80086c6:	b9f8      	cbnz	r0, 8008708 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80086c8:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086cc:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80086d0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 80086d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80086d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80086da:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ea:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80086f0:	4816      	ldr	r0, [pc, #88]	; (800874c <HAL_RCC_MCOConfig+0x94>)
 80086f2:	f7fe fae5 	bl	8006cc0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80086fc:	ea43 0106 	orr.w	r1, r3, r6
 8008700:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008702:	6121      	str	r1, [r4, #16]
  }
}
 8008704:	b008      	add	sp, #32
 8008706:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8008708:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870c:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008712:	480f      	ldr	r0, [pc, #60]	; (8008750 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8008714:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008718:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008724:	2302      	movs	r3, #2
 8008726:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008730:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008732:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008734:	f7fe fac4 	bl	8006cc0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800873e:	ea43 0106 	orr.w	r1, r3, r6
 8008742:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8008746:	e7dc      	b.n	8008702 <HAL_RCC_MCOConfig+0x4a>
 8008748:	58024400 	.word	0x58024400
 800874c:	58020000 	.word	0x58020000
 8008750:	58020800 	.word	0x58020800

08008754 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008754:	4b48      	ldr	r3, [pc, #288]	; (8008878 <HAL_RCC_GetSysClockFreq+0x124>)
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800875c:	2a10      	cmp	r2, #16
{
 800875e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008760:	f000 8086 	beq.w	8008870 <HAL_RCC_GetSysClockFreq+0x11c>
 8008764:	2a18      	cmp	r2, #24
 8008766:	d00c      	beq.n	8008782 <HAL_RCC_GetSysClockFreq+0x2e>
 8008768:	2a00      	cmp	r2, #0
 800876a:	f040 8083 	bne.w	8008874 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4842      	ldr	r0, [pc, #264]	; (800887c <HAL_RCC_GetSysClockFreq+0x128>)
 8008772:	f012 0f20 	tst.w	r2, #32
 8008776:	d003      	beq.n	8008780 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800877e:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008780:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008782:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008784:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8008788:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800878c:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008790:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8008792:	d0f5      	beq.n	8008780 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008794:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008798:	f002 0201 	and.w	r2, r2, #1
 800879c:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a0:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087a4:	4362      	muls	r2, r4
 80087a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087ae:	2901      	cmp	r1, #1
 80087b0:	ee07 2a90 	vmov	s15, r2
 80087b4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80087b8:	d04c      	beq.n	8008854 <HAL_RCC_GetSysClockFreq+0x100>
 80087ba:	2902      	cmp	r1, #2
 80087bc:	d03c      	beq.n	8008838 <HAL_RCC_GetSysClockFreq+0xe4>
 80087be:	2900      	cmp	r1, #0
 80087c0:	d148      	bne.n	8008854 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	0692      	lsls	r2, r2, #26
 80087c6:	d527      	bpl.n	8008818 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <HAL_RCC_GetSysClockFreq+0x128>)
 80087cc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087d2:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d8:	ee07 2a10 	vmov	s14, r2
 80087dc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80087e0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80087e4:	ee06 3a90 	vmov	s13, r3
 80087e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80087ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087f4:	4b20      	ldr	r3, [pc, #128]	; (8008878 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f6:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008800:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008802:	ee07 3a10 	vmov	s14, r3
 8008806:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800880a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800880e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008812:	ee17 0a90 	vmov	r0, s15
 8008816:	e7b3      	b.n	8008780 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881e:	ee07 3a10 	vmov	s14, r3
 8008822:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800882a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800882e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008880 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008832:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008836:	e7dd      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883e:	ee07 3a10 	vmov	s14, r3
 8008842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800884a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800884e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8008884 <HAL_RCC_GetSysClockFreq+0x130>
 8008852:	e7ee      	b.n	8008832 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885a:	ee07 3a10 	vmov	s14, r3
 800885e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008866:	ee77 7a86 	vadd.f32	s15, s15, s12
 800886a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008888 <HAL_RCC_GetSysClockFreq+0x134>
 800886e:	e7e0      	b.n	8008832 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008870:	4806      	ldr	r0, [pc, #24]	; (800888c <HAL_RCC_GetSysClockFreq+0x138>)
 8008872:	e785      	b.n	8008780 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8008874:	4806      	ldr	r0, [pc, #24]	; (8008890 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008876:	e783      	b.n	8008780 <HAL_RCC_GetSysClockFreq+0x2c>
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	4c742400 	.word	0x4c742400
 8008884:	4bbebc20 	.word	0x4bbebc20
 8008888:	4a742400 	.word	0x4a742400
 800888c:	017d7840 	.word	0x017d7840
 8008890:	003d0900 	.word	0x003d0900

08008894 <HAL_RCC_ClockConfig>:
{
 8008894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008898:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800889a:	4604      	mov	r4, r0
 800889c:	b910      	cbnz	r0, 80088a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800889e:	2001      	movs	r0, #1
}
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a4:	4a88      	ldr	r2, [pc, #544]	; (8008ac8 <HAL_RCC_ClockConfig+0x234>)
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	428b      	cmp	r3, r1
 80088ae:	f0c0 8093 	bcc.w	80089d8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	075f      	lsls	r7, r3, #29
 80088b6:	f100 809b 	bmi.w	80089f0 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ba:	071e      	lsls	r6, r3, #28
 80088bc:	d50b      	bpl.n	80088d6 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088be:	4983      	ldr	r1, [pc, #524]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 80088c0:	6966      	ldr	r6, [r4, #20]
 80088c2:	69c8      	ldr	r0, [r1, #28]
 80088c4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80088c8:	4286      	cmp	r6, r0
 80088ca:	d904      	bls.n	80088d6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088cc:	69ca      	ldr	r2, [r1, #28]
 80088ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80088d2:	4332      	orrs	r2, r6
 80088d4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d6:	06d8      	lsls	r0, r3, #27
 80088d8:	d50b      	bpl.n	80088f2 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088da:	497c      	ldr	r1, [pc, #496]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 80088dc:	69a6      	ldr	r6, [r4, #24]
 80088de:	69c8      	ldr	r0, [r1, #28]
 80088e0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80088e4:	4286      	cmp	r6, r0
 80088e6:	d904      	bls.n	80088f2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088e8:	69ca      	ldr	r2, [r1, #28]
 80088ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088ee:	4332      	orrs	r2, r6
 80088f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088f2:	0699      	lsls	r1, r3, #26
 80088f4:	d50b      	bpl.n	800890e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088f6:	4975      	ldr	r1, [pc, #468]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 80088f8:	69e6      	ldr	r6, [r4, #28]
 80088fa:	6a08      	ldr	r0, [r1, #32]
 80088fc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008900:	4286      	cmp	r6, r0
 8008902:	d904      	bls.n	800890e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008904:	6a0a      	ldr	r2, [r1, #32]
 8008906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800890a:	4332      	orrs	r2, r6
 800890c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890e:	079a      	lsls	r2, r3, #30
 8008910:	d50b      	bpl.n	800892a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008912:	496e      	ldr	r1, [pc, #440]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008914:	68e6      	ldr	r6, [r4, #12]
 8008916:	6988      	ldr	r0, [r1, #24]
 8008918:	f000 000f 	and.w	r0, r0, #15
 800891c:	4286      	cmp	r6, r0
 800891e:	d904      	bls.n	800892a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008920:	698a      	ldr	r2, [r1, #24]
 8008922:	f022 020f 	bic.w	r2, r2, #15
 8008926:	4332      	orrs	r2, r6
 8008928:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800892a:	07df      	lsls	r7, r3, #31
 800892c:	d46e      	bmi.n	8008a0c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	079e      	lsls	r6, r3, #30
 8008932:	f100 80a1 	bmi.w	8008a78 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008936:	4964      	ldr	r1, [pc, #400]	; (8008ac8 <HAL_RCC_ClockConfig+0x234>)
 8008938:	680a      	ldr	r2, [r1, #0]
 800893a:	f002 020f 	and.w	r2, r2, #15
 800893e:	42aa      	cmp	r2, r5
 8008940:	f200 80a8 	bhi.w	8008a94 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008944:	0758      	lsls	r0, r3, #29
 8008946:	f100 80b1 	bmi.w	8008aac <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800894a:	0719      	lsls	r1, r3, #28
 800894c:	d50b      	bpl.n	8008966 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800894e:	495f      	ldr	r1, [pc, #380]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008950:	6965      	ldr	r5, [r4, #20]
 8008952:	69c8      	ldr	r0, [r1, #28]
 8008954:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008958:	4285      	cmp	r5, r0
 800895a:	d204      	bcs.n	8008966 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800895c:	69ca      	ldr	r2, [r1, #28]
 800895e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008962:	432a      	orrs	r2, r5
 8008964:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008966:	06da      	lsls	r2, r3, #27
 8008968:	d50b      	bpl.n	8008982 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800896a:	4958      	ldr	r1, [pc, #352]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 800896c:	69a5      	ldr	r5, [r4, #24]
 800896e:	69c8      	ldr	r0, [r1, #28]
 8008970:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008974:	4285      	cmp	r5, r0
 8008976:	d204      	bcs.n	8008982 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008978:	69ca      	ldr	r2, [r1, #28]
 800897a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800897e:	432a      	orrs	r2, r5
 8008980:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008982:	069b      	lsls	r3, r3, #26
 8008984:	d50b      	bpl.n	800899e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008986:	4a51      	ldr	r2, [pc, #324]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008988:	69e0      	ldr	r0, [r4, #28]
 800898a:	6a11      	ldr	r1, [r2, #32]
 800898c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008990:	4288      	cmp	r0, r1
 8008992:	d204      	bcs.n	800899e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008994:	6a13      	ldr	r3, [r2, #32]
 8008996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899a:	4303      	orrs	r3, r0
 800899c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800899e:	f7ff fed9 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 80089a2:	494a      	ldr	r1, [pc, #296]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 80089a4:	4a4a      	ldr	r2, [pc, #296]	; (8008ad0 <HAL_RCC_ClockConfig+0x23c>)
 80089a6:	698b      	ldr	r3, [r1, #24]
 80089a8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80089ac:	5cd3      	ldrb	r3, [r2, r3]
 80089ae:	f003 031f 	and.w	r3, r3, #31
 80089b2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089b4:	698b      	ldr	r3, [r1, #24]
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	5cd3      	ldrb	r3, [r2, r3]
 80089bc:	4a45      	ldr	r2, [pc, #276]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	fa20 f303 	lsr.w	r3, r0, r3
 80089c6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80089c8:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089ca:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80089cc:	4b43      	ldr	r3, [pc, #268]	; (8008adc <HAL_RCC_ClockConfig+0x248>)
}
 80089ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	f7f8 bdee 	b.w	80015b4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d8:	6813      	ldr	r3, [r2, #0]
 80089da:	f023 030f 	bic.w	r3, r3, #15
 80089de:	430b      	orrs	r3, r1
 80089e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	428b      	cmp	r3, r1
 80089ea:	f47f af58 	bne.w	800889e <HAL_RCC_ClockConfig+0xa>
 80089ee:	e760      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089f0:	4936      	ldr	r1, [pc, #216]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 80089f2:	6926      	ldr	r6, [r4, #16]
 80089f4:	6988      	ldr	r0, [r1, #24]
 80089f6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80089fa:	4286      	cmp	r6, r0
 80089fc:	f67f af5d 	bls.w	80088ba <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a00:	698a      	ldr	r2, [r1, #24]
 8008a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a06:	4332      	orrs	r2, r6
 8008a08:	618a      	str	r2, [r1, #24]
 8008a0a:	e756      	b.n	80088ba <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a0c:	4b2f      	ldr	r3, [pc, #188]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008a0e:	68a1      	ldr	r1, [r4, #8]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008a16:	430a      	orrs	r2, r1
 8008a18:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a1a:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a1c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a1e:	2a02      	cmp	r2, #2
 8008a20:	d11d      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a26:	f43f af3a 	beq.w	800889e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a2a:	4e28      	ldr	r6, [pc, #160]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a2c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a30:	6933      	ldr	r3, [r6, #16]
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	4313      	orrs	r3, r2
 8008a38:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008a3a:	f7fd f8af 	bl	8005b9c <HAL_GetTick>
 8008a3e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a40:	6933      	ldr	r3, [r6, #16]
 8008a42:	6862      	ldr	r2, [r4, #4]
 8008a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a48:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008a4c:	f43f af6f 	beq.w	800892e <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a50:	f7fd f8a4 	bl	8005b9c <HAL_GetTick>
 8008a54:	1bc0      	subs	r0, r0, r7
 8008a56:	4540      	cmp	r0, r8
 8008a58:	d9f2      	bls.n	8008a40 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008a5a:	2003      	movs	r0, #3
 8008a5c:	e720      	b.n	80088a0 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a5e:	2a03      	cmp	r2, #3
 8008a60:	d102      	bne.n	8008a68 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008a66:	e7de      	b.n	8008a26 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a68:	2a01      	cmp	r2, #1
 8008a6a:	d102      	bne.n	8008a72 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a70:	e7d9      	b.n	8008a26 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a72:	f013 0f04 	tst.w	r3, #4
 8008a76:	e7d6      	b.n	8008a26 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a78:	4914      	ldr	r1, [pc, #80]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008a7a:	68e6      	ldr	r6, [r4, #12]
 8008a7c:	6988      	ldr	r0, [r1, #24]
 8008a7e:	f000 000f 	and.w	r0, r0, #15
 8008a82:	4286      	cmp	r6, r0
 8008a84:	f4bf af57 	bcs.w	8008936 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a88:	698a      	ldr	r2, [r1, #24]
 8008a8a:	f022 020f 	bic.w	r2, r2, #15
 8008a8e:	4332      	orrs	r2, r6
 8008a90:	618a      	str	r2, [r1, #24]
 8008a92:	e750      	b.n	8008936 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a94:	680a      	ldr	r2, [r1, #0]
 8008a96:	f022 020f 	bic.w	r2, r2, #15
 8008a9a:	432a      	orrs	r2, r5
 8008a9c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	680a      	ldr	r2, [r1, #0]
 8008aa0:	f002 020f 	and.w	r2, r2, #15
 8008aa4:	42aa      	cmp	r2, r5
 8008aa6:	f47f aefa 	bne.w	800889e <HAL_RCC_ClockConfig+0xa>
 8008aaa:	e74b      	b.n	8008944 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008aac:	4907      	ldr	r1, [pc, #28]	; (8008acc <HAL_RCC_ClockConfig+0x238>)
 8008aae:	6925      	ldr	r5, [r4, #16]
 8008ab0:	6988      	ldr	r0, [r1, #24]
 8008ab2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008ab6:	4285      	cmp	r5, r0
 8008ab8:	f4bf af47 	bcs.w	800894a <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008abc:	698a      	ldr	r2, [r1, #24]
 8008abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ac2:	432a      	orrs	r2, r5
 8008ac4:	618a      	str	r2, [r1, #24]
 8008ac6:	e740      	b.n	800894a <HAL_RCC_ClockConfig+0xb6>
 8008ac8:	52002000 	.word	0x52002000
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	08021d78 	.word	0x08021d78
 8008ad4:	24000064 	.word	0x24000064
 8008ad8:	24000060 	.word	0x24000060
 8008adc:	2400006c 	.word	0x2400006c

08008ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ae0:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ae2:	4c0c      	ldr	r4, [pc, #48]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x34>)
 8008ae4:	f7ff fe36 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 8008ae8:	490b      	ldr	r1, [pc, #44]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x38>)
 8008aea:	69a3      	ldr	r3, [r4, #24]
 8008aec:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008af0:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008af2:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008af4:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008af8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008afc:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b00:	5ccb      	ldrb	r3, [r1, r3]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	fa22 f003 	lsr.w	r0, r2, r3
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x3c>)
 8008b0c:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b0e:	4b04      	ldr	r3, [pc, #16]	; (8008b20 <HAL_RCC_GetHCLKFreq+0x40>)
 8008b10:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	58024400 	.word	0x58024400
 8008b18:	08021d78 	.word	0x08021d78
 8008b1c:	24000064 	.word	0x24000064
 8008b20:	24000060 	.word	0x24000060

08008b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b24:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b26:	f7ff ffdb 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008b2c:	4a05      	ldr	r2, [pc, #20]	; (8008b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008b34:	5cd3      	ldrb	r3, [r2, r3]
 8008b36:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b3a:	40d8      	lsrs	r0, r3
 8008b3c:	bd08      	pop	{r3, pc}
 8008b3e:	bf00      	nop
 8008b40:	58024400 	.word	0x58024400
 8008b44:	08021d78 	.word	0x08021d78

08008b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b48:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b4a:	f7ff ffc9 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008b50:	4a05      	ldr	r2, [pc, #20]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008b58:	5cd3      	ldrb	r3, [r2, r3]
 8008b5a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b5e:	40d8      	lsrs	r0, r3
 8008b60:	bd08      	pop	{r3, pc}
 8008b62:	bf00      	nop
 8008b64:	58024400 	.word	0x58024400
 8008b68:	08021d78 	.word	0x08021d78

08008b6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008b6c:	233f      	movs	r3, #63	; 0x3f
 8008b6e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b70:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <HAL_RCC_GetClockConfig+0x4c>)
 8008b72:	691a      	ldr	r2, [r3, #16]
 8008b74:	f002 0207 	and.w	r2, r2, #7
 8008b78:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008b7a:	699a      	ldr	r2, [r3, #24]
 8008b7c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008b80:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008b82:	699a      	ldr	r2, [r3, #24]
 8008b84:	f002 020f 	and.w	r2, r2, #15
 8008b88:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008b8a:	699a      	ldr	r2, [r3, #24]
 8008b8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b90:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b98:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008ba0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ba8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008baa:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <HAL_RCC_GetClockConfig+0x50>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	600b      	str	r3, [r1, #0]
}
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	52002000 	.word	0x52002000

08008bc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bc2:	4c3a      	ldr	r4, [pc, #232]	; (8008cac <RCCEx_PLL2_Config+0xec>)
{
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d069      	beq.n	8008ca6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bd8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bda:	f7fc ffdf 	bl	8005b9c <HAL_GetTick>
 8008bde:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	011a      	lsls	r2, r3, #4
 8008be4:	d44b      	bmi.n	8008c7e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008be8:	6832      	ldr	r2, [r6, #0]
 8008bea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008bee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008bf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bf4:	68b3      	ldr	r3, [r6, #8]
 8008bf6:	68f2      	ldr	r2, [r6, #12]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	025b      	lsls	r3, r3, #9
 8008bfe:	0412      	lsls	r2, r2, #16
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008c06:	4313      	orrs	r3, r2
 8008c08:	6872      	ldr	r2, [r6, #4]
 8008c0a:	3a01      	subs	r2, #1
 8008c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c10:	4313      	orrs	r3, r2
 8008c12:	6932      	ldr	r2, [r6, #16]
 8008c14:	3a01      	subs	r2, #1
 8008c16:	0612      	lsls	r2, r2, #24
 8008c18:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c22:	6972      	ldr	r2, [r6, #20]
 8008c24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c2e:	69b2      	ldr	r2, [r6, #24]
 8008c30:	f023 0320 	bic.w	r3, r3, #32
 8008c34:	4313      	orrs	r3, r2
 8008c36:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c3a:	f023 0310 	bic.w	r3, r3, #16
 8008c3e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c42:	69f2      	ldr	r2, [r6, #28]
 8008c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c50:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c54:	f043 0310 	orr.w	r3, r3, #16
 8008c58:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c5c:	b9b5      	cbnz	r5, 8008c8c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c62:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c64:	4c11      	ldr	r4, [pc, #68]	; (8008cac <RCCEx_PLL2_Config+0xec>)
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c6c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c6e:	f7fc ff95 	bl	8005b9c <HAL_GetTick>
 8008c72:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	d50f      	bpl.n	8008c9a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e005      	b.n	8008c8a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c7e:	f7fc ff8d 	bl	8005b9c <HAL_GetTick>
 8008c82:	1bc0      	subs	r0, r0, r7
 8008c84:	2802      	cmp	r0, #2
 8008c86:	d9ab      	bls.n	8008be0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008c88:	2003      	movs	r0, #3
}
 8008c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c8c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c8e:	bf0c      	ite	eq
 8008c90:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c94:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008c98:	e7e3      	b.n	8008c62 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c9a:	f7fc ff7f 	bl	8005b9c <HAL_GetTick>
 8008c9e:	1b40      	subs	r0, r0, r5
 8008ca0:	2802      	cmp	r0, #2
 8008ca2:	d9e7      	bls.n	8008c74 <RCCEx_PLL2_Config+0xb4>
 8008ca4:	e7f0      	b.n	8008c88 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e7ef      	b.n	8008c8a <RCCEx_PLL2_Config+0xca>
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400

08008cb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cb2:	4c3a      	ldr	r4, [pc, #232]	; (8008d9c <RCCEx_PLL3_Config+0xec>)
{
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d069      	beq.n	8008d96 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cca:	f7fc ff67 	bl	8005b9c <HAL_GetTick>
 8008cce:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	009a      	lsls	r2, r3, #2
 8008cd4:	d44b      	bmi.n	8008d6e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cd8:	6832      	ldr	r2, [r6, #0]
 8008cda:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008cde:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008ce2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ce4:	68b3      	ldr	r3, [r6, #8]
 8008ce6:	68f2      	ldr	r2, [r6, #12]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	3a01      	subs	r2, #1
 8008cec:	025b      	lsls	r3, r3, #9
 8008cee:	0412      	lsls	r2, r2, #16
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	6872      	ldr	r2, [r6, #4]
 8008cfa:	3a01      	subs	r2, #1
 8008cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d00:	4313      	orrs	r3, r2
 8008d02:	6932      	ldr	r2, [r6, #16]
 8008d04:	3a01      	subs	r2, #1
 8008d06:	0612      	lsls	r2, r2, #24
 8008d08:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d12:	6972      	ldr	r2, [r6, #20]
 8008d14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d1e:	69b2      	ldr	r2, [r6, #24]
 8008d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d24:	4313      	orrs	r3, r2
 8008d26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d32:	69f2      	ldr	r2, [r6, #28]
 8008d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d40:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d48:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008d4c:	b9b5      	cbnz	r5, 8008d7c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d52:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d54:	4c11      	ldr	r4, [pc, #68]	; (8008d9c <RCCEx_PLL3_Config+0xec>)
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5e:	f7fc ff1d 	bl	8005b9c <HAL_GetTick>
 8008d62:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	d50f      	bpl.n	8008d8a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e005      	b.n	8008d7a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d6e:	f7fc ff15 	bl	8005b9c <HAL_GetTick>
 8008d72:	1bc0      	subs	r0, r0, r7
 8008d74:	2802      	cmp	r0, #2
 8008d76:	d9ab      	bls.n	8008cd0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008d78:	2003      	movs	r0, #3
}
 8008d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d7c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d7e:	bf0c      	ite	eq
 8008d80:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d84:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008d88:	e7e3      	b.n	8008d52 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d8a:	f7fc ff07 	bl	8005b9c <HAL_GetTick>
 8008d8e:	1b40      	subs	r0, r0, r5
 8008d90:	2802      	cmp	r0, #2
 8008d92:	d9e7      	bls.n	8008d64 <RCCEx_PLL3_Config+0xb4>
 8008d94:	e7f0      	b.n	8008d78 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008d96:	2001      	movs	r0, #1
 8008d98:	e7ef      	b.n	8008d7a <RCCEx_PLL3_Config+0xca>
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400

08008da0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da4:	6806      	ldr	r6, [r0, #0]
{
 8008da6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008da8:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008dac:	d009      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008dae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008db4:	d02e      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008db6:	d813      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008db8:	b1f3      	cbz	r3, 8008df8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dbe:	d021      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008dc0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	05db      	lsls	r3, r3, #23
 8008dc6:	f140 8102 	bpl.w	8008fce <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008dca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	f200 80fd 	bhi.w	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8008dd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008dd6:	0024      	.short	0x0024
 8008dd8:	00f5002b 	.word	0x00f5002b
 8008ddc:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008de4:	d1ec      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008de6:	4ab8      	ldr	r2, [pc, #736]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008de8:	2600      	movs	r6, #0
 8008dea:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8008dec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008dee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008df2:	430b      	orrs	r3, r1
 8008df4:	6513      	str	r3, [r2, #80]	; 0x50
 8008df6:	e7e4      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df8:	4ab3      	ldr	r2, [pc, #716]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008dfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e02:	e7f0      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e04:	2102      	movs	r1, #2
 8008e06:	3004      	adds	r0, #4
 8008e08:	f7ff feda 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e0c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d1d7      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8008e12:	e7e8      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e14:	2102      	movs	r1, #2
 8008e16:	3024      	adds	r0, #36	; 0x24
 8008e18:	f7ff ff4a 	bl	8008cb0 <RCCEx_PLL3_Config>
 8008e1c:	e7f6      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1e:	4aaa      	ldr	r2, [pc, #680]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008e20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e28:	4634      	mov	r4, r6
 8008e2a:	e004      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	1d28      	adds	r0, r5, #4
 8008e30:	f7ff fec6 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e34:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	f040 80cb 	bne.w	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e3c:	4aa2      	ldr	r2, [pc, #648]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008e3e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8008e40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008e42:	f023 0307 	bic.w	r3, r3, #7
 8008e46:	430b      	orrs	r3, r1
 8008e48:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	059f      	lsls	r7, r3, #22
 8008e4e:	d50d      	bpl.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e50:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	f000 80da 	beq.w	800900c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008e58:	f200 80bd 	bhi.w	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80c9 	beq.w	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	f000 80cc 	beq.w	8009000 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008e68:	2601      	movs	r6, #1
 8008e6a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	0558      	lsls	r0, r3, #21
 8008e70:	d510      	bpl.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e72:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8008e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e7a:	f000 80ec 	beq.w	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8008e7e:	f200 80cd 	bhi.w	800901c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 80db 	beq.w	800903e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8008e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e8c:	f000 80dd 	beq.w	800904a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008e90:	2601      	movs	r6, #1
 8008e92:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	0519      	lsls	r1, r3, #20
 8008e98:	d510      	bpl.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e9a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8008e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ea2:	f000 80fd 	beq.w	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008ea6:	f200 80de 	bhi.w	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80ec 	beq.w	8009088 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8008eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008eb4:	f000 80ee 	beq.w	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008eb8:	2601      	movs	r6, #1
 8008eba:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	019a      	lsls	r2, r3, #6
 8008ec0:	d50d      	bpl.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8008ec2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	f000 8107 	beq.w	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008eca:	f200 80f1 	bhi.w	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 80f1 	beq.w	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8008ed4:	2b10      	cmp	r3, #16
 8008ed6:	f000 80f9 	beq.w	80090cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8008eda:	2601      	movs	r6, #1
 8008edc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ede:	682b      	ldr	r3, [r5, #0]
 8008ee0:	04db      	lsls	r3, r3, #19
 8008ee2:	d50f      	bpl.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ee4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eea:	f000 8119 	beq.w	8009120 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8008eee:	f200 80fb 	bhi.w	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8108 	beq.w	8009108 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efc:	f000 810a 	beq.w	8009114 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008f00:	2601      	movs	r6, #1
 8008f02:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	049f      	lsls	r7, r3, #18
 8008f08:	d50f      	bpl.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f10:	f000 8126 	beq.w	8009160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008f14:	f200 810c 	bhi.w	8009130 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8112 	beq.w	8009142 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8008f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f22:	f000 8117 	beq.w	8009154 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8008f26:	2601      	movs	r6, #1
 8008f28:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	0458      	lsls	r0, r3, #17
 8008f2e:	d510      	bpl.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f30:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8008f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f38:	f000 8133 	beq.w	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x402>
 8008f3c:	f200 8118 	bhi.w	8009170 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 811e 	beq.w	8009182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8008f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f4a:	f000 8124 	beq.w	8009196 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8008f4e:	2601      	movs	r6, #1
 8008f50:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008f52:	682b      	ldr	r3, [r5, #0]
 8008f54:	0159      	lsls	r1, r3, #5
 8008f56:	d514      	bpl.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch(PeriphClkInit->DsiClockSelection)
 8008f58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008f5a:	b143      	cbz	r3, 8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f60:	f040 8127 	bne.w	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f64:	2101      	movs	r1, #1
 8008f66:	1d28      	adds	r0, r5, #4
 8008f68:	f7ff fe2a 	bl	8008bc0 <RCCEx_PLL2_Config>
 8008f6c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8008f6e:	2c00      	cmp	r4, #0
 8008f70:	f040 8122 	bne.w	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008f74:	4a54      	ldr	r2, [pc, #336]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008f76:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8008f78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	041a      	lsls	r2, r3, #16
 8008f86:	d50d      	bpl.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->FdcanClockSelection)
 8008f88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8e:	f000 8115 	beq.w	80091bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f96:	f000 811f 	beq.w	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8113 	beq.w	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008fa0:	2601      	movs	r6, #1
 8008fa2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	01db      	lsls	r3, r3, #7
 8008fa8:	f140 812c 	bpl.w	8009204 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->FmcClockSelection)
 8008fac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	f200 816c 	bhi.w	800928c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008fb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fb8:	0118011d 	.word	0x0118011d
 8008fbc:	011d0164 	.word	0x011d0164
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008fc6:	f7ff fe73 	bl	8008cb0 <RCCEx_PLL3_Config>
 8008fca:	e733      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fcc:	2601      	movs	r6, #1
 8008fce:	4634      	mov	r4, r6
 8008fd0:	e73b      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8008fd2:	4626      	mov	r6, r4
 8008fd4:	e739      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fde:	f47f af43 	bne.w	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8008fe2:	b9cc      	cbnz	r4, 8009018 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fe4:	4a38      	ldr	r2, [pc, #224]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008fe6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8008fe8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008fea:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	6513      	str	r3, [r2, #80]	; 0x50
 8008ff2:	e73b      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff4:	4a34      	ldr	r2, [pc, #208]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ff6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008ffe:	e7f0      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009000:	2100      	movs	r1, #0
 8009002:	1d28      	adds	r0, r5, #4
 8009004:	f7ff fddc 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009008:	4604      	mov	r4, r0
      break;
 800900a:	e7ea      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800900c:	2100      	movs	r1, #0
 800900e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009012:	f7ff fe4d 	bl	8008cb0 <RCCEx_PLL3_Config>
 8009016:	e7f7      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009018:	4626      	mov	r6, r4
 800901a:	e727      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 800901c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009020:	d003      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8009022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009026:	f47f af33 	bne.w	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 800902a:	b9d4      	cbnz	r4, 8009062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800902c:	4a26      	ldr	r2, [pc, #152]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800902e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009032:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009034:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009038:	430b      	orrs	r3, r1
 800903a:	6593      	str	r3, [r2, #88]	; 0x58
 800903c:	e72a      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800903e:	4a22      	ldr	r2, [pc, #136]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009040:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009046:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009048:	e7ef      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800904a:	2100      	movs	r1, #0
 800904c:	1d28      	adds	r0, r5, #4
 800904e:	f7ff fdb7 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009052:	4604      	mov	r4, r0
      break;
 8009054:	e7e9      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009056:	2100      	movs	r1, #0
 8009058:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800905c:	f7ff fe28 	bl	8008cb0 <RCCEx_PLL3_Config>
 8009060:	e7f7      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8009062:	4626      	mov	r6, r4
 8009064:	e716      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009066:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800906a:	d003      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800906c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009070:	f47f af22 	bne.w	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8009074:	b9d4      	cbnz	r4, 80090ac <HAL_RCCEx_PeriphCLKConfig+0x30c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009076:	4a14      	ldr	r2, [pc, #80]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8009078:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800907c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800907e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009082:	430b      	orrs	r3, r1
 8009084:	6593      	str	r3, [r2, #88]	; 0x58
 8009086:	e719      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4a0f      	ldr	r2, [pc, #60]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800908a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800908c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009090:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009092:	e7ef      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009094:	2100      	movs	r1, #0
 8009096:	1d28      	adds	r0, r5, #4
 8009098:	f7ff fd92 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800909c:	4604      	mov	r4, r0
      break;
 800909e:	e7e9      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090a0:	2100      	movs	r1, #0
 80090a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090a6:	f7ff fe03 	bl	8008cb0 <RCCEx_PLL3_Config>
 80090aa:	e7f7      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80090ac:	4626      	mov	r6, r4
 80090ae:	e705      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->QspiClockSelection)
 80090b0:	2b30      	cmp	r3, #48	; 0x30
 80090b2:	f47f af12 	bne.w	8008eda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 80090b6:	b9ac      	cbnz	r4, 80090e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80090b8:	4a03      	ldr	r2, [pc, #12]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80090ba:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80090bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80090be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80090c2:	430b      	orrs	r3, r1
 80090c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090c6:	e70a      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80090c8:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090cc:	4a9b      	ldr	r2, [pc, #620]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80090ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80090d6:	e7ee      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090d8:	2102      	movs	r1, #2
 80090da:	1d28      	adds	r0, r5, #4
 80090dc:	f7ff fd70 	bl	8008bc0 <RCCEx_PLL2_Config>
 80090e0:	4604      	mov	r4, r0
      break;
 80090e2:	e7e8      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80090e4:	4626      	mov	r6, r4
 80090e6:	e6fa      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 80090e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090ec:	d003      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80090ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f2:	f47f af05 	bne.w	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80090f6:	b9cc      	cbnz	r4, 800912c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f8:	4a90      	ldr	r2, [pc, #576]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80090fa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80090fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009102:	430b      	orrs	r3, r1
 8009104:	6513      	str	r3, [r2, #80]	; 0x50
 8009106:	e6fd      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009108:	4a8c      	ldr	r2, [pc, #560]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800910a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800910c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009112:	e7f0      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009114:	2100      	movs	r1, #0
 8009116:	1d28      	adds	r0, r5, #4
 8009118:	f7ff fd52 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800911c:	4604      	mov	r4, r0
      break;
 800911e:	e7ea      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009120:	2100      	movs	r1, #0
 8009122:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009126:	f7ff fdc3 	bl	8008cb0 <RCCEx_PLL3_Config>
 800912a:	e7f7      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800912c:	4626      	mov	r6, r4
 800912e:	e6e9      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009134:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009138:	d003      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800913a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800913e:	f47f aef2 	bne.w	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8009142:	b99c      	cbnz	r4, 800916c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009144:	4a7d      	ldr	r2, [pc, #500]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009146:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8009148:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800914a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800914e:	430b      	orrs	r3, r1
 8009150:	6513      	str	r3, [r2, #80]	; 0x50
 8009152:	e6ea      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009154:	2101      	movs	r1, #1
 8009156:	1d28      	adds	r0, r5, #4
 8009158:	f7ff fd32 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800915c:	4604      	mov	r4, r0
      break;
 800915e:	e7f0      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009160:	2101      	movs	r1, #1
 8009162:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009166:	f7ff fda3 	bl	8008cb0 <RCCEx_PLL3_Config>
 800916a:	e7f7      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800916c:	4626      	mov	r6, r4
 800916e:	e6dc      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009170:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009174:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009178:	d003      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800917a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800917e:	f47f aee6 	bne.w	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8009182:	b9a4      	cbnz	r4, 80091ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009184:	4a6d      	ldr	r2, [pc, #436]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009186:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800918a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800918c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009190:	430b      	orrs	r3, r1
 8009192:	6593      	str	r3, [r2, #88]	; 0x58
 8009194:	e6dd      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009196:	2101      	movs	r1, #1
 8009198:	1d28      	adds	r0, r5, #4
 800919a:	f7ff fd11 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800919e:	4604      	mov	r4, r0
      break;
 80091a0:	e7ef      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091a2:	2101      	movs	r1, #1
 80091a4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80091a8:	f7ff fd82 	bl	8008cb0 <RCCEx_PLL3_Config>
 80091ac:	e7f7      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80091ae:	4626      	mov	r6, r4
 80091b0:	e6cf      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->DsiClockSelection)
 80091b2:	2601      	movs	r6, #1
 80091b4:	4634      	mov	r4, r6
 80091b6:	e6e4      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80091b8:	4626      	mov	r6, r4
 80091ba:	e6e2      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091bc:	4a5f      	ldr	r2, [pc, #380]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80091be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80091c6:	b96c      	cbnz	r4, 80091e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091c8:	4a5c      	ldr	r2, [pc, #368]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80091ca:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80091cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80091d2:	430b      	orrs	r3, r1
 80091d4:	6513      	str	r3, [r2, #80]	; 0x50
 80091d6:	e6e5      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091d8:	2101      	movs	r1, #1
 80091da:	1d28      	adds	r0, r5, #4
 80091dc:	f7ff fcf0 	bl	8008bc0 <RCCEx_PLL2_Config>
 80091e0:	4604      	mov	r4, r0
      break;
 80091e2:	e7f0      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80091e4:	4626      	mov	r6, r4
 80091e6:	e6dd      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e8:	4a54      	ldr	r2, [pc, #336]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80091ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80091f2:	2c00      	cmp	r4, #0
 80091f4:	d14d      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091f6:	4a51      	ldr	r2, [pc, #324]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80091f8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80091fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	430b      	orrs	r3, r1
 8009202:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	025f      	lsls	r7, r3, #9
 8009208:	d54d      	bpl.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800920a:	4f4d      	ldr	r7, [pc, #308]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009212:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009214:	f7fc fcc2 	bl	8005b9c <HAL_GetTick>
 8009218:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	05d8      	lsls	r0, r3, #23
 800921e:	d53a      	bpl.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    if(ret == HAL_OK)
 8009220:	2c00      	cmp	r4, #0
 8009222:	d16c      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009224:	4b45      	ldr	r3, [pc, #276]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009226:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 800922a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800922c:	4042      	eors	r2, r0
 800922e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009232:	d00b      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009236:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009238:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800923c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009240:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009242:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009244:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009248:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800924a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800924c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009250:	d040      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009252:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8009256:	4939      	ldr	r1, [pc, #228]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009258:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800925c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009260:	d149      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8009262:	6908      	ldr	r0, [r1, #16]
 8009264:	4a37      	ldr	r2, [pc, #220]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8009266:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800926a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800926e:	4302      	orrs	r2, r0
 8009270:	610a      	str	r2, [r1, #16]
 8009272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009276:	4a31      	ldr	r2, [pc, #196]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009278:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800927a:	430b      	orrs	r3, r1
 800927c:	6713      	str	r3, [r2, #112]	; 0x70
 800927e:	e012      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009280:	2102      	movs	r1, #2
 8009282:	1d28      	adds	r0, r5, #4
 8009284:	f7ff fc9c 	bl	8008bc0 <RCCEx_PLL2_Config>
 8009288:	4604      	mov	r4, r0
      break;
 800928a:	e7b2      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->FmcClockSelection)
 800928c:	2601      	movs	r6, #1
 800928e:	4634      	mov	r4, r6
 8009290:	e7b8      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009292:	4626      	mov	r6, r4
 8009294:	e7b6      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009296:	f7fc fc81 	bl	8005b9c <HAL_GetTick>
 800929a:	eba0 0008 	sub.w	r0, r0, r8
 800929e:	2864      	cmp	r0, #100	; 0x64
 80092a0:	d9bb      	bls.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x47a>
        ret = HAL_TIMEOUT;
 80092a2:	2603      	movs	r6, #3
 80092a4:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	07da      	lsls	r2, r3, #31
 80092aa:	d508      	bpl.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80092ac:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d03c      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 80092b2:	d826      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80092b4:	b35b      	cbz	r3, 800930e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d032      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80092ba:	2601      	movs	r6, #1
 80092bc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	079b      	lsls	r3, r3, #30
 80092c2:	d54e      	bpl.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80092c4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80092c6:	2b05      	cmp	r3, #5
 80092c8:	d861      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80092ca:	e8df f003 	tbb	[pc, r3]
 80092ce:	3d42      	.short	0x3d42
 80092d0:	4242425a 	.word	0x4242425a
        tickstart = HAL_GetTick();
 80092d4:	f7fc fc62 	bl	8005b9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>
        tickstart = HAL_GetTick();
 80092dc:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092de:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092e2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80092e6:	0799      	lsls	r1, r3, #30
 80092e8:	d4b3      	bmi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ea:	f7fc fc57 	bl	8005b9c <HAL_GetTick>
 80092ee:	1bc0      	subs	r0, r0, r7
 80092f0:	4548      	cmp	r0, r9
 80092f2:	d9f6      	bls.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x542>
 80092f4:	e7d5      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092f6:	690a      	ldr	r2, [r1, #16]
 80092f8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80092fc:	e7b8      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80092fe:	4626      	mov	r6, r4
 8009300:	e7d1      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009302:	f023 0208 	bic.w	r2, r3, #8
 8009306:	2a20      	cmp	r2, #32
 8009308:	d001      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800930a:	2b18      	cmp	r3, #24
 800930c:	d1d5      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    if(ret == HAL_OK)
 800930e:	b99c      	cbnz	r4, 8009338 <HAL_RCCEx_PeriphCLKConfig+0x598>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8009312:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8009314:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009316:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800931a:	430b      	orrs	r3, r1
 800931c:	6553      	str	r3, [r2, #84]	; 0x54
 800931e:	e7ce      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x51e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009320:	2101      	movs	r1, #1
 8009322:	1d28      	adds	r0, r5, #4
 8009324:	f7ff fc4c 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009328:	4604      	mov	r4, r0
      break;
 800932a:	e7f0      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x56e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800932c:	2101      	movs	r1, #1
 800932e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009332:	f7ff fcbd 	bl	8008cb0 <RCCEx_PLL3_Config>
 8009336:	e7f7      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009338:	4626      	mov	r6, r4
 800933a:	e7c0      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800933c:	58024400 	.word	0x58024400
 8009340:	58024800 	.word	0x58024800
 8009344:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009348:	2101      	movs	r1, #1
 800934a:	1d28      	adds	r0, r5, #4
 800934c:	f7ff fc38 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009350:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009352:	b9fc      	cbnz	r4, 8009394 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009354:	4ab7      	ldr	r2, [pc, #732]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009356:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8009358:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	430b      	orrs	r3, r1
 8009360:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	075f      	lsls	r7, r3, #29
 8009366:	d527      	bpl.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009368:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800936c:	2b05      	cmp	r3, #5
 800936e:	f200 813a 	bhi.w	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009372:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009376:	0016      	.short	0x0016
 8009378:	01320011 	.word	0x01320011
 800937c:	00160016 	.word	0x00160016
 8009380:	0016      	.short	0x0016
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009382:	2101      	movs	r1, #1
 8009384:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009388:	f7ff fc92 	bl	8008cb0 <RCCEx_PLL3_Config>
 800938c:	e7e0      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800938e:	2601      	movs	r6, #1
 8009390:	4634      	mov	r4, r6
 8009392:	e7e6      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8009394:	4626      	mov	r6, r4
 8009396:	e7e4      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009398:	2101      	movs	r1, #1
 800939a:	1d28      	adds	r0, r5, #4
 800939c:	f7ff fc10 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093a0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	f040 8122 	bne.w	80095ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093a8:	4aa2      	ldr	r2, [pc, #648]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80093aa:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80093ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093b0:	f023 0307 	bic.w	r3, r3, #7
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	0698      	lsls	r0, r3, #26
 80093bc:	d510      	bpl.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093be:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80093c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c6:	f000 812c 	beq.w	8009622 <HAL_RCCEx_PeriphCLKConfig+0x882>
 80093ca:	f200 8111 	bhi.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8117 	beq.w	8009602 <HAL_RCCEx_PeriphCLKConfig+0x862>
 80093d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093d8:	f000 811d 	beq.w	8009616 <HAL_RCCEx_PeriphCLKConfig+0x876>
 80093dc:	2601      	movs	r6, #1
 80093de:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	0659      	lsls	r1, r3, #25
 80093e4:	d510      	bpl.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x668>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80093e6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80093ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ee:	f000 813c 	beq.w	800966a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80093f2:	f200 8121 	bhi.w	8009638 <HAL_RCCEx_PeriphCLKConfig+0x898>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8127 	beq.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80093fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009400:	f000 812d 	beq.w	800965e <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8009404:	2601      	movs	r6, #1
 8009406:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	061a      	lsls	r2, r3, #24
 800940c:	d510      	bpl.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800940e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8009412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009416:	f000 8149 	beq.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800941a:	f200 812e 	bhi.w	800967a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8134 	beq.w	800968c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009428:	f000 813a 	beq.w	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800942c:	2601      	movs	r6, #1
 800942e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	071b      	lsls	r3, r3, #28
 8009434:	d514      	bpl.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009436:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800943a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943e:	d107      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009440:	2102      	movs	r1, #2
 8009442:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009446:	f7ff fc33 	bl	8008cb0 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800944a:	2800      	cmp	r0, #0
 800944c:	bf18      	it	ne
 800944e:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009450:	4a78      	ldr	r2, [pc, #480]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009452:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8009456:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800945c:	430b      	orrs	r3, r1
 800945e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	06df      	lsls	r7, r3, #27
 8009464:	d514      	bpl.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009466:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800946a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946e:	d107      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009470:	2102      	movs	r1, #2
 8009472:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009476:	f7ff fc1b 	bl	8008cb0 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800947a:	2800      	cmp	r0, #0
 800947c:	bf18      	it	ne
 800947e:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009480:	4a6c      	ldr	r2, [pc, #432]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009482:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8009486:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800948c:	430b      	orrs	r3, r1
 800948e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	0318      	lsls	r0, r3, #12
 8009494:	d51a      	bpl.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 8009496:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800949a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800949e:	f000 810d 	beq.w	80096bc <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80094a2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80094a6:	d006      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	f040 810d 	bne.w	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x928>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094ae:	1d28      	adds	r0, r5, #4
 80094b0:	f7ff fb86 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094b4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80094b6:	2c00      	cmp	r4, #0
 80094b8:	f040 8109 	bne.w	80096ce <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094bc:	4a5d      	ldr	r2, [pc, #372]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80094be:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80094c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80094c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	0359      	lsls	r1, r3, #13
 80094d0:	d51c      	bpl.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x76c>
    switch(PeriphClkInit->UsbClockSelection)
 80094d2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80094d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094da:	f000 80fa 	beq.w	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x932>
 80094de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094e2:	d008      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
 80094e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e8:	f040 80fa 	bne.w	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ec:	4a51      	ldr	r2, [pc, #324]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80094ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80094f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80094f6:	2c00      	cmp	r4, #0
 80094f8:	f040 80f5 	bne.w	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x946>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094fc:	4a4d      	ldr	r2, [pc, #308]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80094fe:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8009502:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009504:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009508:	430b      	orrs	r3, r1
 800950a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	03da      	lsls	r2, r3, #15
 8009510:	d509      	bpl.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009512:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80e8 	beq.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800951a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800951e:	f000 80f2 	beq.w	8009706 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009522:	2601      	movs	r6, #1
 8009524:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	d507      	bpl.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800952c:	2102      	movs	r1, #2
 800952e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009532:	f7ff fbbd 	bl	8008cb0 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009536:	2800      	cmp	r0, #0
 8009538:	bf18      	it	ne
 800953a:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	039f      	lsls	r7, r3, #14
 8009540:	d50b      	bpl.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
    switch(PeriphClkInit->RngClockSelection)
 8009542:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8009546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800954a:	f000 80f2 	beq.w	8009732 <HAL_RCCEx_PeriphCLKConfig+0x992>
 800954e:	f200 80e2 	bhi.w	8009716 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009552:	2900      	cmp	r1, #0
 8009554:	f000 80e5 	beq.w	8009722 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8009558:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800955a:	02dc      	lsls	r4, r3, #11
 800955c:	d506      	bpl.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800955e:	4935      	ldr	r1, [pc, #212]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009560:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8009562:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009564:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009568:	4302      	orrs	r2, r0
 800956a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800956c:	00d8      	lsls	r0, r3, #3
 800956e:	d507      	bpl.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009570:	4930      	ldr	r1, [pc, #192]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009572:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8009576:	690a      	ldr	r2, [r1, #16]
 8009578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800957c:	4302      	orrs	r2, r0
 800957e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009580:	0299      	lsls	r1, r3, #10
 8009582:	d506      	bpl.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009584:	492b      	ldr	r1, [pc, #172]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009586:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8009588:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800958a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800958e:	4302      	orrs	r2, r0
 8009590:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009592:	005a      	lsls	r2, r3, #1
 8009594:	d509      	bpl.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009596:	4a27      	ldr	r2, [pc, #156]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009598:	6911      	ldr	r1, [r2, #16]
 800959a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800959e:	6111      	str	r1, [r2, #16]
 80095a0:	6911      	ldr	r1, [r2, #16]
 80095a2:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80095a6:	4301      	orrs	r1, r0
 80095a8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da06      	bge.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x81c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095ae:	4921      	ldr	r1, [pc, #132]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80095b0:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80095b2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80095b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095b8:	4302      	orrs	r2, r0
 80095ba:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	d507      	bpl.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x830>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095c0:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80095c2:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80095c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6553      	str	r3, [r2, #84]	; 0x54
}
 80095d0:	1e30      	subs	r0, r6, #0
 80095d2:	bf18      	it	ne
 80095d4:	2001      	movne	r0, #1
 80095d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095da:	2101      	movs	r1, #1
 80095dc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095e0:	f7ff fb66 	bl	8008cb0 <RCCEx_PLL3_Config>
 80095e4:	e6dc      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095e6:	2601      	movs	r6, #1
 80095e8:	4634      	mov	r4, r6
 80095ea:	e6e5      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80095ec:	4626      	mov	r6, r4
 80095ee:	e6e3      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80095f8:	d003      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x862>
 80095fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095fe:	f47f aeed 	bne.w	80093dc <HAL_RCCEx_PeriphCLKConfig+0x63c>
    if(ret == HAL_OK)
 8009602:	b9a4      	cbnz	r4, 800962e <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009604:	4a0b      	ldr	r2, [pc, #44]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8009606:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800960a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800960c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009610:	430b      	orrs	r3, r1
 8009612:	6553      	str	r3, [r2, #84]	; 0x54
 8009614:	e6e4      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009616:	2100      	movs	r1, #0
 8009618:	1d28      	adds	r0, r5, #4
 800961a:	f7ff fad1 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800961e:	4604      	mov	r4, r0
      break;
 8009620:	e7ef      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x862>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009622:	2102      	movs	r1, #2
 8009624:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009628:	f7ff fb42 	bl	8008cb0 <RCCEx_PLL3_Config>
 800962c:	e7f7      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800962e:	4626      	mov	r6, r4
 8009630:	e6d6      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8009632:	bf00      	nop
 8009634:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009638:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800963c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009640:	d003      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8009642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009646:	f47f aedd 	bne.w	8009404 <HAL_RCCEx_PeriphCLKConfig+0x664>
    if(ret == HAL_OK)
 800964a:	b9a4      	cbnz	r4, 8009676 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800964c:	4a3d      	ldr	r2, [pc, #244]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800964e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8009652:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009654:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009658:	430b      	orrs	r3, r1
 800965a:	6593      	str	r3, [r2, #88]	; 0x58
 800965c:	e6d4      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x668>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800965e:	2100      	movs	r1, #0
 8009660:	1d28      	adds	r0, r5, #4
 8009662:	f7ff faad 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009666:	4604      	mov	r4, r0
      break;
 8009668:	e7ef      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800966a:	2102      	movs	r1, #2
 800966c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009670:	f7ff fb1e 	bl	8008cb0 <RCCEx_PLL3_Config>
 8009674:	e7f7      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8009676:	4626      	mov	r6, r4
 8009678:	e6c6      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x668>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800967a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800967e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009682:	d003      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009684:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009688:	f47f aed0 	bne.w	800942c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    if(ret == HAL_OK)
 800968c:	b9a4      	cbnz	r4, 80096b8 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800968e:	4a2d      	ldr	r2, [pc, #180]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009690:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8009694:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009696:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800969a:	430b      	orrs	r3, r1
 800969c:	6593      	str	r3, [r2, #88]	; 0x58
 800969e:	e6c7      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096a0:	2100      	movs	r1, #0
 80096a2:	1d28      	adds	r0, r5, #4
 80096a4:	f7ff fa8c 	bl	8008bc0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096a8:	4604      	mov	r4, r0
      break;
 80096aa:	e7ef      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ac:	2102      	movs	r1, #2
 80096ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80096b2:	f7ff fafd 	bl	8008cb0 <RCCEx_PLL3_Config>
 80096b6:	e7f7      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80096b8:	4626      	mov	r6, r4
 80096ba:	e6b9      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x690>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096bc:	2102      	movs	r1, #2
 80096be:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80096c2:	f7ff faf5 	bl	8008cb0 <RCCEx_PLL3_Config>
 80096c6:	e6f5      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x714>
    switch(PeriphClkInit->AdcClockSelection)
 80096c8:	2601      	movs	r6, #1
 80096ca:	4634      	mov	r4, r6
 80096cc:	e6fe      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80096ce:	4626      	mov	r6, r4
 80096d0:	e6fc      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d2:	2101      	movs	r1, #1
 80096d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80096d8:	f7ff faea 	bl	8008cb0 <RCCEx_PLL3_Config>
 80096dc:	4604      	mov	r4, r0
      break;
 80096de:	e70a      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x756>
    switch(PeriphClkInit->UsbClockSelection)
 80096e0:	2601      	movs	r6, #1
 80096e2:	4634      	mov	r4, r6
 80096e4:	e712      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x76c>
 80096e6:	4626      	mov	r6, r4
 80096e8:	e710      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x76c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ea:	4a16      	ldr	r2, [pc, #88]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80096ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80096ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80096f4:	b96c      	cbnz	r4, 8009712 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096f6:	4a13      	ldr	r2, [pc, #76]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80096f8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80096fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80096fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009700:	430b      	orrs	r3, r1
 8009702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009704:	e70f      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009706:	2102      	movs	r1, #2
 8009708:	1d28      	adds	r0, r5, #4
 800970a:	f7ff fa59 	bl	8008bc0 <RCCEx_PLL2_Config>
 800970e:	4604      	mov	r4, r0
      break;
 8009710:	e7f0      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8009712:	4626      	mov	r6, r4
 8009714:	e707      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch(PeriphClkInit->RngClockSelection)
 8009716:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800971a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800971e:	f47f af1b 	bne.w	8009558 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if(ret == HAL_OK)
 8009722:	b964      	cbnz	r4, 800973e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009724:	4807      	ldr	r0, [pc, #28]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009726:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009728:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800972c:	430a      	orrs	r2, r1
 800972e:	6542      	str	r2, [r0, #84]	; 0x54
 8009730:	e713      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009732:	4804      	ldr	r0, [pc, #16]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009734:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009736:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800973a:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800973c:	e7f1      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800973e:	4626      	mov	r6, r4
 8009740:	e70b      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400

08009748 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009748:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800974a:	f7ff f9c9 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 800974e:	4b05      	ldr	r3, [pc, #20]	; (8009764 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009750:	4a05      	ldr	r2, [pc, #20]	; (8009768 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009758:	5cd3      	ldrb	r3, [r2, r3]
 800975a:	f003 031f 	and.w	r3, r3, #31
}
 800975e:	40d8      	lsrs	r0, r3
 8009760:	bd08      	pop	{r3, pc}
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400
 8009768:	08021d78 	.word	0x08021d78

0800976c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800976c:	4a4e      	ldr	r2, [pc, #312]	; (80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800976e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009770:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009772:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009774:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8009776:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800977a:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800977e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8009780:	f000 808d 	beq.w	800989e <HAL_RCCEx_GetPLL2ClockFreq+0x132>
    switch (pllsource)
 8009784:	ee07 1a90 	vmov	s15, r1
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009788:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800978c:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009790:	f004 0403 	and.w	r4, r4, #3
 8009794:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009798:	434b      	muls	r3, r1
    switch (pllsource)
 800979a:	2c01      	cmp	r4, #1
 800979c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80097a8:	d06b      	beq.n	8009882 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 80097aa:	2c02      	cmp	r4, #2
 80097ac:	d05b      	beq.n	8009866 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 80097ae:	2c00      	cmp	r4, #0
 80097b0:	d167      	bne.n	8009882 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	069b      	lsls	r3, r3, #26
 80097b6:	d546      	bpl.n	8009846 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097b8:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097bc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80097c0:	4a3a      	ldr	r2, [pc, #232]	; (80098ac <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097c6:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097c8:	ee07 2a10 	vmov	s14, r2
 80097cc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80097d0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80097d4:	ee06 3a90 	vmov	s13, r3
 80097d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80097dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e0:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097e4:	4a30      	ldr	r2, [pc, #192]	; (80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097ec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80097f0:	ee07 3a10 	vmov	s14, r3
 80097f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80097f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80097fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009800:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009804:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009808:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800980a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800980e:	ee07 3a10 	vmov	s14, r3
 8009812:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009816:	ee37 7a06 	vadd.f32	s14, s14, s12
 800981a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800981e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009822:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009826:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009828:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800982c:	ee07 3a10 	vmov	s14, r3
 8009830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009834:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009838:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800983c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009840:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009844:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009846:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009848:	eddf 5a19 	vldr	s11, [pc, #100]	; 80098b0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800984c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009850:	ee07 3a10 	vmov	s14, r3
 8009854:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009860:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009864:	e7be      	b.n	80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009866:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009868:	eddf 5a12 	vldr	s11, [pc, #72]	; 80098b4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800986c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009870:	ee07 3a10 	vmov	s14, r3
 8009874:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800987c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009880:	e7ee      	b.n	8009860 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009882:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009884:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80098b8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8009888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988c:	ee07 3a10 	vmov	s14, r3
 8009890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009898:	ee77 7a86 	vadd.f32	s15, s15, s12
 800989c:	e7e0      	b.n	8009860 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800989e:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098a2:	6081      	str	r1, [r0, #8]
}
 80098a4:	e7ce      	b.n	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80098a6:	bf00      	nop
 80098a8:	58024400 	.word	0x58024400
 80098ac:	03d09000 	.word	0x03d09000
 80098b0:	4c742400 	.word	0x4c742400
 80098b4:	4bbebc20 	.word	0x4bbebc20
 80098b8:	4a742400 	.word	0x4a742400

080098bc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098bc:	4a4e      	ldr	r2, [pc, #312]	; (80099f8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 80098be:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098c0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098c2:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80098c6:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098ca:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098ce:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80098d0:	f000 808d 	beq.w	80099ee <HAL_RCCEx_GetPLL3ClockFreq+0x132>
    switch (pllsource)
 80098d4:	ee07 1a90 	vmov	s15, r1
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098d8:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098dc:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098e0:	f004 0403 	and.w	r4, r4, #3
 80098e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098e8:	434b      	muls	r3, r1
    switch (pllsource)
 80098ea:	2c01      	cmp	r4, #1
 80098ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098f0:	ee07 3a90 	vmov	s15, r3
 80098f4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80098f8:	d06b      	beq.n	80099d2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 80098fa:	2c02      	cmp	r4, #2
 80098fc:	d05b      	beq.n	80099b6 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d167      	bne.n	80099d2 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	069b      	lsls	r3, r3, #26
 8009906:	d546      	bpl.n	8009996 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009908:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800990a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800990c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8009910:	4a3a      	ldr	r2, [pc, #232]	; (80099fc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009916:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009918:	ee07 2a10 	vmov	s14, r2
 800991c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009920:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009924:	ee06 3a90 	vmov	s13, r3
 8009928:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800992c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009930:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009934:	4a30      	ldr	r2, [pc, #192]	; (80099f8 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009936:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800993a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800993c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009940:	ee07 3a10 	vmov	s14, r3
 8009944:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009948:	ee37 7a06 	vadd.f32	s14, s14, s12
 800994c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009950:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009954:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009958:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800995a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800995e:	ee07 3a10 	vmov	s14, r3
 8009962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009966:	ee37 7a06 	vadd.f32	s14, s14, s12
 800996a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800996e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009972:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009976:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009978:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800997c:	ee07 3a10 	vmov	s14, r3
 8009980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009984:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009988:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800998c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009990:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009994:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009996:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009998:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800999c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a0:	ee07 3a10 	vmov	s14, r3
 80099a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ac:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099b0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80099b4:	e7be      	b.n	8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099b8:	eddf 5a12 	vldr	s11, [pc, #72]	; 8009a04 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80099bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c0:	ee07 3a10 	vmov	s14, r3
 80099c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099cc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099d0:	e7ee      	b.n	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099d4:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80099d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099dc:	ee07 3a10 	vmov	s14, r3
 80099e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099ec:	e7e0      	b.n	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099ee:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099f2:	6081      	str	r1, [r0, #8]
}
 80099f4:	e7ce      	b.n	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	03d09000 	.word	0x03d09000
 8009a00:	4c742400 	.word	0x4c742400
 8009a04:	4bbebc20 	.word	0x4bbebc20
 8009a08:	4a742400 	.word	0x4a742400

08009a0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009a10:	4604      	mov	r4, r0
 8009a12:	b1f0      	cbz	r0, 8009a52 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a14:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009a18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009a1c:	b91b      	cbnz	r3, 8009a26 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a1e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a22:	f7f7 fcf5 	bl	8001410 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a26:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a28:	1d21      	adds	r1, r4, #4
 8009a2a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a30:	f001 fa1e 	bl	800ae70 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009a34:	6862      	ldr	r2, [r4, #4]
 8009a36:	4629      	mov	r1, r5
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	f001 fa54 	bl	800aee6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009a3e:	4a06      	ldr	r2, [pc, #24]	; (8009a58 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 8009a40:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009a52:	2001      	movs	r0, #1
 8009a54:	e7fc      	b.n	8009a50 <HAL_SDRAM_Init+0x44>
 8009a56:	bf00      	nop
 8009a58:	52004000 	.word	0x52004000

08009a5c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8009a60:	f7f7 fd64 	bl	800152c <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8009a64:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a68:	f001 fa73 	bl	800af52 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8009a72:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 8009a76:	bd10      	pop	{r4, pc}

08009a78 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009a78:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009a7a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009a7e:	4605      	mov	r5, r0
 8009a80:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009a82:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009a84:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009a86:	d010      	beq.n	8009aaa <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009a88:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009a8c:	2c01      	cmp	r4, #1
 8009a8e:	d110      	bne.n	8009ab2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a90:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009a92:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a94:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009a98:	f001 fa6a 	bl	800af70 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d104      	bne.n	8009aac <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009aa2:	2305      	movs	r3, #5
 8009aa4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009aa8:	2000      	movs	r0, #0
}
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009aac:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8009ab0:	e7fa      	b.n	8009aa8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	e7f9      	b.n	8009aaa <HAL_SDRAM_SendCommand+0x32>

08009ab6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009ab6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ab8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009abc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	b2d8      	uxtb	r0, r3
 8009ac2:	d00d      	beq.n	8009ae0 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009ac4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	b2dd      	uxtb	r5, r3
 8009acc:	d109      	bne.n	8009ae2 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ace:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009ad0:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ad2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009ad6:	f001 fa5d 	bl	800af94 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ada:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009adc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e7fc      	b.n	8009ae0 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08009ae6 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ae8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d12b      	bne.n	8009b48 <HAL_TIM_Base_Start+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af0:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af2:	4a16      	ldr	r2, [pc, #88]	; (8009b4c <HAL_TIM_Base_Start+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009af4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af8:	6803      	ldr	r3, [r0, #0]
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d016      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b02:	d013      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009b04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00f      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009b0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00b      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009b14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d007      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009b1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d003      	beq.n	8009b2c <HAL_TIM_Base_Start+0x44>
 8009b24:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d107      	bne.n	8009b3c <HAL_TIM_Base_Start+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b2c:	6899      	ldr	r1, [r3, #8]
 8009b2e:	4a08      	ldr	r2, [pc, #32]	; (8009b50 <HAL_TIM_Base_Start+0x68>)
 8009b30:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b32:	2a06      	cmp	r2, #6
 8009b34:	d006      	beq.n	8009b44 <HAL_TIM_Base_Start+0x5c>
 8009b36:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009b3a:	d003      	beq.n	8009b44 <HAL_TIM_Base_Start+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b44:	2000      	movs	r0, #0
}
 8009b46:	4770      	bx	lr
    return HAL_ERROR;
 8009b48:	2001      	movs	r0, #1
 8009b4a:	4770      	bx	lr
 8009b4c:	40010000 	.word	0x40010000
 8009b50:	00010007 	.word	0x00010007

08009b54 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d12f      	bne.n	8009bbc <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6c:	4a14      	ldr	r2, [pc, #80]	; (8009bc0 <HAL_TIM_Base_Start_IT+0x6c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d016      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b76:	d013      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b78:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00f      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00b      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d007      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b90:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x4c>
 8009b98:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d107      	bne.n	8009bb0 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba0:	6899      	ldr	r1, [r3, #8]
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_TIM_Base_Start_IT+0x70>)
 8009ba4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba6:	2a06      	cmp	r2, #6
 8009ba8:	d006      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x64>
 8009baa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009bae:	d003      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bb8:	2000      	movs	r0, #0
}
 8009bba:	4770      	bx	lr
    return HAL_ERROR;
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	4770      	bx	lr
 8009bc0:	40010000 	.word	0x40010000
 8009bc4:	00010007 	.word	0x00010007

08009bc8 <HAL_TIM_OC_DelayElapsedCallback>:
 8009bc8:	4770      	bx	lr

08009bca <HAL_TIM_IC_CaptureCallback>:
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIM_PWM_PulseFinishedCallback>:
 8009bcc:	4770      	bx	lr

08009bce <HAL_TIM_TriggerCallback>:
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd0:	6803      	ldr	r3, [r0, #0]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	0791      	lsls	r1, r2, #30
{
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bda:	d50f      	bpl.n	8009bfc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	0792      	lsls	r2, r2, #30
 8009be0:	d50c      	bpl.n	8009bfc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009be2:	f06f 0202 	mvn.w	r2, #2
 8009be6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009be8:	2201      	movs	r2, #1
 8009bea:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	0799      	lsls	r1, r3, #30
 8009bf0:	f000 8085 	beq.w	8009cfe <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bf4:	f7ff ffe9 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	0752      	lsls	r2, r2, #29
 8009c02:	d510      	bpl.n	8009c26 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	0750      	lsls	r0, r2, #29
 8009c08:	d50d      	bpl.n	8009c26 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c0a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c12:	2202      	movs	r2, #2
 8009c14:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009c1c:	d075      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1e:	f7ff ffd4 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c22:	2300      	movs	r3, #0
 8009c24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	0711      	lsls	r1, r2, #28
 8009c2c:	d50f      	bpl.n	8009c4e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	0712      	lsls	r2, r2, #28
 8009c32:	d50c      	bpl.n	8009c4e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c34:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c3c:	2204      	movs	r2, #4
 8009c3e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	079b      	lsls	r3, r3, #30
 8009c44:	d067      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	f7ff ffc0 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	06d0      	lsls	r0, r2, #27
 8009c54:	d510      	bpl.n	8009c78 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	06d1      	lsls	r1, r2, #27
 8009c5a:	d50d      	bpl.n	8009c78 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c5c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c64:	2208      	movs	r2, #8
 8009c66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009c6e:	d058      	beq.n	8009d22 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c70:	f7ff ffab 	bl	8009bca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c74:	2300      	movs	r3, #0
 8009c76:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	07d2      	lsls	r2, r2, #31
 8009c7e:	d508      	bpl.n	8009c92 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	07d0      	lsls	r0, r2, #31
 8009c84:	d505      	bpl.n	8009c92 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c86:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c8e:	f7f7 f9b9 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	0611      	lsls	r1, r2, #24
 8009c98:	d508      	bpl.n	8009cac <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c9a:	68da      	ldr	r2, [r3, #12]
 8009c9c:	0612      	lsls	r2, r2, #24
 8009c9e:	d505      	bpl.n	8009cac <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ca4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ca6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009ca8:	f000 f8d9 	bl	8009e5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	691a      	ldr	r2, [r3, #16]
 8009cb0:	05d0      	lsls	r0, r2, #23
 8009cb2:	d508      	bpl.n	8009cc6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	0611      	lsls	r1, r2, #24
 8009cb8:	d505      	bpl.n	8009cc6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009cc2:	f000 f8cd 	bl	8009e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	0652      	lsls	r2, r2, #25
 8009ccc:	d508      	bpl.n	8009ce0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	0650      	lsls	r0, r2, #25
 8009cd2:	d505      	bpl.n	8009ce0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009cdc:	f7ff ff77 	bl	8009bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	0691      	lsls	r1, r2, #26
 8009ce6:	d522      	bpl.n	8009d2e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	0692      	lsls	r2, r2, #26
 8009cec:	d51f      	bpl.n	8009d2e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cee:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cf2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cf4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009cfa:	f000 b8af 	b.w	8009e5c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfe:	f7ff ff63 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff ff62 	bl	8009bcc <HAL_TIM_PWM_PulseFinishedCallback>
 8009d08:	e776      	b.n	8009bf8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0a:	f7ff ff5d 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff ff5c 	bl	8009bcc <HAL_TIM_PWM_PulseFinishedCallback>
 8009d14:	e785      	b.n	8009c22 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d16:	f7ff ff57 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff ff56 	bl	8009bcc <HAL_TIM_PWM_PulseFinishedCallback>
 8009d20:	e793      	b.n	8009c4a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d22:	f7ff ff51 	bl	8009bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff ff50 	bl	8009bcc <HAL_TIM_PWM_PulseFinishedCallback>
 8009d2c:	e7a2      	b.n	8009c74 <HAL_TIM_IRQHandler+0xa4>
}
 8009d2e:	bd10      	pop	{r4, pc}

08009d30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d30:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8009d32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d34:	4290      	cmp	r0, r2
 8009d36:	d012      	beq.n	8009d5e <TIM_Base_SetConfig+0x2e>
 8009d38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d3c:	d00f      	beq.n	8009d5e <TIM_Base_SetConfig+0x2e>
 8009d3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009d42:	4290      	cmp	r0, r2
 8009d44:	d00b      	beq.n	8009d5e <TIM_Base_SetConfig+0x2e>
 8009d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d4a:	4290      	cmp	r0, r2
 8009d4c:	d007      	beq.n	8009d5e <TIM_Base_SetConfig+0x2e>
 8009d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d52:	4290      	cmp	r0, r2
 8009d54:	d003      	beq.n	8009d5e <TIM_Base_SetConfig+0x2e>
 8009d56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009d5a:	4290      	cmp	r0, r2
 8009d5c:	d119      	bne.n	8009d92 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009d5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009d64:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d66:	4a23      	ldr	r2, [pc, #140]	; (8009df4 <TIM_Base_SetConfig+0xc4>)
 8009d68:	4290      	cmp	r0, r2
 8009d6a:	d01d      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d70:	d01a      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009d76:	4290      	cmp	r0, r2
 8009d78:	d016      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d7e:	4290      	cmp	r0, r2
 8009d80:	d012      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d86:	4290      	cmp	r0, r2
 8009d88:	d00e      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009d8e:	4290      	cmp	r0, r2
 8009d90:	d00a      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d92:	4a19      	ldr	r2, [pc, #100]	; (8009df8 <TIM_Base_SetConfig+0xc8>)
 8009d94:	4290      	cmp	r0, r2
 8009d96:	d007      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d9c:	4290      	cmp	r0, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_Base_SetConfig+0x78>
 8009da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009da4:	4290      	cmp	r0, r2
 8009da6:	d103      	bne.n	8009db0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dac:	68ca      	ldr	r2, [r1, #12]
 8009dae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db0:	694a      	ldr	r2, [r1, #20]
 8009db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009db8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dba:	688b      	ldr	r3, [r1, #8]
 8009dbc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dbe:	680b      	ldr	r3, [r1, #0]
 8009dc0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <TIM_Base_SetConfig+0xc4>)
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	d00f      	beq.n	8009de8 <TIM_Base_SetConfig+0xb8>
 8009dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dcc:	4298      	cmp	r0, r3
 8009dce:	d00b      	beq.n	8009de8 <TIM_Base_SetConfig+0xb8>
 8009dd0:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009dd4:	4298      	cmp	r0, r3
 8009dd6:	d007      	beq.n	8009de8 <TIM_Base_SetConfig+0xb8>
 8009dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	d003      	beq.n	8009de8 <TIM_Base_SetConfig+0xb8>
 8009de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de4:	4298      	cmp	r0, r3
 8009de6:	d101      	bne.n	8009dec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009de8:	690b      	ldr	r3, [r1, #16]
 8009dea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dec:	2301      	movs	r3, #1
 8009dee:	6143      	str	r3, [r0, #20]
}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40014000 	.word	0x40014000

08009dfc <HAL_TIM_Base_Init>:
{
 8009dfc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009dfe:	4604      	mov	r4, r0
 8009e00:	b350      	cbz	r0, 8009e58 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009e02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009e06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e0a:	b91b      	cbnz	r3, 8009e14 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009e0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009e10:	f7ff fe69 	bl	8009ae6 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e16:	6820      	ldr	r0, [r4, #0]
 8009e18:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e1e:	f7ff ff87 	bl	8009d30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e22:	2301      	movs	r3, #1
  return HAL_OK;
 8009e24:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009e2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009e32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e4a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009e4e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009e56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009e58:	2001      	movs	r0, #1
 8009e5a:	e7fc      	b.n	8009e56 <HAL_TIM_Base_Init+0x5a>

08009e5c <HAL_TIMEx_CommutCallback>:
 8009e5c:	4770      	bx	lr

08009e5e <HAL_TIMEx_BreakCallback>:
 8009e5e:	4770      	bx	lr

08009e60 <HAL_TIMEx_Break2Callback>:
 8009e60:	4770      	bx	lr

08009e62 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e62:	6803      	ldr	r3, [r0, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009e72:	f022 0201 	bic.w	r2, r2, #1
 8009e76:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009e7a:	2a01      	cmp	r2, #1
 8009e7c:	d103      	bne.n	8009e86 <UART_EndRxTransfer+0x24>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	f022 0210 	bic.w	r2, r2, #16
 8009e84:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e86:	2320      	movs	r3, #32
 8009e88:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e90:	6703      	str	r3, [r0, #112]	; 0x70
}
 8009e92:	4770      	bx	lr

08009e94 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e94:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009e98:	2b21      	cmp	r3, #33	; 0x21
 8009e9a:	d118      	bne.n	8009ece <UART_TxISR_8BIT+0x3a>
  {
    if (huart->TxXferCount == 0U)
 8009e9c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8009ea0:	6803      	ldr	r3, [r0, #0]
 8009ea2:	b292      	uxth	r2, r2
 8009ea4:	b942      	cbnz	r2, 8009eb8 <UART_TxISR_8BIT+0x24>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eac:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	4770      	bx	lr
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009eb8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009eba:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009ebe:	6299      	str	r1, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
 8009ec0:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr++;
 8009ec4:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    }
  }
}
 8009ece:	4770      	bx	lr

08009ed0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ed0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009ed4:	2b21      	cmp	r3, #33	; 0x21
 8009ed6:	d11a      	bne.n	8009f0e <UART_TxISR_16BIT+0x3e>
  {
    if (huart->TxXferCount == 0U)
 8009ed8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8009edc:	6803      	ldr	r3, [r0, #0]
 8009ede:	b292      	uxth	r2, r2
 8009ee0:	b942      	cbnz	r2, 8009ef4 <UART_TxISR_16BIT+0x24>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ee8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	4770      	bx	lr
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009ef4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009ef6:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009efa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009efe:	6299      	str	r1, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
 8009f00:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr += 2U;
 8009f04:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    }
  }
}
 8009f0e:	4770      	bx	lr

08009f10 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f10:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009f14:	2b21      	cmp	r3, #33	; 0x21
{
 8009f16:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f18:	d10f      	bne.n	8009f3a <UART_TxISR_16BIT_FIFOEN+0x2a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f1a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8009f1e:	b162      	cbz	r2, 8009f3a <UART_TxISR_16BIT_FIFOEN+0x2a>
    {
      if (huart->TxXferCount == 0U)
 8009f20:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 8009f24:	6803      	ldr	r3, [r0, #0]
 8009f26:	b289      	uxth	r1, r1
 8009f28:	b941      	cbnz	r1, 8009f3c <UART_TxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009f30:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f38:	601a      	str	r2, [r3, #0]
      {
        /* Nothing to do */
      }
    }
  }
}
 8009f3a:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f3c:	69d9      	ldr	r1, [r3, #28]
 8009f3e:	0609      	lsls	r1, r1, #24
 8009f40:	d50c      	bpl.n	8009f5c <UART_TxISR_16BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009f42:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009f44:	f831 4b02 	ldrh.w	r4, [r1], #2
 8009f48:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8009f4c:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 8009f4e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 8009f52:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f5c:	3a01      	subs	r2, #1
 8009f5e:	b292      	uxth	r2, r2
 8009f60:	e7dd      	b.n	8009f1e <UART_TxISR_16BIT_FIFOEN+0xe>

08009f62 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f62:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009f66:	2b21      	cmp	r3, #33	; 0x21
{
 8009f68:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f6a:	d10f      	bne.n	8009f8c <UART_TxISR_8BIT_FIFOEN+0x2a>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f6c:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8009f70:	b162      	cbz	r2, 8009f8c <UART_TxISR_8BIT_FIFOEN+0x2a>
      if (huart->TxXferCount == 0U)
 8009f72:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 8009f76:	6803      	ldr	r3, [r0, #0]
 8009f78:	b289      	uxth	r1, r1
 8009f7a:	b941      	cbnz	r1, 8009f8e <UART_TxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009f82:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f8a:	601a      	str	r2, [r3, #0]
}
 8009f8c:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f8e:	69d9      	ldr	r1, [r3, #28]
 8009f90:	0609      	lsls	r1, r1, #24
 8009f92:	d50a      	bpl.n	8009faa <UART_TxISR_8BIT_FIFOEN+0x48>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009f94:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9a:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 8009f9c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 8009fa0:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009faa:	3a01      	subs	r2, #1
 8009fac:	b292      	uxth	r2, r2
 8009fae:	e7df      	b.n	8009f70 <UART_TxISR_8BIT_FIFOEN+0xe>

08009fb0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8009fb4:	2b20      	cmp	r3, #32
{
 8009fb6:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb8:	d146      	bne.n	800a048 <HAL_UART_Transmit_IT+0x98>
    if ((pData == NULL) || (Size == 0U))
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	d042      	beq.n	800a044 <HAL_UART_Transmit_IT+0x94>
 8009fbe:	2a00      	cmp	r2, #0
 8009fc0:	d040      	beq.n	800a044 <HAL_UART_Transmit_IT+0x94>
    __HAL_LOCK(huart);
 8009fc2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d03e      	beq.n	800a048 <HAL_UART_Transmit_IT+0x98>
 8009fca:	2301      	movs	r3, #1
    huart->TxXferCount = Size;
 8009fcc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxXferSize  = Size;
 8009fd0:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    __HAL_LOCK(huart);
 8009fd4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd8:	2300      	movs	r3, #0
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009fda:	6e42      	ldr	r2, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fdc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe0:	2321      	movs	r3, #33	; 0x21
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009fe2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    huart->pTxBuffPtr  = pData;
 8009fe6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009fec:	6802      	ldr	r2, [r0, #0]
 8009fee:	6883      	ldr	r3, [r0, #8]
 8009ff0:	d114      	bne.n	800a01c <HAL_UART_Transmit_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff6:	d10f      	bne.n	800a018 <HAL_UART_Transmit_IT+0x68>
 8009ff8:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009ffa:	4b14      	ldr	r3, [pc, #80]	; (800a04c <HAL_UART_Transmit_IT+0x9c>)
 8009ffc:	4914      	ldr	r1, [pc, #80]	; (800a050 <HAL_UART_Transmit_IT+0xa0>)
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	bf08      	it	eq
 800a002:	460b      	moveq	r3, r1
 800a004:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800a006:	2300      	movs	r3, #0
 800a008:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a00c:	6891      	ldr	r1, [r2, #8]
 800a00e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a012:	6091      	str	r1, [r2, #8]
    return HAL_OK;
 800a014:	4618      	mov	r0, r3
}
 800a016:	bd10      	pop	{r4, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <HAL_UART_Transmit_IT+0x9c>)
 800a01a:	e7f3      	b.n	800a004 <HAL_UART_Transmit_IT+0x54>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a020:	d10e      	bne.n	800a040 <HAL_UART_Transmit_IT+0x90>
 800a022:	6904      	ldr	r4, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT;
 800a024:	4b0b      	ldr	r3, [pc, #44]	; (800a054 <HAL_UART_Transmit_IT+0xa4>)
 800a026:	490c      	ldr	r1, [pc, #48]	; (800a058 <HAL_UART_Transmit_IT+0xa8>)
 800a028:	2c00      	cmp	r4, #0
 800a02a:	bf08      	it	eq
 800a02c:	460b      	moveq	r3, r1
 800a02e:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800a030:	2300      	movs	r3, #0
 800a032:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a036:	6811      	ldr	r1, [r2, #0]
 800a038:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a03c:	6011      	str	r1, [r2, #0]
 800a03e:	e7e9      	b.n	800a014 <HAL_UART_Transmit_IT+0x64>
        huart->TxISR = UART_TxISR_8BIT;
 800a040:	4b04      	ldr	r3, [pc, #16]	; (800a054 <HAL_UART_Transmit_IT+0xa4>)
 800a042:	e7f4      	b.n	800a02e <HAL_UART_Transmit_IT+0x7e>
      return HAL_ERROR;
 800a044:	2001      	movs	r0, #1
 800a046:	e7e6      	b.n	800a016 <HAL_UART_Transmit_IT+0x66>
    return HAL_BUSY;
 800a048:	2002      	movs	r0, #2
 800a04a:	e7e4      	b.n	800a016 <HAL_UART_Transmit_IT+0x66>
 800a04c:	08009f63 	.word	0x08009f63
 800a050:	08009f11 	.word	0x08009f11
 800a054:	08009e95 	.word	0x08009e95
 800a058:	08009ed1 	.word	0x08009ed1

0800a05c <HAL_UART_TxCpltCallback>:
 800a05c:	4770      	bx	lr

0800a05e <HAL_UART_ErrorCallback>:
 800a05e:	4770      	bx	lr

0800a060 <UART_DMAAbortOnError>:
{
 800a060:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a062:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a06a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800a06e:	f7ff fff6 	bl	800a05e <HAL_UART_ErrorCallback>
}
 800a072:	bd08      	pop	{r3, pc}

0800a074 <HAL_UARTEx_RxEventCallback>:
}
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a078:	6803      	ldr	r3, [r0, #0]
{
 800a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a07e:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800a080:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a084:	6819      	ldr	r1, [r3, #0]
{
 800a086:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a088:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a08a:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800a08c:	d10f      	bne.n	800a0ae <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a08e:	0696      	lsls	r6, r2, #26
 800a090:	f140 808b 	bpl.w	800a1aa <HAL_UART_IRQHandler+0x132>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a094:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a098:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 800a09c:	433e      	orrs	r6, r7
 800a09e:	f000 8084 	beq.w	800a1aa <HAL_UART_IRQHandler+0x132>
      if (huart->RxISR != NULL)
 800a0a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d079      	beq.n	800a19c <HAL_UART_IRQHandler+0x124>
}
 800a0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0ac:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0ae:	4e9f      	ldr	r6, [pc, #636]	; (800a32c <HAL_UART_IRQHandler+0x2b4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0b0:	489f      	ldr	r0, [pc, #636]	; (800a330 <HAL_UART_IRQHandler+0x2b8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0b2:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0b4:	4008      	ands	r0, r1
 800a0b6:	4330      	orrs	r0, r6
 800a0b8:	d077      	beq.n	800a1aa <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0ba:	07d7      	lsls	r7, r2, #31
 800a0bc:	d509      	bpl.n	800a0d2 <HAL_UART_IRQHandler+0x5a>
 800a0be:	05c8      	lsls	r0, r1, #23
 800a0c0:	d507      	bpl.n	800a0d2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a0ca:	f040 0001 	orr.w	r0, r0, #1
 800a0ce:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0d2:	0797      	lsls	r7, r2, #30
 800a0d4:	d509      	bpl.n	800a0ea <HAL_UART_IRQHandler+0x72>
 800a0d6:	07e8      	lsls	r0, r5, #31
 800a0d8:	d507      	bpl.n	800a0ea <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0da:	2002      	movs	r0, #2
 800a0dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a0e2:	f040 0004 	orr.w	r0, r0, #4
 800a0e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ea:	0757      	lsls	r7, r2, #29
 800a0ec:	d509      	bpl.n	800a102 <HAL_UART_IRQHandler+0x8a>
 800a0ee:	07e8      	lsls	r0, r5, #31
 800a0f0:	d507      	bpl.n	800a102 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0f2:	2004      	movs	r0, #4
 800a0f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a0fa:	f040 0002 	orr.w	r0, r0, #2
 800a0fe:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a102:	0717      	lsls	r7, r2, #28
 800a104:	d50b      	bpl.n	800a11e <HAL_UART_IRQHandler+0xa6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a106:	f001 0020 	and.w	r0, r1, #32
 800a10a:	4330      	orrs	r0, r6
 800a10c:	d007      	beq.n	800a11e <HAL_UART_IRQHandler+0xa6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a10e:	2008      	movs	r0, #8
 800a110:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a112:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a116:	f040 0008 	orr.w	r0, r0, #8
 800a11a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a11e:	0516      	lsls	r6, r2, #20
 800a120:	d50a      	bpl.n	800a138 <HAL_UART_IRQHandler+0xc0>
 800a122:	0148      	lsls	r0, r1, #5
 800a124:	d508      	bpl.n	800a138 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a126:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a12a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a12c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a130:	f043 0320 	orr.w	r3, r3, #32
 800a134:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a138:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a13c:	b373      	cbz	r3, 800a19c <HAL_UART_IRQHandler+0x124>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a13e:	0693      	lsls	r3, r2, #26
 800a140:	d50a      	bpl.n	800a158 <HAL_UART_IRQHandler+0xe0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a142:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a146:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800a14a:	ea51 0305 	orrs.w	r3, r1, r5
 800a14e:	d003      	beq.n	800a158 <HAL_UART_IRQHandler+0xe0>
        if (huart->RxISR != NULL)
 800a150:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a152:	b10b      	cbz	r3, 800a158 <HAL_UART_IRQHandler+0xe0>
          huart->RxISR(huart);
 800a154:	4620      	mov	r0, r4
 800a156:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a158:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800a15a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800a15c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a160:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a162:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16a:	431d      	orrs	r5, r3
 800a16c:	d018      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x128>
        UART_EndRxTransfer(huart);
 800a16e:	f7ff fe78 	bl	8009e62 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	0657      	lsls	r7, r2, #25
 800a178:	d50d      	bpl.n	800a196 <HAL_UART_IRQHandler+0x11e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a17a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800a17c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a17e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a182:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800a184:	b138      	cbz	r0, 800a196 <HAL_UART_IRQHandler+0x11e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a186:	4b6b      	ldr	r3, [pc, #428]	; (800a334 <HAL_UART_IRQHandler+0x2bc>)
 800a188:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a18a:	f7fb ffd9 	bl	8006140 <HAL_DMA_Abort_IT>
 800a18e:	b128      	cbz	r0, 800a19c <HAL_UART_IRQHandler+0x124>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a190:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a192:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a194:	e788      	b.n	800a0a8 <HAL_UART_IRQHandler+0x30>
            HAL_UART_ErrorCallback(huart);
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff ff61 	bl	800a05e <HAL_UART_ErrorCallback>
}
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800a1a0:	f7ff ff5d 	bl	800a05e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800a1a8:	e7f8      	b.n	800a19c <HAL_UART_IRQHandler+0x124>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1aa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a1ac:	2801      	cmp	r0, #1
 800a1ae:	d17e      	bne.n	800a2ae <HAL_UART_IRQHandler+0x236>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1b0:	06d6      	lsls	r6, r2, #27
 800a1b2:	d57c      	bpl.n	800a2ae <HAL_UART_IRQHandler+0x236>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1b4:	06c8      	lsls	r0, r1, #27
 800a1b6:	d57a      	bpl.n	800a2ae <HAL_UART_IRQHandler+0x236>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800a1c2:	d052      	beq.n	800a26a <HAL_UART_IRQHandler+0x1f2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1c4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a1c6:	495c      	ldr	r1, [pc, #368]	; (800a338 <HAL_UART_IRQHandler+0x2c0>)
 800a1c8:	6802      	ldr	r2, [r0, #0]
 800a1ca:	428a      	cmp	r2, r1
 800a1cc:	d01e      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1ce:	3118      	adds	r1, #24
 800a1d0:	428a      	cmp	r2, r1
 800a1d2:	d01b      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1d4:	3118      	adds	r1, #24
 800a1d6:	428a      	cmp	r2, r1
 800a1d8:	d018      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1da:	3118      	adds	r1, #24
 800a1dc:	428a      	cmp	r2, r1
 800a1de:	d015      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1e0:	3118      	adds	r1, #24
 800a1e2:	428a      	cmp	r2, r1
 800a1e4:	d012      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1e6:	3118      	adds	r1, #24
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	d00f      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1ec:	3118      	adds	r1, #24
 800a1ee:	428a      	cmp	r2, r1
 800a1f0:	d00c      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1f2:	3118      	adds	r1, #24
 800a1f4:	428a      	cmp	r2, r1
 800a1f6:	d009      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a1f8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a1fc:	428a      	cmp	r2, r1
 800a1fe:	d005      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a200:	3118      	adds	r1, #24
 800a202:	428a      	cmp	r2, r1
 800a204:	d002      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a206:	3118      	adds	r1, #24
 800a208:	428a      	cmp	r2, r1
 800a20a:	d0ff      	beq.n	800a20c <HAL_UART_IRQHandler+0x194>
 800a20c:	6852      	ldr	r2, [r2, #4]
 800a20e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a210:	2a00      	cmp	r2, #0
 800a212:	d0c3      	beq.n	800a19c <HAL_UART_IRQHandler+0x124>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a214:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a218:	4291      	cmp	r1, r2
 800a21a:	d9bf      	bls.n	800a19c <HAL_UART_IRQHandler+0x124>
        huart->RxXferCount = nb_remaining_rx_data;
 800a21c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a220:	69c2      	ldr	r2, [r0, #28]
 800a222:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a226:	d016      	beq.n	800a256 <HAL_UART_IRQHandler+0x1de>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a22e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a23e:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800a240:	2220      	movs	r2, #32
 800a242:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a246:	2200      	movs	r2, #0
 800a248:	66e2      	str	r2, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f022 0210 	bic.w	r2, r2, #16
 800a250:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a252:	f7fb fdcd 	bl	8005df0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a256:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a25a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a25e:	1ac9      	subs	r1, r1, r3
 800a260:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff ff06 	bl	800a074 <HAL_UARTEx_RxEventCallback>
 800a268:	e798      	b.n	800a19c <HAL_UART_IRQHandler+0x124>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a26a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800a26e:	b288      	uxth	r0, r1
      if ((huart->RxXferCount > 0U)
 800a270:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800a274:	b289      	uxth	r1, r1
 800a276:	2900      	cmp	r1, #0
 800a278:	d090      	beq.n	800a19c <HAL_UART_IRQHandler+0x124>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a27a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a27e:	1a09      	subs	r1, r1, r0
 800a280:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a282:	2900      	cmp	r1, #0
 800a284:	d08a      	beq.n	800a19c <HAL_UART_IRQHandler+0x124>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800a28c:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a28e:	6898      	ldr	r0, [r3, #8]
 800a290:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 800a294:	f020 0001 	bic.w	r0, r0, #1
 800a298:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 800a29c:	6722      	str	r2, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800a29e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	66e2      	str	r2, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	f022 0210 	bic.w	r2, r2, #16
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e7d9      	b.n	800a262 <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2ae:	02d7      	lsls	r7, r2, #11
 800a2b0:	d509      	bpl.n	800a2c6 <HAL_UART_IRQHandler+0x24e>
 800a2b2:	026e      	lsls	r6, r5, #9
 800a2b4:	d507      	bpl.n	800a2c6 <HAL_UART_IRQHandler+0x24e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a2ba:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2bc:	621a      	str	r2, [r3, #32]
}
 800a2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800a2c2:	f000 bd6f 	b.w	800ada4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2c6:	0610      	lsls	r0, r2, #24
 800a2c8:	d50b      	bpl.n	800a2e2 <HAL_UART_IRQHandler+0x26a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a2ca:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a2ce:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 800a2d2:	4328      	orrs	r0, r5
 800a2d4:	d005      	beq.n	800a2e2 <HAL_UART_IRQHandler+0x26a>
    if (huart->TxISR != NULL)
 800a2d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f43f af5f 	beq.w	800a19c <HAL_UART_IRQHandler+0x124>
      huart->TxISR(huart);
 800a2de:	4620      	mov	r0, r4
 800a2e0:	e6e2      	b.n	800a0a8 <HAL_UART_IRQHandler+0x30>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2e2:	0657      	lsls	r7, r2, #25
 800a2e4:	d50e      	bpl.n	800a304 <HAL_UART_IRQHandler+0x28c>
 800a2e6:	064e      	lsls	r6, r1, #25
 800a2e8:	d50c      	bpl.n	800a304 <HAL_UART_IRQHandler+0x28c>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2ea:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2ec:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2f2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a2f4:	2320      	movs	r3, #32
 800a2f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800a2fe:	f7ff fead 	bl	800a05c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a302:	e74b      	b.n	800a19c <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a304:	0215      	lsls	r5, r2, #8
 800a306:	d506      	bpl.n	800a316 <HAL_UART_IRQHandler+0x29e>
 800a308:	0048      	lsls	r0, r1, #1
 800a30a:	d504      	bpl.n	800a316 <HAL_UART_IRQHandler+0x29e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a30c:	4620      	mov	r0, r4
}
 800a30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a312:	f000 bd49 	b.w	800ada8 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a316:	01d3      	lsls	r3, r2, #7
 800a318:	f57f af40 	bpl.w	800a19c <HAL_UART_IRQHandler+0x124>
 800a31c:	2900      	cmp	r1, #0
 800a31e:	f6bf af3d 	bge.w	800a19c <HAL_UART_IRQHandler+0x124>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a322:	4620      	mov	r0, r4
}
 800a324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a328:	f000 bd3d 	b.w	800ada6 <HAL_UARTEx_RxFifoFullCallback>
 800a32c:	10000001 	.word	0x10000001
 800a330:	04000120 	.word	0x04000120
 800a334:	0800a061 	.word	0x0800a061
 800a338:	40020010 	.word	0x40020010

0800a33c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a33c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a340:	6803      	ldr	r3, [r0, #0]
 800a342:	2a22      	cmp	r2, #34	; 0x22
{
 800a344:	b510      	push	{r4, lr}
 800a346:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a348:	d130      	bne.n	800a3ac <UART_RxISR_8BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a34c:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
 800a350:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a352:	400b      	ands	r3, r1
 800a354:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800a356:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a358:	3301      	adds	r3, #1
 800a35a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a35c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a360:	3b01      	subs	r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a368:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800a36c:	b292      	uxth	r2, r2
 800a36e:	b9ca      	cbnz	r2, 800a3a4 <UART_RxISR_8BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a370:	6803      	ldr	r3, [r0, #0]
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800a378:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37a:	6899      	ldr	r1, [r3, #8]
 800a37c:	f021 0101 	bic.w	r1, r1, #1
 800a380:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a382:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a384:	6702      	str	r2, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 800a386:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a38c:	2a01      	cmp	r2, #1
 800a38e:	d10a      	bne.n	800a3a6 <UART_RxISR_8BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a390:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a392:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a396:	f022 0210 	bic.w	r2, r2, #16
 800a39a:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a39c:	f7ff fe6a 	bl	800a074 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3a4:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800a3a6:	f7f6 fdf9 	bl	8000f9c <HAL_UART_RxCpltCallback>
 800a3aa:	e7f9      	b.n	800a3a0 <UART_RxISR_8BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	f042 0208 	orr.w	r2, r2, #8
 800a3b2:	619a      	str	r2, [r3, #24]
}
 800a3b4:	e7f6      	b.n	800a3a4 <UART_RxISR_8BIT+0x68>

0800a3b6 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3b6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	2a22      	cmp	r2, #34	; 0x22
{
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3c2:	d12e      	bne.n	800a422 <UART_RxISR_16BIT+0x6c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3c6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800a3ca:	4011      	ands	r1, r2
 800a3cc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a3ce:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800a3d2:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a3d4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800a3d8:	3a01      	subs	r2, #1
 800a3da:	b292      	uxth	r2, r2
 800a3dc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a3e0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	b9c2      	cbnz	r2, 800a41a <UART_RxISR_16BIT+0x64>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3e8:	6819      	ldr	r1, [r3, #0]
 800a3ea:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800a3ee:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f0:	6899      	ldr	r1, [r3, #8]
 800a3f2:	f021 0101 	bic.w	r1, r1, #1
 800a3f6:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3f8:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3fa:	6702      	str	r2, [r0, #112]	; 0x70
      huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a400:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a402:	2a01      	cmp	r2, #1
 800a404:	d10a      	bne.n	800a41c <UART_RxISR_16BIT+0x66>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a406:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a408:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a40c:	f022 0210 	bic.w	r2, r2, #16
 800a410:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a412:	f7ff fe2f 	bl	800a074 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a416:	2300      	movs	r3, #0
 800a418:	66e3      	str	r3, [r4, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a41a:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800a41c:	f7f6 fdbe 	bl	8000f9c <HAL_UART_RxCpltCallback>
 800a420:	e7f9      	b.n	800a416 <UART_RxISR_16BIT+0x60>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a422:	699a      	ldr	r2, [r3, #24]
 800a424:	f042 0208 	orr.w	r2, r2, #8
 800a428:	619a      	str	r2, [r3, #24]
}
 800a42a:	e7f6      	b.n	800a41a <UART_RxISR_16BIT+0x64>

0800a42c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a430:	6803      	ldr	r3, [r0, #0]
{
 800a432:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a434:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a436:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a43a:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a43c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a440:	2a22      	cmp	r2, #34	; 0x22
 800a442:	f040 8085 	bne.w	800a550 <UART_RxISR_8BIT_FIFOEN+0x124>
  uint16_t  uhMask = huart->Mask;
 800a446:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a44a:	2700      	movs	r7, #0
    nb_rx_data = huart->NbRxDataToProcess;
 800a44c:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a450:	f006 0601 	and.w	r6, r6, #1
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a454:	f8df b108 	ldr.w	fp, [pc, #264]	; 800a560 <UART_RxISR_8BIT_FIFOEN+0x134>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a458:	f1ba 0f00 	cmp.w	sl, #0
 800a45c:	d001      	beq.n	800a462 <UART_RxISR_8BIT_FIFOEN+0x36>
 800a45e:	06ab      	lsls	r3, r5, #26
 800a460:	d414      	bmi.n	800a48c <UART_RxISR_8BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a462:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a466:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a468:	b173      	cbz	r3, 800a488 <UART_RxISR_8BIT_FIFOEN+0x5c>
 800a46a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800a46e:	429a      	cmp	r2, r3
 800a470:	d90a      	bls.n	800a488 <UART_RxISR_8BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	689a      	ldr	r2, [r3, #8]
 800a476:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a47a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a47c:	4a37      	ldr	r2, [pc, #220]	; (800a55c <UART_RxISR_8BIT_FIFOEN+0x130>)
 800a47e:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	f042 0220 	orr.w	r2, r2, #32
 800a486:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a48c:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a48e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a492:	ea03 0308 	and.w	r3, r3, r8
 800a496:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800a498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a49a:	3301      	adds	r3, #1
 800a49c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a49e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a4ae:	076a      	lsls	r2, r5, #29
 800a4b0:	d02a      	beq.n	800a508 <UART_RxISR_8BIT_FIFOEN+0xdc>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4b2:	07e8      	lsls	r0, r5, #31
 800a4b4:	d50a      	bpl.n	800a4cc <UART_RxISR_8BIT_FIFOEN+0xa0>
 800a4b6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a4ba:	d007      	beq.n	800a4cc <UART_RxISR_8BIT_FIFOEN+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4bc:	2201      	movs	r2, #1
 800a4be:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a4c4:	f042 0201 	orr.w	r2, r2, #1
 800a4c8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4cc:	07a9      	lsls	r1, r5, #30
 800a4ce:	d508      	bpl.n	800a4e2 <UART_RxISR_8BIT_FIFOEN+0xb6>
 800a4d0:	b13e      	cbz	r6, 800a4e2 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4d6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a4da:	f042 0204 	orr.w	r2, r2, #4
 800a4de:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4e2:	076a      	lsls	r2, r5, #29
 800a4e4:	d508      	bpl.n	800a4f8 <UART_RxISR_8BIT_FIFOEN+0xcc>
 800a4e6:	b13e      	cbz	r6, 800a4f8 <UART_RxISR_8BIT_FIFOEN+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a4f0:	f043 0302 	orr.w	r3, r3, #2
 800a4f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a4fc:	b123      	cbz	r3, 800a508 <UART_RxISR_8BIT_FIFOEN+0xdc>
          HAL_UART_ErrorCallback(huart);
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7ff fdad 	bl	800a05e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800a508:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800a50c:	b292      	uxth	r2, r2
 800a50e:	2a00      	cmp	r2, #0
 800a510:	d1a2      	bne.n	800a458 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	6819      	ldr	r1, [r3, #0]
 800a516:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a51a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a51c:	6899      	ldr	r1, [r3, #8]
 800a51e:	ea01 010b 	and.w	r1, r1, fp
 800a522:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a524:	2120      	movs	r1, #32
        huart->RxISR = NULL;
 800a526:	6722      	str	r2, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800a528:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a52e:	2a01      	cmp	r2, #1
 800a530:	d10a      	bne.n	800a548 <UART_RxISR_8BIT_FIFOEN+0x11c>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a532:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a534:	4620      	mov	r0, r4
 800a536:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a53a:	f022 0210 	bic.w	r2, r2, #16
 800a53e:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a540:	f7ff fd98 	bl	800a074 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a544:	66e7      	str	r7, [r4, #108]	; 0x6c
 800a546:	e787      	b.n	800a458 <UART_RxISR_8BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800a548:	4620      	mov	r0, r4
 800a54a:	f7f6 fd27 	bl	8000f9c <HAL_UART_RxCpltCallback>
 800a54e:	e7f9      	b.n	800a544 <UART_RxISR_8BIT_FIFOEN+0x118>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	f042 0208 	orr.w	r2, r2, #8
 800a556:	619a      	str	r2, [r3, #24]
}
 800a558:	e796      	b.n	800a488 <UART_RxISR_8BIT_FIFOEN+0x5c>
 800a55a:	bf00      	nop
 800a55c:	0800a33d 	.word	0x0800a33d
 800a560:	effffffe 	.word	0xeffffffe

0800a564 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a568:	6803      	ldr	r3, [r0, #0]
{
 800a56a:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a56c:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a56e:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a572:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a574:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a578:	2a22      	cmp	r2, #34	; 0x22
 800a57a:	f040 8083 	bne.w	800a684 <UART_RxISR_16BIT_FIFOEN+0x120>
  uint16_t  uhMask = huart->Mask;
 800a57e:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a582:	2700      	movs	r7, #0
    nb_rx_data = huart->NbRxDataToProcess;
 800a584:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a588:	f006 0601 	and.w	r6, r6, #1
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a58c:	f8df b104 	ldr.w	fp, [pc, #260]	; 800a694 <UART_RxISR_16BIT_FIFOEN+0x130>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a590:	f1ba 0f00 	cmp.w	sl, #0
 800a594:	d001      	beq.n	800a59a <UART_RxISR_16BIT_FIFOEN+0x36>
 800a596:	06ab      	lsls	r3, r5, #26
 800a598:	d414      	bmi.n	800a5c4 <UART_RxISR_16BIT_FIFOEN+0x60>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a59a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a59e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5a0:	b173      	cbz	r3, 800a5c0 <UART_RxISR_16BIT_FIFOEN+0x5c>
 800a5a2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d90a      	bls.n	800a5c0 <UART_RxISR_16BIT_FIFOEN+0x5c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5b2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a5b4:	4a36      	ldr	r2, [pc, #216]	; (800a690 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 800a5b6:	6722      	str	r2, [r4, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	f042 0220 	orr.w	r2, r2, #32
 800a5be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5c4:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a5c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a5ca:	ea08 0101 	and.w	r1, r8, r1
 800a5ce:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800a5d2:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a5d4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800a5d8:	3a01      	subs	r2, #1
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a5e0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a5e2:	076a      	lsls	r2, r5, #29
 800a5e4:	d02a      	beq.n	800a63c <UART_RxISR_16BIT_FIFOEN+0xd8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5e6:	07e8      	lsls	r0, r5, #31
 800a5e8:	d50a      	bpl.n	800a600 <UART_RxISR_16BIT_FIFOEN+0x9c>
 800a5ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a5ee:	d007      	beq.n	800a600 <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a5f8:	f042 0201 	orr.w	r2, r2, #1
 800a5fc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a600:	07a9      	lsls	r1, r5, #30
 800a602:	d508      	bpl.n	800a616 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a604:	b13e      	cbz	r6, 800a616 <UART_RxISR_16BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a606:	2202      	movs	r2, #2
 800a608:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a60a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a60e:	f042 0204 	orr.w	r2, r2, #4
 800a612:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a616:	076a      	lsls	r2, r5, #29
 800a618:	d508      	bpl.n	800a62c <UART_RxISR_16BIT_FIFOEN+0xc8>
 800a61a:	b13e      	cbz	r6, 800a62c <UART_RxISR_16BIT_FIFOEN+0xc8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a61c:	2204      	movs	r2, #4
 800a61e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a620:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a624:	f043 0302 	orr.w	r3, r3, #2
 800a628:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a62c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a630:	b123      	cbz	r3, 800a63c <UART_RxISR_16BIT_FIFOEN+0xd8>
          HAL_UART_ErrorCallback(huart);
 800a632:	4620      	mov	r0, r4
 800a634:	f7ff fd13 	bl	800a05e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a638:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800a63c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800a640:	b292      	uxth	r2, r2
 800a642:	2a00      	cmp	r2, #0
 800a644:	d1a4      	bne.n	800a590 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	6819      	ldr	r1, [r3, #0]
 800a64a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a64e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a650:	6899      	ldr	r1, [r3, #8]
 800a652:	ea01 010b 	and.w	r1, r1, fp
 800a656:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a658:	2120      	movs	r1, #32
        huart->RxISR = NULL;
 800a65a:	6722      	str	r2, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800a65c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a660:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a662:	2a01      	cmp	r2, #1
 800a664:	d10a      	bne.n	800a67c <UART_RxISR_16BIT_FIFOEN+0x118>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a666:	681a      	ldr	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a668:	4620      	mov	r0, r4
 800a66a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66e:	f022 0210 	bic.w	r2, r2, #16
 800a672:	601a      	str	r2, [r3, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a674:	f7ff fcfe 	bl	800a074 <HAL_UARTEx_RxEventCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a678:	66e7      	str	r7, [r4, #108]	; 0x6c
 800a67a:	e789      	b.n	800a590 <UART_RxISR_16BIT_FIFOEN+0x2c>
          HAL_UART_RxCpltCallback(huart);
 800a67c:	4620      	mov	r0, r4
 800a67e:	f7f6 fc8d 	bl	8000f9c <HAL_UART_RxCpltCallback>
 800a682:	e7f9      	b.n	800a678 <UART_RxISR_16BIT_FIFOEN+0x114>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a684:	699a      	ldr	r2, [r3, #24]
 800a686:	f042 0208 	orr.w	r2, r2, #8
 800a68a:	619a      	str	r2, [r3, #24]
}
 800a68c:	e798      	b.n	800a5c0 <UART_RxISR_16BIT_FIFOEN+0x5c>
 800a68e:	bf00      	nop
 800a690:	0800a3b7 	.word	0x0800a3b7
 800a694:	effffffe 	.word	0xeffffffe

0800a698 <UART_SetConfig>:
{
 800a698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a69c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a69e:	69c0      	ldr	r0, [r0, #28]
{
 800a6a0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6a2:	6921      	ldr	r1, [r4, #16]
 800a6a4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6a6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	6961      	ldr	r1, [r4, #20]
 800a6ac:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6ae:	49a4      	ldr	r1, [pc, #656]	; (800a940 <UART_SetConfig+0x2a8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6b0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6b2:	4029      	ands	r1, r5
 800a6b4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6b6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a6c0:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6c2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6c6:	4a9f      	ldr	r2, [pc, #636]	; (800a944 <UART_SetConfig+0x2ac>)
 800a6c8:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800a6ca:	bf1c      	itt	ne
 800a6cc:	6a22      	ldrne	r2, [r4, #32]
 800a6ce:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800a6d6:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800a6da:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6de:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	f022 020f 	bic.w	r2, r2, #15
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6ea:	4a97      	ldr	r2, [pc, #604]	; (800a948 <UART_SetConfig+0x2b0>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d11b      	bne.n	800a728 <UART_SetConfig+0x90>
 800a6f0:	4b96      	ldr	r3, [pc, #600]	; (800a94c <UART_SetConfig+0x2b4>)
 800a6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6f8:	2b28      	cmp	r3, #40	; 0x28
 800a6fa:	d86c      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a6fc:	4a94      	ldr	r2, [pc, #592]	; (800a950 <UART_SetConfig+0x2b8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a702:	5cd3      	ldrb	r3, [r2, r3]
 800a704:	f040 8102 	bne.w	800a90c <UART_SetConfig+0x274>
    switch (clocksource)
 800a708:	2b08      	cmp	r3, #8
 800a70a:	f200 80bf 	bhi.w	800a88c <UART_SetConfig+0x1f4>
 800a70e:	2b08      	cmp	r3, #8
 800a710:	d861      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a712:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a716:	00e7      	.short	0x00e7
 800a718:	006000ec 	.word	0x006000ec
 800a71c:	00ef0060 	.word	0x00ef0060
 800a720:	00600060 	.word	0x00600060
 800a724:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a728:	4a8a      	ldr	r2, [pc, #552]	; (800a954 <UART_SetConfig+0x2bc>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d107      	bne.n	800a73e <UART_SetConfig+0xa6>
 800a72e:	4b87      	ldr	r3, [pc, #540]	; (800a94c <UART_SetConfig+0x2b4>)
 800a730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	2b05      	cmp	r3, #5
 800a738:	d84d      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a73a:	4a87      	ldr	r2, [pc, #540]	; (800a958 <UART_SetConfig+0x2c0>)
 800a73c:	e7df      	b.n	800a6fe <UART_SetConfig+0x66>
 800a73e:	4a87      	ldr	r2, [pc, #540]	; (800a95c <UART_SetConfig+0x2c4>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d107      	bne.n	800a754 <UART_SetConfig+0xbc>
 800a744:	4b81      	ldr	r3, [pc, #516]	; (800a94c <UART_SetConfig+0x2b4>)
 800a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	2b05      	cmp	r3, #5
 800a74e:	d842      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a750:	4a83      	ldr	r2, [pc, #524]	; (800a960 <UART_SetConfig+0x2c8>)
 800a752:	e7d4      	b.n	800a6fe <UART_SetConfig+0x66>
 800a754:	4a83      	ldr	r2, [pc, #524]	; (800a964 <UART_SetConfig+0x2cc>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d107      	bne.n	800a76a <UART_SetConfig+0xd2>
 800a75a:	4b7c      	ldr	r3, [pc, #496]	; (800a94c <UART_SetConfig+0x2b4>)
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	2b05      	cmp	r3, #5
 800a764:	d837      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a766:	4a80      	ldr	r2, [pc, #512]	; (800a968 <UART_SetConfig+0x2d0>)
 800a768:	e7c9      	b.n	800a6fe <UART_SetConfig+0x66>
 800a76a:	4a80      	ldr	r2, [pc, #512]	; (800a96c <UART_SetConfig+0x2d4>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d107      	bne.n	800a780 <UART_SetConfig+0xe8>
 800a770:	4b76      	ldr	r3, [pc, #472]	; (800a94c <UART_SetConfig+0x2b4>)
 800a772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	2b05      	cmp	r3, #5
 800a77a:	d82c      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a77c:	4a7c      	ldr	r2, [pc, #496]	; (800a970 <UART_SetConfig+0x2d8>)
 800a77e:	e7be      	b.n	800a6fe <UART_SetConfig+0x66>
 800a780:	4a7c      	ldr	r2, [pc, #496]	; (800a974 <UART_SetConfig+0x2dc>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d107      	bne.n	800a796 <UART_SetConfig+0xfe>
 800a786:	4b71      	ldr	r3, [pc, #452]	; (800a94c <UART_SetConfig+0x2b4>)
 800a788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a78e:	2b28      	cmp	r3, #40	; 0x28
 800a790:	d821      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a792:	4a79      	ldr	r2, [pc, #484]	; (800a978 <UART_SetConfig+0x2e0>)
 800a794:	e7b3      	b.n	800a6fe <UART_SetConfig+0x66>
 800a796:	4a79      	ldr	r2, [pc, #484]	; (800a97c <UART_SetConfig+0x2e4>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d107      	bne.n	800a7ac <UART_SetConfig+0x114>
 800a79c:	4b6b      	ldr	r3, [pc, #428]	; (800a94c <UART_SetConfig+0x2b4>)
 800a79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a0:	f003 0307 	and.w	r3, r3, #7
 800a7a4:	2b05      	cmp	r3, #5
 800a7a6:	d816      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a7a8:	4a75      	ldr	r2, [pc, #468]	; (800a980 <UART_SetConfig+0x2e8>)
 800a7aa:	e7a8      	b.n	800a6fe <UART_SetConfig+0x66>
 800a7ac:	4a75      	ldr	r2, [pc, #468]	; (800a984 <UART_SetConfig+0x2ec>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d107      	bne.n	800a7c2 <UART_SetConfig+0x12a>
 800a7b2:	4b66      	ldr	r3, [pc, #408]	; (800a94c <UART_SetConfig+0x2b4>)
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d80b      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a7be:	4a72      	ldr	r2, [pc, #456]	; (800a988 <UART_SetConfig+0x2f0>)
 800a7c0:	e79d      	b.n	800a6fe <UART_SetConfig+0x66>
 800a7c2:	4a60      	ldr	r2, [pc, #384]	; (800a944 <UART_SetConfig+0x2ac>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d106      	bne.n	800a7d6 <UART_SetConfig+0x13e>
 800a7c8:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 800a7cc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d901      	bls.n	800a7da <UART_SetConfig+0x142>
    switch (clocksource)
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	e00e      	b.n	800a7f8 <UART_SetConfig+0x160>
 800a7da:	496c      	ldr	r1, [pc, #432]	; (800a98c <UART_SetConfig+0x2f4>)
 800a7dc:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 800a7de:	2b10      	cmp	r3, #16
 800a7e0:	d023      	beq.n	800a82a <UART_SetConfig+0x192>
 800a7e2:	d811      	bhi.n	800a808 <UART_SetConfig+0x170>
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d016      	beq.n	800a816 <UART_SetConfig+0x17e>
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d019      	beq.n	800a820 <UART_SetConfig+0x188>
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d1f2      	bne.n	800a7d6 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7f0:	f7fe ffaa 	bl	8009748 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800a7f4:	bb10      	cbnz	r0, 800a83c <UART_SetConfig+0x1a4>
 800a7f6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800a7f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800a7fc:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a7fe:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800a800:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 800a804:	b007      	add	sp, #28
 800a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (clocksource)
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d03d      	beq.n	800a888 <UART_SetConfig+0x1f0>
 800a80c:	2b40      	cmp	r3, #64	; 0x40
 800a80e:	d1e2      	bne.n	800a7d6 <UART_SetConfig+0x13e>
 800a810:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a814:	e012      	b.n	800a83c <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a816:	4668      	mov	r0, sp
 800a818:	f7fe ffa8 	bl	800976c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a81c:	9801      	ldr	r0, [sp, #4]
        break;
 800a81e:	e7e9      	b.n	800a7f4 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a820:	a803      	add	r0, sp, #12
 800a822:	f7ff f84b 	bl	80098bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a826:	9804      	ldr	r0, [sp, #16]
        break;
 800a828:	e7e4      	b.n	800a7f4 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a82a:	6813      	ldr	r3, [r2, #0]
 800a82c:	4858      	ldr	r0, [pc, #352]	; (800a990 <UART_SetConfig+0x2f8>)
 800a82e:	f013 0f20 	tst.w	r3, #32
 800a832:	d003      	beq.n	800a83c <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a834:	6813      	ldr	r3, [r2, #0]
 800a836:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a83a:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a83c:	4b55      	ldr	r3, [pc, #340]	; (800a994 <UART_SetConfig+0x2fc>)
 800a83e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a840:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a842:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a846:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a84a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a84e:	4299      	cmp	r1, r3
 800a850:	d8c1      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
 800a852:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a856:	d8be      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a858:	2300      	movs	r3, #0
 800a85a:	2100      	movs	r1, #0
 800a85c:	f7f5 fd90 	bl	8000380 <__aeabi_uldivmod>
 800a860:	462a      	mov	r2, r5
 800a862:	020f      	lsls	r7, r1, #8
 800a864:	2300      	movs	r3, #0
 800a866:	0206      	lsls	r6, r0, #8
 800a868:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800a86c:	0868      	lsrs	r0, r5, #1
 800a86e:	1830      	adds	r0, r6, r0
 800a870:	f147 0100 	adc.w	r1, r7, #0
 800a874:	f7f5 fd84 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a878:	4b47      	ldr	r3, [pc, #284]	; (800a998 <UART_SetConfig+0x300>)
 800a87a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a87e:	429a      	cmp	r2, r3
 800a880:	d8a9      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
          huart->Instance->BRR = usartdiv;
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	60d8      	str	r0, [r3, #12]
 800a886:	e7b6      	b.n	800a7f6 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 800a888:	4844      	ldr	r0, [pc, #272]	; (800a99c <UART_SetConfig+0x304>)
 800a88a:	e7d7      	b.n	800a83c <UART_SetConfig+0x1a4>
    switch (clocksource)
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	d03b      	beq.n	800a908 <UART_SetConfig+0x270>
 800a890:	2b40      	cmp	r3, #64	; 0x40
 800a892:	d00b      	beq.n	800a8ac <UART_SetConfig+0x214>
 800a894:	2b10      	cmp	r3, #16
 800a896:	d19e      	bne.n	800a7d6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a898:	4b2c      	ldr	r3, [pc, #176]	; (800a94c <UART_SetConfig+0x2b4>)
 800a89a:	483d      	ldr	r0, [pc, #244]	; (800a990 <UART_SetConfig+0x2f8>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	f012 0f20 	tst.w	r2, #32
 800a8a2:	d003      	beq.n	800a8ac <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a8aa:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8ae:	4b39      	ldr	r3, [pc, #228]	; (800a994 <UART_SetConfig+0x2fc>)
 800a8b0:	6862      	ldr	r2, [r4, #4]
 800a8b2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a8b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a8ba:	0850      	lsrs	r0, r2, #1
 800a8bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a8c0:	fbb0 f0f2 	udiv	r0, r0, r2
 800a8c4:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a8ca:	f1a3 0110 	sub.w	r1, r3, #16
 800a8ce:	4291      	cmp	r1, r2
 800a8d0:	d881      	bhi.n	800a7d6 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8d2:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a8da:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8dc:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800a8de:	4318      	orrs	r0, r3
 800a8e0:	60d0      	str	r0, [r2, #12]
 800a8e2:	e788      	b.n	800a7f6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8e4:	f7fe f91e 	bl	8008b24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d084      	beq.n	800a7f6 <UART_SetConfig+0x15e>
 800a8ec:	e7de      	b.n	800a8ac <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ee:	f7fe f92b 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
        break;
 800a8f2:	e7f9      	b.n	800a8e8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f4:	4668      	mov	r0, sp
 800a8f6:	f7fe ff39 	bl	800976c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8fa:	9801      	ldr	r0, [sp, #4]
        break;
 800a8fc:	e7f4      	b.n	800a8e8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8fe:	a803      	add	r0, sp, #12
 800a900:	f7fe ffdc 	bl	80098bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a904:	9804      	ldr	r0, [sp, #16]
        break;
 800a906:	e7ef      	b.n	800a8e8 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 800a908:	4824      	ldr	r0, [pc, #144]	; (800a99c <UART_SetConfig+0x304>)
 800a90a:	e7cf      	b.n	800a8ac <UART_SetConfig+0x214>
    switch (clocksource)
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d847      	bhi.n	800a9a0 <UART_SetConfig+0x308>
 800a910:	2b08      	cmp	r3, #8
 800a912:	f63f af60 	bhi.w	800a7d6 <UART_SetConfig+0x13e>
 800a916:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <UART_SetConfig+0x284>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a9f1 	.word	0x0800a9f1
 800a920:	0800a9fd 	.word	0x0800a9fd
 800a924:	0800a7d7 	.word	0x0800a7d7
 800a928:	0800a7d7 	.word	0x0800a7d7
 800a92c:	0800aa03 	.word	0x0800aa03
 800a930:	0800a7d7 	.word	0x0800a7d7
 800a934:	0800a7d7 	.word	0x0800a7d7
 800a938:	0800a7d7 	.word	0x0800a7d7
 800a93c:	0800aa0d 	.word	0x0800aa0d
 800a940:	cfff69f3 	.word	0xcfff69f3
 800a944:	58000c00 	.word	0x58000c00
 800a948:	40011000 	.word	0x40011000
 800a94c:	58024400 	.word	0x58024400
 800a950:	08021d88 	.word	0x08021d88
 800a954:	40004400 	.word	0x40004400
 800a958:	08021db1 	.word	0x08021db1
 800a95c:	40004800 	.word	0x40004800
 800a960:	08021db1 	.word	0x08021db1
 800a964:	40004c00 	.word	0x40004c00
 800a968:	08021db1 	.word	0x08021db1
 800a96c:	40005000 	.word	0x40005000
 800a970:	08021db1 	.word	0x08021db1
 800a974:	40011400 	.word	0x40011400
 800a978:	08021d88 	.word	0x08021d88
 800a97c:	40007800 	.word	0x40007800
 800a980:	08021db1 	.word	0x08021db1
 800a984:	40007c00 	.word	0x40007c00
 800a988:	08021db1 	.word	0x08021db1
 800a98c:	08021db7 	.word	0x08021db7
 800a990:	03d09000 	.word	0x03d09000
 800a994:	08021dbe 	.word	0x08021dbe
 800a998:	000ffcff 	.word	0x000ffcff
 800a99c:	003d0900 	.word	0x003d0900
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d038      	beq.n	800aa16 <UART_SetConfig+0x37e>
 800a9a4:	2b40      	cmp	r3, #64	; 0x40
 800a9a6:	d038      	beq.n	800aa1a <UART_SetConfig+0x382>
 800a9a8:	2b10      	cmp	r3, #16
 800a9aa:	f47f af14 	bne.w	800a7d6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ae:	4a1d      	ldr	r2, [pc, #116]	; (800aa24 <UART_SetConfig+0x38c>)
 800a9b0:	6813      	ldr	r3, [r2, #0]
 800a9b2:	f013 0f20 	tst.w	r3, #32
 800a9b6:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <UART_SetConfig+0x390>)
 800a9b8:	d032      	beq.n	800aa20 <UART_SetConfig+0x388>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9ba:	6810      	ldr	r0, [r2, #0]
 800a9bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a9c0:	fa23 f000 	lsr.w	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9c6:	4b19      	ldr	r3, [pc, #100]	; (800aa2c <UART_SetConfig+0x394>)
 800a9c8:	6862      	ldr	r2, [r4, #4]
 800a9ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a9ce:	fbb0 f3f3 	udiv	r3, r0, r3
 800a9d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a9d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9da:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9dc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a9e0:	f1a3 0110 	sub.w	r1, r3, #16
 800a9e4:	4291      	cmp	r1, r2
 800a9e6:	f63f aef6 	bhi.w	800a7d6 <UART_SetConfig+0x13e>
        huart->Instance->BRR = usartdiv;
 800a9ea:	6822      	ldr	r2, [r4, #0]
 800a9ec:	60d3      	str	r3, [r2, #12]
 800a9ee:	e702      	b.n	800a7f6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f0:	f7fe f898 	bl	8008b24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	f43f aefe 	beq.w	800a7f6 <UART_SetConfig+0x15e>
 800a9fa:	e7e3      	b.n	800a9c4 <UART_SetConfig+0x32c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9fc:	f7fe f8a4 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
        break;
 800aa00:	e7f8      	b.n	800a9f4 <UART_SetConfig+0x35c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa02:	4668      	mov	r0, sp
 800aa04:	f7fe feb2 	bl	800976c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa08:	9801      	ldr	r0, [sp, #4]
        break;
 800aa0a:	e7f3      	b.n	800a9f4 <UART_SetConfig+0x35c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa0c:	a803      	add	r0, sp, #12
 800aa0e:	f7fe ff55 	bl	80098bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa12:	9804      	ldr	r0, [sp, #16]
        break;
 800aa14:	e7ee      	b.n	800a9f4 <UART_SetConfig+0x35c>
        pclk = (uint32_t) CSI_VALUE;
 800aa16:	4806      	ldr	r0, [pc, #24]	; (800aa30 <UART_SetConfig+0x398>)
 800aa18:	e7d4      	b.n	800a9c4 <UART_SetConfig+0x32c>
    switch (clocksource)
 800aa1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aa1e:	e7d1      	b.n	800a9c4 <UART_SetConfig+0x32c>
          pclk = (uint32_t) HSI_VALUE;
 800aa20:	4618      	mov	r0, r3
 800aa22:	e7cf      	b.n	800a9c4 <UART_SetConfig+0x32c>
 800aa24:	58024400 	.word	0x58024400
 800aa28:	03d09000 	.word	0x03d09000
 800aa2c:	08021dbe 	.word	0x08021dbe
 800aa30:	003d0900 	.word	0x003d0900

0800aa34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aa36:	07da      	lsls	r2, r3, #31
{
 800aa38:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa3a:	d506      	bpl.n	800aa4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa3c:	6801      	ldr	r1, [r0, #0]
 800aa3e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800aa40:	684a      	ldr	r2, [r1, #4]
 800aa42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aa46:	4322      	orrs	r2, r4
 800aa48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa4a:	079c      	lsls	r4, r3, #30
 800aa4c:	d506      	bpl.n	800aa5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa4e:	6801      	ldr	r1, [r0, #0]
 800aa50:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800aa52:	684a      	ldr	r2, [r1, #4]
 800aa54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa58:	4322      	orrs	r2, r4
 800aa5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa5c:	0759      	lsls	r1, r3, #29
 800aa5e:	d506      	bpl.n	800aa6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa60:	6801      	ldr	r1, [r0, #0]
 800aa62:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800aa64:	684a      	ldr	r2, [r1, #4]
 800aa66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa6a:	4322      	orrs	r2, r4
 800aa6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa6e:	071a      	lsls	r2, r3, #28
 800aa70:	d506      	bpl.n	800aa80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa72:	6801      	ldr	r1, [r0, #0]
 800aa74:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800aa76:	684a      	ldr	r2, [r1, #4]
 800aa78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa7c:	4322      	orrs	r2, r4
 800aa7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa80:	06dc      	lsls	r4, r3, #27
 800aa82:	d506      	bpl.n	800aa92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa84:	6801      	ldr	r1, [r0, #0]
 800aa86:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800aa88:	688a      	ldr	r2, [r1, #8]
 800aa8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa8e:	4322      	orrs	r2, r4
 800aa90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa92:	0699      	lsls	r1, r3, #26
 800aa94:	d506      	bpl.n	800aaa4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa96:	6801      	ldr	r1, [r0, #0]
 800aa98:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800aa9a:	688a      	ldr	r2, [r1, #8]
 800aa9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aaa0:	4322      	orrs	r2, r4
 800aaa2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aaa4:	065a      	lsls	r2, r3, #25
 800aaa6:	d510      	bpl.n	800aaca <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aaa8:	6801      	ldr	r1, [r0, #0]
 800aaaa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800aaac:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaae:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aab2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800aab6:	ea42 0204 	orr.w	r2, r2, r4
 800aaba:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aabc:	d105      	bne.n	800aaca <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aabe:	684a      	ldr	r2, [r1, #4]
 800aac0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800aac2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800aac6:	4322      	orrs	r2, r4
 800aac8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaca:	061b      	lsls	r3, r3, #24
 800aacc:	d506      	bpl.n	800aadc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aace:	6802      	ldr	r2, [r0, #0]
 800aad0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800aad2:	6853      	ldr	r3, [r2, #4]
 800aad4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800aad8:	430b      	orrs	r3, r1
 800aada:	6053      	str	r3, [r2, #4]
}
 800aadc:	bd10      	pop	{r4, pc}

0800aade <UART_WaitOnFlagUntilTimeout>:
{
 800aade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aae6:	4604      	mov	r4, r0
 800aae8:	460e      	mov	r6, r1
 800aaea:	4615      	mov	r5, r2
 800aaec:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaee:	6822      	ldr	r2, [r4, #0]
 800aaf0:	69d3      	ldr	r3, [r2, #28]
 800aaf2:	ea36 0303 	bics.w	r3, r6, r3
 800aaf6:	bf0c      	ite	eq
 800aaf8:	2301      	moveq	r3, #1
 800aafa:	2300      	movne	r3, #0
 800aafc:	42ab      	cmp	r3, r5
 800aafe:	d001      	beq.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800ab00:	2000      	movs	r0, #0
 800ab02:	e01c      	b.n	800ab3e <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800ab04:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ab08:	d0f2      	beq.n	800aaf0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0a:	f7fb f847 	bl	8005b9c <HAL_GetTick>
 800ab0e:	1bc0      	subs	r0, r0, r7
 800ab10:	4540      	cmp	r0, r8
 800ab12:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab14:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab16:	d802      	bhi.n	800ab1e <UART_WaitOnFlagUntilTimeout+0x40>
 800ab18:	f1b8 0f00 	cmp.w	r8, #0
 800ab1c:	d111      	bne.n	800ab42 <UART_WaitOnFlagUntilTimeout+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab22:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab24:	6883      	ldr	r3, [r0, #8]
 800ab26:	f023 0301 	bic.w	r3, r3, #1
 800ab2a:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ab32:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 800ab36:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800ab38:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ab3a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ab3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab42:	075a      	lsls	r2, r3, #29
 800ab44:	d5d3      	bpl.n	800aaee <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab46:	69c3      	ldr	r3, [r0, #28]
 800ab48:	051b      	lsls	r3, r3, #20
 800ab4a:	d5d0      	bpl.n	800aaee <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab50:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab52:	6803      	ldr	r3, [r0, #0]
 800ab54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab58:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5a:	6883      	ldr	r3, [r0, #8]
 800ab5c:	f023 0301 	bic.w	r3, r3, #1
 800ab60:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ab62:	2320      	movs	r3, #32
 800ab64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800ab70:	e7e1      	b.n	800ab36 <UART_WaitOnFlagUntilTimeout+0x58>

0800ab72 <UART_CheckIdleState>:
{
 800ab72:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab74:	2500      	movs	r5, #0
{
 800ab76:	4604      	mov	r4, r0
 800ab78:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab7a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800ab7e:	f7fb f80d 	bl	8005b9c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab82:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800ab84:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	0711      	lsls	r1, r2, #28
 800ab8a:	d417      	bmi.n	800abbc <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	6812      	ldr	r2, [r2, #0]
 800ab90:	0752      	lsls	r2, r2, #29
 800ab92:	d509      	bpl.n	800aba8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab94:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800ab98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	9200      	str	r2, [sp, #0]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7ff ff9c 	bl	800aade <UART_WaitOnFlagUntilTimeout>
 800aba6:	b9b0      	cbnz	r0, 800abd6 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800aba8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abaa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800abac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800abb0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800abb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb8:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 800abba:	e00d      	b.n	800abd8 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abbc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800abc0:	9003      	str	r0, [sp, #12]
 800abc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abc6:	4620      	mov	r0, r4
 800abc8:	9200      	str	r2, [sp, #0]
 800abca:	462a      	mov	r2, r5
 800abcc:	f7ff ff87 	bl	800aade <UART_WaitOnFlagUntilTimeout>
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d0da      	beq.n	800ab8c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800abd6:	2003      	movs	r0, #3
}
 800abd8:	b005      	add	sp, #20
 800abda:	bd30      	pop	{r4, r5, pc}

0800abdc <HAL_UART_Init>:
{
 800abdc:	b510      	push	{r4, lr}
  if (huart == NULL)
 800abde:	4604      	mov	r4, r0
 800abe0:	b350      	cbz	r0, 800ac38 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800abe2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800abe6:	b91b      	cbnz	r3, 800abf0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800abe8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800abec:	f7f6 fbbe 	bl	800136c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800abf0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800abf2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abf4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800abf6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	f023 0301 	bic.w	r3, r3, #1
 800ac00:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac02:	f7ff fd49 	bl	800a698 <UART_SetConfig>
 800ac06:	2801      	cmp	r0, #1
 800ac08:	d016      	beq.n	800ac38 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac0c:	b113      	cbz	r3, 800ac14 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7ff ff10 	bl	800aa34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac14:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ac16:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac26:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	f042 0201 	orr.w	r2, r2, #1
}
 800ac2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800ac32:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ac34:	f7ff bf9d 	b.w	800ab72 <UART_CheckIdleState>
}
 800ac38:	2001      	movs	r0, #1
 800ac3a:	bd10      	pop	{r4, pc}

0800ac3c <UART_Start_Receive_IT>:
{
 800ac3c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800ac3e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 800ac40:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800ac42:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800ac44:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  UART_MASK_COMPUTATION(huart);
 800ac48:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  huart->RxXferCount = Size;
 800ac4c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ac50:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800ac52:	d131      	bne.n	800acb8 <UART_Start_Receive_IT+0x7c>
 800ac54:	6903      	ldr	r3, [r0, #16]
 800ac56:	bb6b      	cbnz	r3, 800acb4 <UART_Start_Receive_IT+0x78>
 800ac58:	f240 13ff 	movw	r3, #511	; 0x1ff
 800ac5c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac60:	2300      	movs	r3, #0
 800ac62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac66:	2322      	movs	r3, #34	; 0x22
 800ac68:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6c:	6803      	ldr	r3, [r0, #0]
 800ac6e:	689c      	ldr	r4, [r3, #8]
 800ac70:	f044 0401 	orr.w	r4, r4, #1
 800ac74:	609c      	str	r4, [r3, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ac76:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800ac78:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800ac7c:	d12c      	bne.n	800acd8 <UART_Start_Receive_IT+0x9c>
 800ac7e:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800ac82:	4294      	cmp	r4, r2
 800ac84:	d828      	bhi.n	800acd8 <UART_Start_Receive_IT+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac86:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800ac8a:	d123      	bne.n	800acd4 <UART_Start_Receive_IT+0x98>
 800ac8c:	6904      	ldr	r4, [r0, #16]
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ac8e:	4a1c      	ldr	r2, [pc, #112]	; (800ad00 <UART_Start_Receive_IT+0xc4>)
 800ac90:	491c      	ldr	r1, [pc, #112]	; (800ad04 <UART_Start_Receive_IT+0xc8>)
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	bf08      	it	eq
 800ac96:	460a      	moveq	r2, r1
 800ac98:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aca6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aca8:	689a      	ldr	r2, [r3, #8]
 800acaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800acae:	609a      	str	r2, [r3, #8]
}
 800acb0:	2000      	movs	r0, #0
 800acb2:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800acb4:	23ff      	movs	r3, #255	; 0xff
 800acb6:	e7d1      	b.n	800ac5c <UART_Start_Receive_IT+0x20>
 800acb8:	b921      	cbnz	r1, 800acc4 <UART_Start_Receive_IT+0x88>
 800acba:	6903      	ldr	r3, [r0, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f9      	beq.n	800acb4 <UART_Start_Receive_IT+0x78>
 800acc0:	237f      	movs	r3, #127	; 0x7f
 800acc2:	e7cb      	b.n	800ac5c <UART_Start_Receive_IT+0x20>
 800acc4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800acc8:	d1c8      	bne.n	800ac5c <UART_Start_Receive_IT+0x20>
 800acca:	6903      	ldr	r3, [r0, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0f7      	beq.n	800acc0 <UART_Start_Receive_IT+0x84>
 800acd0:	233f      	movs	r3, #63	; 0x3f
 800acd2:	e7c3      	b.n	800ac5c <UART_Start_Receive_IT+0x20>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800acd4:	4a0a      	ldr	r2, [pc, #40]	; (800ad00 <UART_Start_Receive_IT+0xc4>)
 800acd6:	e7df      	b.n	800ac98 <UART_Start_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acd8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800acdc:	d10e      	bne.n	800acfc <UART_Start_Receive_IT+0xc0>
 800acde:	6904      	ldr	r4, [r0, #16]
      huart->RxISR = UART_RxISR_16BIT;
 800ace0:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <UART_Start_Receive_IT+0xcc>)
 800ace2:	490a      	ldr	r1, [pc, #40]	; (800ad0c <UART_Start_Receive_IT+0xd0>)
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	bf08      	it	eq
 800ace8:	460a      	moveq	r2, r1
 800acea:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800acec:	2200      	movs	r2, #0
 800acee:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e7d9      	b.n	800acb0 <UART_Start_Receive_IT+0x74>
      huart->RxISR = UART_RxISR_8BIT;
 800acfc:	4a02      	ldr	r2, [pc, #8]	; (800ad08 <UART_Start_Receive_IT+0xcc>)
 800acfe:	e7f4      	b.n	800acea <UART_Start_Receive_IT+0xae>
 800ad00:	0800a42d 	.word	0x0800a42d
 800ad04:	0800a565 	.word	0x0800a565
 800ad08:	0800a33d 	.word	0x0800a33d
 800ad0c:	0800a3b7 	.word	0x0800a3b7

0800ad10 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad10:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ad14:	2b20      	cmp	r3, #32
{
 800ad16:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad18:	d11d      	bne.n	800ad56 <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 800ad1a:	b1c1      	cbz	r1, 800ad4e <HAL_UART_Receive_IT+0x3e>
 800ad1c:	b1ba      	cbz	r2, 800ad4e <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 800ad1e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d017      	beq.n	800ad56 <HAL_UART_Receive_IT+0x46>
 800ad26:	2301      	movs	r3, #1
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad28:	4c0c      	ldr	r4, [pc, #48]	; (800ad5c <HAL_UART_Receive_IT+0x4c>)
    __HAL_LOCK(huart);
 800ad2a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad32:	6803      	ldr	r3, [r0, #0]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	d006      	beq.n	800ad46 <HAL_UART_Receive_IT+0x36>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad38:	685c      	ldr	r4, [r3, #4]
 800ad3a:	0224      	lsls	r4, r4, #8
 800ad3c:	d503      	bpl.n	800ad46 <HAL_UART_Receive_IT+0x36>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad3e:	681c      	ldr	r4, [r3, #0]
 800ad40:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 800ad44:	601c      	str	r4, [r3, #0]
}
 800ad46:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad4a:	f7ff bf77 	b.w	800ac3c <UART_Start_Receive_IT>
      return HAL_ERROR;
 800ad4e:	2001      	movs	r0, #1
}
 800ad50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad54:	4770      	bx	lr
    return HAL_BUSY;
 800ad56:	2002      	movs	r0, #2
 800ad58:	e7fa      	b.n	800ad50 <HAL_UART_Receive_IT+0x40>
 800ad5a:	bf00      	nop
 800ad5c:	58000c00 	.word	0x58000c00

0800ad60 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad60:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800ad62:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad64:	b91b      	cbnz	r3, 800ad6e <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800ad66:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800ad6a:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad6c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad6e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad70:	4d0a      	ldr	r5, [pc, #40]	; (800ad9c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad72:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad74:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad76:	4c0a      	ldr	r4, [pc, #40]	; (800ada0 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad78:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad7c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad7e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad80:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad88:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad8c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad8e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad96:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800ad9a:	e7e7      	b.n	800ad6c <UARTEx_SetNbDataToProcess+0xc>
 800ad9c:	08021dde 	.word	0x08021dde
 800ada0:	08021dd6 	.word	0x08021dd6

0800ada4 <HAL_UARTEx_WakeupCallback>:
}
 800ada4:	4770      	bx	lr

0800ada6 <HAL_UARTEx_RxFifoFullCallback>:
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UARTEx_TxFifoEmptyCallback>:
 800ada8:	4770      	bx	lr

0800adaa <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800adaa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d014      	beq.n	800addc <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800adb4:	2324      	movs	r3, #36	; 0x24
 800adb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adba:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800adbc:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adbe:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adc8:	2300      	movs	r3, #0
 800adca:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adcc:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800adce:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800add0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800add4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 800add8:	4618      	mov	r0, r3
 800adda:	4770      	bx	lr
  __HAL_LOCK(huart);
 800addc:	2002      	movs	r0, #2
}
 800adde:	4770      	bx	lr

0800ade0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800ade0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ade2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800ade6:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d01b      	beq.n	800ae24 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800adec:	2301      	movs	r3, #1
 800adee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800adf2:	2324      	movs	r3, #36	; 0x24
 800adf4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adf8:	6803      	ldr	r3, [r0, #0]
 800adfa:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	f022 0201 	bic.w	r2, r2, #1
 800ae02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800ae0a:	4311      	orrs	r1, r2
 800ae0c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ae0e:	f7ff ffa7 	bl	800ad60 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae12:	6803      	ldr	r3, [r0, #0]
 800ae14:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ae16:	2320      	movs	r3, #32
 800ae18:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ae24:	2002      	movs	r0, #2
 800ae26:	e7fc      	b.n	800ae22 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800ae28 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ae28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ae2a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800ae2e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d01b      	beq.n	800ae6c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800ae34:	2301      	movs	r3, #1
 800ae36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800ae3a:	2324      	movs	r3, #36	; 0x24
 800ae3c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae40:	6803      	ldr	r3, [r0, #0]
 800ae42:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800ae52:	4311      	orrs	r1, r2
 800ae54:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ae56:	f7ff ff83 	bl	800ad60 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ae5e:	2320      	movs	r3, #32
 800ae60:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ae64:	2000      	movs	r0, #0
 800ae66:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ae6c:	2002      	movs	r0, #2
 800ae6e:	e7fc      	b.n	800ae6a <HAL_UARTEx_SetRxFifoThreshold+0x42>

0800ae70 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ae74:	680a      	ldr	r2, [r1, #0]
 800ae76:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800ae7a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800ae7e:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800ae82:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800ae86:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800ae8a:	4323      	orrs	r3, r4
 800ae8c:	b9a2      	cbnz	r2, 800aeb8 <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae8e:	ea43 0209 	orr.w	r2, r3, r9
 800ae92:	6801      	ldr	r1, [r0, #0]
 800ae94:	432a      	orrs	r2, r5
 800ae96:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ae9a:	ea42 0308 	orr.w	r3, r2, r8
 800ae9e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800aea2:	ea43 030e 	orr.w	r3, r3, lr
 800aea6:	ea43 030c 	orr.w	r3, r3, ip
 800aeaa:	433b      	orrs	r3, r7
 800aeac:	4333      	orrs	r3, r6
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aeb8:	6802      	ldr	r2, [r0, #0]
 800aeba:	ea43 0309 	orr.w	r3, r3, r9
 800aebe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800aec2:	4313      	orrs	r3, r2
 800aec4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aec6:	ea45 0308 	orr.w	r3, r5, r8
 800aeca:	6842      	ldr	r2, [r0, #4]
 800aecc:	ea43 030e 	orr.w	r3, r3, lr
 800aed0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800aed4:	ea43 030c 	orr.w	r3, r3, ip
 800aed8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800aedc:	433b      	orrs	r3, r7
 800aede:	4333      	orrs	r3, r6
 800aee0:	4313      	orrs	r3, r2
 800aee2:	6043      	str	r3, [r0, #4]
 800aee4:	e7e5      	b.n	800aeb2 <FMC_SDRAM_Init+0x42>

0800aee6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aee6:	68cb      	ldr	r3, [r1, #12]
 800aee8:	f103 3cff 	add.w	ip, r3, #4294967295
 800aeec:	694b      	ldr	r3, [r1, #20]
{
 800aeee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef0:	3b01      	subs	r3, #1
 800aef2:	680f      	ldr	r7, [r1, #0]
 800aef4:	684c      	ldr	r4, [r1, #4]
 800aef6:	688e      	ldr	r6, [r1, #8]
 800aef8:	051b      	lsls	r3, r3, #20
 800aefa:	690d      	ldr	r5, [r1, #16]
 800aefc:	3c01      	subs	r4, #1
 800aefe:	6989      	ldr	r1, [r1, #24]
 800af00:	3e01      	subs	r6, #1
 800af02:	3d01      	subs	r5, #1
 800af04:	3f01      	subs	r7, #1
 800af06:	3901      	subs	r1, #1
 800af08:	0124      	lsls	r4, r4, #4
 800af0a:	0236      	lsls	r6, r6, #8
 800af0c:	042d      	lsls	r5, r5, #16
 800af0e:	0609      	lsls	r1, r1, #24
 800af10:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800af14:	b95a      	cbnz	r2, 800af2e <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af16:	433b      	orrs	r3, r7
 800af18:	6882      	ldr	r2, [r0, #8]
 800af1a:	4323      	orrs	r3, r4
 800af1c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800af20:	4333      	orrs	r3, r6
 800af22:	432b      	orrs	r3, r5
 800af24:	430b      	orrs	r3, r1
 800af26:	4313      	orrs	r3, r2
 800af28:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800af2a:	2000      	movs	r0, #0
 800af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af2e:	6882      	ldr	r2, [r0, #8]
 800af30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800af34:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800af38:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af3a:	ea44 0306 	orr.w	r3, r4, r6
 800af3e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af40:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af42:	68c2      	ldr	r2, [r0, #12]
 800af44:	432b      	orrs	r3, r5
 800af46:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800af4a:	430b      	orrs	r3, r1
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60c3      	str	r3, [r0, #12]
 800af50:	e7eb      	b.n	800af2a <FMC_SDRAM_Timing_Init+0x44>

0800af52 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800af52:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800af56:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800af5a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800af5e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800af62:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800af64:	2300      	movs	r3, #0
 800af66:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800af68:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800af6a:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	4770      	bx	lr

0800af70 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800af70:	6902      	ldr	r2, [r0, #16]
{
 800af72:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800af74:	e9d1 3400 	ldrd	r3, r4, [r1]
 800af78:	0d92      	lsrs	r2, r2, #22
 800af7a:	4323      	orrs	r3, r4
 800af7c:	68cc      	ldr	r4, [r1, #12]
 800af7e:	0592      	lsls	r2, r2, #22
 800af80:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800af84:	4313      	orrs	r3, r2
 800af86:	688a      	ldr	r2, [r1, #8]
 800af88:	3a01      	subs	r2, #1
 800af8a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800af8e:	6103      	str	r3, [r0, #16]
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800af90:	2000      	movs	r0, #0
 800af92:	bd10      	pop	{r4, pc}

0800af94 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800af94:	6943      	ldr	r3, [r0, #20]
 800af96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800af9a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800af9e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800afa2:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800afa4:	2000      	movs	r0, #0
 800afa6:	4770      	bx	lr

0800afa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afa8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <SysTick_Handler+0x18>)
 800afac:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afae:	f001 fe11 	bl	800cbd4 <xTaskGetSchedulerState>
 800afb2:	2801      	cmp	r0, #1
 800afb4:	d003      	beq.n	800afbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800afb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800afba:	f000 bbcb 	b.w	800b754 <xPortSysTickHandler>
}
 800afbe:	bd08      	pop	{r3, pc}
 800afc0:	e000e010 	.word	0xe000e010

0800afc4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afc4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800afc8:	b92b      	cbnz	r3, 800afd6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800afca:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <osKernelInitialize+0x20>)
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	b928      	cbnz	r0, 800afdc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afd0:	2201      	movs	r2, #1
 800afd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afd4:	4770      	bx	lr
    stat = osErrorISR;
 800afd6:	f06f 0005 	mvn.w	r0, #5
 800afda:	4770      	bx	lr
    } else {
      stat = osError;
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	24005f30 	.word	0x24005f30

0800afe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afe8:	b510      	push	{r4, lr}
 800afea:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800afee:	b95c      	cbnz	r4, 800b008 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800aff0:	4b08      	ldr	r3, [pc, #32]	; (800b014 <osKernelStart+0x2c>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	2a01      	cmp	r2, #1
 800aff6:	d10a      	bne.n	800b00e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aff8:	4a07      	ldr	r2, [pc, #28]	; (800b018 <osKernelStart+0x30>)
 800affa:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800affc:	2202      	movs	r2, #2
 800affe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b000:	f001 fc8e 	bl	800c920 <vTaskStartScheduler>
      stat = osOK;
 800b004:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b006:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b008:	f06f 0005 	mvn.w	r0, #5
 800b00c:	e7fb      	b.n	800b006 <osKernelStart+0x1e>
      stat = osError;
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b012:	e7f8      	b.n	800b006 <osKernelStart+0x1e>
 800b014:	24005f30 	.word	0x24005f30
 800b018:	e000ed00 	.word	0xe000ed00

0800b01c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b01e:	4614      	mov	r4, r2
 800b020:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b022:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b024:	460b      	mov	r3, r1
  hTask = NULL;
 800b026:	9205      	str	r2, [sp, #20]
 800b028:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b02c:	b9d2      	cbnz	r2, 800b064 <osThreadNew+0x48>
 800b02e:	b1c8      	cbz	r0, 800b064 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b030:	2c00      	cmp	r4, #0
 800b032:	d02f      	beq.n	800b094 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b034:	69a5      	ldr	r5, [r4, #24]
 800b036:	2d00      	cmp	r5, #0
 800b038:	bf08      	it	eq
 800b03a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b03c:	1e69      	subs	r1, r5, #1
 800b03e:	46ac      	mov	ip, r5
 800b040:	2937      	cmp	r1, #55	; 0x37
 800b042:	d82b      	bhi.n	800b09c <osThreadNew+0x80>
 800b044:	6861      	ldr	r1, [r4, #4]
 800b046:	07c9      	lsls	r1, r1, #31
 800b048:	d428      	bmi.n	800b09c <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b04a:	6966      	ldr	r6, [r4, #20]
 800b04c:	b16e      	cbz	r6, 800b06a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b04e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b050:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b052:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b056:	b157      	cbz	r7, 800b06e <osThreadNew+0x52>
 800b058:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800b05c:	d902      	bls.n	800b064 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b05e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b060:	b104      	cbz	r4, 800b064 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b062:	b9ee      	cbnz	r6, 800b0a0 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b064:	9805      	ldr	r0, [sp, #20]
}
 800b066:	b007      	add	sp, #28
 800b068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b06a:	2280      	movs	r2, #128	; 0x80
 800b06c:	e7f0      	b.n	800b050 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b06e:	f1be 0f00 	cmp.w	lr, #0
 800b072:	d1f7      	bne.n	800b064 <osThreadNew+0x48>
      if (mem == 0) {
 800b074:	6924      	ldr	r4, [r4, #16]
 800b076:	2c00      	cmp	r4, #0
 800b078:	d1f4      	bne.n	800b064 <osThreadNew+0x48>
 800b07a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b07c:	a905      	add	r1, sp, #20
 800b07e:	b292      	uxth	r2, r2
 800b080:	e9cd c100 	strd	ip, r1, [sp]
 800b084:	4621      	mov	r1, r4
 800b086:	f001 fae9 	bl	800c65c <xTaskCreate>
 800b08a:	2801      	cmp	r0, #1
            hTask = NULL;
 800b08c:	bf1c      	itt	ne
 800b08e:	2300      	movne	r3, #0
 800b090:	9305      	strne	r3, [sp, #20]
 800b092:	e7e7      	b.n	800b064 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800b094:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b098:	2280      	movs	r2, #128	; 0x80
 800b09a:	e7ef      	b.n	800b07c <osThreadNew+0x60>
        return (NULL);
 800b09c:	4610      	mov	r0, r2
 800b09e:	e7e2      	b.n	800b066 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0a0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b0a4:	9500      	str	r5, [sp, #0]
 800b0a6:	f001 faa1 	bl	800c5ec <xTaskCreateStatic>
 800b0aa:	9005      	str	r0, [sp, #20]
 800b0ac:	e7da      	b.n	800b064 <osThreadNew+0x48>

0800b0ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b0ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	4615      	mov	r5, r2
 800b0b6:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b0ba:	b11a      	cbz	r2, 800b0c4 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800b0bc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b0be:	4620      	mov	r0, r4
 800b0c0:	b003      	add	sp, #12
 800b0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d0f9      	beq.n	800b0bc <osSemaphoreNew+0xe>
 800b0c8:	4288      	cmp	r0, r1
 800b0ca:	d3f7      	bcc.n	800b0bc <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800b0cc:	b1e5      	cbz	r5, 800b108 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b0ce:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b0d2:	b1bb      	cbz	r3, 800b104 <osSemaphoreNew+0x56>
 800b0d4:	2f4f      	cmp	r7, #79	; 0x4f
 800b0d6:	d9f1      	bls.n	800b0bc <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800b0d8:	2801      	cmp	r0, #1
 800b0da:	d12a      	bne.n	800b132 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b0dc:	2103      	movs	r1, #3
 800b0de:	9100      	str	r1, [sp, #0]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	f000 fce5 	bl	800bab0 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b0e6:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d0e7      	beq.n	800b0bc <osSemaphoreNew+0xe>
 800b0ec:	b1de      	cbz	r6, 800b126 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f000 fd92 	bl	800bc1c <xQueueGenericSend>
 800b0f8:	2801      	cmp	r0, #1
 800b0fa:	d014      	beq.n	800b126 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f001 f8d3 	bl	800c2a8 <vQueueDelete>
 800b102:	e7db      	b.n	800b0bc <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b104:	2f00      	cmp	r7, #0
 800b106:	d1d9      	bne.n	800b0bc <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800b108:	2c01      	cmp	r4, #1
 800b10a:	d105      	bne.n	800b118 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800b10c:	2203      	movs	r2, #3
 800b10e:	2100      	movs	r1, #0
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fd1b 	bl	800bb4c <xQueueGenericCreate>
 800b116:	e7e6      	b.n	800b0e6 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b118:	4620      	mov	r0, r4
 800b11a:	4631      	mov	r1, r6
 800b11c:	f000 fd5f 	bl	800bbde <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b120:	4604      	mov	r4, r0
 800b122:	2800      	cmp	r0, #0
 800b124:	d0ca      	beq.n	800b0bc <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800b126:	b955      	cbnz	r5, 800b13e <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800b128:	4629      	mov	r1, r5
 800b12a:	4620      	mov	r0, r4
 800b12c:	f001 f892 	bl	800c254 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b130:	e7c5      	b.n	800b0be <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b132:	461a      	mov	r2, r3
 800b134:	f000 fd31 	bl	800bb9a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b138:	4604      	mov	r4, r0
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d0be      	beq.n	800b0bc <osSemaphoreNew+0xe>
          name = attr->name;
 800b13e:	682d      	ldr	r5, [r5, #0]
 800b140:	e7f2      	b.n	800b128 <osSemaphoreNew+0x7a>
	...

0800b144 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b144:	b513      	push	{r0, r1, r4, lr}
 800b146:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b148:	b1f8      	cbz	r0, 800b18a <osSemaphoreAcquire+0x46>
 800b14a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b14e:	b1a3      	cbz	r3, 800b17a <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 800b150:	b9d9      	cbnz	r1, 800b18a <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b152:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b154:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b156:	f001 f82d 	bl	800c1b4 <xQueueReceiveFromISR>
 800b15a:	2801      	cmp	r0, #1
 800b15c:	d112      	bne.n	800b184 <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	b913      	cbnz	r3, 800b168 <osSemaphoreAcquire+0x24>
  stat = osOK;
 800b162:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b164:	b002      	add	sp, #8
 800b166:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b168:	4b0b      	ldr	r3, [pc, #44]	; (800b198 <osSemaphoreAcquire+0x54>)
 800b16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	e7f3      	b.n	800b162 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b17a:	f000 ff57 	bl	800c02c <xQueueSemaphoreTake>
 800b17e:	2801      	cmp	r0, #1
 800b180:	d0ef      	beq.n	800b162 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800b182:	b92c      	cbnz	r4, 800b190 <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 800b184:	f06f 0002 	mvn.w	r0, #2
 800b188:	e7ec      	b.n	800b164 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b18a:	f06f 0003 	mvn.w	r0, #3
 800b18e:	e7e9      	b.n	800b164 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800b190:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b194:	e7e6      	b.n	800b164 <osSemaphoreAcquire+0x20>
 800b196:	bf00      	nop
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b19c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b19e:	b300      	cbz	r0, 800b1e2 <osSemaphoreRelease+0x46>
 800b1a0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b1a4:	b1a3      	cbz	r3, 800b1d0 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 800b1a6:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b1a8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b1aa:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b1ac:	f000 fe4a 	bl	800be44 <xQueueGiveFromISR>
 800b1b0:	2801      	cmp	r0, #1
 800b1b2:	d113      	bne.n	800b1dc <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	b913      	cbnz	r3, 800b1be <osSemaphoreRelease+0x22>
  stat = osOK;
 800b1b8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800b1ba:	b002      	add	sp, #8
 800b1bc:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800b1be:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <osSemaphoreRelease+0x4c>)
 800b1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	e7f3      	b.n	800b1b8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f000 fd22 	bl	800bc1c <xQueueGenericSend>
 800b1d8:	2801      	cmp	r0, #1
 800b1da:	d0ed      	beq.n	800b1b8 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800b1dc:	f06f 0002 	mvn.w	r0, #2
 800b1e0:	e7eb      	b.n	800b1ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b1e2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b1e6:	e7e8      	b.n	800b1ba <osSemaphoreRelease+0x1e>
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	4614      	mov	r4, r2
 800b1f4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1f8:	b11f      	cbz	r7, 800b202 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b1fa:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	b003      	add	sp, #12
 800b200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b202:	2800      	cmp	r0, #0
 800b204:	d0f9      	beq.n	800b1fa <osMessageQueueNew+0xe>
 800b206:	2900      	cmp	r1, #0
 800b208:	d0f7      	beq.n	800b1fa <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b20a:	b1da      	cbz	r2, 800b244 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b20c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b210:	b183      	cbz	r3, 800b234 <osMessageQueueNew+0x48>
 800b212:	2a4f      	cmp	r2, #79	; 0x4f
 800b214:	d9f1      	bls.n	800b1fa <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b216:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b218:	2a00      	cmp	r2, #0
 800b21a:	d0ee      	beq.n	800b1fa <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b21c:	4345      	muls	r5, r0
 800b21e:	6966      	ldr	r6, [r4, #20]
 800b220:	42ae      	cmp	r6, r5
 800b222:	d3ea      	bcc.n	800b1fa <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b224:	9700      	str	r7, [sp, #0]
 800b226:	f000 fc43 	bl	800bab0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b22a:	4605      	mov	r5, r0
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d0e4      	beq.n	800b1fa <osMessageQueueNew+0xe>
        name = attr->name;
 800b230:	6824      	ldr	r4, [r4, #0]
 800b232:	e011      	b.n	800b258 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b234:	2a00      	cmp	r2, #0
 800b236:	d1e0      	bne.n	800b1fa <osMessageQueueNew+0xe>
 800b238:	6923      	ldr	r3, [r4, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1dd      	bne.n	800b1fa <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b23e:	6963      	ldr	r3, [r4, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1da      	bne.n	800b1fa <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b244:	4629      	mov	r1, r5
 800b246:	2200      	movs	r2, #0
 800b248:	4630      	mov	r0, r6
 800b24a:	f000 fc7f 	bl	800bb4c <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b24e:	4605      	mov	r5, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	d0d2      	beq.n	800b1fa <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b254:	2c00      	cmp	r4, #0
 800b256:	d1eb      	bne.n	800b230 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 fffa 	bl	800c254 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b260:	e7cc      	b.n	800b1fc <osMessageQueueNew+0x10>
	...

0800b264 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b264:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b266:	461c      	mov	r4, r3
 800b268:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b26c:	b1b6      	cbz	r6, 800b29c <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b26e:	b308      	cbz	r0, 800b2b4 <osMessageQueuePut+0x50>
 800b270:	b301      	cbz	r1, 800b2b4 <osMessageQueuePut+0x50>
 800b272:	b9fb      	cbnz	r3, 800b2b4 <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b274:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b276:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b278:	f000 fd82 	bl	800bd80 <xQueueGenericSendFromISR>
 800b27c:	2801      	cmp	r0, #1
 800b27e:	d116      	bne.n	800b2ae <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b280:	9b01      	ldr	r3, [sp, #4]
 800b282:	b913      	cbnz	r3, 800b28a <osMessageQueuePut+0x26>
  stat = osOK;
 800b284:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b286:	b002      	add	sp, #8
 800b288:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b28a:	4b0d      	ldr	r3, [pc, #52]	; (800b2c0 <osMessageQueuePut+0x5c>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	e7f3      	b.n	800b284 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b29c:	b150      	cbz	r0, 800b2b4 <osMessageQueuePut+0x50>
 800b29e:	b149      	cbz	r1, 800b2b4 <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2a0:	4633      	mov	r3, r6
 800b2a2:	4622      	mov	r2, r4
 800b2a4:	f000 fcba 	bl	800bc1c <xQueueGenericSend>
 800b2a8:	2801      	cmp	r0, #1
 800b2aa:	d0eb      	beq.n	800b284 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800b2ac:	b92c      	cbnz	r4, 800b2ba <osMessageQueuePut+0x56>
          stat = osErrorResource;
 800b2ae:	f06f 0002 	mvn.w	r0, #2
 800b2b2:	e7e8      	b.n	800b286 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800b2b4:	f06f 0003 	mvn.w	r0, #3
 800b2b8:	e7e5      	b.n	800b286 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800b2ba:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b2be:	e7e2      	b.n	800b286 <osMessageQueuePut+0x22>
 800b2c0:	e000ed04 	.word	0xe000ed04

0800b2c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2c6:	461c      	mov	r4, r3
 800b2c8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b2cc:	b1b3      	cbz	r3, 800b2fc <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2ce:	b300      	cbz	r0, 800b312 <osMessageQueueGet+0x4e>
 800b2d0:	b1f9      	cbz	r1, 800b312 <osMessageQueueGet+0x4e>
 800b2d2:	b9f4      	cbnz	r4, 800b312 <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b2d4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b2d6:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b2d8:	f000 ff6c 	bl	800c1b4 <xQueueReceiveFromISR>
 800b2dc:	2801      	cmp	r0, #1
 800b2de:	d115      	bne.n	800b30c <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	b913      	cbnz	r3, 800b2ea <osMessageQueueGet+0x26>
  stat = osOK;
 800b2e4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b2e6:	b003      	add	sp, #12
 800b2e8:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <osMessageQueueGet+0x5c>)
 800b2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	e7f3      	b.n	800b2e4 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2fc:	b148      	cbz	r0, 800b312 <osMessageQueueGet+0x4e>
 800b2fe:	b141      	cbz	r1, 800b312 <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b300:	4622      	mov	r2, r4
 800b302:	f000 fdf3 	bl	800beec <xQueueReceive>
 800b306:	2801      	cmp	r0, #1
 800b308:	d0ec      	beq.n	800b2e4 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800b30a:	b92c      	cbnz	r4, 800b318 <osMessageQueueGet+0x54>
          stat = osErrorResource;
 800b30c:	f06f 0002 	mvn.w	r0, #2
 800b310:	e7e9      	b.n	800b2e6 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800b312:	f06f 0003 	mvn.w	r0, #3
 800b316:	e7e6      	b.n	800b2e6 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800b318:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b31c:	e7e3      	b.n	800b2e6 <osMessageQueueGet+0x22>
 800b31e:	bf00      	nop
 800b320:	e000ed04 	.word	0xe000ed04

0800b324 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <vApplicationGetIdleTaskMemory+0x10>)
 800b326:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b328:	4b03      	ldr	r3, [pc, #12]	; (800b338 <vApplicationGetIdleTaskMemory+0x14>)
 800b32a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b32c:	2380      	movs	r3, #128	; 0x80
 800b32e:	6013      	str	r3, [r2, #0]
}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	24005ed0 	.word	0x24005ed0
 800b338:	24005cd0 	.word	0x24005cd0

0800b33c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <vApplicationGetTimerTaskMemory+0x10>)
 800b33e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b340:	4b03      	ldr	r3, [pc, #12]	; (800b350 <vApplicationGetTimerTaskMemory+0x14>)
 800b342:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b344:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b348:	6013      	str	r3, [r2, #0]
}
 800b34a:	4770      	bx	lr
 800b34c:	24006334 	.word	0x24006334
 800b350:	24005f34 	.word	0x24005f34

0800b354 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b354:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <prvInsertBlockIntoFreeList+0x40>)
{
 800b356:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b358:	461a      	mov	r2, r3
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4283      	cmp	r3, r0
 800b35e:	d3fb      	bcc.n	800b358 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b360:	6854      	ldr	r4, [r2, #4]
 800b362:	1911      	adds	r1, r2, r4
 800b364:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b366:	bf01      	itttt	eq
 800b368:	6841      	ldreq	r1, [r0, #4]
 800b36a:	4610      	moveq	r0, r2
 800b36c:	1909      	addeq	r1, r1, r4
 800b36e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b370:	6844      	ldr	r4, [r0, #4]
 800b372:	1901      	adds	r1, r0, r4
 800b374:	428b      	cmp	r3, r1
 800b376:	d107      	bne.n	800b388 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b378:	4907      	ldr	r1, [pc, #28]	; (800b398 <prvInsertBlockIntoFreeList+0x44>)
 800b37a:	6809      	ldr	r1, [r1, #0]
 800b37c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b37e:	bf1f      	itttt	ne
 800b380:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b382:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b384:	1909      	addne	r1, r1, r4
 800b386:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b388:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b38a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b38c:	bf18      	it	ne
 800b38e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b390:	bd10      	pop	{r4, pc}
 800b392:	bf00      	nop
 800b394:	2400e3ac 	.word	0x2400e3ac
 800b398:	24006394 	.word	0x24006394

0800b39c <pvPortMalloc>:
{
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b3a2:	f001 f989 	bl	800c6b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b3a6:	4b3e      	ldr	r3, [pc, #248]	; (800b4a0 <pvPortMalloc+0x104>)
 800b3a8:	483e      	ldr	r0, [pc, #248]	; (800b4a4 <pvPortMalloc+0x108>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	469c      	mov	ip, r3
 800b3ae:	b9d2      	cbnz	r2, 800b3e6 <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 800b3b0:	4a3d      	ldr	r2, [pc, #244]	; (800b4a8 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 800b3b2:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3b4:	4b3d      	ldr	r3, [pc, #244]	; (800b4ac <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3b6:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800b3b8:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3ba:	bf1c      	itt	ne
 800b3bc:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3be:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3c2:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 800b3c4:	4b3a      	ldr	r3, [pc, #232]	; (800b4b0 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b3ca:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3ce:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b3d0:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3d4:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3d8:	4b36      	ldr	r3, [pc, #216]	; (800b4b4 <pvPortMalloc+0x118>)
 800b3da:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3dc:	4b36      	ldr	r3, [pc, #216]	; (800b4b8 <pvPortMalloc+0x11c>)
 800b3de:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3e4:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3e6:	6807      	ldr	r7, [r0, #0]
 800b3e8:	4227      	tst	r7, r4
 800b3ea:	d153      	bne.n	800b494 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 800b3ec:	2c00      	cmp	r4, #0
 800b3ee:	d044      	beq.n	800b47a <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800b3f0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3f4:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3f6:	bf1c      	itt	ne
 800b3f8:	f023 0307 	bicne.w	r3, r3, #7
 800b3fc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d048      	beq.n	800b494 <pvPortMalloc+0xf8>
 800b402:	4a2d      	ldr	r2, [pc, #180]	; (800b4b8 <pvPortMalloc+0x11c>)
 800b404:	6816      	ldr	r6, [r2, #0]
 800b406:	4690      	mov	r8, r2
 800b408:	429e      	cmp	r6, r3
 800b40a:	d343      	bcc.n	800b494 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 800b40c:	4a27      	ldr	r2, [pc, #156]	; (800b4ac <pvPortMalloc+0x110>)
 800b40e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b410:	6869      	ldr	r1, [r5, #4]
 800b412:	4299      	cmp	r1, r3
 800b414:	d201      	bcs.n	800b41a <pvPortMalloc+0x7e>
 800b416:	6828      	ldr	r0, [r5, #0]
 800b418:	b9a8      	cbnz	r0, 800b446 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 800b41a:	f8dc 0000 	ldr.w	r0, [ip]
 800b41e:	42a8      	cmp	r0, r5
 800b420:	d038      	beq.n	800b494 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b422:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b424:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b426:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b428:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b42a:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b42c:	d912      	bls.n	800b454 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b42e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b430:	0742      	lsls	r2, r0, #29
 800b432:	d00b      	beq.n	800b44c <pvPortMalloc+0xb0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	e7fe      	b.n	800b444 <pvPortMalloc+0xa8>
 800b446:	462a      	mov	r2, r5
 800b448:	4605      	mov	r5, r0
 800b44a:	e7e1      	b.n	800b410 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b44c:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b44e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b450:	f7ff ff80 	bl	800b354 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b454:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b456:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b458:	4916      	ldr	r1, [pc, #88]	; (800b4b4 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b45a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b45c:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800b45e:	4a17      	ldr	r2, [pc, #92]	; (800b4bc <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800b460:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b462:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800b464:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b466:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b468:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b46a:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 800b46e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b472:	bf38      	it	cc
 800b474:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b476:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b478:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b47a:	f001 f9c1 	bl	800c800 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b47e:	0763      	lsls	r3, r4, #29
 800b480:	d00a      	beq.n	800b498 <pvPortMalloc+0xfc>
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	e7fe      	b.n	800b492 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 800b494:	2400      	movs	r4, #0
 800b496:	e7f0      	b.n	800b47a <pvPortMalloc+0xde>
}
 800b498:	4620      	mov	r0, r4
 800b49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49e:	bf00      	nop
 800b4a0:	24006394 	.word	0x24006394
 800b4a4:	2400e398 	.word	0x2400e398
 800b4a8:	24006398 	.word	0x24006398
 800b4ac:	2400e3ac 	.word	0x2400e3ac
 800b4b0:	2400e390 	.word	0x2400e390
 800b4b4:	2400e3a0 	.word	0x2400e3a0
 800b4b8:	2400e39c 	.word	0x2400e39c
 800b4bc:	2400e3a4 	.word	0x2400e3a4

0800b4c0 <vPortFree>:
{
 800b4c0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	b390      	cbz	r0, 800b52c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4c6:	4a1a      	ldr	r2, [pc, #104]	; (800b530 <vPortFree+0x70>)
 800b4c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b4cc:	6812      	ldr	r2, [r2, #0]
 800b4ce:	4213      	tst	r3, r2
 800b4d0:	d108      	bne.n	800b4e4 <vPortFree+0x24>
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	e7fe      	b.n	800b4e2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4e4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b4e8:	b141      	cbz	r1, 800b4fc <vPortFree+0x3c>
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	e7fe      	b.n	800b4fa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4fc:	ea23 0302 	bic.w	r3, r3, r2
 800b500:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b504:	f001 f8d8 	bl	800c6b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b508:	4a0a      	ldr	r2, [pc, #40]	; (800b534 <vPortFree+0x74>)
 800b50a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b50e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b512:	6811      	ldr	r1, [r2, #0]
 800b514:	440b      	add	r3, r1
 800b516:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b518:	f7ff ff1c 	bl	800b354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b51c:	4a06      	ldr	r2, [pc, #24]	; (800b538 <vPortFree+0x78>)
 800b51e:	6813      	ldr	r3, [r2, #0]
 800b520:	3301      	adds	r3, #1
}
 800b522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b526:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b528:	f001 b96a 	b.w	800c800 <xTaskResumeAll>
}
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	bf00      	nop
 800b530:	2400e398 	.word	0x2400e398
 800b534:	2400e39c 	.word	0x2400e39c
 800b538:	2400e3a8 	.word	0x2400e3a8

0800b53c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b540:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b544:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b546:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b548:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b550:	4770      	bx	lr

0800b552 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b556:	4770      	bx	lr

0800b558 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b558:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b55a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b55c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b55e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b564:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b566:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b568:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b56a:	3301      	adds	r3, #1
 800b56c:	6003      	str	r3, [r0, #0]
}
 800b56e:	4770      	bx	lr

0800b570 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b570:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b572:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b574:	1c63      	adds	r3, r4, #1
 800b576:	d10a      	bne.n	800b58e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b578:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b57e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b580:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b582:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b584:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b586:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b588:	3301      	adds	r3, #1
 800b58a:	6003      	str	r3, [r0, #0]
}
 800b58c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b58e:	f100 0208 	add.w	r2, r0, #8
 800b592:	4613      	mov	r3, r2
 800b594:	6852      	ldr	r2, [r2, #4]
 800b596:	6815      	ldr	r5, [r2, #0]
 800b598:	42a5      	cmp	r5, r4
 800b59a:	d9fa      	bls.n	800b592 <vListInsert+0x22>
 800b59c:	e7ed      	b.n	800b57a <vListInsert+0xa>

0800b59e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b59e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5a0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b5a4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5a6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5a8:	6859      	ldr	r1, [r3, #4]
 800b5aa:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5ac:	bf08      	it	eq
 800b5ae:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5ba:	6818      	ldr	r0, [r3, #0]
}
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5c0:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <prvPortStartFirstTask+0x24>)
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	6800      	ldr	r0, [r0, #0]
 800b5c6:	f380 8808 	msr	MSP, r0
 800b5ca:	f04f 0000 	mov.w	r0, #0
 800b5ce:	f380 8814 	msr	CONTROL, r0
 800b5d2:	b662      	cpsie	i
 800b5d4:	b661      	cpsie	f
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	df00      	svc	0
 800b5e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5e2:	0000      	.short	0x0000
 800b5e4:	e000ed08 	.word	0xe000ed08

0800b5e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5f8 <vPortEnableVFP+0x10>
 800b5ec:	6801      	ldr	r1, [r0, #0]
 800b5ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5f2:	6001      	str	r1, [r0, #0]
 800b5f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5f6:	0000      	.short	0x0000
 800b5f8:	e000ed88 	.word	0xe000ed88

0800b5fc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b5fc:	2300      	movs	r3, #0
{
 800b5fe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b600:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <prvTaskExitError+0x3c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	d008      	beq.n	800b61c <prvTaskExitError+0x20>
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	e7fe      	b.n	800b61a <prvTaskExitError+0x1e>
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b62c:	9b01      	ldr	r3, [sp, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0fc      	beq.n	800b62c <prvTaskExitError+0x30>
}
 800b632:	b002      	add	sp, #8
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	24000070 	.word	0x24000070

0800b63c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b63c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b640:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b644:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b648:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b64a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b64e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b650:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b652:	f06f 0302 	mvn.w	r3, #2
 800b656:	6203      	str	r3, [r0, #32]
}
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	0800b5fd 	.word	0x0800b5fd

0800b660 <SVC_Handler>:
	__asm volatile (
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <pxCurrentTCBConst2>)
 800b662:	6819      	ldr	r1, [r3, #0]
 800b664:	6808      	ldr	r0, [r1, #0]
 800b666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66a:	f380 8809 	msr	PSP, r0
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f04f 0000 	mov.w	r0, #0
 800b676:	f380 8811 	msr	BASEPRI, r0
 800b67a:	4770      	bx	lr
 800b67c:	f3af 8000 	nop.w

0800b680 <pxCurrentTCBConst2>:
 800b680:	2400e3bc 	.word	0x2400e3bc

0800b684 <vPortEnterCritical>:
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b694:	4a0a      	ldr	r2, [pc, #40]	; (800b6c0 <vPortEnterCritical+0x3c>)
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b69a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b69c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b69e:	d10d      	bne.n	800b6bc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6a0:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <vPortEnterCritical+0x40>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6a8:	d008      	beq.n	800b6bc <vPortEnterCritical+0x38>
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	e7fe      	b.n	800b6ba <vPortEnterCritical+0x36>
}
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	24000070 	.word	0x24000070
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b6c8:	4a08      	ldr	r2, [pc, #32]	; (800b6ec <vPortExitCritical+0x24>)
 800b6ca:	6813      	ldr	r3, [r2, #0]
 800b6cc:	b943      	cbnz	r3, 800b6e0 <vPortExitCritical+0x18>
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	e7fe      	b.n	800b6de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e4:	b90b      	cbnz	r3, 800b6ea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6e6:	f383 8811 	msr	BASEPRI, r3
}
 800b6ea:	4770      	bx	lr
 800b6ec:	24000070 	.word	0x24000070

0800b6f0 <PendSV_Handler>:
	__asm volatile
 800b6f0:	f3ef 8009 	mrs	r0, PSP
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	4b15      	ldr	r3, [pc, #84]	; (800b750 <pxCurrentTCBConst>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	f01e 0f10 	tst.w	lr, #16
 800b700:	bf08      	it	eq
 800b702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70a:	6010      	str	r0, [r2, #0]
 800b70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b714:	f380 8811 	msr	BASEPRI, r0
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f001 f948 	bl	800c9b4 <vTaskSwitchContext>
 800b724:	f04f 0000 	mov.w	r0, #0
 800b728:	f380 8811 	msr	BASEPRI, r0
 800b72c:	bc09      	pop	{r0, r3}
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	6808      	ldr	r0, [r1, #0]
 800b732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b736:	f01e 0f10 	tst.w	lr, #16
 800b73a:	bf08      	it	eq
 800b73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b740:	f380 8809 	msr	PSP, r0
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	f3af 8000 	nop.w

0800b750 <pxCurrentTCBConst>:
 800b750:	2400e3bc 	.word	0x2400e3bc

0800b754 <xPortSysTickHandler>:
{
 800b754:	b508      	push	{r3, lr}
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b766:	f000 ffb5 	bl	800c6d4 <xTaskIncrementTick>
 800b76a:	b118      	cbz	r0, 800b774 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b76c:	4b03      	ldr	r3, [pc, #12]	; (800b77c <xPortSysTickHandler+0x28>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b774:	2300      	movs	r3, #0
 800b776:	f383 8811 	msr	BASEPRI, r3
}
 800b77a:	bd08      	pop	{r3, pc}
 800b77c:	e000ed04 	.word	0xe000ed04

0800b780 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	2300      	movs	r3, #0
 800b782:	4a08      	ldr	r2, [pc, #32]	; (800b7a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b784:	4908      	ldr	r1, [pc, #32]	; (800b7a8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b788:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b78e:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <vPortSetupTimerInterrupt+0x2c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	fbb3 f3f1 	udiv	r3, r3, r1
 800b796:	4906      	ldr	r1, [pc, #24]	; (800b7b0 <vPortSetupTimerInterrupt+0x30>)
 800b798:	3b01      	subs	r3, #1
 800b79a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79c:	2307      	movs	r3, #7
 800b79e:	6013      	str	r3, [r2, #0]
}
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	e000e010 	.word	0xe000e010
 800b7a8:	e000e018 	.word	0xe000e018
 800b7ac:	24000060 	.word	0x24000060
 800b7b0:	e000e014 	.word	0xe000e014

0800b7b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7b4:	4b37      	ldr	r3, [pc, #220]	; (800b894 <xPortStartScheduler+0xe0>)
 800b7b6:	4a38      	ldr	r2, [pc, #224]	; (800b898 <xPortStartScheduler+0xe4>)
{
 800b7b8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	4291      	cmp	r1, r2
 800b7be:	d108      	bne.n	800b7d2 <xPortStartScheduler+0x1e>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	e7fe      	b.n	800b7d0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	4b31      	ldr	r3, [pc, #196]	; (800b89c <xPortStartScheduler+0xe8>)
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d108      	bne.n	800b7ec <xPortStartScheduler+0x38>
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	e7fe      	b.n	800b7ea <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ec:	4b2c      	ldr	r3, [pc, #176]	; (800b8a0 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7f0:	781a      	ldrb	r2, [r3, #0]
 800b7f2:	b2d2      	uxtb	r2, r2
 800b7f4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7f6:	22ff      	movs	r2, #255	; 0xff
 800b7f8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7fa:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7fc:	4a29      	ldr	r2, [pc, #164]	; (800b8a4 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b804:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b808:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b80c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b80e:	2307      	movs	r3, #7
 800b810:	4a25      	ldr	r2, [pc, #148]	; (800b8a8 <xPortStartScheduler+0xf4>)
 800b812:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b814:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b818:	1e5c      	subs	r4, r3, #1
 800b81a:	0600      	lsls	r0, r0, #24
 800b81c:	d40c      	bmi.n	800b838 <xPortStartScheduler+0x84>
 800b81e:	b111      	cbz	r1, 800b826 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b820:	2b03      	cmp	r3, #3
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	d011      	beq.n	800b84a <xPortStartScheduler+0x96>
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	e7fe      	b.n	800b836 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b838:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b83c:	2101      	movs	r1, #1
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f88d 3003 	strb.w	r3, [sp, #3]
 800b846:	4623      	mov	r3, r4
 800b848:	e7e4      	b.n	800b814 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b84a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800b84e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b850:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b852:	9b01      	ldr	r3, [sp, #4]
 800b854:	4a12      	ldr	r2, [pc, #72]	; (800b8a0 <xPortStartScheduler+0xec>)
 800b856:	b2db      	uxtb	r3, r3
 800b858:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b85a:	4b14      	ldr	r3, [pc, #80]	; (800b8ac <xPortStartScheduler+0xf8>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b862:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b86a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b86c:	f7ff ff88 	bl	800b780 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b870:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <xPortStartScheduler+0xfc>)
 800b872:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800b874:	f7ff feb8 	bl	800b5e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b878:	4a0e      	ldr	r2, [pc, #56]	; (800b8b4 <xPortStartScheduler+0x100>)
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b880:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b882:	f7ff fe9d 	bl	800b5c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b886:	f001 f895 	bl	800c9b4 <vTaskSwitchContext>
	prvTaskExitError();
 800b88a:	f7ff feb7 	bl	800b5fc <prvTaskExitError>
}
 800b88e:	4620      	mov	r0, r4
 800b890:	b002      	add	sp, #8
 800b892:	bd10      	pop	{r4, pc}
 800b894:	e000ed00 	.word	0xe000ed00
 800b898:	410fc271 	.word	0x410fc271
 800b89c:	410fc270 	.word	0x410fc270
 800b8a0:	e000e400 	.word	0xe000e400
 800b8a4:	2400e3b4 	.word	0x2400e3b4
 800b8a8:	2400e3b8 	.word	0x2400e3b8
 800b8ac:	e000ed20 	.word	0xe000ed20
 800b8b0:	24000070 	.word	0x24000070
 800b8b4:	e000ef34 	.word	0xe000ef34

0800b8b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8bc:	2b0f      	cmp	r3, #15
 800b8be:	d90e      	bls.n	800b8de <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8c0:	4a10      	ldr	r2, [pc, #64]	; (800b904 <vPortValidateInterruptPriority+0x4c>)
 800b8c2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4a10      	ldr	r2, [pc, #64]	; (800b908 <vPortValidateInterruptPriority+0x50>)
 800b8c6:	7812      	ldrb	r2, [r2, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d908      	bls.n	800b8de <vPortValidateInterruptPriority+0x26>
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	e7fe      	b.n	800b8dc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8de:	4b0b      	ldr	r3, [pc, #44]	; (800b90c <vPortValidateInterruptPriority+0x54>)
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <vPortValidateInterruptPriority+0x58>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6812      	ldr	r2, [r2, #0]
 800b8e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d908      	bls.n	800b900 <vPortValidateInterruptPriority+0x48>
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	e7fe      	b.n	800b8fe <vPortValidateInterruptPriority+0x46>
	}
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	e000e3f0 	.word	0xe000e3f0
 800b908:	2400e3b4 	.word	0x2400e3b4
 800b90c:	e000ed0c 	.word	0xe000ed0c
 800b910:	2400e3b8 	.word	0x2400e3b8

0800b914 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b914:	b510      	push	{r4, lr}
 800b916:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b918:	f7ff feb4 	bl	800b684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b91c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b91e:	f7ff fed3 	bl	800b6c8 <vPortExitCritical>

	return xReturn;
}
 800b922:	fab4 f084 	clz	r0, r4
 800b926:	0940      	lsrs	r0, r0, #5
 800b928:	bd10      	pop	{r4, pc}

0800b92a <prvCopyDataToQueue>:
{
 800b92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b92e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b930:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b932:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b934:	b952      	cbnz	r2, 800b94c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b936:	6807      	ldr	r7, [r0, #0]
 800b938:	bb47      	cbnz	r7, 800b98c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b93a:	6880      	ldr	r0, [r0, #8]
 800b93c:	f001 f99c 	bl	800cc78 <xTaskPriorityDisinherit>
 800b940:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b942:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b944:	3601      	adds	r6, #1
}
 800b946:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b948:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800b94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b94c:	b965      	cbnz	r5, 800b968 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b94e:	6840      	ldr	r0, [r0, #4]
 800b950:	f013 ffbc 	bl	801f8cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b954:	6863      	ldr	r3, [r4, #4]
 800b956:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b958:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b95a:	68a2      	ldr	r2, [r4, #8]
 800b95c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b960:	d3f0      	bcc.n	800b944 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	6063      	str	r3, [r4, #4]
 800b966:	e7ed      	b.n	800b944 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b968:	68c0      	ldr	r0, [r0, #12]
 800b96a:	f013 ffaf 	bl	801f8cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b96e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b970:	68e3      	ldr	r3, [r4, #12]
 800b972:	4251      	negs	r1, r2
 800b974:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b976:	6822      	ldr	r2, [r4, #0]
 800b978:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b97a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b97c:	bf3e      	ittt	cc
 800b97e:	68a3      	ldrcc	r3, [r4, #8]
 800b980:	185b      	addcc	r3, r3, r1
 800b982:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b984:	2d02      	cmp	r5, #2
 800b986:	d101      	bne.n	800b98c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b988:	b116      	cbz	r6, 800b990 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800b98a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b98c:	2500      	movs	r5, #0
 800b98e:	e7d9      	b.n	800b944 <prvCopyDataToQueue+0x1a>
 800b990:	4635      	mov	r5, r6
 800b992:	e7d7      	b.n	800b944 <prvCopyDataToQueue+0x1a>

0800b994 <prvCopyDataFromQueue>:
{
 800b994:	4603      	mov	r3, r0
 800b996:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800b99a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b99c:	b162      	cbz	r2, 800b9b8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b99e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9a0:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9a2:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9a4:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9a6:	60dc      	str	r4, [r3, #12]
}
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9ac:	bf24      	itt	cs
 800b9ae:	6819      	ldrcs	r1, [r3, #0]
 800b9b0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9b2:	68d9      	ldr	r1, [r3, #12]
 800b9b4:	f013 bf8a 	b.w	801f8cc <memcpy>
}
 800b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <prvUnlockQueue>:
{
 800b9be:	b570      	push	{r4, r5, r6, lr}
 800b9c0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b9c2:	f7ff fe5f 	bl	800b684 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b9c6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b9ce:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	dc14      	bgt.n	800b9fe <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b9d4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9d6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b9da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b9de:	f7ff fe73 	bl	800b6c8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b9e2:	f7ff fe4f 	bl	800b684 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b9e6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800b9ea:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	dc12      	bgt.n	800ba16 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b9f0:	23ff      	movs	r3, #255	; 0xff
 800b9f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b9fa:	f7ff be65 	b.w	800b6c8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0e7      	beq.n	800b9d4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba04:	4630      	mov	r0, r6
 800ba06:	f001 f853 	bl	800cab0 <xTaskRemoveFromEventList>
 800ba0a:	b108      	cbz	r0, 800ba10 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ba0c:	f001 f8dc 	bl	800cbc8 <vTaskMissedYield>
			--cTxLock;
 800ba10:	3d01      	subs	r5, #1
 800ba12:	b26d      	sxtb	r5, r5
 800ba14:	e7dc      	b.n	800b9d0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba16:	6923      	ldr	r3, [r4, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d0e9      	beq.n	800b9f0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f001 f847 	bl	800cab0 <xTaskRemoveFromEventList>
 800ba22:	b108      	cbz	r0, 800ba28 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ba24:	f001 f8d0 	bl	800cbc8 <vTaskMissedYield>
				--cRxLock;
 800ba28:	3d01      	subs	r5, #1
 800ba2a:	b26d      	sxtb	r5, r5
 800ba2c:	e7de      	b.n	800b9ec <prvUnlockQueue+0x2e>
	...

0800ba30 <xQueueGenericReset>:
{
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ba34:	4604      	mov	r4, r0
 800ba36:	b940      	cbnz	r0, 800ba4a <xQueueGenericReset+0x1a>
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	e7fe      	b.n	800ba48 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ba4a:	f7ff fe1b 	bl	800b684 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba54:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba56:	434b      	muls	r3, r1
 800ba58:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba5a:	1a5b      	subs	r3, r3, r1
 800ba5c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba5e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba60:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba62:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba64:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba66:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ba68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ba70:	b995      	cbnz	r5, 800ba98 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	b163      	cbz	r3, 800ba90 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba76:	f104 0010 	add.w	r0, r4, #16
 800ba7a:	f001 f819 	bl	800cab0 <xTaskRemoveFromEventList>
 800ba7e:	b138      	cbz	r0, 800ba90 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <xQueueGenericReset+0x7c>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ba90:	f7ff fe1a 	bl	800b6c8 <vPortExitCritical>
}
 800ba94:	2001      	movs	r0, #1
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba98:	f104 0010 	add.w	r0, r4, #16
 800ba9c:	f7ff fd4e 	bl	800b53c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800baa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800baa4:	f7ff fd4a 	bl	800b53c <vListInitialise>
 800baa8:	e7f2      	b.n	800ba90 <xQueueGenericReset+0x60>
 800baaa:	bf00      	nop
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <xQueueGenericCreateStatic>:
	{
 800bab0:	b513      	push	{r0, r1, r4, lr}
 800bab2:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bab4:	b940      	cbnz	r0, 800bac8 <xQueueGenericCreateStatic+0x18>
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	e7fe      	b.n	800bac6 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800bac8:	b943      	cbnz	r3, 800badc <xQueueGenericCreateStatic+0x2c>
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	e7fe      	b.n	800bada <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800badc:	b14a      	cbz	r2, 800baf2 <xQueueGenericCreateStatic+0x42>
 800bade:	b991      	cbnz	r1, 800bb06 <xQueueGenericCreateStatic+0x56>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	e7fe      	b.n	800baf0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800baf2:	b141      	cbz	r1, 800bb06 <xQueueGenericCreateStatic+0x56>
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	e7fe      	b.n	800bb04 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb06:	2350      	movs	r3, #80	; 0x50
 800bb08:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	2b50      	cmp	r3, #80	; 0x50
 800bb0e:	d008      	beq.n	800bb22 <xQueueGenericCreateStatic+0x72>
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	e7fe      	b.n	800bb20 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb22:	2900      	cmp	r1, #0
 800bb24:	bf08      	it	eq
 800bb26:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb28:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bb32:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb36:	4619      	mov	r1, r3
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7ff ff79 	bl	800ba30 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bb3e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800bb42:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bb44:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd10      	pop	{r4, pc}

0800bb4c <xQueueGenericCreate>:
	{
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	460d      	mov	r5, r1
 800bb50:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb52:	4606      	mov	r6, r0
 800bb54:	b940      	cbnz	r0, 800bb68 <xQueueGenericCreate+0x1c>
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	e7fe      	b.n	800bb66 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb68:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb6a:	3050      	adds	r0, #80	; 0x50
 800bb6c:	f7ff fc16 	bl	800b39c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bb70:	4604      	mov	r4, r0
 800bb72:	b170      	cbz	r0, 800bb92 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb7a:	b165      	cbz	r5, 800bb96 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb7c:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb80:	2101      	movs	r1, #1
 800bb82:	4620      	mov	r0, r4
 800bb84:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bb86:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb8a:	f7ff ff51 	bl	800ba30 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bb8e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800bb92:	4620      	mov	r0, r4
 800bb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb96:	4603      	mov	r3, r0
 800bb98:	e7f2      	b.n	800bb80 <xQueueGenericCreate+0x34>

0800bb9a <xQueueCreateCountingSemaphoreStatic>:
	{
 800bb9a:	b513      	push	{r0, r1, r4, lr}
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bba0:	b940      	cbnz	r0, 800bbb4 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	e7fe      	b.n	800bbb2 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbb4:	4288      	cmp	r0, r1
 800bbb6:	d208      	bcs.n	800bbca <xQueueCreateCountingSemaphoreStatic+0x30>
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbca:	2202      	movs	r2, #2
 800bbcc:	9200      	str	r2, [sp, #0]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	f7ff ff6d 	bl	800bab0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bbd6:	b100      	cbz	r0, 800bbda <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbd8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bbda:	b002      	add	sp, #8
 800bbdc:	bd10      	pop	{r4, pc}

0800bbde <xQueueCreateCountingSemaphore>:
	{
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bbe2:	b940      	cbnz	r0, 800bbf6 <xQueueCreateCountingSemaphore+0x18>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	e7fe      	b.n	800bbf4 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbf6:	4288      	cmp	r0, r1
 800bbf8:	d208      	bcs.n	800bc0c <xQueueCreateCountingSemaphore+0x2e>
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	e7fe      	b.n	800bc0a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	2100      	movs	r1, #0
 800bc10:	f7ff ff9c 	bl	800bb4c <xQueueGenericCreate>
		if( xHandle != NULL )
 800bc14:	b100      	cbz	r0, 800bc18 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc16:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800bc18:	bd10      	pop	{r4, pc}
	...

0800bc1c <xQueueGenericSend>:
{
 800bc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc20:	4688      	mov	r8, r1
 800bc22:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800bc24:	4604      	mov	r4, r0
{
 800bc26:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bc28:	b940      	cbnz	r0, 800bc3c <xQueueGenericSend+0x20>
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	e7fe      	b.n	800bc3a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3c:	b951      	cbnz	r1, 800bc54 <xQueueGenericSend+0x38>
 800bc3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bc40:	b143      	cbz	r3, 800bc54 <xQueueGenericSend+0x38>
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	e7fe      	b.n	800bc52 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc54:	2f02      	cmp	r7, #2
 800bc56:	d10b      	bne.n	800bc70 <xQueueGenericSend+0x54>
 800bc58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d008      	beq.n	800bc70 <xQueueGenericSend+0x54>
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	e7fe      	b.n	800bc6e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc70:	f000 ffb0 	bl	800cbd4 <xTaskGetSchedulerState>
 800bc74:	4606      	mov	r6, r0
 800bc76:	b950      	cbnz	r0, 800bc8e <xQueueGenericSend+0x72>
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	b14b      	cbz	r3, 800bc90 <xQueueGenericSend+0x74>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericSend+0x70>
 800bc8e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800bc90:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800bc94:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd7c <xQueueGenericSend+0x160>
 800bc98:	e037      	b.n	800bd0a <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc9a:	9d01      	ldr	r5, [sp, #4]
 800bc9c:	b91d      	cbnz	r5, 800bca6 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800bc9e:	f7ff fd13 	bl	800b6c8 <vPortExitCritical>
			return errQUEUE_FULL;
 800bca2:	2000      	movs	r0, #0
 800bca4:	e050      	b.n	800bd48 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800bca6:	b916      	cbnz	r6, 800bcae <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bca8:	a802      	add	r0, sp, #8
 800bcaa:	f000 ff45 	bl	800cb38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bcae:	f7ff fd0b 	bl	800b6c8 <vPortExitCritical>
		vTaskSuspendAll();
 800bcb2:	f000 fd01 	bl	800c6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcb6:	f7ff fce5 	bl	800b684 <vPortEnterCritical>
 800bcba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bcbe:	2bff      	cmp	r3, #255	; 0xff
 800bcc0:	d101      	bne.n	800bcc6 <xQueueGenericSend+0xaa>
 800bcc2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800bcc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bcca:	2bff      	cmp	r3, #255	; 0xff
 800bccc:	d101      	bne.n	800bcd2 <xQueueGenericSend+0xb6>
 800bcce:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800bcd2:	f7ff fcf9 	bl	800b6c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcd6:	a901      	add	r1, sp, #4
 800bcd8:	a802      	add	r0, sp, #8
 800bcda:	f000 ff39 	bl	800cb50 <xTaskCheckForTimeOut>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d146      	bne.n	800bd70 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bce2:	f7ff fccf 	bl	800b684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bce6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d12f      	bne.n	800bd4e <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bcee:	f7ff fceb 	bl	800b6c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcf2:	9901      	ldr	r1, [sp, #4]
 800bcf4:	f104 0010 	add.w	r0, r4, #16
 800bcf8:	f000 fea2 	bl	800ca40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f7ff fe5e 	bl	800b9be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd02:	f000 fd7d 	bl	800c800 <xTaskResumeAll>
 800bd06:	b350      	cbz	r0, 800bd5e <xQueueGenericSend+0x142>
 800bd08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800bd0a:	f7ff fcbb 	bl	800b684 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bd10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d301      	bcc.n	800bd1a <xQueueGenericSend+0xfe>
 800bd16:	2f02      	cmp	r7, #2
 800bd18:	d1bf      	bne.n	800bc9a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4641      	mov	r1, r8
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff fe03 	bl	800b92a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd26:	b11b      	cbz	r3, 800bd30 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bd2c:	f000 fec0 	bl	800cab0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800bd30:	b138      	cbz	r0, 800bd42 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800bd32:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <xQueueGenericSend+0x160>)
 800bd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bd42:	f7ff fcc1 	bl	800b6c8 <vPortExitCritical>
				return pdPASS;
 800bd46:	2001      	movs	r0, #1
}
 800bd48:	b004      	add	sp, #16
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800bd4e:	f7ff fcbb 	bl	800b6c8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bd52:	4620      	mov	r0, r4
 800bd54:	f7ff fe33 	bl	800b9be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd58:	f000 fd52 	bl	800c800 <xTaskResumeAll>
 800bd5c:	e7d4      	b.n	800bd08 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800bd5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd62:	f8ca 3000 	str.w	r3, [sl]
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	e7cb      	b.n	800bd08 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff fe24 	bl	800b9be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd76:	f000 fd43 	bl	800c800 <xTaskResumeAll>
 800bd7a:	e792      	b.n	800bca2 <xQueueGenericSend+0x86>
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <xQueueGenericSendFromISR>:
{
 800bd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd84:	4689      	mov	r9, r1
 800bd86:	4690      	mov	r8, r2
 800bd88:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	b940      	cbnz	r0, 800bda0 <xQueueGenericSendFromISR+0x20>
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	e7fe      	b.n	800bd9e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bda0:	b951      	cbnz	r1, 800bdb8 <xQueueGenericSendFromISR+0x38>
 800bda2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bda4:	b143      	cbz	r3, 800bdb8 <xQueueGenericSendFromISR+0x38>
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	e7fe      	b.n	800bdb6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdb8:	2f02      	cmp	r7, #2
 800bdba:	d10b      	bne.n	800bdd4 <xQueueGenericSendFromISR+0x54>
 800bdbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d008      	beq.n	800bdd4 <xQueueGenericSendFromISR+0x54>
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdd4:	f7ff fd70 	bl	800b8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800bdd8:	f3ef 8611 	mrs	r6, BASEPRI
 800bddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bdee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d301      	bcc.n	800bdf8 <xQueueGenericSendFromISR+0x78>
 800bdf4:	2f02      	cmp	r7, #2
 800bdf6:	d123      	bne.n	800be40 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdf8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdfc:	463a      	mov	r2, r7
 800bdfe:	4649      	mov	r1, r9
 800be00:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800be02:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be06:	f7ff fd90 	bl	800b92a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800be0a:	1c6b      	adds	r3, r5, #1
 800be0c:	d113      	bne.n	800be36 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be10:	b90b      	cbnz	r3, 800be16 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800be12:	2001      	movs	r0, #1
 800be14:	e00b      	b.n	800be2e <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800be1a:	f000 fe49 	bl	800cab0 <xTaskRemoveFromEventList>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d0f7      	beq.n	800be12 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	d0f4      	beq.n	800be12 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be28:	2001      	movs	r0, #1
 800be2a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800be2e:	f386 8811 	msr	BASEPRI, r6
}
 800be32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be36:	3501      	adds	r5, #1
 800be38:	b26d      	sxtb	r5, r5
 800be3a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800be3e:	e7e8      	b.n	800be12 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800be40:	2000      	movs	r0, #0
 800be42:	e7f4      	b.n	800be2e <xQueueGenericSendFromISR+0xae>

0800be44 <xQueueGiveFromISR>:
{
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800be48:	4604      	mov	r4, r0
 800be4a:	b940      	cbnz	r0, 800be5e <xQueueGiveFromISR+0x1a>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	e7fe      	b.n	800be5c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800be5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800be60:	b143      	cbz	r3, 800be74 <xQueueGiveFromISR+0x30>
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	e7fe      	b.n	800be72 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be74:	6803      	ldr	r3, [r0, #0]
 800be76:	b953      	cbnz	r3, 800be8e <xQueueGiveFromISR+0x4a>
 800be78:	6883      	ldr	r3, [r0, #8]
 800be7a:	b143      	cbz	r3, 800be8e <xQueueGiveFromISR+0x4a>
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	e7fe      	b.n	800be8c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be8e:	f7ff fd13 	bl	800b8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800be92:	f3ef 8611 	mrs	r6, BASEPRI
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800beaa:	4293      	cmp	r3, r2
 800beac:	d91c      	bls.n	800bee8 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800beae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800beb2:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800beb4:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800beb6:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800beb8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800beba:	d110      	bne.n	800bede <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bebe:	b90b      	cbnz	r3, 800bec4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800bec0:	2001      	movs	r0, #1
 800bec2:	e009      	b.n	800bed8 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bec4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bec8:	f000 fdf2 	bl	800cab0 <xTaskRemoveFromEventList>
 800becc:	2800      	cmp	r0, #0
 800bece:	d0f7      	beq.n	800bec0 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	d0f5      	beq.n	800bec0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bed4:	2001      	movs	r0, #1
 800bed6:	6028      	str	r0, [r5, #0]
	__asm volatile
 800bed8:	f386 8811 	msr	BASEPRI, r6
}
 800bedc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bede:	3301      	adds	r3, #1
 800bee0:	b25b      	sxtb	r3, r3
 800bee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bee6:	e7eb      	b.n	800bec0 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800bee8:	2000      	movs	r0, #0
 800beea:	e7f5      	b.n	800bed8 <xQueueGiveFromISR+0x94>

0800beec <xQueueReceive>:
{
 800beec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bef0:	b085      	sub	sp, #20
 800bef2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800bef4:	4604      	mov	r4, r0
{
 800bef6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bef8:	b940      	cbnz	r0, 800bf0c <xQueueReceive+0x20>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	e7fe      	b.n	800bf0a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf0c:	b951      	cbnz	r1, 800bf24 <xQueueReceive+0x38>
 800bf0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bf10:	b143      	cbz	r3, 800bf24 <xQueueReceive+0x38>
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	e7fe      	b.n	800bf22 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf24:	f000 fe56 	bl	800cbd4 <xTaskGetSchedulerState>
 800bf28:	4606      	mov	r6, r0
 800bf2a:	b950      	cbnz	r0, 800bf42 <xQueueReceive+0x56>
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	b14b      	cbz	r3, 800bf44 <xQueueReceive+0x58>
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	e7fe      	b.n	800bf40 <xQueueReceive+0x54>
 800bf42:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800bf44:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800bf48:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800c028 <xQueueReceive+0x13c>
 800bf4c:	e03b      	b.n	800bfc6 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf4e:	9d01      	ldr	r5, [sp, #4]
 800bf50:	b91d      	cbnz	r5, 800bf5a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800bf52:	f7ff fbb9 	bl	800b6c8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800bf56:	2000      	movs	r0, #0
 800bf58:	e052      	b.n	800c000 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800bf5a:	b916      	cbnz	r6, 800bf62 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf5c:	a802      	add	r0, sp, #8
 800bf5e:	f000 fdeb 	bl	800cb38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bf62:	f7ff fbb1 	bl	800b6c8 <vPortExitCritical>
		vTaskSuspendAll();
 800bf66:	f000 fba7 	bl	800c6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf6a:	f7ff fb8b 	bl	800b684 <vPortEnterCritical>
 800bf6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bf72:	2bff      	cmp	r3, #255	; 0xff
 800bf74:	d101      	bne.n	800bf7a <xQueueReceive+0x8e>
 800bf76:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800bf7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bf7e:	2bff      	cmp	r3, #255	; 0xff
 800bf80:	d101      	bne.n	800bf86 <xQueueReceive+0x9a>
 800bf82:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800bf86:	f7ff fb9f 	bl	800b6c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf8a:	a901      	add	r1, sp, #4
 800bf8c:	a802      	add	r0, sp, #8
 800bf8e:	f000 fddf 	bl	800cb50 <xTaskCheckForTimeOut>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d13d      	bne.n	800c012 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7ff fcbc 	bl	800b914 <prvIsQueueEmpty>
 800bf9c:	b398      	cbz	r0, 800c006 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf9e:	9901      	ldr	r1, [sp, #4]
 800bfa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bfa4:	f000 fd4c 	bl	800ca40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f7ff fd08 	bl	800b9be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfae:	f000 fc27 	bl	800c800 <xTaskResumeAll>
 800bfb2:	b938      	cbnz	r0, 800bfc4 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 800bfb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bfb8:	f8c9 3000 	str.w	r3, [r9]
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800bfc6:	f7ff fb5d 	bl	800b684 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfcc:	2d00      	cmp	r5, #0
 800bfce:	d0be      	beq.n	800bf4e <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfd0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7ff fcdd 	bl	800b994 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfda:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfdc:	6923      	ldr	r3, [r4, #16]
 800bfde:	b163      	cbz	r3, 800bffa <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfe0:	f104 0010 	add.w	r0, r4, #16
 800bfe4:	f000 fd64 	bl	800cab0 <xTaskRemoveFromEventList>
 800bfe8:	b138      	cbz	r0, 800bffa <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800bfea:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <xQueueReceive+0x13c>)
 800bfec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bffa:	f7ff fb65 	bl	800b6c8 <vPortExitCritical>
				return pdPASS;
 800bffe:	2001      	movs	r0, #1
}
 800c000:	b005      	add	sp, #20
 800c002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800c006:	4620      	mov	r0, r4
 800c008:	f7ff fcd9 	bl	800b9be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c00c:	f000 fbf8 	bl	800c800 <xTaskResumeAll>
 800c010:	e7d8      	b.n	800bfc4 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800c012:	4620      	mov	r0, r4
 800c014:	f7ff fcd3 	bl	800b9be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c018:	f000 fbf2 	bl	800c800 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c01c:	4620      	mov	r0, r4
 800c01e:	f7ff fc79 	bl	800b914 <prvIsQueueEmpty>
 800c022:	2800      	cmp	r0, #0
 800c024:	d0ce      	beq.n	800bfc4 <xQueueReceive+0xd8>
 800c026:	e796      	b.n	800bf56 <xQueueReceive+0x6a>
 800c028:	e000ed04 	.word	0xe000ed04

0800c02c <xQueueSemaphoreTake>:
{
 800c02c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800c030:	4604      	mov	r4, r0
{
 800c032:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c034:	b940      	cbnz	r0, 800c048 <xQueueSemaphoreTake+0x1c>
 800c036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	e7fe      	b.n	800c046 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c048:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800c04a:	b145      	cbz	r5, 800c05e <xQueueSemaphoreTake+0x32>
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	e7fe      	b.n	800c05c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c05e:	f000 fdb9 	bl	800cbd4 <xTaskGetSchedulerState>
 800c062:	4606      	mov	r6, r0
 800c064:	b950      	cbnz	r0, 800c07c <xQueueSemaphoreTake+0x50>
 800c066:	9b01      	ldr	r3, [sp, #4]
 800c068:	b16b      	cbz	r3, 800c086 <xQueueSemaphoreTake+0x5a>
 800c06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06e:	f383 8811 	msr	BASEPRI, r3
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	e7fe      	b.n	800c07a <xQueueSemaphoreTake+0x4e>
 800c07c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c07e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800c080:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800c1b0 <xQueueSemaphoreTake+0x184>
 800c084:	e051      	b.n	800c12a <xQueueSemaphoreTake+0xfe>
 800c086:	4605      	mov	r5, r0
 800c088:	e7f9      	b.n	800c07e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	b963      	cbnz	r3, 800c0a8 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c08e:	b145      	cbz	r5, 800c0a2 <xQueueSemaphoreTake+0x76>
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800c0a2:	f7ff fb11 	bl	800b6c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c0a6:	e05e      	b.n	800c166 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800c0a8:	b916      	cbnz	r6, 800c0b0 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0aa:	a802      	add	r0, sp, #8
 800c0ac:	f000 fd44 	bl	800cb38 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c0b0:	f7ff fb0a 	bl	800b6c8 <vPortExitCritical>
		vTaskSuspendAll();
 800c0b4:	f000 fb00 	bl	800c6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0b8:	f7ff fae4 	bl	800b684 <vPortEnterCritical>
 800c0bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c0c0:	2bff      	cmp	r3, #255	; 0xff
 800c0c2:	d101      	bne.n	800c0c8 <xQueueSemaphoreTake+0x9c>
 800c0c4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800c0c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c0cc:	2bff      	cmp	r3, #255	; 0xff
 800c0ce:	d101      	bne.n	800c0d4 <xQueueSemaphoreTake+0xa8>
 800c0d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0d4:	f7ff faf8 	bl	800b6c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0d8:	a901      	add	r1, sp, #4
 800c0da:	a802      	add	r0, sp, #8
 800c0dc:	f000 fd38 	bl	800cb50 <xTaskCheckForTimeOut>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d14a      	bne.n	800c17a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f7ff fc15 	bl	800b914 <prvIsQueueEmpty>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d03f      	beq.n	800c16e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	b93b      	cbnz	r3, 800c102 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800c0f2:	f7ff fac7 	bl	800b684 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0f6:	68a0      	ldr	r0, [r4, #8]
 800c0f8:	f000 fd7c 	bl	800cbf4 <xTaskPriorityInherit>
 800c0fc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c0fe:	f7ff fae3 	bl	800b6c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c102:	9901      	ldr	r1, [sp, #4]
 800c104:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c108:	f000 fc9a 	bl	800ca40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7ff fc56 	bl	800b9be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c112:	f000 fb75 	bl	800c800 <xTaskResumeAll>
 800c116:	b938      	cbnz	r0, 800c128 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800c118:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c11c:	f8c8 3000 	str.w	r3, [r8]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800c12a:	f7ff faab 	bl	800b684 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c12e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0aa      	beq.n	800c08a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c134:	3b01      	subs	r3, #1
 800c136:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	b913      	cbnz	r3, 800c142 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c13c:	f000 fe32 	bl	800cda4 <pvTaskIncrementMutexHeldCount>
 800c140:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	b163      	cbz	r3, 800c160 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c146:	f104 0010 	add.w	r0, r4, #16
 800c14a:	f000 fcb1 	bl	800cab0 <xTaskRemoveFromEventList>
 800c14e:	b138      	cbz	r0, 800c160 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800c150:	4b17      	ldr	r3, [pc, #92]	; (800c1b0 <xQueueSemaphoreTake+0x184>)
 800c152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800c160:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800c162:	f7ff fab1 	bl	800b6c8 <vPortExitCritical>
}
 800c166:	4628      	mov	r0, r5
 800c168:	b004      	add	sp, #16
 800c16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff fc25 	bl	800b9be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c174:	f000 fb44 	bl	800c800 <xTaskResumeAll>
 800c178:	e7d6      	b.n	800c128 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7ff fc1f 	bl	800b9be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c180:	f000 fb3e 	bl	800c800 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c184:	4620      	mov	r0, r4
 800c186:	f7ff fbc5 	bl	800b914 <prvIsQueueEmpty>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0cc      	beq.n	800c128 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800c18e:	2d00      	cmp	r5, #0
 800c190:	d0e9      	beq.n	800c166 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800c192:	f7ff fa77 	bl	800b684 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c196:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c198:	b119      	cbz	r1, 800c1a2 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c19a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c19c:	6819      	ldr	r1, [r3, #0]
 800c19e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1a2:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800c1a4:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1a6:	f000 fdab 	bl	800cd00 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c1aa:	f7ff fa8d 	bl	800b6c8 <vPortExitCritical>
 800c1ae:	e7da      	b.n	800c166 <xQueueSemaphoreTake+0x13a>
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xQueueReceiveFromISR>:
{
 800c1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b8:	4689      	mov	r9, r1
 800c1ba:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c1bc:	4605      	mov	r5, r0
 800c1be:	b940      	cbnz	r0, 800c1d2 <xQueueReceiveFromISR+0x1e>
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1d2:	b951      	cbnz	r1, 800c1ea <xQueueReceiveFromISR+0x36>
 800c1d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c1d6:	b143      	cbz	r3, 800c1ea <xQueueReceiveFromISR+0x36>
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	e7fe      	b.n	800c1e8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1ea:	f7ff fb65 	bl	800b8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c1ee:	f3ef 8711 	mrs	r7, BASEPRI
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c202:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c204:	b31c      	cbz	r4, 800c24e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c206:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c20a:	4649      	mov	r1, r9
 800c20c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c20e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c210:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c212:	f7ff fbbf 	bl	800b994 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c216:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800c218:	1c73      	adds	r3, r6, #1
 800c21a:	d113      	bne.n	800c244 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c21c:	692b      	ldr	r3, [r5, #16]
 800c21e:	b90b      	cbnz	r3, 800c224 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800c220:	2001      	movs	r0, #1
 800c222:	e00b      	b.n	800c23c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c224:	f105 0010 	add.w	r0, r5, #16
 800c228:	f000 fc42 	bl	800cab0 <xTaskRemoveFromEventList>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d0f7      	beq.n	800c220 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800c230:	f1b8 0f00 	cmp.w	r8, #0
 800c234:	d0f4      	beq.n	800c220 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c236:	2001      	movs	r0, #1
 800c238:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c23c:	f387 8811 	msr	BASEPRI, r7
}
 800c240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c244:	3601      	adds	r6, #1
 800c246:	b276      	sxtb	r6, r6
 800c248:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800c24c:	e7e8      	b.n	800c220 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800c24e:	4620      	mov	r0, r4
 800c250:	e7f4      	b.n	800c23c <xQueueReceiveFromISR+0x88>
	...

0800c254 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c254:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c256:	4a07      	ldr	r2, [pc, #28]	; (800c274 <vQueueAddToRegistry+0x20>)
	{
 800c258:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c25a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c25e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c262:	b91d      	cbnz	r5, 800c26c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c264:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c268:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c26a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c26c:	3301      	adds	r3, #1
 800c26e:	2b08      	cmp	r3, #8
 800c270:	d1f3      	bne.n	800c25a <vQueueAddToRegistry+0x6>
 800c272:	e7fa      	b.n	800c26a <vQueueAddToRegistry+0x16>
 800c274:	2400f03c 	.word	0x2400f03c

0800c278 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c278:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c27a:	4909      	ldr	r1, [pc, #36]	; (800c2a0 <vQueueUnregisterQueue+0x28>)
	{
 800c27c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c27e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800c282:	00dc      	lsls	r4, r3, #3
 800c284:	4282      	cmp	r2, r0
 800c286:	d106      	bne.n	800c296 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c288:	4a06      	ldr	r2, [pc, #24]	; (800c2a4 <vQueueUnregisterQueue+0x2c>)
 800c28a:	2100      	movs	r1, #0
 800c28c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c290:	4422      	add	r2, r4
 800c292:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c294:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c296:	3301      	adds	r3, #1
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d1f0      	bne.n	800c27e <vQueueUnregisterQueue+0x6>
 800c29c:	e7fa      	b.n	800c294 <vQueueUnregisterQueue+0x1c>
 800c29e:	bf00      	nop
 800c2a0:	2400f040 	.word	0x2400f040
 800c2a4:	2400f03c 	.word	0x2400f03c

0800c2a8 <vQueueDelete>:
{
 800c2a8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c2aa:	b940      	cbnz	r0, 800c2be <vQueueDelete+0x16>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	e7fe      	b.n	800c2bc <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c2be:	f7ff ffdb 	bl	800c278 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2c2:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800c2c6:	b91b      	cbnz	r3, 800c2d0 <vQueueDelete+0x28>
}
 800c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c2cc:	f7ff b8f8 	b.w	800b4c0 <vPortFree>
}
 800c2d0:	bd10      	pop	{r4, pc}

0800c2d2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2d2:	b570      	push	{r4, r5, r6, lr}
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c2da:	f7ff f9d3 	bl	800b684 <vPortEnterCritical>
 800c2de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c2e2:	2bff      	cmp	r3, #255	; 0xff
 800c2e4:	d102      	bne.n	800c2ec <vQueueWaitForMessageRestricted+0x1a>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c2ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c2f0:	2bff      	cmp	r3, #255	; 0xff
 800c2f2:	d102      	bne.n	800c2fa <vQueueWaitForMessageRestricted+0x28>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2fa:	f7ff f9e5 	bl	800b6c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c300:	b92b      	cbnz	r3, 800c30e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c302:	4632      	mov	r2, r6
 800c304:	4629      	mov	r1, r5
 800c306:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c30a:	f000 fbb3 	bl	800ca74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c30e:	4620      	mov	r0, r4
	}
 800c310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c314:	f7ff bb53 	b.w	800b9be <prvUnlockQueue>

0800c318 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c31e:	f7ff f9b1 	bl	800b684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c322:	4b2e      	ldr	r3, [pc, #184]	; (800c3dc <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800c324:	4d2e      	ldr	r5, [pc, #184]	; (800c3e0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	4f2e      	ldr	r7, [pc, #184]	; (800c3e4 <prvAddNewTaskToReadyList+0xcc>)
 800c32a:	3201      	adds	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c32e:	682e      	ldr	r6, [r5, #0]
 800c330:	2e00      	cmp	r6, #0
 800c332:	d148      	bne.n	800c3c6 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c334:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d11f      	bne.n	800c37c <prvAddNewTaskToReadyList+0x64>
 800c33c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c33e:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c340:	4640      	mov	r0, r8
 800c342:	f7ff f8fb 	bl	800b53c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c346:	f108 0814 	add.w	r8, r8, #20
 800c34a:	2e38      	cmp	r6, #56	; 0x38
 800c34c:	d1f7      	bne.n	800c33e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c34e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c410 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c352:	4e25      	ldr	r6, [pc, #148]	; (800c3e8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800c354:	4640      	mov	r0, r8
 800c356:	f7ff f8f1 	bl	800b53c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff f8ee 	bl	800b53c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c360:	4822      	ldr	r0, [pc, #136]	; (800c3ec <prvAddNewTaskToReadyList+0xd4>)
 800c362:	f7ff f8eb 	bl	800b53c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c366:	4822      	ldr	r0, [pc, #136]	; (800c3f0 <prvAddNewTaskToReadyList+0xd8>)
 800c368:	f7ff f8e8 	bl	800b53c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c36c:	4821      	ldr	r0, [pc, #132]	; (800c3f4 <prvAddNewTaskToReadyList+0xdc>)
 800c36e:	f7ff f8e5 	bl	800b53c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c372:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <prvAddNewTaskToReadyList+0xe0>)
 800c374:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c378:	4b20      	ldr	r3, [pc, #128]	; (800c3fc <prvAddNewTaskToReadyList+0xe4>)
 800c37a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800c37c:	4a20      	ldr	r2, [pc, #128]	; (800c400 <prvAddNewTaskToReadyList+0xe8>)
 800c37e:	6813      	ldr	r3, [r2, #0]
 800c380:	3301      	adds	r3, #1
 800c382:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c384:	4a1f      	ldr	r2, [pc, #124]	; (800c404 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c386:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c388:	6811      	ldr	r1, [r2, #0]
 800c38a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c38c:	428b      	cmp	r3, r1
 800c38e:	d900      	bls.n	800c392 <prvAddNewTaskToReadyList+0x7a>
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	2014      	movs	r0, #20
 800c394:	1d21      	adds	r1, r4, #4
 800c396:	fb00 7003 	mla	r0, r0, r3, r7
 800c39a:	f7ff f8dd 	bl	800b558 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c39e:	f7ff f993 	bl	800b6c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c3a2:	4b19      	ldr	r3, [pc, #100]	; (800c408 <prvAddNewTaskToReadyList+0xf0>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	b163      	cbz	r3, 800c3c2 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d207      	bcs.n	800c3c2 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800c3b2:	4b16      	ldr	r3, [pc, #88]	; (800c40c <prvAddNewTaskToReadyList+0xf4>)
 800c3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	f3bf 8f6f 	isb	sy
}
 800c3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c3c6:	4b10      	ldr	r3, [pc, #64]	; (800c408 <prvAddNewTaskToReadyList+0xf0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1d6      	bne.n	800c37c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d8d1      	bhi.n	800c37c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c3d8:	602c      	str	r4, [r5, #0]
 800c3da:	e7cf      	b.n	800c37c <prvAddNewTaskToReadyList+0x64>
 800c3dc:	2400e828 	.word	0x2400e828
 800c3e0:	2400e3bc 	.word	0x2400e3bc
 800c3e4:	2400e3c8 	.word	0x2400e3c8
 800c3e8:	2400e850 	.word	0x2400e850
 800c3ec:	2400e870 	.word	0x2400e870
 800c3f0:	2400e89c 	.word	0x2400e89c
 800c3f4:	2400e888 	.word	0x2400e888
 800c3f8:	2400e3c0 	.word	0x2400e3c0
 800c3fc:	2400e3c4 	.word	0x2400e3c4
 800c400:	2400e834 	.word	0x2400e834
 800c404:	2400e838 	.word	0x2400e838
 800c408:	2400e884 	.word	0x2400e884
 800c40c:	e000ed04 	.word	0xe000ed04
 800c410:	2400e83c 	.word	0x2400e83c

0800c414 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c414:	4a06      	ldr	r2, [pc, #24]	; (800c430 <prvResetNextTaskUnblockTime+0x1c>)
 800c416:	6813      	ldr	r3, [r2, #0]
 800c418:	6819      	ldr	r1, [r3, #0]
 800c41a:	4b06      	ldr	r3, [pc, #24]	; (800c434 <prvResetNextTaskUnblockTime+0x20>)
 800c41c:	b919      	cbnz	r1, 800c426 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c422:	601a      	str	r2, [r3, #0]
	}
}
 800c424:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c426:	6812      	ldr	r2, [r2, #0]
 800c428:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c42a:	68d2      	ldr	r2, [r2, #12]
 800c42c:	6852      	ldr	r2, [r2, #4]
 800c42e:	e7f8      	b.n	800c422 <prvResetNextTaskUnblockTime+0xe>
 800c430:	2400e3c0 	.word	0x2400e3c0
 800c434:	2400e864 	.word	0x2400e864

0800c438 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c43c:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c440:	4606      	mov	r6, r0
 800c442:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c444:	21a5      	movs	r1, #165	; 0xa5
 800c446:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c448:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c44a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c44e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c452:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c454:	f013 fa48 	bl	801f8e8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c458:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c45a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c45c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800c460:	2d00      	cmp	r5, #0
 800c462:	d037      	beq.n	800c4d4 <prvInitialiseNewTask.isra.0+0x9c>
 800c464:	1e6b      	subs	r3, r5, #1
 800c466:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c46a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c46c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c470:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800c474:	7819      	ldrb	r1, [r3, #0]
 800c476:	b109      	cbz	r1, 800c47c <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c478:	42ab      	cmp	r3, r5
 800c47a:	d1f7      	bne.n	800c46c <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c47c:	2300      	movs	r3, #0
 800c47e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c482:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c484:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c488:	1d20      	adds	r0, r4, #4
 800c48a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c48c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800c490:	bf28      	it	cs
 800c492:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c494:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c496:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c498:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c49c:	f7ff f859 	bl	800b552 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4a0:	f104 0018 	add.w	r0, r4, #24
 800c4a4:	f7ff f855 	bl	800b552 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c4a8:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ac:	463a      	mov	r2, r7
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4b2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4b4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4b6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c4b8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4bc:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4c0:	f7ff f8bc 	bl	800b63c <pxPortInitialiseStack>
 800c4c4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c4c6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ca:	d001      	beq.n	800c4d0 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4cc:	f8c8 4000 	str.w	r4, [r8]
}
 800c4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4d4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800c4d8:	e7d3      	b.n	800c482 <prvInitialiseNewTask.isra.0+0x4a>

0800c4da <prvDeleteTCB>:
	{
 800c4da:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4dc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800c4e0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4e2:	b93b      	cbnz	r3, 800c4f4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c4e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c4e6:	f7fe ffeb 	bl	800b4c0 <vPortFree>
				vPortFree( pxTCB );
 800c4ea:	4620      	mov	r0, r4
	}
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c4f0:	f7fe bfe6 	b.w	800b4c0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d0f9      	beq.n	800c4ec <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d008      	beq.n	800c50e <prvDeleteTCB+0x34>
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	e7fe      	b.n	800c50c <prvDeleteTCB+0x32>
	}
 800c50e:	bd10      	pop	{r4, pc}

0800c510 <prvIdleTask>:
{
 800c510:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c512:	4e14      	ldr	r6, [pc, #80]	; (800c564 <prvIdleTask+0x54>)
				taskYIELD();
 800c514:	4f14      	ldr	r7, [pc, #80]	; (800c568 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c516:	4c15      	ldr	r4, [pc, #84]	; (800c56c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800c518:	4d15      	ldr	r5, [pc, #84]	; (800c570 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	b96b      	cbnz	r3, 800c53a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <prvIdleTask+0x64>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d906      	bls.n	800c534 <prvIdleTask+0x24>
				taskYIELD();
 800c526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c534:	f7f4 f8a0 	bl	8000678 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c538:	e7ed      	b.n	800c516 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c53a:	f7ff f8a3 	bl	800b684 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c53e:	68f3      	ldr	r3, [r6, #12]
 800c540:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c544:	f108 0004 	add.w	r0, r8, #4
 800c548:	f7ff f829 	bl	800b59e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	3b01      	subs	r3, #1
 800c550:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	3b01      	subs	r3, #1
 800c556:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c558:	f7ff f8b6 	bl	800b6c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c55c:	4640      	mov	r0, r8
 800c55e:	f7ff ffbc 	bl	800c4da <prvDeleteTCB>
 800c562:	e7da      	b.n	800c51a <prvIdleTask+0xa>
 800c564:	2400e89c 	.word	0x2400e89c
 800c568:	e000ed04 	.word	0xe000ed04
 800c56c:	2400e82c 	.word	0x2400e82c
 800c570:	2400e828 	.word	0x2400e828
 800c574:	2400e3c8 	.word	0x2400e3c8

0800c578 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c57a:	4b16      	ldr	r3, [pc, #88]	; (800c5d4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c57c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c57e:	4e16      	ldr	r6, [pc, #88]	; (800c5d8 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800c580:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c582:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c584:	6830      	ldr	r0, [r6, #0]
 800c586:	3004      	adds	r0, #4
 800c588:	f7ff f809 	bl	800b59e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c58c:	1c63      	adds	r3, r4, #1
 800c58e:	4633      	mov	r3, r6
 800c590:	d107      	bne.n	800c5a2 <prvAddCurrentTaskToDelayedList+0x2a>
 800c592:	b137      	cbz	r7, 800c5a2 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c594:	6831      	ldr	r1, [r6, #0]
 800c596:	4811      	ldr	r0, [pc, #68]	; (800c5dc <prvAddCurrentTaskToDelayedList+0x64>)
 800c598:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c59a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c59e:	f7fe bfdb 	b.w	800b558 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5a2:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800c5a8:	d307      	bcc.n	800c5ba <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5aa:	4a0d      	ldr	r2, [pc, #52]	; (800c5e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800c5ac:	6810      	ldr	r0, [r2, #0]
 800c5ae:	6819      	ldr	r1, [r3, #0]
}
 800c5b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b4:	3104      	adds	r1, #4
 800c5b6:	f7fe bfdb 	b.w	800b570 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ba:	4a0a      	ldr	r2, [pc, #40]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c5bc:	6810      	ldr	r0, [r2, #0]
 800c5be:	6819      	ldr	r1, [r3, #0]
 800c5c0:	3104      	adds	r1, #4
 800c5c2:	f7fe ffd5 	bl	800b570 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5c6:	4b08      	ldr	r3, [pc, #32]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0x70>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	42a2      	cmp	r2, r4
 800c5cc:	d900      	bls.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800c5ce:	601c      	str	r4, [r3, #0]
}
 800c5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2400e8b0 	.word	0x2400e8b0
 800c5d8:	2400e3bc 	.word	0x2400e3bc
 800c5dc:	2400e888 	.word	0x2400e888
 800c5e0:	2400e3c4 	.word	0x2400e3c4
 800c5e4:	2400e3c0 	.word	0x2400e3c0
 800c5e8:	2400e864 	.word	0x2400e864

0800c5ec <xTaskCreateStatic>:
	{
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c5f4:	b945      	cbnz	r5, 800c608 <xTaskCreateStatic+0x1c>
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	e7fe      	b.n	800c606 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c608:	b944      	cbnz	r4, 800c61c <xTaskCreateStatic+0x30>
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	e7fe      	b.n	800c61a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c61c:	2660      	movs	r6, #96	; 0x60
 800c61e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c620:	9e05      	ldr	r6, [sp, #20]
 800c622:	2e60      	cmp	r6, #96	; 0x60
 800c624:	d008      	beq.n	800c638 <xTaskCreateStatic+0x4c>
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	e7fe      	b.n	800c636 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c638:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c63a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c63c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c63e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c642:	ad04      	add	r5, sp, #16
 800c644:	9402      	str	r4, [sp, #8]
 800c646:	9501      	str	r5, [sp, #4]
 800c648:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c64a:	9500      	str	r5, [sp, #0]
 800c64c:	f7ff fef4 	bl	800c438 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff fe61 	bl	800c318 <prvAddNewTaskToReadyList>
	}
 800c656:	9804      	ldr	r0, [sp, #16]
 800c658:	b006      	add	sp, #24
 800c65a:	bd70      	pop	{r4, r5, r6, pc}

0800c65c <xTaskCreate>:
	{
 800c65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c660:	4607      	mov	r7, r0
 800c662:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c664:	0090      	lsls	r0, r2, #2
	{
 800c666:	4688      	mov	r8, r1
 800c668:	4616      	mov	r6, r2
 800c66a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c66c:	f7fe fe96 	bl	800b39c <pvPortMalloc>
			if( pxStack != NULL )
 800c670:	4605      	mov	r5, r0
 800c672:	b1e8      	cbz	r0, 800c6b0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c674:	2060      	movs	r0, #96	; 0x60
 800c676:	f7fe fe91 	bl	800b39c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c67a:	4604      	mov	r4, r0
 800c67c:	b1a8      	cbz	r0, 800c6aa <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c67e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c680:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c682:	4632      	mov	r2, r6
 800c684:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c686:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	4638      	mov	r0, r7
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	464b      	mov	r3, r9
 800c698:	f7ff fece 	bl	800c438 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7ff fe3b 	bl	800c318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6a2:	2001      	movs	r0, #1
	}
 800c6a4:	b005      	add	sp, #20
 800c6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7fe ff08 	bl	800b4c0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800c6b4:	e7f6      	b.n	800c6a4 <xTaskCreate+0x48>
	...

0800c6b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c6b8:	4a02      	ldr	r2, [pc, #8]	; (800c6c4 <vTaskSuspendAll+0xc>)
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	6013      	str	r3, [r2, #0]
}
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	2400e830 	.word	0x2400e830

0800c6c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c6c8:	4b01      	ldr	r3, [pc, #4]	; (800c6d0 <xTaskGetTickCount+0x8>)
 800c6ca:	6818      	ldr	r0, [r3, #0]
}
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	2400e8b0 	.word	0x2400e8b0

0800c6d4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6d4:	4b3f      	ldr	r3, [pc, #252]	; (800c7d4 <xTaskIncrementTick+0x100>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
{
 800c6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d172      	bne.n	800c7c6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6e0:	4b3d      	ldr	r3, [pc, #244]	; (800c7d8 <xTaskIncrementTick+0x104>)
 800c6e2:	681d      	ldr	r5, [r3, #0]
 800c6e4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c6e6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6e8:	b9bd      	cbnz	r5, 800c71a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c6ea:	4b3c      	ldr	r3, [pc, #240]	; (800c7dc <xTaskIncrementTick+0x108>)
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	6812      	ldr	r2, [r2, #0]
 800c6f0:	b142      	cbz	r2, 800c704 <xTaskIncrementTick+0x30>
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	e7fe      	b.n	800c702 <xTaskIncrementTick+0x2e>
 800c704:	4a36      	ldr	r2, [pc, #216]	; (800c7e0 <xTaskIncrementTick+0x10c>)
 800c706:	6819      	ldr	r1, [r3, #0]
 800c708:	6810      	ldr	r0, [r2, #0]
 800c70a:	6018      	str	r0, [r3, #0]
 800c70c:	6011      	str	r1, [r2, #0]
 800c70e:	4a35      	ldr	r2, [pc, #212]	; (800c7e4 <xTaskIncrementTick+0x110>)
 800c710:	6813      	ldr	r3, [r2, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	f7ff fe7d 	bl	800c414 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c71a:	4e33      	ldr	r6, [pc, #204]	; (800c7e8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c71c:	2400      	movs	r4, #0
 800c71e:	4f33      	ldr	r7, [pc, #204]	; (800c7ec <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c720:	6833      	ldr	r3, [r6, #0]
 800c722:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800c7f8 <xTaskIncrementTick+0x124>
 800c726:	429d      	cmp	r5, r3
 800c728:	d211      	bcs.n	800c74e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c72a:	f8d8 3000 	ldr.w	r3, [r8]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	2314      	movs	r3, #20
 800c732:	4353      	muls	r3, r2
 800c734:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800c736:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800c738:	4b2d      	ldr	r3, [pc, #180]	; (800c7f0 <xTaskIncrementTick+0x11c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800c73c:	bf28      	it	cs
 800c73e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800c740:	2b00      	cmp	r3, #0
 800c742:	bf18      	it	ne
 800c744:	2401      	movne	r4, #1
}
 800c746:	4620      	mov	r0, r4
 800c748:	b003      	add	sp, #12
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c74e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c7dc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c752:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c7fc <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c756:	f8d9 3000 	ldr.w	r3, [r9]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	b91b      	cbnz	r3, 800c766 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295
 800c762:	6033      	str	r3, [r6, #0]
					break;
 800c764:	e7e1      	b.n	800c72a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c766:	f8d9 3000 	ldr.w	r3, [r9]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c770:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800c774:	4295      	cmp	r5, r2
 800c776:	d201      	bcs.n	800c77c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800c778:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c77a:	e7d6      	b.n	800c72a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c77c:	f10b 0104 	add.w	r1, fp, #4
 800c780:	4608      	mov	r0, r1
 800c782:	9101      	str	r1, [sp, #4]
 800c784:	f7fe ff0b 	bl	800b59e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c788:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800c78c:	9901      	ldr	r1, [sp, #4]
 800c78e:	b122      	cbz	r2, 800c79a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c790:	f10b 0018 	add.w	r0, fp, #24
 800c794:	f7fe ff03 	bl	800b59e <uxListRemove>
 800c798:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800c79a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800c79e:	f8da 2000 	ldr.w	r2, [sl]
 800c7a2:	4290      	cmp	r0, r2
 800c7a4:	d901      	bls.n	800c7aa <xTaskIncrementTick+0xd6>
 800c7a6:	f8ca 0000 	str.w	r0, [sl]
 800c7aa:	2314      	movs	r3, #20
 800c7ac:	fb03 7000 	mla	r0, r3, r0, r7
 800c7b0:	f7fe fed2 	bl	800b558 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7b4:	f8d8 1000 	ldr.w	r1, [r8]
 800c7b8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800c7bc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	bf28      	it	cs
 800c7c2:	2401      	movcs	r4, #1
 800c7c4:	e7c7      	b.n	800c756 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800c7c6:	4a0b      	ldr	r2, [pc, #44]	; (800c7f4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800c7c8:	2400      	movs	r4, #0
		++xPendedTicks;
 800c7ca:	6813      	ldr	r3, [r2, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800c7d0:	e7b9      	b.n	800c746 <xTaskIncrementTick+0x72>
 800c7d2:	bf00      	nop
 800c7d4:	2400e830 	.word	0x2400e830
 800c7d8:	2400e8b0 	.word	0x2400e8b0
 800c7dc:	2400e3c0 	.word	0x2400e3c0
 800c7e0:	2400e3c4 	.word	0x2400e3c4
 800c7e4:	2400e868 	.word	0x2400e868
 800c7e8:	2400e864 	.word	0x2400e864
 800c7ec:	2400e3c8 	.word	0x2400e3c8
 800c7f0:	2400e8b4 	.word	0x2400e8b4
 800c7f4:	2400e86c 	.word	0x2400e86c
 800c7f8:	2400e3bc 	.word	0x2400e3bc
 800c7fc:	2400e838 	.word	0x2400e838

0800c800 <xTaskResumeAll>:
{
 800c800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800c802:	4c30      	ldr	r4, [pc, #192]	; (800c8c4 <xTaskResumeAll+0xc4>)
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	b943      	cbnz	r3, 800c81a <xTaskResumeAll+0x1a>
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	e7fe      	b.n	800c818 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800c81a:	f7fe ff33 	bl	800b684 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	3b01      	subs	r3, #1
 800c822:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c824:	6824      	ldr	r4, [r4, #0]
 800c826:	b12c      	cbz	r4, 800c834 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800c828:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c82a:	f7fe ff4d 	bl	800b6c8 <vPortExitCritical>
}
 800c82e:	4620      	mov	r0, r4
 800c830:	b003      	add	sp, #12
 800c832:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c834:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <xTaskResumeAll+0xc8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0f5      	beq.n	800c828 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c83c:	4d23      	ldr	r5, [pc, #140]	; (800c8cc <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800c83e:	4e24      	ldr	r6, [pc, #144]	; (800c8d0 <xTaskResumeAll+0xd0>)
 800c840:	4f24      	ldr	r7, [pc, #144]	; (800c8d4 <xTaskResumeAll+0xd4>)
 800c842:	e01e      	b.n	800c882 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c844:	68eb      	ldr	r3, [r5, #12]
 800c846:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c848:	f104 0018 	add.w	r0, r4, #24
 800c84c:	f7fe fea7 	bl	800b59e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c850:	1d21      	adds	r1, r4, #4
 800c852:	4608      	mov	r0, r1
 800c854:	9101      	str	r1, [sp, #4]
 800c856:	f7fe fea2 	bl	800b59e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c85a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c85c:	6832      	ldr	r2, [r6, #0]
 800c85e:	9901      	ldr	r1, [sp, #4]
 800c860:	4293      	cmp	r3, r2
 800c862:	d900      	bls.n	800c866 <xTaskResumeAll+0x66>
 800c864:	6033      	str	r3, [r6, #0]
 800c866:	2014      	movs	r0, #20
 800c868:	fb00 7003 	mla	r0, r0, r3, r7
 800c86c:	f7fe fe74 	bl	800b558 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c870:	4b19      	ldr	r3, [pc, #100]	; (800c8d8 <xTaskResumeAll+0xd8>)
 800c872:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	429a      	cmp	r2, r3
 800c87a:	d302      	bcc.n	800c882 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800c87c:	4b17      	ldr	r3, [pc, #92]	; (800c8dc <xTaskResumeAll+0xdc>)
 800c87e:	2201      	movs	r2, #1
 800c880:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c882:	682b      	ldr	r3, [r5, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1dd      	bne.n	800c844 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800c888:	b10c      	cbz	r4, 800c88e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800c88a:	f7ff fdc3 	bl	800c414 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c88e:	4d14      	ldr	r5, [pc, #80]	; (800c8e0 <xTaskResumeAll+0xe0>)
 800c890:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c892:	b144      	cbz	r4, 800c8a6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800c894:	4e11      	ldr	r6, [pc, #68]	; (800c8dc <xTaskResumeAll+0xdc>)
 800c896:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c898:	f7ff ff1c 	bl	800c6d4 <xTaskIncrementTick>
 800c89c:	b100      	cbz	r0, 800c8a0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800c89e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8a0:	3c01      	subs	r4, #1
 800c8a2:	d1f9      	bne.n	800c898 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800c8a4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <xTaskResumeAll+0xdc>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0bc      	beq.n	800c828 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800c8ae:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <xTaskResumeAll+0xe4>)
 800c8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c8be:	2401      	movs	r4, #1
 800c8c0:	e7b3      	b.n	800c82a <xTaskResumeAll+0x2a>
 800c8c2:	bf00      	nop
 800c8c4:	2400e830 	.word	0x2400e830
 800c8c8:	2400e828 	.word	0x2400e828
 800c8cc:	2400e870 	.word	0x2400e870
 800c8d0:	2400e838 	.word	0x2400e838
 800c8d4:	2400e3c8 	.word	0x2400e3c8
 800c8d8:	2400e3bc 	.word	0x2400e3bc
 800c8dc:	2400e8b4 	.word	0x2400e8b4
 800c8e0:	2400e86c 	.word	0x2400e86c
 800c8e4:	e000ed04 	.word	0xe000ed04

0800c8e8 <vTaskSetApplicationTaskTag>:
	{
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	b908      	cbnz	r0, 800c8f4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c8f0:	4b04      	ldr	r3, [pc, #16]	; (800c904 <vTaskSetApplicationTaskTag+0x1c>)
 800c8f2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c8f4:	f7fe fec6 	bl	800b684 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c8f8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800c8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c8fe:	f7fe bee3 	b.w	800b6c8 <vPortExitCritical>
 800c902:	bf00      	nop
 800c904:	2400e3bc 	.word	0x2400e3bc

0800c908 <xTaskCallApplicationTaskHook>:
	{
 800c908:	4603      	mov	r3, r0
 800c90a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c90c:	b90b      	cbnz	r3, 800c912 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c90e:	4b03      	ldr	r3, [pc, #12]	; (800c91c <xTaskCallApplicationTaskHook+0x14>)
 800c910:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c914:	b103      	cbz	r3, 800c918 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c916:	4718      	bx	r3
	}
 800c918:	4618      	mov	r0, r3
 800c91a:	4770      	bx	lr
 800c91c:	2400e3bc 	.word	0x2400e3bc

0800c920 <vTaskStartScheduler>:
{
 800c920:	b510      	push	{r4, lr}
 800c922:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c924:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c926:	aa07      	add	r2, sp, #28
 800c928:	a906      	add	r1, sp, #24
 800c92a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c92c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c930:	f7fe fcf8 	bl	800b324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c934:	9b05      	ldr	r3, [sp, #20]
 800c936:	9a07      	ldr	r2, [sp, #28]
 800c938:	9302      	str	r3, [sp, #8]
 800c93a:	9b06      	ldr	r3, [sp, #24]
 800c93c:	4917      	ldr	r1, [pc, #92]	; (800c99c <vTaskStartScheduler+0x7c>)
 800c93e:	4818      	ldr	r0, [pc, #96]	; (800c9a0 <vTaskStartScheduler+0x80>)
 800c940:	e9cd 4300 	strd	r4, r3, [sp]
 800c944:	4623      	mov	r3, r4
 800c946:	f7ff fe51 	bl	800c5ec <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c94a:	b1d0      	cbz	r0, 800c982 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800c94c:	f000 fa88 	bl	800ce60 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c950:	2801      	cmp	r0, #1
 800c952:	d118      	bne.n	800c986 <vTaskStartScheduler+0x66>
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c964:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <vTaskStartScheduler+0x84>)
 800c966:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 800c96a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c96c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <vTaskStartScheduler+0x88>)
 800c970:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c972:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <vTaskStartScheduler+0x8c>)
 800c974:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c976:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <vTaskStartScheduler+0x90>)
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f7ff ffc5 	bl	800c908 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 800c97e:	f7fe ff19 	bl	800b7b4 <xPortStartScheduler>
}
 800c982:	b008      	add	sp, #32
 800c984:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c986:	3001      	adds	r0, #1
 800c988:	d1fb      	bne.n	800c982 <vTaskStartScheduler+0x62>
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	e7fe      	b.n	800c99a <vTaskStartScheduler+0x7a>
 800c99c:	08021de6 	.word	0x08021de6
 800c9a0:	0800c511 	.word	0x0800c511
 800c9a4:	2400e864 	.word	0x2400e864
 800c9a8:	2400e884 	.word	0x2400e884
 800c9ac:	2400e8b0 	.word	0x2400e8b0
 800c9b0:	2400e3bc 	.word	0x2400e3bc

0800c9b4 <vTaskSwitchContext>:
{
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ca2c <vTaskSwitchContext+0x78>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <vTaskSwitchContext+0x7c>)
 800c9bc:	b112      	cbz	r2, 800c9c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c9be:	2201      	movs	r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]
}
 800c9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c9c4:	4e1b      	ldr	r6, [pc, #108]	; (800ca34 <vTaskSwitchContext+0x80>)
 800c9c6:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 800c9c8:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c9ca:	6830      	ldr	r0, [r6, #0]
 800c9cc:	f7ff ff9c 	bl	800c908 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d0:	4d19      	ldr	r5, [pc, #100]	; (800ca38 <vTaskSwitchContext+0x84>)
 800c9d2:	4a1a      	ldr	r2, [pc, #104]	; (800ca3c <vTaskSwitchContext+0x88>)
 800c9d4:	f04f 0c14 	mov.w	ip, #20
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	4617      	mov	r7, r2
 800c9dc:	fb0c f103 	mul.w	r1, ip, r3
 800c9e0:	5854      	ldr	r4, [r2, r1]
 800c9e2:	1850      	adds	r0, r2, r1
 800c9e4:	b1ac      	cbz	r4, 800ca12 <vTaskSwitchContext+0x5e>
 800c9e6:	6844      	ldr	r4, [r0, #4]
 800c9e8:	3108      	adds	r1, #8
 800c9ea:	6864      	ldr	r4, [r4, #4]
 800c9ec:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800c9ee:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f0:	4294      	cmp	r4, r2
 800c9f2:	6044      	str	r4, [r0, #4]
 800c9f4:	bf04      	itt	eq
 800c9f6:	6862      	ldreq	r2, [r4, #4]
 800c9f8:	6042      	streq	r2, [r0, #4]
 800c9fa:	2214      	movs	r2, #20
 800c9fc:	fb02 7203 	mla	r2, r2, r3, r7
 800ca00:	6852      	ldr	r2, [r2, #4]
 800ca02:	68d2      	ldr	r2, [r2, #12]
 800ca04:	6032      	str	r2, [r6, #0]
 800ca06:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 800ca08:	6830      	ldr	r0, [r6, #0]
}
 800ca0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800ca0e:	f7ff bf7b 	b.w	800c908 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca12:	b943      	cbnz	r3, 800ca26 <vTaskSwitchContext+0x72>
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	e7fe      	b.n	800ca24 <vTaskSwitchContext+0x70>
 800ca26:	3b01      	subs	r3, #1
 800ca28:	e7d8      	b.n	800c9dc <vTaskSwitchContext+0x28>
 800ca2a:	bf00      	nop
 800ca2c:	2400e830 	.word	0x2400e830
 800ca30:	2400e8b4 	.word	0x2400e8b4
 800ca34:	2400e3bc 	.word	0x2400e3bc
 800ca38:	2400e838 	.word	0x2400e838
 800ca3c:	2400e3c8 	.word	0x2400e3c8

0800ca40 <vTaskPlaceOnEventList>:
{
 800ca40:	b510      	push	{r4, lr}
 800ca42:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ca44:	b940      	cbnz	r0, 800ca58 <vTaskPlaceOnEventList+0x18>
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	e7fe      	b.n	800ca56 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca58:	4b05      	ldr	r3, [pc, #20]	; (800ca70 <vTaskPlaceOnEventList+0x30>)
 800ca5a:	6819      	ldr	r1, [r3, #0]
 800ca5c:	3118      	adds	r1, #24
 800ca5e:	f7fe fd87 	bl	800b570 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca62:	4620      	mov	r0, r4
 800ca64:	2101      	movs	r1, #1
}
 800ca66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca6a:	f7ff bd85 	b.w	800c578 <prvAddCurrentTaskToDelayedList>
 800ca6e:	bf00      	nop
 800ca70:	2400e3bc 	.word	0x2400e3bc

0800ca74 <vTaskPlaceOnEventListRestricted>:
	{
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	460d      	mov	r5, r1
 800ca78:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ca7a:	b940      	cbnz	r0, 800ca8e <vTaskPlaceOnEventListRestricted+0x1a>
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	e7fe      	b.n	800ca8c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca8e:	4b07      	ldr	r3, [pc, #28]	; (800caac <vTaskPlaceOnEventListRestricted+0x38>)
 800ca90:	6819      	ldr	r1, [r3, #0]
 800ca92:	3118      	adds	r1, #24
 800ca94:	f7fe fd60 	bl	800b558 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ca98:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	bf0c      	ite	eq
 800ca9e:	4628      	moveq	r0, r5
 800caa0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800caa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800caa8:	f7ff bd66 	b.w	800c578 <prvAddCurrentTaskToDelayedList>
 800caac:	2400e3bc 	.word	0x2400e3bc

0800cab0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab0:	68c3      	ldr	r3, [r0, #12]
{
 800cab2:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cab6:	b944      	cbnz	r4, 800caca <xTaskRemoveFromEventList+0x1a>
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	e7fe      	b.n	800cac8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800caca:	f104 0118 	add.w	r1, r4, #24
 800cace:	4608      	mov	r0, r1
 800cad0:	9101      	str	r1, [sp, #4]
 800cad2:	f7fe fd64 	bl	800b59e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cad6:	4b12      	ldr	r3, [pc, #72]	; (800cb20 <xTaskRemoveFromEventList+0x70>)
 800cad8:	9901      	ldr	r1, [sp, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	b9e3      	cbnz	r3, 800cb18 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cade:	1d21      	adds	r1, r4, #4
 800cae0:	4608      	mov	r0, r1
 800cae2:	9101      	str	r1, [sp, #4]
 800cae4:	f7fe fd5b 	bl	800b59e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cae8:	4a0e      	ldr	r2, [pc, #56]	; (800cb24 <xTaskRemoveFromEventList+0x74>)
 800caea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800caec:	6810      	ldr	r0, [r2, #0]
 800caee:	9901      	ldr	r1, [sp, #4]
 800caf0:	4283      	cmp	r3, r0
 800caf2:	d900      	bls.n	800caf6 <xTaskRemoveFromEventList+0x46>
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	4a0c      	ldr	r2, [pc, #48]	; (800cb28 <xTaskRemoveFromEventList+0x78>)
 800caf8:	2014      	movs	r0, #20
 800cafa:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cafe:	f7fe fd2b 	bl	800b558 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb02:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <xTaskRemoveFromEventList+0x7c>)
 800cb04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d906      	bls.n	800cb1c <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800cb0e:	2001      	movs	r0, #1
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <xTaskRemoveFromEventList+0x80>)
 800cb12:	6018      	str	r0, [r3, #0]
}
 800cb14:	b002      	add	sp, #8
 800cb16:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb18:	4806      	ldr	r0, [pc, #24]	; (800cb34 <xTaskRemoveFromEventList+0x84>)
 800cb1a:	e7f0      	b.n	800cafe <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800cb1c:	2000      	movs	r0, #0
	return xReturn;
 800cb1e:	e7f9      	b.n	800cb14 <xTaskRemoveFromEventList+0x64>
 800cb20:	2400e830 	.word	0x2400e830
 800cb24:	2400e838 	.word	0x2400e838
 800cb28:	2400e3c8 	.word	0x2400e3c8
 800cb2c:	2400e3bc 	.word	0x2400e3bc
 800cb30:	2400e8b4 	.word	0x2400e8b4
 800cb34:	2400e870 	.word	0x2400e870

0800cb38 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb38:	4b03      	ldr	r3, [pc, #12]	; (800cb48 <vTaskInternalSetTimeOutState+0x10>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb3e:	4b03      	ldr	r3, [pc, #12]	; (800cb4c <vTaskInternalSetTimeOutState+0x14>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6043      	str	r3, [r0, #4]
}
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	2400e868 	.word	0x2400e868
 800cb4c:	2400e8b0 	.word	0x2400e8b0

0800cb50 <xTaskCheckForTimeOut>:
{
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800cb54:	4605      	mov	r5, r0
 800cb56:	b940      	cbnz	r0, 800cb6a <xTaskCheckForTimeOut+0x1a>
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	e7fe      	b.n	800cb68 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800cb6a:	b941      	cbnz	r1, 800cb7e <xTaskCheckForTimeOut+0x2e>
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	e7fe      	b.n	800cb7c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800cb7e:	f7fe fd81 	bl	800b684 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800cb82:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <xTaskCheckForTimeOut+0x70>)
 800cb84:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	d010      	beq.n	800cbae <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb8c:	480d      	ldr	r0, [pc, #52]	; (800cbc4 <xTaskCheckForTimeOut+0x74>)
 800cb8e:	682e      	ldr	r6, [r5, #0]
 800cb90:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb92:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb94:	4286      	cmp	r6, r0
 800cb96:	d001      	beq.n	800cb9c <xTaskCheckForTimeOut+0x4c>
 800cb98:	428a      	cmp	r2, r1
 800cb9a:	d90f      	bls.n	800cbbc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb9c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb9e:	4283      	cmp	r3, r0
 800cba0:	d90a      	bls.n	800cbb8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800cba2:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cba4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800cba6:	4413      	add	r3, r2
 800cba8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbaa:	f7ff ffc5 	bl	800cb38 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800cbae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cbb0:	f7fe fd8a 	bl	800b6c8 <vPortExitCritical>
}
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cbbc:	2401      	movs	r4, #1
 800cbbe:	e7f7      	b.n	800cbb0 <xTaskCheckForTimeOut+0x60>
 800cbc0:	2400e8b0 	.word	0x2400e8b0
 800cbc4:	2400e868 	.word	0x2400e868

0800cbc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cbc8:	4b01      	ldr	r3, [pc, #4]	; (800cbd0 <vTaskMissedYield+0x8>)
 800cbca:	2201      	movs	r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]
}
 800cbce:	4770      	bx	lr
 800cbd0:	2400e8b4 	.word	0x2400e8b4

0800cbd4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cbd4:	4b05      	ldr	r3, [pc, #20]	; (800cbec <xTaskGetSchedulerState+0x18>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	b133      	cbz	r3, 800cbe8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbda:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <xTaskGetSchedulerState+0x1c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbe0:	bf0c      	ite	eq
 800cbe2:	2002      	moveq	r0, #2
 800cbe4:	2000      	movne	r0, #0
 800cbe6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbe8:	2001      	movs	r0, #1
	}
 800cbea:	4770      	bx	lr
 800cbec:	2400e884 	.word	0x2400e884
 800cbf0:	2400e830 	.word	0x2400e830

0800cbf4 <xTaskPriorityInherit>:
	{
 800cbf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	b348      	cbz	r0, 800cc4e <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cbfa:	4a1c      	ldr	r2, [pc, #112]	; (800cc6c <xTaskPriorityInherit+0x78>)
 800cbfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cbfe:	6811      	ldr	r1, [r2, #0]
 800cc00:	4616      	mov	r6, r2
 800cc02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800cc04:	428b      	cmp	r3, r1
 800cc06:	d228      	bcs.n	800cc5a <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc08:	6982      	ldr	r2, [r0, #24]
 800cc0a:	2a00      	cmp	r2, #0
 800cc0c:	db04      	blt.n	800cc18 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc0e:	6832      	ldr	r2, [r6, #0]
 800cc10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cc12:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800cc16:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc18:	2214      	movs	r2, #20
 800cc1a:	4d15      	ldr	r5, [pc, #84]	; (800cc70 <xTaskPriorityInherit+0x7c>)
 800cc1c:	fb02 5303 	mla	r3, r2, r3, r5
 800cc20:	6962      	ldr	r2, [r4, #20]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d115      	bne.n	800cc52 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc26:	1d21      	adds	r1, r4, #4
 800cc28:	4608      	mov	r0, r1
 800cc2a:	9101      	str	r1, [sp, #4]
 800cc2c:	f7fe fcb7 	bl	800b59e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc30:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc32:	4a10      	ldr	r2, [pc, #64]	; (800cc74 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc36:	6810      	ldr	r0, [r2, #0]
 800cc38:	9901      	ldr	r1, [sp, #4]
 800cc3a:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc3c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc3e:	d900      	bls.n	800cc42 <xTaskPriorityInherit+0x4e>
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	2014      	movs	r0, #20
 800cc44:	fb00 5003 	mla	r0, r0, r3, r5
 800cc48:	f7fe fc86 	bl	800b558 <vListInsertEnd>
				xReturn = pdTRUE;
 800cc4c:	2001      	movs	r0, #1
	}
 800cc4e:	b002      	add	sp, #8
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc52:	6833      	ldr	r3, [r6, #0]
 800cc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc56:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc58:	e7f8      	b.n	800cc4c <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc5a:	6813      	ldr	r3, [r2, #0]
 800cc5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800cc5e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cc60:	42a0      	cmp	r0, r4
 800cc62:	bf2c      	ite	cs
 800cc64:	2000      	movcs	r0, #0
 800cc66:	2001      	movcc	r0, #1
 800cc68:	e7f1      	b.n	800cc4e <xTaskPriorityInherit+0x5a>
 800cc6a:	bf00      	nop
 800cc6c:	2400e3bc 	.word	0x2400e3bc
 800cc70:	2400e3c8 	.word	0x2400e3c8
 800cc74:	2400e838 	.word	0x2400e838

0800cc78 <xTaskPriorityDisinherit>:
	{
 800cc78:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800cc7a:	b910      	cbnz	r0, 800cc82 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800cc7c:	2000      	movs	r0, #0
	}
 800cc7e:	b002      	add	sp, #8
 800cc80:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800cc82:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <xTaskPriorityDisinherit+0x7c>)
 800cc84:	681c      	ldr	r4, [r3, #0]
 800cc86:	4284      	cmp	r4, r0
 800cc88:	d008      	beq.n	800cc9c <xTaskPriorityDisinherit+0x24>
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	e7fe      	b.n	800cc9a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cc9e:	b943      	cbnz	r3, 800ccb2 <xTaskPriorityDisinherit+0x3a>
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	e7fe      	b.n	800ccb0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ccb4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccb6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ccb8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccba:	4291      	cmp	r1, r2
 800ccbc:	d0de      	beq.n	800cc7c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1dc      	bne.n	800cc7c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccc2:	1d21      	adds	r1, r4, #4
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	9101      	str	r1, [sp, #4]
 800ccc8:	f7fe fc69 	bl	800b59e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cccc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800ccce:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccd4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccd8:	4a07      	ldr	r2, [pc, #28]	; (800ccf8 <xTaskPriorityDisinherit+0x80>)
 800ccda:	6810      	ldr	r0, [r2, #0]
 800ccdc:	4283      	cmp	r3, r0
 800ccde:	d900      	bls.n	800cce2 <xTaskPriorityDisinherit+0x6a>
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	4a06      	ldr	r2, [pc, #24]	; (800ccfc <xTaskPriorityDisinherit+0x84>)
 800cce4:	2014      	movs	r0, #20
 800cce6:	fb00 2003 	mla	r0, r0, r3, r2
 800ccea:	f7fe fc35 	bl	800b558 <vListInsertEnd>
					xReturn = pdTRUE;
 800ccee:	2001      	movs	r0, #1
		return xReturn;
 800ccf0:	e7c5      	b.n	800cc7e <xTaskPriorityDisinherit+0x6>
 800ccf2:	bf00      	nop
 800ccf4:	2400e3bc 	.word	0x2400e3bc
 800ccf8:	2400e838 	.word	0x2400e838
 800ccfc:	2400e3c8 	.word	0x2400e3c8

0800cd00 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cd00:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cd02:	4604      	mov	r4, r0
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d044      	beq.n	800cd92 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cd0a:	b942      	cbnz	r2, 800cd1e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	e7fe      	b.n	800cd1c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cd20:	4299      	cmp	r1, r3
 800cd22:	bf38      	it	cc
 800cd24:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	d032      	beq.n	800cd92 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd2c:	2a01      	cmp	r2, #1
 800cd2e:	d130      	bne.n	800cd92 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800cd30:	4a19      	ldr	r2, [pc, #100]	; (800cd98 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	4282      	cmp	r2, r0
 800cd36:	d108      	bne.n	800cd4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	e7fe      	b.n	800cd48 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd4a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd4c:	4d13      	ldr	r5, [pc, #76]	; (800cd9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd4e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd50:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cd54:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd56:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd5a:	bfa8      	it	ge
 800cd5c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd60:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd62:	bfa8      	it	ge
 800cd64:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d113      	bne.n	800cd92 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd6a:	1d01      	adds	r1, r0, #4
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	9101      	str	r1, [sp, #4]
 800cd70:	f7fe fc15 	bl	800b59e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800cd74:	4a0a      	ldr	r2, [pc, #40]	; (800cda0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800cd76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd78:	6810      	ldr	r0, [r2, #0]
 800cd7a:	9901      	ldr	r1, [sp, #4]
 800cd7c:	4283      	cmp	r3, r0
 800cd7e:	d900      	bls.n	800cd82 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	2014      	movs	r0, #20
 800cd84:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800cd88:	b003      	add	sp, #12
 800cd8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800cd8e:	f7fe bbe3 	b.w	800b558 <vListInsertEnd>
	}
 800cd92:	b003      	add	sp, #12
 800cd94:	bd30      	pop	{r4, r5, pc}
 800cd96:	bf00      	nop
 800cd98:	2400e3bc 	.word	0x2400e3bc
 800cd9c:	2400e3c8 	.word	0x2400e3c8
 800cda0:	2400e838 	.word	0x2400e838

0800cda4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <pvTaskIncrementMutexHeldCount+0x14>)
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	b11a      	cbz	r2, 800cdb2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800cdaa:	6819      	ldr	r1, [r3, #0]
 800cdac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800cdae:	3201      	adds	r2, #1
 800cdb0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800cdb2:	6818      	ldr	r0, [r3, #0]
	}
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	2400e3bc 	.word	0x2400e3bc

0800cdbc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800cdbe:	4c11      	ldr	r4, [pc, #68]	; (800ce04 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800cdc0:	f7fe fc60 	bl	800b684 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800cdc4:	6825      	ldr	r5, [r4, #0]
 800cdc6:	b9bd      	cbnz	r5, 800cdf8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdc8:	4f0f      	ldr	r7, [pc, #60]	; (800ce08 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800cdca:	4e10      	ldr	r6, [pc, #64]	; (800ce0c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800cdcc:	4638      	mov	r0, r7
 800cdce:	f7fe fbb5 	bl	800b53c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7fe fbb2 	bl	800b53c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdd8:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cdda:	4a0e      	ldr	r2, [pc, #56]	; (800ce14 <prvCheckForValidListAndQueue+0x58>)
 800cddc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800cdde:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cde0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800cde2:	4b0d      	ldr	r3, [pc, #52]	; (800ce18 <prvCheckForValidListAndQueue+0x5c>)
 800cde4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cde6:	4b0d      	ldr	r3, [pc, #52]	; (800ce1c <prvCheckForValidListAndQueue+0x60>)
 800cde8:	9500      	str	r5, [sp, #0]
 800cdea:	f7fe fe61 	bl	800bab0 <xQueueGenericCreateStatic>
 800cdee:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cdf0:	b110      	cbz	r0, 800cdf8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cdf2:	490b      	ldr	r1, [pc, #44]	; (800ce20 <prvCheckForValidListAndQueue+0x64>)
 800cdf4:	f7ff fa2e 	bl	800c254 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800cdf8:	b003      	add	sp, #12
 800cdfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800cdfe:	f7fe bc63 	b.w	800b6c8 <vPortExitCritical>
 800ce02:	bf00      	nop
 800ce04:	2400e9dc 	.word	0x2400e9dc
 800ce08:	2400e960 	.word	0x2400e960
 800ce0c:	2400e974 	.word	0x2400e974
 800ce10:	2400e8b8 	.word	0x2400e8b8
 800ce14:	2400e8c0 	.word	0x2400e8c0
 800ce18:	2400e8bc 	.word	0x2400e8bc
 800ce1c:	2400e98c 	.word	0x2400e98c
 800ce20:	08021deb 	.word	0x08021deb

0800ce24 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800ce24:	4291      	cmp	r1, r2
{
 800ce26:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce28:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce2a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ce2c:	d80a      	bhi.n	800ce44 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	6983      	ldr	r3, [r0, #24]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d20d      	bcs.n	800ce52 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce36:	1d01      	adds	r1, r0, #4
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	f7fe fb98 	bl	800b570 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ce40:	2000      	movs	r0, #0
}
 800ce42:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d201      	bcs.n	800ce4c <prvInsertTimerInActiveList+0x28>
 800ce48:	4299      	cmp	r1, r3
 800ce4a:	d202      	bcs.n	800ce52 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce4c:	1d01      	adds	r1, r0, #4
 800ce4e:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <prvInsertTimerInActiveList+0x38>)
 800ce50:	e7f3      	b.n	800ce3a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ce52:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ce54:	e7f5      	b.n	800ce42 <prvInsertTimerInActiveList+0x1e>
 800ce56:	bf00      	nop
 800ce58:	2400e8bc 	.word	0x2400e8bc
 800ce5c:	2400e8b8 	.word	0x2400e8b8

0800ce60 <xTimerCreateTimerTask>:
{
 800ce60:	b510      	push	{r4, lr}
 800ce62:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ce64:	f7ff ffaa 	bl	800cdbc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ce68:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <xTimerCreateTimerTask+0x54>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	b1b3      	cbz	r3, 800ce9c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce6e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce70:	aa07      	add	r2, sp, #28
 800ce72:	a906      	add	r1, sp, #24
 800ce74:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce76:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce7a:	f7fe fa5f 	bl	800b33c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce7e:	9b05      	ldr	r3, [sp, #20]
 800ce80:	9a07      	ldr	r2, [sp, #28]
 800ce82:	9302      	str	r3, [sp, #8]
 800ce84:	9b06      	ldr	r3, [sp, #24]
 800ce86:	490c      	ldr	r1, [pc, #48]	; (800ceb8 <xTimerCreateTimerTask+0x58>)
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	480b      	ldr	r0, [pc, #44]	; (800cebc <xTimerCreateTimerTask+0x5c>)
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4623      	mov	r3, r4
 800ce92:	f7ff fbab 	bl	800c5ec <xTaskCreateStatic>
 800ce96:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <xTimerCreateTimerTask+0x60>)
 800ce98:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ce9a:	b940      	cbnz	r0, 800ceae <xTimerCreateTimerTask+0x4e>
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ceac:	e7fe      	b.n	800ceac <xTimerCreateTimerTask+0x4c>
}
 800ceae:	2001      	movs	r0, #1
 800ceb0:	b008      	add	sp, #32
 800ceb2:	bd10      	pop	{r4, pc}
 800ceb4:	2400e9dc 	.word	0x2400e9dc
 800ceb8:	08021df0 	.word	0x08021df0
 800cebc:	0800cf95 	.word	0x0800cf95
 800cec0:	2400e9e0 	.word	0x2400e9e0

0800cec4 <xTimerGenericCommand>:
{
 800cec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cec6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800cec8:	4604      	mov	r4, r0
{
 800ceca:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800cecc:	b940      	cbnz	r0, 800cee0 <xTimerGenericCommand+0x1c>
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	e7fe      	b.n	800cede <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800cee0:	4d0c      	ldr	r5, [pc, #48]	; (800cf14 <xTimerGenericCommand+0x50>)
 800cee2:	6828      	ldr	r0, [r5, #0]
 800cee4:	b178      	cbz	r0, 800cf06 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cee6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cee8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ceea:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ceee:	dc0c      	bgt.n	800cf0a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cef0:	f7ff fe70 	bl	800cbd4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cef4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cef6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cef8:	4669      	mov	r1, sp
 800cefa:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cefc:	bf0c      	ite	eq
 800cefe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf00:	461a      	movne	r2, r3
 800cf02:	f7fe fe8b 	bl	800bc1c <xQueueGenericSend>
}
 800cf06:	b004      	add	sp, #16
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	4669      	mov	r1, sp
 800cf0e:	f7fe ff37 	bl	800bd80 <xQueueGenericSendFromISR>
 800cf12:	e7f8      	b.n	800cf06 <xTimerGenericCommand+0x42>
 800cf14:	2400e9dc 	.word	0x2400e9dc

0800cf18 <prvSwitchTimerLists>:
{
 800cf18:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf1a:	4d1c      	ldr	r5, [pc, #112]	; (800cf8c <prvSwitchTimerLists+0x74>)
{
 800cf1c:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf1e:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	b92a      	cbnz	r2, 800cf32 <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 800cf26:	4a1a      	ldr	r2, [pc, #104]	; (800cf90 <prvSwitchTimerLists+0x78>)
 800cf28:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf2a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf2c:	6029      	str	r1, [r5, #0]
}
 800cf2e:	b005      	add	sp, #20
 800cf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf32:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf34:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf36:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf38:	1d21      	adds	r1, r4, #4
 800cf3a:	4608      	mov	r0, r1
 800cf3c:	9103      	str	r1, [sp, #12]
 800cf3e:	f7fe fb2e 	bl	800b59e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf42:	6a23      	ldr	r3, [r4, #32]
 800cf44:	4620      	mov	r0, r4
 800cf46:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cf4c:	9903      	ldr	r1, [sp, #12]
 800cf4e:	f013 0f04 	tst.w	r3, #4
 800cf52:	d0e5      	beq.n	800cf20 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf54:	69a3      	ldr	r3, [r4, #24]
 800cf56:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800cf58:	429e      	cmp	r6, r3
 800cf5a:	d205      	bcs.n	800cf68 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf5c:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf5e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf60:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf62:	f7fe fb05 	bl	800b570 <vListInsert>
 800cf66:	e7db      	b.n	800cf20 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4632      	mov	r2, r6
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	9700      	str	r7, [sp, #0]
 800cf70:	4619      	mov	r1, r3
 800cf72:	f7ff ffa7 	bl	800cec4 <xTimerGenericCommand>
				configASSERT( xResult );
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d1d2      	bne.n	800cf20 <prvSwitchTimerLists+0x8>
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	e7fe      	b.n	800cf8a <prvSwitchTimerLists+0x72>
 800cf8c:	2400e8b8 	.word	0x2400e8b8
 800cf90:	2400e8bc 	.word	0x2400e8bc

0800cf94 <prvTimerTask>:
{
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf98:	4f77      	ldr	r7, [pc, #476]	; (800d178 <prvTimerTask+0x1e4>)
{
 800cf9a:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800cf9c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800d188 <prvTimerTask+0x1f4>
 800cfa0:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	f8d3 b000 	ldr.w	fp, [r3]
 800cfa8:	f1bb 0f00 	cmp.w	fp, #0
 800cfac:	d028      	beq.n	800d000 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfae:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfb0:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfb2:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 800cfb6:	4e71      	ldr	r6, [pc, #452]	; (800d17c <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 800cfb8:	f7ff fb7e 	bl	800c6b8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800cfbc:	f7ff fb84 	bl	800c6c8 <xTaskGetTickCount>
 800cfc0:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800cfc2:	6833      	ldr	r3, [r6, #0]
 800cfc4:	46b0      	mov	r8, r6
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	d31c      	bcc.n	800d004 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800cfca:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfcc:	b31c      	cbz	r4, 800d016 <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cfce:	4b6c      	ldr	r3, [pc, #432]	; (800d180 <prvTimerTask+0x1ec>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681c      	ldr	r4, [r3, #0]
 800cfd4:	fab4 f484 	clz	r4, r4
 800cfd8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cfda:	4b6a      	ldr	r3, [pc, #424]	; (800d184 <prvTimerTask+0x1f0>)
 800cfdc:	4622      	mov	r2, r4
 800cfde:	ebab 0105 	sub.w	r1, fp, r5
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	f7ff f975 	bl	800c2d2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cfe8:	f7ff fc0a 	bl	800c800 <xTaskResumeAll>
 800cfec:	b978      	cbnz	r0, 800d00e <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800cfee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cff2:	f8ca 3000 	str.w	r3, [sl]
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	e006      	b.n	800d00e <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d000:	2401      	movs	r4, #1
 800d002:	e7d8      	b.n	800cfb6 <prvTimerTask+0x22>
		prvSwitchTimerLists();
 800d004:	f7ff ff88 	bl	800cf18 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800d008:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800d00a:	f7ff fbf9 	bl	800c800 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d00e:	4e5d      	ldr	r6, [pc, #372]	; (800d184 <prvTimerTask+0x1f0>)
 800d010:	f04f 0b00 	mov.w	fp, #0
 800d014:	e035      	b.n	800d082 <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d016:	4583      	cmp	fp, r0
 800d018:	d8df      	bhi.n	800cfda <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 800d01a:	f7ff fbf1 	bl	800c800 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d01e:	f8d9 3000 	ldr.w	r3, [r9]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d026:	1d30      	adds	r0, r6, #4
 800d028:	f7fe fab9 	bl	800b59e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d02c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800d030:	0758      	lsls	r0, r3, #29
 800d032:	d518      	bpl.n	800d066 <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d034:	69b1      	ldr	r1, [r6, #24]
 800d036:	465b      	mov	r3, fp
 800d038:	462a      	mov	r2, r5
 800d03a:	4630      	mov	r0, r6
 800d03c:	4459      	add	r1, fp
 800d03e:	f7ff fef1 	bl	800ce24 <prvInsertTimerInActiveList>
 800d042:	b1a0      	cbz	r0, 800d06e <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d044:	4623      	mov	r3, r4
 800d046:	465a      	mov	r2, fp
 800d048:	4621      	mov	r1, r4
 800d04a:	4630      	mov	r0, r6
 800d04c:	9400      	str	r4, [sp, #0]
 800d04e:	f7ff ff39 	bl	800cec4 <xTimerGenericCommand>
			configASSERT( xResult );
 800d052:	b960      	cbnz	r0, 800d06e <prvTimerTask+0xda>
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	e7fe      	b.n	800d064 <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d066:	f023 0301 	bic.w	r3, r3, #1
 800d06a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d06e:	6a33      	ldr	r3, [r6, #32]
 800d070:	4630      	mov	r0, r6
 800d072:	4798      	blx	r3
}
 800d074:	e7cb      	b.n	800d00e <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d076:	9b03      	ldr	r3, [sp, #12]
 800d078:	9905      	ldr	r1, [sp, #20]
 800d07a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d07c:	9b02      	ldr	r3, [sp, #8]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	da0a      	bge.n	800d098 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d082:	2200      	movs	r2, #0
 800d084:	a902      	add	r1, sp, #8
 800d086:	6830      	ldr	r0, [r6, #0]
 800d088:	f7fe ff30 	bl	800beec <xQueueReceive>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d088      	beq.n	800cfa2 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d090:	9b02      	ldr	r3, [sp, #8]
 800d092:	9804      	ldr	r0, [sp, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	dbee      	blt.n	800d076 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d098:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d09a:	6963      	ldr	r3, [r4, #20]
 800d09c:	b9a3      	cbnz	r3, 800d0c8 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 800d09e:	f7ff fb13 	bl	800c6c8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800d0a2:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800d0a6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d0a8:	4298      	cmp	r0, r3
 800d0aa:	d201      	bcs.n	800d0b0 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 800d0ac:	f7ff ff34 	bl	800cf18 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800d0b0:	9b02      	ldr	r3, [sp, #8]
 800d0b2:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800d0b6:	2b09      	cmp	r3, #9
 800d0b8:	d8e3      	bhi.n	800d082 <prvTimerTask+0xee>
 800d0ba:	e8df f003 	tbb	[pc, r3]
 800d0be:	0909      	.short	0x0909
 800d0c0:	543b3409 	.word	0x543b3409
 800d0c4:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0c8:	1d20      	adds	r0, r4, #4
 800d0ca:	f7fe fa68 	bl	800b59e <uxListRemove>
 800d0ce:	e7e6      	b.n	800d09e <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	69a1      	ldr	r1, [r4, #24]
 800d0d8:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0da:	f043 0301 	orr.w	r3, r3, #1
 800d0de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d0e2:	9b03      	ldr	r3, [sp, #12]
 800d0e4:	4419      	add	r1, r3
 800d0e6:	f7ff fe9d 	bl	800ce24 <prvInsertTimerInActiveList>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0c9      	beq.n	800d082 <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0ee:	6a23      	ldr	r3, [r4, #32]
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d0f8:	0759      	lsls	r1, r3, #29
 800d0fa:	d5c2      	bpl.n	800d082 <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d0fc:	69a2      	ldr	r2, [r4, #24]
 800d0fe:	2300      	movs	r3, #0
 800d100:	9903      	ldr	r1, [sp, #12]
 800d102:	4620      	mov	r0, r4
 800d104:	f8cd b000 	str.w	fp, [sp]
 800d108:	440a      	add	r2, r1
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7ff feda 	bl	800cec4 <xTimerGenericCommand>
							configASSERT( xResult );
 800d110:	2800      	cmp	r0, #0
 800d112:	d1b6      	bne.n	800d082 <prvTimerTask+0xee>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	e7fe      	b.n	800d124 <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d126:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d12a:	f023 0301 	bic.w	r3, r3, #1
 800d12e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800d132:	e7a6      	b.n	800d082 <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d134:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d138:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d13a:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d13e:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d140:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d144:	b941      	cbnz	r1, 800d158 <prvTimerTask+0x1c4>
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	e7fe      	b.n	800d156 <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d158:	462b      	mov	r3, r5
 800d15a:	462a      	mov	r2, r5
 800d15c:	4429      	add	r1, r5
 800d15e:	4620      	mov	r0, r4
 800d160:	f7ff fe60 	bl	800ce24 <prvInsertTimerInActiveList>
					break;
 800d164:	e78d      	b.n	800d082 <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d166:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d16a:	079a      	lsls	r2, r3, #30
 800d16c:	d4dd      	bmi.n	800d12a <prvTimerTask+0x196>
							vPortFree( pxTimer );
 800d16e:	4620      	mov	r0, r4
 800d170:	f7fe f9a6 	bl	800b4c0 <vPortFree>
 800d174:	e785      	b.n	800d082 <prvTimerTask+0xee>
 800d176:	bf00      	nop
 800d178:	2400e8b8 	.word	0x2400e8b8
 800d17c:	2400e988 	.word	0x2400e988
 800d180:	2400e8bc 	.word	0x2400e8bc
 800d184:	2400e9dc 	.word	0x2400e9dc
 800d188:	e000ed04 	.word	0xe000ed04

0800d18c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d18c:	8880      	ldrh	r0, [r0, #4]
 800d18e:	4770      	bx	lr

0800d190 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d190:	2300      	movs	r3, #0
 800d192:	8083      	strh	r3, [r0, #4]
 800d194:	4770      	bx	lr
	...

0800d198 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	6803      	ldr	r3, [r0, #0]
 800d19c:	460e      	mov	r6, r1
 800d19e:	2100      	movs	r1, #0
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a4:	4798      	blx	r3
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	1b34      	subs	r4, r6, r4
 800d1ae:	6a1b      	ldr	r3, [r3, #32]
 800d1b0:	b2a4      	uxth	r4, r4
 800d1b2:	4798      	blx	r3
 800d1b4:	88ab      	ldrh	r3, [r5, #4]
 800d1b6:	fbb4 f4f0 	udiv	r4, r4, r0
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	d805      	bhi.n	800d1ca <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800d1be:	4b0e      	ldr	r3, [pc, #56]	; (800d1f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800d1c0:	211e      	movs	r1, #30
 800d1c2:	4a0e      	ldr	r2, [pc, #56]	; (800d1fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d1c4:	480e      	ldr	r0, [pc, #56]	; (800d200 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800d1c6:	f012 faff 	bl	801f7c8 <__assert_func>
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d2:	4798      	blx	r3
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	4607      	mov	r7, r0
 800d1d8:	4628      	mov	r0, r5
 800d1da:	6a1b      	ldr	r3, [r3, #32]
 800d1dc:	4798      	blx	r3
 800d1de:	1bf3      	subs	r3, r6, r7
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	fbb3 f2f0 	udiv	r2, r3, r0
 800d1e6:	fb02 3010 	mls	r0, r2, r0, r3
 800d1ea:	b118      	cbz	r0, 800d1f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800d1ee:	211f      	movs	r1, #31
 800d1f0:	4a02      	ldr	r2, [pc, #8]	; (800d1fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800d1f2:	e7e7      	b.n	800d1c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f8:	08021df8 	.word	0x08021df8
 800d1fc:	08021f66 	.word	0x08021f66
 800d200:	08021e0d 	.word	0x08021e0d
 800d204:	08021e3b 	.word	0x08021e3b

0800d208 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	6803      	ldr	r3, [r0, #0]
 800d20c:	460d      	mov	r5, r1
 800d20e:	4604      	mov	r4, r0
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	4798      	blx	r3
 800d214:	4285      	cmp	r5, r0
 800d216:	d905      	bls.n	800d224 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800d218:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800d21a:	2130      	movs	r1, #48	; 0x30
 800d21c:	4a0c      	ldr	r2, [pc, #48]	; (800d250 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d21e:	480d      	ldr	r0, [pc, #52]	; (800d254 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800d220:	f012 fad2 	bl	801f7c8 <__assert_func>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	4620      	mov	r0, r4
 800d228:	88a5      	ldrh	r5, [r4, #4]
 800d22a:	69db      	ldr	r3, [r3, #28]
 800d22c:	4798      	blx	r3
 800d22e:	4285      	cmp	r5, r0
 800d230:	d303      	bcc.n	800d23a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800d232:	4b09      	ldr	r3, [pc, #36]	; (800d258 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800d234:	2131      	movs	r1, #49	; 0x31
 800d236:	4a06      	ldr	r2, [pc, #24]	; (800d250 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800d238:	e7f1      	b.n	800d21e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	4620      	mov	r0, r4
 800d23e:	88a1      	ldrh	r1, [r4, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	4798      	blx	r3
 800d244:	88a3      	ldrh	r3, [r4, #4]
 800d246:	3301      	adds	r3, #1
 800d248:	80a3      	strh	r3, [r4, #4]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	08021eb5 	.word	0x08021eb5
 800d250:	08021fa9 	.word	0x08021fa9
 800d254:	08021e0d 	.word	0x08021e0d
 800d258:	08021ecc 	.word	0x08021ecc

0800d25c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	6803      	ldr	r3, [r0, #0]
 800d260:	4616      	mov	r6, r2
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	6a1b      	ldr	r3, [r3, #32]
 800d268:	4798      	blx	r3
 800d26a:	4286      	cmp	r6, r0
 800d26c:	d905      	bls.n	800d27a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800d26e:	4b06      	ldr	r3, [pc, #24]	; (800d288 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800d270:	213a      	movs	r1, #58	; 0x3a
 800d272:	4a06      	ldr	r2, [pc, #24]	; (800d28c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800d274:	4806      	ldr	r0, [pc, #24]	; (800d290 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800d276:	f012 faa7 	bl	801f7c8 <__assert_func>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	4629      	mov	r1, r5
 800d27e:	4620      	mov	r0, r4
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d286:	4718      	bx	r3
 800d288:	08021eb5 	.word	0x08021eb5
 800d28c:	08021f1c 	.word	0x08021f1c
 800d290:	08021e0d 	.word	0x08021e0d

0800d294 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d294:	4770      	bx	lr
	...

0800d298 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d298:	4a02      	ldr	r2, [pc, #8]	; (800d2a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d29a:	6002      	str	r2, [r0, #0]
 800d29c:	2200      	movs	r2, #0
 800d29e:	8082      	strh	r2, [r0, #4]
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	08021ef0 	.word	0x08021ef0

0800d2a8 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d2a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d2aa:	4770      	bx	lr

0800d2ac <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 800d2ac:	4a02      	ldr	r2, [pc, #8]	; (800d2b8 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 800d2ae:	6002      	str	r2, [r0, #0]
 800d2b0:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	; 0xe0
 800d2b4:	8082      	strh	r2, [r0, #4]
 800d2b6:	4770      	bx	lr
 800d2b8:	08021328 	.word	0x08021328

0800d2bc <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 800d2bc:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 800d2c0:	4770      	bx	lr

0800d2c2 <_ZNK8touchgfx12TextProgress8getColorEv>:
 800d2c2:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 800d2c6:	4770      	bx	lr

0800d2c8 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 800d2c8:	2902      	cmp	r1, #2
 800d2ca:	b570      	push	{r4, r5, r6, lr}
 800d2cc:	bf28      	it	cs
 800d2ce:	2102      	movcs	r1, #2
 800d2d0:	6803      	ldr	r3, [r0, #0]
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
 800d2d8:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800d2dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d2e0:	4798      	blx	r3
 800d2e2:	462b      	mov	r3, r5
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2ec:	4718      	bx	r3

0800d2ee <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 800d2ee:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 800d2f2:	4770      	bx	lr

0800d2f4 <_ZN8touchgfx12TextProgressD1Ev>:
 800d2f4:	4770      	bx	lr

0800d2f6 <_ZN8touchgfx12TextProgressD0Ev>:
 800d2f6:	b510      	push	{r4, lr}
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	f44f 7184 	mov.w	r1, #264	; 0x108
 800d2fe:	f012 fa34 	bl	801f76a <_ZdlPvj>
 800d302:	4620      	mov	r0, r4
 800d304:	bd10      	pop	{r4, pc}

0800d306 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 800d306:	30b4      	adds	r0, #180	; 0xb4
 800d308:	f003 b9a1 	b.w	801064e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

0800d30c <_ZN8touchgfx12TextProgress8setAlphaEh>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4604      	mov	r4, r0
 800d310:	460d      	mov	r5, r1
 800d312:	f000 f9b4 	bl	800d67e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800d316:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 800d31a:	bd38      	pop	{r3, r4, r5, pc}

0800d31c <_ZN8touchgfx12TextProgress8setValueEi>:
 800d31c:	b530      	push	{r4, r5, lr}
 800d31e:	b087      	sub	sp, #28
 800d320:	4604      	mov	r4, r0
 800d322:	f000 f9fd 	bl	800d720 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800d326:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 800d328:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 800d32c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d330:	ab06      	add	r3, sp, #24
 800d332:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800d336:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 800d33a:	aa06      	add	r2, sp, #24
 800d33c:	4620      	mov	r0, r4
 800d33e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d342:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800d346:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d34a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d34e:	0089      	lsls	r1, r1, #2
 800d350:	b289      	uxth	r1, r1
 800d352:	f000 fa78 	bl	800d846 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800d356:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 800d35a:	b1c1      	cbz	r1, 800d38e <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 800d35c:	ab06      	add	r3, sp, #24
 800d35e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d362:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 800d366:	fb90 f3f2 	sdiv	r3, r0, r2
 800d36a:	fb02 0213 	mls	r2, r2, r3, r0
 800d36e:	4628      	mov	r0, r5
 800d370:	e9cd 1200 	strd	r1, r2, [sp]
 800d374:	4a0a      	ldr	r2, [pc, #40]	; (800d3a0 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 800d376:	2108      	movs	r1, #8
 800d378:	f008 fa3c 	bl	80157f4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800d37c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800d380:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 800d384:	b007      	add	sp, #28
 800d386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d38a:	f006 b9e5 	b.w	8013758 <_ZNK8touchgfx8Drawable10invalidateEv>
 800d38e:	4603      	mov	r3, r0
 800d390:	4a04      	ldr	r2, [pc, #16]	; (800d3a4 <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 800d392:	2108      	movs	r1, #8
 800d394:	4628      	mov	r0, r5
 800d396:	f008 fa2d 	bl	80157f4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800d39a:	e7ef      	b.n	800d37c <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 800d39c:	080209f8 	.word	0x080209f8
 800d3a0:	08021fe7 	.word	0x08021fe7
 800d3a4:	08021fef 	.word	0x08021fef

0800d3a8 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 800d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ac:	461d      	mov	r5, r3
 800d3ae:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800d3b8:	4691      	mov	r9, r2
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800d3c0:	4688      	mov	r8, r1
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f7f5 fb15 	bl	80029f4 <_ZN8touchgfx8Drawable8setWidthEs>
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	f7f5 fb13 	bl	80029f8 <_ZN8touchgfx8Drawable9setHeightEs>
 800d3d2:	9608      	str	r6, [sp, #32]
 800d3d4:	462b      	mov	r3, r5
 800d3d6:	464a      	mov	r2, r9
 800d3d8:	4641      	mov	r1, r8
 800d3da:	4620      	mov	r0, r4
 800d3dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e0:	f000 ba4e 	b.w	800d880 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800d3e4 <_ZN8touchgfx12TextProgressC1Ev>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f000 fa76 	bl	800d8d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	4b20      	ldr	r3, [pc, #128]	; (800d470 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 800d3f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3f4:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 800d3f8:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 800d3fc:	4a1d      	ldr	r2, [pc, #116]	; (800d474 <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	2300      	movs	r3, #0
 800d402:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 800d406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d40a:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 800d40e:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 800d412:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800d416:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 800d41a:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 800d41e:	4a16      	ldr	r2, [pc, #88]	; (800d478 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 800d420:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 800d424:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 800d428:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 800d42c:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800d430:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800d434:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800d438:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800d43c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 800d440:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 800d444:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 800d448:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800d44c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800d450:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 800d454:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 800d458:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800d45c:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 800d460:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
 800d464:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 800d468:	f000 fafc 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d46c:	4620      	mov	r0, r4
 800d46e:	bd10      	pop	{r4, pc}
 800d470:	08021ffc 	.word	0x08021ffc
 800d474:	08021328 	.word	0x08021328
 800d478:	08023344 	.word	0x08023344

0800d47c <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 800d47c:	b530      	push	{r4, r5, lr}
 800d47e:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 800d482:	2520      	movs	r5, #32
 800d484:	fb94 f4f5 	sdiv	r4, r4, r5
 800d488:	600c      	str	r4, [r1, #0]
 800d48a:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800d48e:	fb93 f3f5 	sdiv	r3, r3, r5
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	bd30      	pop	{r4, r5, pc}

0800d496 <_ZN8touchgfx12LineProgress6setEndEii>:
 800d496:	0149      	lsls	r1, r1, #5
 800d498:	0152      	lsls	r2, r2, #5
 800d49a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800d49e:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
 800d4a2:	4770      	bx	lr

0800d4a4 <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 800d4a4:	b530      	push	{r4, r5, lr}
 800d4a6:	f8d0 4130 	ldr.w	r4, [r0, #304]	; 0x130
 800d4aa:	2520      	movs	r5, #32
 800d4ac:	fb94 f4f5 	sdiv	r4, r4, r5
 800d4b0:	600c      	str	r4, [r1, #0]
 800d4b2:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800d4b6:	fb93 f3f5 	sdiv	r3, r3, r5
 800d4ba:	6013      	str	r3, [r2, #0]
 800d4bc:	bd30      	pop	{r4, r5, pc}

0800d4be <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 800d4be:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800d4c2:	2320      	movs	r3, #32
 800d4c4:	fb90 f0f3 	sdiv	r0, r0, r3
 800d4c8:	4770      	bx	lr

0800d4ca <_ZN8touchgfx12LineProgressD1Ev>:
 800d4ca:	4770      	bx	lr

0800d4cc <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 800d4cc:	30b4      	adds	r0, #180	; 0xb4
 800d4ce:	f002 ba12 	b.w	800f8f6 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

0800d4d2 <_ZN8touchgfx12LineProgress8setStartEii>:
 800d4d2:	0149      	lsls	r1, r1, #5
 800d4d4:	30b4      	adds	r0, #180	; 0xb4
 800d4d6:	0152      	lsls	r2, r2, #5
 800d4d8:	6741      	str	r1, [r0, #116]	; 0x74
 800d4da:	6782      	str	r2, [r0, #120]	; 0x78
 800d4dc:	f002 bcf4 	b.w	800fec8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

0800d4e0 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 800d4e0:	0149      	lsls	r1, r1, #5
 800d4e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 800d4e6:	4299      	cmp	r1, r3
 800d4e8:	d004      	beq.n	800d4f4 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 800d4ea:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
 800d4ee:	30b4      	adds	r0, #180	; 0xb4
 800d4f0:	f002 bbda 	b.w	800fca8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800d4f4:	4770      	bx	lr

0800d4f6 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 800d4f6:	30b4      	adds	r0, #180	; 0xb4
 800d4f8:	f002 bd16 	b.w	800ff28 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

0800d4fc <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 800d4fc:	30b4      	adds	r0, #180	; 0xb4
 800d4fe:	f002 bbcf 	b.w	800fca0 <_ZNK8touchgfx4Line18getLineEndingStyleEv>

0800d502 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 800d502:	b538      	push	{r3, r4, r5, lr}
 800d504:	4604      	mov	r4, r0
 800d506:	460d      	mov	r5, r1
 800d508:	f000 f8b9 	bl	800d67e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800d50c:	f884 50e2 	strb.w	r5, [r4, #226]	; 0xe2
 800d510:	bd38      	pop	{r3, r4, r5, pc}

0800d512 <_ZN8touchgfx12LineProgressD0Ev>:
 800d512:	b510      	push	{r4, lr}
 800d514:	4604      	mov	r4, r0
 800d516:	f44f 719c 	mov.w	r1, #312	; 0x138
 800d51a:	f012 f926 	bl	801f76a <_ZdlPvj>
 800d51e:	4620      	mov	r0, r4
 800d520:	bd10      	pop	{r4, pc}

0800d522 <_ZN8touchgfx12LineProgress8setValueEi>:
 800d522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d524:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
 800d528:	4604      	mov	r4, r0
 800d52a:	b33b      	cbz	r3, 800d57c <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 800d52c:	f000 f8f8 	bl	800d720 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800d530:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800d534:	4620      	mov	r0, r4
 800d536:	2720      	movs	r7, #32
 800d538:	f000 f985 	bl	800d846 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800d53c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 800d540:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 800d544:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800d548:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
 800d54c:	1a5b      	subs	r3, r3, r1
 800d54e:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 800d552:	1aad      	subs	r5, r5, r2
 800d554:	015b      	lsls	r3, r3, #5
 800d556:	016d      	lsls	r5, r5, #5
 800d558:	fb93 f3f6 	sdiv	r3, r3, r6
 800d55c:	fb95 f5f6 	sdiv	r5, r5, r6
 800d560:	4343      	muls	r3, r0
 800d562:	4368      	muls	r0, r5
 800d564:	fb93 f3f7 	sdiv	r3, r3, r7
 800d568:	fb90 f0f7 	sdiv	r0, r0, r7
 800d56c:	4419      	add	r1, r3
 800d56e:	4402      	add	r2, r0
 800d570:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800d574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d578:	f002 bcb1 	b.w	800fede <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 800d57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800d57e:	b570      	push	{r4, r5, r6, lr}
 800d580:	6803      	ldr	r3, [r0, #0]
 800d582:	4604      	mov	r4, r0
 800d584:	4615      	mov	r5, r2
 800d586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d588:	4798      	blx	r3
 800d58a:	6823      	ldr	r3, [r4, #0]
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d596:	4718      	bx	r3

0800d598 <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 800d598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59c:	461d      	mov	r5, r3
 800d59e:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	460f      	mov	r7, r1
 800d5a8:	4690      	mov	r8, r2
 800d5aa:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	30b4      	adds	r0, #180	; 0xb4
 800d5b4:	f7ff ffe3 	bl	800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d5b8:	9606      	str	r6, [sp, #24]
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	4642      	mov	r2, r8
 800d5be:	4639      	mov	r1, r7
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	f000 b95b 	b.w	800d880 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>
	...

0800d5cc <_ZN8touchgfx12LineProgressC1Ev>:
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	f000 f982 	bl	800d8d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800d5d4:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <_ZN8touchgfx12LineProgressC1Ev+0x48>)
 800d5d6:	2600      	movs	r6, #0
 800d5d8:	4625      	mov	r5, r4
 800d5da:	f845 3bb4 	str.w	r3, [r5], #180
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f002 fb3e 	bl	800fc60 <_ZN8touchgfx4LineC1Ev>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5ea:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800d5ee:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 800d5f2:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 800d5f6:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
 800d5fa:	f000 fa33 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d5fe:	4628      	mov	r0, r5
 800d600:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d604:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d608:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800d60c:	f7ff ffb7 	bl	800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d610:	4620      	mov	r0, r4
 800d612:	bd70      	pop	{r4, r5, r6, pc}
 800d614:	080220e4 	.word	0x080220e4

0800d618 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800d618:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800d61c:	4770      	bx	lr

0800d61e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800d61e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800d622:	4770      	bx	lr

0800d624 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800d624:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800d628:	4770      	bx	lr

0800d62a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800d62a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800d62e:	4770      	bx	lr

0800d630 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800d630:	b510      	push	{r4, lr}
 800d632:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800d636:	600c      	str	r4, [r1, #0]
 800d638:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800d63c:	6011      	str	r1, [r2, #0]
 800d63e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	9b02      	ldr	r3, [sp, #8]
 800d646:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 800d64a:	801a      	strh	r2, [r3, #0]
 800d64c:	bd10      	pop	{r4, pc}

0800d64e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800d64e:	b510      	push	{r4, lr}
 800d650:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800d654:	600c      	str	r4, [r1, #0]
 800d656:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800d65a:	6011      	str	r1, [r2, #0]
 800d65c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 800d660:	801a      	strh	r2, [r3, #0]
 800d662:	bd10      	pop	{r4, pc}

0800d664 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800d664:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800d668:	600b      	str	r3, [r1, #0]
 800d66a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	4770      	bx	lr

0800d672 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800d672:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 800d676:	4770      	bx	lr

0800d678 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800d678:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 800d67c:	4770      	bx	lr

0800d67e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800d67e:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800d682:	4770      	bx	lr

0800d684 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800d684:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 800d688:	4770      	bx	lr

0800d68a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800d68a:	4770      	bx	lr

0800d68c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800d68c:	b510      	push	{r4, lr}
 800d68e:	4604      	mov	r4, r0
 800d690:	21b4      	movs	r1, #180	; 0xb4
 800d692:	f012 f86a 	bl	801f76a <_ZdlPvj>
 800d696:	4620      	mov	r0, r4
 800d698:	bd10      	pop	{r4, pc}

0800d69a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	4616      	mov	r6, r2
 800d6a4:	428d      	cmp	r5, r1
 800d6a6:	bfb8      	it	lt
 800d6a8:	460d      	movlt	r5, r1
 800d6aa:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800d6ae:	428d      	cmp	r5, r1
 800d6b0:	bfa8      	it	ge
 800d6b2:	460d      	movge	r5, r1
 800d6b4:	b99a      	cbnz	r2, 800d6de <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800d6b6:	6803      	ldr	r3, [r0, #0]
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d6be:	4798      	blx	r3
 800d6c0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800d6c4:	b358      	cbz	r0, 800d71e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800d6c6:	6803      	ldr	r3, [r0, #0]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	4798      	blx	r3
 800d6cc:	b338      	cbz	r0, 800d71e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 800d6ce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	6803      	ldr	r3, [r0, #0]
 800d6d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	4718      	bx	r3
 800d6de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	dd07      	ble.n	800d6f6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 800d6e6:	f005 f86d 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f005 f8a2 	bl	8012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d6fe:	4798      	blx	r3
 800d700:	2300      	movs	r3, #0
 800d702:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800d706:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800d70a:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 800d70e:	f005 f859 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800d712:	4621      	mov	r1, r4
 800d714:	f005 f85c 	bl	80127d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 800d718:	2301      	movs	r3, #1
 800d71a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800d71e:	bd70      	pop	{r4, r5, r6, pc}

0800d720 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800d720:	b510      	push	{r4, lr}
 800d722:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800d726:	4604      	mov	r4, r0
 800d728:	4299      	cmp	r1, r3
 800d72a:	bfb8      	it	lt
 800d72c:	4619      	movlt	r1, r3
 800d72e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d732:	4299      	cmp	r1, r3
 800d734:	bfa8      	it	ge
 800d736:	4619      	movge	r1, r3
 800d738:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d73c:	428b      	cmp	r3, r1
 800d73e:	d010      	beq.n	800d762 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d740:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800d744:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800d748:	b158      	cbz	r0, 800d762 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d74a:	6803      	ldr	r3, [r0, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	4798      	blx	r3
 800d750:	b138      	cbz	r0, 800d762 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d752:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800d756:	4621      	mov	r1, r4
 800d758:	6803      	ldr	r3, [r0, #0]
 800d75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	4718      	bx	r3
 800d762:	bd10      	pop	{r4, pc}

0800d764 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800d764:	4291      	cmp	r1, r2
 800d766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76a:	4604      	mov	r4, r0
 800d76c:	460e      	mov	r6, r1
 800d76e:	4615      	mov	r5, r2
 800d770:	4698      	mov	r8, r3
 800d772:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800d776:	db05      	blt.n	800d784 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 800d778:	4b11      	ldr	r3, [pc, #68]	; (800d7c0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 800d77a:	214b      	movs	r1, #75	; 0x4b
 800d77c:	4a11      	ldr	r2, [pc, #68]	; (800d7c4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 800d77e:	4812      	ldr	r0, [pc, #72]	; (800d7c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 800d780:	f012 f822 	bl	801f7c8 <__assert_func>
 800d784:	6803      	ldr	r3, [r0, #0]
 800d786:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 800d78a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800d78e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d792:	4798      	blx	r3
 800d794:	f1b8 0f00 	cmp.w	r8, #0
 800d798:	d10c      	bne.n	800d7b4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 800d79a:	1bad      	subs	r5, r5, r6
 800d79c:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 800d7a0:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 800d7a4:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 800d7a8:	42bb      	cmp	r3, r7
 800d7aa:	d806      	bhi.n	800d7ba <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 800d7ac:	4b07      	ldr	r3, [pc, #28]	; (800d7cc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 800d7ae:	2158      	movs	r1, #88	; 0x58
 800d7b0:	4a04      	ldr	r2, [pc, #16]	; (800d7c4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 800d7b2:	e7e4      	b.n	800d77e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 800d7b4:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 800d7b8:	e7f2      	b.n	800d7a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 800d7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7be:	bf00      	nop
 800d7c0:	080221d0 	.word	0x080221d0
 800d7c4:	0802231c 	.word	0x0802231c
 800d7c8:	080221da 	.word	0x080221da
 800d7cc:	08022231 	.word	0x08022231

0800d7d0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	b3a3      	cbz	r3, 800d844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800d7da:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800d7de:	2100      	movs	r1, #0
 800d7e0:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 800d7ea:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 800d7ee:	b280      	uxth	r0, r0
 800d7f0:	1ad2      	subs	r2, r2, r3
 800d7f2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800d7f6:	b212      	sxth	r2, r2
 800d7f8:	47a8      	blx	r5
 800d7fa:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	4401      	add	r1, r0
 800d802:	4620      	mov	r0, r4
 800d804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d808:	4798      	blx	r3
 800d80a:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 800d80e:	429a      	cmp	r2, r3
 800d810:	db18      	blt.n	800d844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800d812:	2500      	movs	r5, #0
 800d814:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800d818:	f004 ffd4 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800d81c:	4621      	mov	r1, r4
 800d81e:	f005 f809 	bl	8012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 800d822:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800d826:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800d82a:	b158      	cbz	r0, 800d844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800d82c:	6803      	ldr	r3, [r0, #0]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	4798      	blx	r3
 800d832:	b138      	cbz	r0, 800d844 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 800d834:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800d838:	4621      	mov	r1, r4
 800d83a:	6803      	ldr	r3, [r0, #0]
 800d83c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4718      	bx	r3
 800d844:	bd70      	pop	{r4, r5, r6, pc}

0800d846 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800d846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d848:	4604      	mov	r4, r0
 800d84a:	460d      	mov	r5, r1
 800d84c:	b1a9      	cbz	r1, 800d87a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800d84e:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 800d852:	ab01      	add	r3, sp, #4
 800d854:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 800d858:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800d85c:	1b89      	subs	r1, r1, r6
 800d85e:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 800d862:	1a12      	subs	r2, r2, r0
 800d864:	1a38      	subs	r0, r7, r0
 800d866:	f006 f91d 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 800d86a:	4629      	mov	r1, r5
 800d86c:	ab01      	add	r3, sp, #4
 800d86e:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800d872:	4430      	add	r0, r6
 800d874:	f006 f916 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 800d878:	b285      	uxth	r5, r0
 800d87a:	4628      	mov	r0, r5
 800d87c:	b003      	add	sp, #12
 800d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d880 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800d880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d884:	4604      	mov	r4, r0
 800d886:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800d88a:	4698      	mov	r8, r3
 800d88c:	460e      	mov	r6, r1
 800d88e:	4615      	mov	r5, r2
 800d890:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 800d894:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800d898:	4619      	mov	r1, r3
 800d89a:	463a      	mov	r2, r7
 800d89c:	3058      	adds	r0, #88	; 0x58
 800d89e:	f7ff fe6e 	bl	800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d8a2:	4446      	add	r6, r8
 800d8a4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d8a8:	443d      	add	r5, r7
 800d8aa:	42b3      	cmp	r3, r6
 800d8ac:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d8b0:	bfb8      	it	lt
 800d8b2:	8126      	strhlt	r6, [r4, #8]
 800d8b4:	42ab      	cmp	r3, r5
 800d8b6:	bfb8      	it	lt
 800d8b8:	8165      	strhlt	r5, [r4, #10]
 800d8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8be <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	302c      	adds	r0, #44	; 0x2c
 800d8c4:	f003 f8d7 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d8c8:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800d8d2:	f7ff fe54 	bl	800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d8d6:	bd10      	pop	{r4, pc}

0800d8d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800d8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8da:	4604      	mov	r4, r0
 800d8dc:	2500      	movs	r5, #0
 800d8de:	f7f5 f99f 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 800d8e2:	4b24      	ldr	r3, [pc, #144]	; (800d974 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800d8e4:	4626      	mov	r6, r4
 800d8e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800d8ea:	2226      	movs	r2, #38	; 0x26
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	62a5      	str	r5, [r4, #40]	; 0x28
 800d8f0:	f846 3b2c 	str.w	r3, [r6], #44
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d8fa:	f011 fff5 	bl	801f8e8 <memset>
 800d8fe:	4630      	mov	r0, r6
 800d900:	f7f5 f98e 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 800d904:	a902      	add	r1, sp, #8
 800d906:	4b1c      	ldr	r3, [pc, #112]	; (800d978 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800d908:	4630      	mov	r0, r6
 800d90a:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800d90e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800d912:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d914:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800d918:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800d91c:	f003 f8ab 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d920:	4638      	mov	r0, r7
 800d922:	f7f5 f97d 	bl	8002c20 <_ZN8touchgfx8DrawableC1Ev>
 800d926:	4b15      	ldr	r3, [pc, #84]	; (800d97c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800d928:	4629      	mov	r1, r5
 800d92a:	4630      	mov	r0, r6
 800d92c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d92e:	2364      	movs	r3, #100	; 0x64
 800d930:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800d934:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800d938:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 800d93c:	4b10      	ldr	r3, [pc, #64]	; (800d980 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800d93e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800d942:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800d946:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 800d94a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 800d94e:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 800d952:	f7f5 f84b 	bl	80029ec <_ZN8touchgfx8Drawable4setXEs>
 800d956:	4629      	mov	r1, r5
 800d958:	4630      	mov	r0, r6
 800d95a:	f7f5 f849 	bl	80029f0 <_ZN8touchgfx8Drawable4setYEs>
 800d95e:	4631      	mov	r1, r6
 800d960:	4620      	mov	r0, r4
 800d962:	f000 f87f 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d966:	4620      	mov	r0, r4
 800d968:	4639      	mov	r1, r7
 800d96a:	f000 f87b 	bl	800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d96e:	4620      	mov	r0, r4
 800d970:	b003      	add	sp, #12
 800d972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d974:	08022254 	.word	0x08022254
 800d978:	080233ec 	.word	0x080233ec
 800d97c:	08022448 	.word	0x08022448
 800d980:	08014159 	.word	0x08014159

0800d984 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d984:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d986:	2000      	movs	r0, #0
 800d988:	b12b      	cbz	r3, 800d996 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d98a:	b920      	cbnz	r0, 800d996 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d98c:	1a5a      	subs	r2, r3, r1
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	4250      	negs	r0, r2
 800d992:	4150      	adcs	r0, r2
 800d994:	e7f8      	b.n	800d988 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d996:	4770      	bx	lr

0800d998 <_ZN8touchgfx9Container9removeAllEv>:
 800d998:	2200      	movs	r2, #0
 800d99a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d99c:	b123      	cbz	r3, 800d9a8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d99e:	6999      	ldr	r1, [r3, #24]
 800d9a0:	6281      	str	r1, [r0, #40]	; 0x28
 800d9a2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d9a6:	e7f8      	b.n	800d99a <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d9a8:	4770      	bx	lr

0800d9aa <_ZN8touchgfx9Container6unlinkEv>:
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6283      	str	r3, [r0, #40]	; 0x28
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	8002      	strh	r2, [r0, #0]
 800d9b4:	8042      	strh	r2, [r0, #2]
 800d9b6:	8082      	strh	r2, [r0, #4]
 800d9b8:	80c2      	strh	r2, [r0, #6]
 800d9ba:	4770      	bx	lr

0800d9bc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	460d      	mov	r5, r1
 800d9c0:	4616      	mov	r6, r2
 800d9c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d9c4:	b13c      	cbz	r4, 800d9d6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d0:	4798      	blx	r3
 800d9d2:	69a4      	ldr	r4, [r4, #24]
 800d9d4:	e7f6      	b.n	800d9c4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}

0800d9d8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	460d      	mov	r5, r1
 800d9dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d9de:	b134      	cbz	r4, 800d9ee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	4798      	blx	r3
 800d9ea:	69a4      	ldr	r4, [r4, #24]
 800d9ec:	e7f7      	b.n	800d9de <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}

0800d9f0 <_ZN8touchgfx9ContainerD1Ev>:
 800d9f0:	4770      	bx	lr

0800d9f2 <_ZN8touchgfx9ContainerD0Ev>:
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	212c      	movs	r1, #44	; 0x2c
 800d9f8:	f011 feb7 	bl	801f76a <_ZdlPvj>
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	bd10      	pop	{r4, pc}

0800da00 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800da00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da02:	b19b      	cbz	r3, 800da2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800da04:	428b      	cmp	r3, r1
 800da06:	d109      	bne.n	800da1c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800da08:	699a      	ldr	r2, [r3, #24]
 800da0a:	2100      	movs	r1, #0
 800da0c:	6159      	str	r1, [r3, #20]
 800da0e:	6282      	str	r2, [r0, #40]	; 0x28
 800da10:	b902      	cbnz	r2, 800da14 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800da12:	4770      	bx	lr
 800da14:	6199      	str	r1, [r3, #24]
 800da16:	4770      	bx	lr
 800da18:	4613      	mov	r3, r2
 800da1a:	b13a      	cbz	r2, 800da2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800da1c:	699a      	ldr	r2, [r3, #24]
 800da1e:	428a      	cmp	r2, r1
 800da20:	d1fa      	bne.n	800da18 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800da22:	698a      	ldr	r2, [r1, #24]
 800da24:	619a      	str	r2, [r3, #24]
 800da26:	2300      	movs	r3, #0
 800da28:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800da2c:	4770      	bx	lr

0800da2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800da2e:	b410      	push	{r4}
 800da30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da32:	4604      	mov	r4, r0
 800da34:	b92b      	cbnz	r3, 800da42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800da36:	6803      	ldr	r3, [r0, #0]
 800da38:	4611      	mov	r1, r2
 800da3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da40:	4718      	bx	r3
 800da42:	b941      	cbnz	r1, 800da56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800da44:	6193      	str	r3, [r2, #24]
 800da46:	6282      	str	r2, [r0, #40]	; 0x28
 800da48:	6154      	str	r4, [r2, #20]
 800da4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	4603      	mov	r3, r0
 800da52:	2800      	cmp	r0, #0
 800da54:	d0f9      	beq.n	800da4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800da56:	4299      	cmp	r1, r3
 800da58:	6998      	ldr	r0, [r3, #24]
 800da5a:	d1f9      	bne.n	800da50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800da5c:	6190      	str	r0, [r2, #24]
 800da5e:	618a      	str	r2, [r1, #24]
 800da60:	e7f2      	b.n	800da48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800da64 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800da64:	4288      	cmp	r0, r1
 800da66:	b508      	push	{r3, lr}
 800da68:	d105      	bne.n	800da76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800da6a:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800da6c:	2123      	movs	r1, #35	; 0x23
 800da6e:	4a11      	ldr	r2, [pc, #68]	; (800dab4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800da70:	4811      	ldr	r0, [pc, #68]	; (800dab8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800da72:	f011 fea9 	bl	801f7c8 <__assert_func>
 800da76:	694b      	ldr	r3, [r1, #20]
 800da78:	b11b      	cbz	r3, 800da82 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800da7a:	4b10      	ldr	r3, [pc, #64]	; (800dabc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800da7c:	2124      	movs	r1, #36	; 0x24
 800da7e:	4a0d      	ldr	r2, [pc, #52]	; (800dab4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800da80:	e7f6      	b.n	800da70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800da82:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800da86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da88:	b913      	cbnz	r3, 800da90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800da8a:	6281      	str	r1, [r0, #40]	; 0x28
 800da8c:	bd08      	pop	{r3, pc}
 800da8e:	4613      	mov	r3, r2
 800da90:	699a      	ldr	r2, [r3, #24]
 800da92:	b12a      	cbz	r2, 800daa0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800da94:	428b      	cmp	r3, r1
 800da96:	d1fa      	bne.n	800da8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800da9a:	2135      	movs	r1, #53	; 0x35
 800da9c:	4a05      	ldr	r2, [pc, #20]	; (800dab4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800da9e:	e7e7      	b.n	800da70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800daa0:	428b      	cmp	r3, r1
 800daa2:	d103      	bne.n	800daac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800daa6:	2138      	movs	r1, #56	; 0x38
 800daa8:	4a02      	ldr	r2, [pc, #8]	; (800dab4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800daaa:	e7e1      	b.n	800da70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800daac:	6199      	str	r1, [r3, #24]
 800daae:	e7ed      	b.n	800da8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800dab0:	08022375 	.word	0x08022375
 800dab4:	080224cc 	.word	0x080224cc
 800dab8:	080223a1 	.word	0x080223a1
 800dabc:	080223d4 	.word	0x080223d4
 800dac0:	0802240a 	.word	0x0802240a

0800dac4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac8:	461f      	mov	r7, r3
 800daca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800dace:	460d      	mov	r5, r1
 800dad0:	4616      	mov	r6, r2
 800dad2:	b103      	cbz	r3, 800dad6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800dad4:	6038      	str	r0, [r7, #0]
 800dad6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dad8:	b314      	cbz	r4, 800db20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800dada:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dade:	b1eb      	cbz	r3, 800db1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dae0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800dae4:	428d      	cmp	r5, r1
 800dae6:	db19      	blt.n	800db1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dae8:	b289      	uxth	r1, r1
 800daea:	8923      	ldrh	r3, [r4, #8]
 800daec:	440b      	add	r3, r1
 800daee:	b21b      	sxth	r3, r3
 800daf0:	429d      	cmp	r5, r3
 800daf2:	da13      	bge.n	800db1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800daf4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800daf8:	4296      	cmp	r6, r2
 800dafa:	db0f      	blt.n	800db1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dafc:	b292      	uxth	r2, r2
 800dafe:	8963      	ldrh	r3, [r4, #10]
 800db00:	4413      	add	r3, r2
 800db02:	b21b      	sxth	r3, r3
 800db04:	429e      	cmp	r6, r3
 800db06:	da09      	bge.n	800db1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	1ab2      	subs	r2, r6, r2
 800db0c:	1a69      	subs	r1, r5, r1
 800db0e:	4620      	mov	r0, r4
 800db10:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800db14:	b212      	sxth	r2, r2
 800db16:	463b      	mov	r3, r7
 800db18:	b209      	sxth	r1, r1
 800db1a:	47c0      	blx	r8
 800db1c:	69a4      	ldr	r4, [r4, #24]
 800db1e:	e7db      	b.n	800dad8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	4c6d      	ldr	r4, [pc, #436]	; (800dce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800db2a:	b0a1      	sub	sp, #132	; 0x84
 800db2c:	4606      	mov	r6, r0
 800db2e:	6824      	ldr	r4, [r4, #0]
 800db30:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800db32:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800db36:	2400      	movs	r4, #0
 800db38:	9303      	str	r3, [sp, #12]
 800db3a:	802c      	strh	r4, [r5, #0]
 800db3c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800db3e:	802c      	strh	r4, [r5, #0]
 800db40:	601c      	str	r4, [r3, #0]
 800db42:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800db46:	f7ff ffbd 	bl	800dac4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800db4a:	f1b9 0f03 	cmp.w	r9, #3
 800db4e:	f340 80c1 	ble.w	800dcd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800db52:	4631      	mov	r1, r6
 800db54:	a80c      	add	r0, sp, #48	; 0x30
 800db56:	f005 fe97 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800db5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800db5e:	9306      	str	r3, [sp, #24]
 800db60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800db64:	9307      	str	r3, [sp, #28]
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	f8d3 a000 	ldr.w	sl, [r3]
 800db6c:	f1ba 0f00 	cmp.w	sl, #0
 800db70:	f000 80b3 	beq.w	800dcda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800db74:	4651      	mov	r1, sl
 800db76:	a810      	add	r0, sp, #64	; 0x40
 800db78:	f005 fe86 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800db7c:	2002      	movs	r0, #2
 800db7e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800db82:	9b01      	ldr	r3, [sp, #4]
 800db84:	9a06      	ldr	r2, [sp, #24]
 800db86:	fb91 f1f0 	sdiv	r1, r1, r0
 800db8a:	189d      	adds	r5, r3, r2
 800db8c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800db90:	9a07      	ldr	r2, [sp, #28]
 800db92:	4419      	add	r1, r3
 800db94:	9b02      	ldr	r3, [sp, #8]
 800db96:	4413      	add	r3, r2
 800db98:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800db9c:	1a6d      	subs	r5, r5, r1
 800db9e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800dba2:	fb92 f2f0 	sdiv	r2, r2, r0
 800dba6:	440a      	add	r2, r1
 800dba8:	1a9b      	subs	r3, r3, r2
 800dbaa:	435b      	muls	r3, r3
 800dbac:	fb05 3505 	mla	r5, r5, r5, r3
 800dbb0:	4f4c      	ldr	r7, [pc, #304]	; (800dce4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800dbb2:	ac10      	add	r4, sp, #64	; 0x40
 800dbb4:	f1b9 0f0c 	cmp.w	r9, #12
 800dbb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dbbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dbc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbc4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800dbc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dbcc:	f04f 0303 	mov.w	r3, #3
 800dbd0:	bfd8      	it	le
 800dbd2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800dbd6:	f04f 0400 	mov.w	r4, #0
 800dbda:	f8cd 9000 	str.w	r9, [sp]
 800dbde:	bfcc      	ite	gt
 800dbe0:	4698      	movgt	r8, r3
 800dbe2:	fb92 f8f3 	sdivle	r8, r2, r3
 800dbe6:	1c63      	adds	r3, r4, #1
 800dbe8:	aa10      	add	r2, sp, #64	; 0x40
 800dbea:	f004 0401 	and.w	r4, r4, #1
 800dbee:	f04f 0b00 	mov.w	fp, #0
 800dbf2:	9308      	str	r3, [sp, #32]
 800dbf4:	9b00      	ldr	r3, [sp, #0]
 800dbf6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800dbfa:	fb93 f3f8 	sdiv	r3, r3, r8
 800dbfe:	3404      	adds	r4, #4
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	9a04      	ldr	r2, [sp, #16]
 800dc06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dc0a:	fb13 f302 	smulbb	r3, r3, r2
 800dc0e:	9a01      	ldr	r2, [sp, #4]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	1899      	adds	r1, r3, r2
 800dc14:	9305      	str	r3, [sp, #20]
 800dc16:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800dc1a:	b209      	sxth	r1, r1
 800dc1c:	4299      	cmp	r1, r3
 800dc1e:	db4d      	blt.n	800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc20:	8932      	ldrh	r2, [r6, #8]
 800dc22:	4413      	add	r3, r2
 800dc24:	b21b      	sxth	r3, r3
 800dc26:	4299      	cmp	r1, r3
 800dc28:	da48      	bge.n	800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc2a:	9b04      	ldr	r3, [sp, #16]
 800dc2c:	6827      	ldr	r7, [r4, #0]
 800dc2e:	fb17 f703 	smulbb	r7, r7, r3
 800dc32:	9b02      	ldr	r3, [sp, #8]
 800dc34:	b2bf      	uxth	r7, r7
 800dc36:	18fa      	adds	r2, r7, r3
 800dc38:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800dc3c:	b212      	sxth	r2, r2
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	db3c      	blt.n	800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc42:	8970      	ldrh	r0, [r6, #10]
 800dc44:	4403      	add	r3, r0
 800dc46:	b21b      	sxth	r3, r3
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	da37      	bge.n	800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4630      	mov	r0, r6
 800dc50:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc52:	ab0b      	add	r3, sp, #44	; 0x2c
 800dc54:	f7ff ff36 	bl	800dac4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800dc58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc5a:	b37a      	cbz	r2, 800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc5c:	4552      	cmp	r2, sl
 800dc5e:	d02d      	beq.n	800dcbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dc60:	4611      	mov	r1, r2
 800dc62:	a80e      	add	r0, sp, #56	; 0x38
 800dc64:	9209      	str	r2, [sp, #36]	; 0x24
 800dc66:	f005 fe0f 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dc6a:	f04f 0e02 	mov.w	lr, #2
 800dc6e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800dc72:	9a06      	ldr	r2, [sp, #24]
 800dc74:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800dc78:	9b01      	ldr	r3, [sp, #4]
 800dc7a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800dc7e:	4413      	add	r3, r2
 800dc80:	9a07      	ldr	r2, [sp, #28]
 800dc82:	fb91 f1fe 	sdiv	r1, r1, lr
 800dc86:	fb9c fcfe 	sdiv	ip, ip, lr
 800dc8a:	4401      	add	r1, r0
 800dc8c:	1a58      	subs	r0, r3, r1
 800dc8e:	9b02      	ldr	r3, [sp, #8]
 800dc90:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800dc94:	4413      	add	r3, r2
 800dc96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc98:	448c      	add	ip, r1
 800dc9a:	eba3 030c 	sub.w	r3, r3, ip
 800dc9e:	435b      	muls	r3, r3
 800dca0:	fb00 3300 	mla	r3, r0, r0, r3
 800dca4:	42ab      	cmp	r3, r5
 800dca6:	d208      	bcs.n	800dcba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800dca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcaa:	461d      	mov	r5, r3
 800dcac:	9803      	ldr	r0, [sp, #12]
 800dcae:	6001      	str	r1, [r0, #0]
 800dcb0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800dcb2:	9805      	ldr	r0, [sp, #20]
 800dcb4:	8008      	strh	r0, [r1, #0]
 800dcb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 800dcb8:	800f      	strh	r7, [r1, #0]
 800dcba:	4692      	mov	sl, r2
 800dcbc:	f10b 0b01 	add.w	fp, fp, #1
 800dcc0:	3408      	adds	r4, #8
 800dcc2:	f1bb 0f04 	cmp.w	fp, #4
 800dcc6:	d19d      	bne.n	800dc04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800dcc8:	9b00      	ldr	r3, [sp, #0]
 800dcca:	9c08      	ldr	r4, [sp, #32]
 800dccc:	444b      	add	r3, r9
 800dcce:	4544      	cmp	r4, r8
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	d188      	bne.n	800dbe6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800dcd4:	b021      	add	sp, #132	; 0x84
 800dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcda:	f04f 35ff 	mov.w	r5, #4294967295
 800dcde:	e767      	b.n	800dbb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800dce0:	2400e9f0 	.word	0x2400e9f0
 800dce4:	08020a04 	.word	0x08020a04

0800dce8 <_ZN8touchgfx4RectaNERKS0_>:
 800dce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcec:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dcf0:	888c      	ldrh	r4, [r1, #4]
 800dcf2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dcf6:	443c      	add	r4, r7
 800dcf8:	b2a4      	uxth	r4, r4
 800dcfa:	fa0f f884 	sxth.w	r8, r4
 800dcfe:	45c1      	cmp	r9, r8
 800dd00:	da2f      	bge.n	800dd62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dd02:	8882      	ldrh	r2, [r0, #4]
 800dd04:	444a      	add	r2, r9
 800dd06:	b292      	uxth	r2, r2
 800dd08:	fa0f fe82 	sxth.w	lr, r2
 800dd0c:	4577      	cmp	r7, lr
 800dd0e:	da28      	bge.n	800dd62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dd10:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dd14:	88cb      	ldrh	r3, [r1, #6]
 800dd16:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800dd1a:	442b      	add	r3, r5
 800dd1c:	b21b      	sxth	r3, r3
 800dd1e:	429e      	cmp	r6, r3
 800dd20:	da1f      	bge.n	800dd62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dd22:	88c3      	ldrh	r3, [r0, #6]
 800dd24:	4433      	add	r3, r6
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	fa0f fc83 	sxth.w	ip, r3
 800dd2c:	4565      	cmp	r5, ip
 800dd2e:	da18      	bge.n	800dd62 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dd30:	454f      	cmp	r7, r9
 800dd32:	bfb8      	it	lt
 800dd34:	464f      	movlt	r7, r9
 800dd36:	42b5      	cmp	r5, r6
 800dd38:	bfb8      	it	lt
 800dd3a:	4635      	movlt	r5, r6
 800dd3c:	45f0      	cmp	r8, lr
 800dd3e:	bfd8      	it	le
 800dd40:	4622      	movle	r2, r4
 800dd42:	1bd2      	subs	r2, r2, r7
 800dd44:	8082      	strh	r2, [r0, #4]
 800dd46:	884a      	ldrh	r2, [r1, #2]
 800dd48:	88c9      	ldrh	r1, [r1, #6]
 800dd4a:	8007      	strh	r7, [r0, #0]
 800dd4c:	440a      	add	r2, r1
 800dd4e:	8045      	strh	r5, [r0, #2]
 800dd50:	b292      	uxth	r2, r2
 800dd52:	b211      	sxth	r1, r2
 800dd54:	458c      	cmp	ip, r1
 800dd56:	bfa8      	it	ge
 800dd58:	4613      	movge	r3, r2
 800dd5a:	1b5b      	subs	r3, r3, r5
 800dd5c:	80c3      	strh	r3, [r0, #6]
 800dd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd62:	2300      	movs	r3, #0
 800dd64:	8003      	strh	r3, [r0, #0]
 800dd66:	8043      	strh	r3, [r0, #2]
 800dd68:	8083      	strh	r3, [r0, #4]
 800dd6a:	80c3      	strh	r3, [r0, #6]
 800dd6c:	e7f7      	b.n	800dd5e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800dd6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	dd06      	ble.n	800dd84 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800dd76:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	bfcc      	ite	gt
 800dd7e:	2000      	movgt	r0, #0
 800dd80:	2001      	movle	r0, #1
 800dd82:	4770      	bx	lr
 800dd84:	2001      	movs	r0, #1
 800dd86:	4770      	bx	lr

0800dd88 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4604      	mov	r4, r0
 800dd90:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800dd92:	8003      	strh	r3, [r0, #0]
 800dd94:	8043      	strh	r3, [r0, #2]
 800dd96:	8083      	strh	r3, [r0, #4]
 800dd98:	80c3      	strh	r3, [r0, #6]
 800dd9a:	2d00      	cmp	r5, #0
 800dd9c:	d040      	beq.n	800de20 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800dd9e:	1d28      	adds	r0, r5, #4
 800dda0:	f7ff ffe5 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dda4:	b988      	cbnz	r0, 800ddca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7ff ffe1 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ddac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ddb0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ddb4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ddb8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ddbc:	b138      	cbz	r0, 800ddce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ddbe:	8022      	strh	r2, [r4, #0]
 800ddc0:	8063      	strh	r3, [r4, #2]
 800ddc2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ddc6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ddca:	69ad      	ldr	r5, [r5, #24]
 800ddcc:	e7e5      	b.n	800dd9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ddce:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ddd2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ddd6:	4290      	cmp	r0, r2
 800ddd8:	4607      	mov	r7, r0
 800ddda:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ddde:	460e      	mov	r6, r1
 800dde0:	bfa8      	it	ge
 800dde2:	4617      	movge	r7, r2
 800dde4:	4299      	cmp	r1, r3
 800dde6:	4472      	add	r2, lr
 800dde8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ddec:	bfa8      	it	ge
 800ddee:	461e      	movge	r6, r3
 800ddf0:	4440      	add	r0, r8
 800ddf2:	4471      	add	r1, lr
 800ddf4:	4463      	add	r3, ip
 800ddf6:	b200      	sxth	r0, r0
 800ddf8:	8027      	strh	r7, [r4, #0]
 800ddfa:	b212      	sxth	r2, r2
 800ddfc:	8066      	strh	r6, [r4, #2]
 800ddfe:	b209      	sxth	r1, r1
 800de00:	b21b      	sxth	r3, r3
 800de02:	4290      	cmp	r0, r2
 800de04:	bfac      	ite	ge
 800de06:	ebc7 0200 	rsbge	r2, r7, r0
 800de0a:	ebc7 0202 	rsblt	r2, r7, r2
 800de0e:	4299      	cmp	r1, r3
 800de10:	bfac      	ite	ge
 800de12:	ebc6 0301 	rsbge	r3, r6, r1
 800de16:	ebc6 0303 	rsblt	r3, r6, r3
 800de1a:	80a2      	strh	r2, [r4, #4]
 800de1c:	80e3      	strh	r3, [r4, #6]
 800de1e:	e7d4      	b.n	800ddca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800de20:	4620      	mov	r0, r4
 800de22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800de26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800de2a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800de2e:	b383      	cbz	r3, 800de92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800de30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800de32:	b374      	cbz	r4, 800de92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800de34:	f9b1 5000 	ldrsh.w	r5, [r1]
 800de38:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800de3c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800de40:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800de44:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800de48:	b303      	cbz	r3, 800de8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800de4a:	4668      	mov	r0, sp
 800de4c:	1d21      	adds	r1, r4, #4
 800de4e:	f8ad 5000 	strh.w	r5, [sp]
 800de52:	f8ad 6002 	strh.w	r6, [sp, #2]
 800de56:	f8ad 7004 	strh.w	r7, [sp, #4]
 800de5a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800de5e:	f7ff ff43 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 800de62:	4668      	mov	r0, sp
 800de64:	f7ff ff83 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800de68:	b980      	cbnz	r0, 800de8c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800de6a:	f8bd 3000 	ldrh.w	r3, [sp]
 800de6e:	4669      	mov	r1, sp
 800de70:	88a2      	ldrh	r2, [r4, #4]
 800de72:	4620      	mov	r0, r4
 800de74:	1a9b      	subs	r3, r3, r2
 800de76:	88e2      	ldrh	r2, [r4, #6]
 800de78:	f8ad 3000 	strh.w	r3, [sp]
 800de7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800de80:	1a9b      	subs	r3, r3, r2
 800de82:	f8ad 3002 	strh.w	r3, [sp, #2]
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	4798      	blx	r3
 800de8c:	69a4      	ldr	r4, [r4, #24]
 800de8e:	2c00      	cmp	r4, #0
 800de90:	d1d8      	bne.n	800de44 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800de92:	b002      	add	sp, #8
 800de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800de98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de9a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800de9e:	460d      	mov	r5, r1
 800dea0:	4616      	mov	r6, r2
 800dea2:	b323      	cbz	r3, 800deee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dea4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dea6:	b314      	cbz	r4, 800deee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dea8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800deac:	b1eb      	cbz	r3, 800deea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800deae:	6828      	ldr	r0, [r5, #0]
 800deb0:	466b      	mov	r3, sp
 800deb2:	6869      	ldr	r1, [r5, #4]
 800deb4:	c303      	stmia	r3!, {r0, r1}
 800deb6:	4668      	mov	r0, sp
 800deb8:	1d21      	adds	r1, r4, #4
 800deba:	f7ff ff15 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 800debe:	4668      	mov	r0, sp
 800dec0:	f7ff ff55 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dec4:	b988      	cbnz	r0, 800deea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dec6:	f8bd 3000 	ldrh.w	r3, [sp]
 800deca:	4669      	mov	r1, sp
 800decc:	88a2      	ldrh	r2, [r4, #4]
 800dece:	4620      	mov	r0, r4
 800ded0:	1a9b      	subs	r3, r3, r2
 800ded2:	88e2      	ldrh	r2, [r4, #6]
 800ded4:	f8ad 3000 	strh.w	r3, [sp]
 800ded8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	4632      	mov	r2, r6
 800dee0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dee8:	4798      	blx	r3
 800deea:	69a4      	ldr	r4, [r4, #24]
 800deec:	e7db      	b.n	800dea6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800deee:	b002      	add	sp, #8
 800def0:	bd70      	pop	{r4, r5, r6, pc}

0800def2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800def2:	6803      	ldr	r3, [r0, #0]
 800def4:	b513      	push	{r0, r1, r4, lr}
 800def6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800defa:	2300      	movs	r3, #0
 800defc:	e9cd 3300 	strd	r3, r3, [sp]
 800df00:	466b      	mov	r3, sp
 800df02:	47a0      	blx	r4
 800df04:	b002      	add	sp, #8
 800df06:	bd10      	pop	{r4, pc}

0800df08 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800df08:	2301      	movs	r3, #1
 800df0a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800df0e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800df12:	4770      	bx	lr

0800df14 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800df14:	2301      	movs	r3, #1
 800df16:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800df1a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800df1e:	4770      	bx	lr

0800df20 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800df20:	6843      	ldr	r3, [r0, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	725a      	strb	r2, [r3, #9]
 800df26:	6840      	ldr	r0, [r0, #4]
 800df28:	6803      	ldr	r3, [r0, #0]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	4718      	bx	r3

0800df2e <_ZN8touchgfx3HAL8flushDMAEv>:
 800df2e:	6840      	ldr	r0, [r0, #4]
 800df30:	6803      	ldr	r3, [r0, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	4718      	bx	r3

0800df36 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800df36:	b530      	push	{r4, r5, lr}
 800df38:	b08b      	sub	sp, #44	; 0x2c
 800df3a:	6804      	ldr	r4, [r0, #0]
 800df3c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800df40:	9509      	str	r5, [sp, #36]	; 0x24
 800df42:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800df46:	9508      	str	r5, [sp, #32]
 800df48:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800df4c:	9507      	str	r5, [sp, #28]
 800df4e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800df52:	9506      	str	r5, [sp, #24]
 800df54:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800df58:	9505      	str	r5, [sp, #20]
 800df5a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800df5e:	9504      	str	r5, [sp, #16]
 800df60:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800df64:	9503      	str	r5, [sp, #12]
 800df66:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800df6a:	9502      	str	r5, [sp, #8]
 800df6c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800df70:	e9cd 3500 	strd	r3, r5, [sp]
 800df74:	4613      	mov	r3, r2
 800df76:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800df78:	2200      	movs	r2, #0
 800df7a:	47a0      	blx	r4
 800df7c:	b00b      	add	sp, #44	; 0x2c
 800df7e:	bd30      	pop	{r4, r5, pc}

0800df80 <_ZN8touchgfx3HAL10beginFrameEv>:
 800df80:	4b04      	ldr	r3, [pc, #16]	; (800df94 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	b123      	cbz	r3, 800df90 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800df86:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800df8a:	f080 0001 	eor.w	r0, r0, #1
 800df8e:	4770      	bx	lr
 800df90:	2001      	movs	r0, #1
 800df92:	4770      	bx	lr
 800df94:	2400e9ee 	.word	0x2400e9ee

0800df98 <_ZN8touchgfx3HAL8endFrameEv>:
 800df98:	b510      	push	{r4, lr}
 800df9a:	4604      	mov	r4, r0
 800df9c:	6840      	ldr	r0, [r0, #4]
 800df9e:	6803      	ldr	r3, [r0, #0]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	4798      	blx	r3
 800dfa4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800dfa8:	b113      	cbz	r3, 800dfb0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800dfb0:	bd10      	pop	{r4, pc}

0800dfb2 <_ZN8touchgfx3HAL10initializeEv>:
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	f7f3 ff7b 	bl	8001eb0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dfba:	6860      	ldr	r0, [r4, #4]
 800dfbc:	6803      	ldr	r3, [r0, #0]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	4798      	blx	r3
 800dfc2:	68e0      	ldr	r0, [r4, #12]
 800dfc4:	6803      	ldr	r3, [r0, #0]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	4798      	blx	r3
 800dfca:	6823      	ldr	r3, [r4, #0]
 800dfcc:	4620      	mov	r0, r4
 800dfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd4:	4718      	bx	r3
	...

0800dfd8 <_ZN8touchgfx3HAL4tickEv>:
 800dfd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dfda:	6803      	ldr	r3, [r0, #0]
 800dfdc:	4604      	mov	r4, r0
 800dfde:	4d5c      	ldr	r5, [pc, #368]	; (800e150 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800dfe0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dfe4:	4798      	blx	r3
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f000 8097 	beq.w	800e11a <_ZN8touchgfx3HAL4tickEv+0x142>
 800dfec:	2001      	movs	r0, #1
 800dfee:	2600      	movs	r6, #0
 800dff0:	f7f3 fc8d 	bl	800190e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800dff4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800dff8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800dffc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e000:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800e004:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800e008:	b133      	cbz	r3, 800e018 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	4620      	mov	r0, r4
 800e00e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e012:	4798      	blx	r3
 800e014:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800e018:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800e01c:	2601      	movs	r6, #1
 800e01e:	6862      	ldr	r2, [r4, #4]
 800e020:	f083 0301 	eor.w	r3, r3, #1
 800e024:	702e      	strb	r6, [r5, #0]
 800e026:	7253      	strb	r3, [r2, #9]
 800e028:	f004 fbcc 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800e02c:	6803      	ldr	r3, [r0, #0]
 800e02e:	4631      	mov	r1, r6
 800e030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e032:	4798      	blx	r3
 800e034:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e038:	b90b      	cbnz	r3, 800e03e <_ZN8touchgfx3HAL4tickEv+0x66>
 800e03a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800e03e:	f004 fbc1 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800e042:	6803      	ldr	r3, [r0, #0]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	4798      	blx	r3
 800e048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e04a:	6803      	ldr	r3, [r0, #0]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	4798      	blx	r3
 800e050:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e054:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800e058:	3b01      	subs	r3, #1
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e060:	b10a      	cbz	r2, 800e066 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1eb      	bne.n	800e03e <_ZN8touchgfx3HAL4tickEv+0x66>
 800e066:	4a3b      	ldr	r2, [pc, #236]	; (800e154 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e068:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800e06c:	7813      	ldrb	r3, [r2, #0]
 800e06e:	3301      	adds	r3, #1
 800e070:	b25b      	sxtb	r3, r3
 800e072:	4299      	cmp	r1, r3
 800e074:	7013      	strb	r3, [r2, #0]
 800e076:	dc10      	bgt.n	800e09a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e078:	2300      	movs	r3, #0
 800e07a:	68e0      	ldr	r0, [r4, #12]
 800e07c:	a902      	add	r1, sp, #8
 800e07e:	7013      	strb	r3, [r2, #0]
 800e080:	aa03      	add	r2, sp, #12
 800e082:	6803      	ldr	r3, [r0, #0]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	4798      	blx	r3
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d051      	beq.n	800e132 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800e08e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e092:	4620      	mov	r0, r4
 800e094:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e098:	4798      	blx	r3
 800e09a:	2300      	movs	r3, #0
 800e09c:	6960      	ldr	r0, [r4, #20]
 800e09e:	f88d 3007 	strb.w	r3, [sp, #7]
 800e0a2:	b158      	cbz	r0, 800e0bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e0a4:	6803      	ldr	r3, [r0, #0]
 800e0a6:	f10d 0107 	add.w	r1, sp, #7
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	4798      	blx	r3
 800e0ae:	b128      	cbz	r0, 800e0bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e0b6:	6803      	ldr	r3, [r0, #0]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	4798      	blx	r3
 800e0bc:	f104 001c 	add.w	r0, r4, #28
 800e0c0:	f00f fe62 	bl	801dd88 <_ZN8touchgfx8Gestures4tickEv>
 800e0c4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800e0c8:	b30b      	cbz	r3, 800e10e <_ZN8touchgfx3HAL4tickEv+0x136>
 800e0ca:	6920      	ldr	r0, [r4, #16]
 800e0cc:	6803      	ldr	r3, [r0, #0]
 800e0ce:	691b      	ldr	r3, [r3, #16]
 800e0d0:	4798      	blx	r3
 800e0d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	b903      	cbnz	r3, 800e0da <_ZN8touchgfx3HAL4tickEv+0x102>
 800e0d8:	6720      	str	r0, [r4, #112]	; 0x70
 800e0da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e0dc:	4a1e      	ldr	r2, [pc, #120]	; (800e158 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800e0de:	1af3      	subs	r3, r6, r3
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d914      	bls.n	800e10e <_ZN8touchgfx3HAL4tickEv+0x136>
 800e0e4:	6920      	ldr	r0, [r4, #16]
 800e0e6:	6803      	ldr	r3, [r0, #0]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	4798      	blx	r3
 800e0ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e0ee:	2264      	movs	r2, #100	; 0x64
 800e0f0:	1af3      	subs	r3, r6, r3
 800e0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0f6:	fbb0 f0f3 	udiv	r0, r0, r3
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	dc1e      	bgt.n	800e13c <_ZN8touchgfx3HAL4tickEv+0x164>
 800e0fe:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800e102:	6920      	ldr	r0, [r4, #16]
 800e104:	2100      	movs	r1, #0
 800e106:	6803      	ldr	r3, [r0, #0]
 800e108:	69db      	ldr	r3, [r3, #28]
 800e10a:	4798      	blx	r3
 800e10c:	6726      	str	r6, [r4, #112]	; 0x70
 800e10e:	f004 fb59 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	2100      	movs	r1, #0
 800e116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e118:	4798      	blx	r3
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	4620      	mov	r0, r4
 800e11e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e122:	4798      	blx	r3
 800e124:	2001      	movs	r0, #1
 800e126:	f7f3 fbf3 	bl	8001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e12a:	2300      	movs	r3, #0
 800e12c:	702b      	strb	r3, [r5, #0]
 800e12e:	b004      	add	sp, #16
 800e130:	bd70      	pop	{r4, r5, r6, pc}
 800e132:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e136:	4620      	mov	r0, r4
 800e138:	4798      	blx	r3
 800e13a:	e7ae      	b.n	800e09a <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e13c:	2863      	cmp	r0, #99	; 0x63
 800e13e:	bfcb      	itete	gt
 800e140:	2300      	movgt	r3, #0
 800e142:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800e146:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800e14a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800e14e:	e7d8      	b.n	800e102 <_ZN8touchgfx3HAL4tickEv+0x12a>
 800e150:	2400e9f4 	.word	0x2400e9f4
 800e154:	2400e9f5 	.word	0x2400e9f5
 800e158:	05f5e100 	.word	0x05f5e100

0800e15c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e15c:	f7f3 bed8 	b.w	8001f10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e160 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e160:	6581      	str	r1, [r0, #88]	; 0x58
 800e162:	301c      	adds	r0, #28
 800e164:	f00f be0e 	b.w	801dd84 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e168 <_ZN8touchgfx3HAL5touchEll>:
 800e168:	b530      	push	{r4, r5, lr}
 800e16a:	b087      	sub	sp, #28
 800e16c:	4604      	mov	r4, r0
 800e16e:	a804      	add	r0, sp, #16
 800e170:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e174:	f004 f8fe 	bl	8012374 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e178:	9b04      	ldr	r3, [sp, #16]
 800e17a:	a906      	add	r1, sp, #24
 800e17c:	a803      	add	r0, sp, #12
 800e17e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e182:	9b05      	ldr	r3, [sp, #20]
 800e184:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e188:	f004 f946 	bl	8012418 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e18c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800e190:	f104 001c 	add.w	r0, r4, #28
 800e194:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e198:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e19c:	b189      	cbz	r1, 800e1c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e19e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	f00f fdfa 	bl	801dda4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e1b0:	b128      	cbz	r0, 800e1be <_ZN8touchgfx3HAL5touchEll+0x56>
 800e1b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e1b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e1b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e1bc:	6623      	str	r3, [r4, #96]	; 0x60
 800e1be:	b007      	add	sp, #28
 800e1c0:	bd30      	pop	{r4, r5, pc}
 800e1c2:	f00f fe33 	bl	801de2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e1cc:	e7f1      	b.n	800e1b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e1ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e1ce:	b510      	push	{r4, lr}
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d046      	beq.n	800e262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e1d4:	ea81 0002 	eor.w	r0, r1, r2
 800e1d8:	07c4      	lsls	r4, r0, #31
 800e1da:	d508      	bpl.n	800e1ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e1dc:	440b      	add	r3, r1
 800e1de:	3a01      	subs	r2, #1
 800e1e0:	428b      	cmp	r3, r1
 800e1e2:	d93e      	bls.n	800e262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e1e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e1e8:	f801 0b01 	strb.w	r0, [r1], #1
 800e1ec:	e7f8      	b.n	800e1e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e1ee:	07d0      	lsls	r0, r2, #31
 800e1f0:	bf42      	ittt	mi
 800e1f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e1f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e1fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d911      	bls.n	800e226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e202:	ea81 0402 	eor.w	r4, r1, r2
 800e206:	4610      	mov	r0, r2
 800e208:	07a4      	lsls	r4, r4, #30
 800e20a:	d022      	beq.n	800e252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e20c:	f023 0401 	bic.w	r4, r3, #1
 800e210:	440c      	add	r4, r1
 800e212:	428c      	cmp	r4, r1
 800e214:	4602      	mov	r2, r0
 800e216:	d904      	bls.n	800e222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e218:	8812      	ldrh	r2, [r2, #0]
 800e21a:	3002      	adds	r0, #2
 800e21c:	f821 2b02 	strh.w	r2, [r1], #2
 800e220:	e7f7      	b.n	800e212 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	f023 0003 	bic.w	r0, r3, #3
 800e22a:	4408      	add	r0, r1
 800e22c:	4288      	cmp	r0, r1
 800e22e:	4614      	mov	r4, r2
 800e230:	d904      	bls.n	800e23c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e232:	6824      	ldr	r4, [r4, #0]
 800e234:	3204      	adds	r2, #4
 800e236:	f841 4b04 	str.w	r4, [r1], #4
 800e23a:	e7f7      	b.n	800e22c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e23c:	f003 0303 	and.w	r3, r3, #3
 800e240:	3a01      	subs	r2, #1
 800e242:	440b      	add	r3, r1
 800e244:	428b      	cmp	r3, r1
 800e246:	d90c      	bls.n	800e262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e248:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e24c:	f801 0b01 	strb.w	r0, [r1], #1
 800e250:	e7f8      	b.n	800e244 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e252:	0790      	lsls	r0, r2, #30
 800e254:	d0e7      	beq.n	800e226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e256:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e25a:	3b02      	subs	r3, #2
 800e25c:	f821 0b02 	strh.w	r0, [r1], #2
 800e260:	e7e1      	b.n	800e226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e262:	2001      	movs	r0, #1
 800e264:	bd10      	pop	{r4, pc}

0800e266 <_ZN8touchgfx3HAL7noTouchEv>:
 800e266:	b510      	push	{r4, lr}
 800e268:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800e26c:	4604      	mov	r4, r0
 800e26e:	b153      	cbz	r3, 800e286 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e270:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800e274:	2101      	movs	r1, #1
 800e276:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800e27a:	301c      	adds	r0, #28
 800e27c:	f00f fdd6 	bl	801de2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e280:	2300      	movs	r3, #0
 800e282:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e286:	bd10      	pop	{r4, pc}

0800e288 <_ZN8touchgfx3HAL3lcdEv>:
 800e288:	4b04      	ldr	r3, [pc, #16]	; (800e29c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800e290:	b10a      	cbz	r2, 800e296 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800e292:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e294:	b900      	cbnz	r0, 800e298 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800e296:	6898      	ldr	r0, [r3, #8]
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	2400e9f0 	.word	0x2400e9f0

0800e2a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	6980      	ldr	r0, [r0, #24]
 800e2a8:	b085      	sub	sp, #20
 800e2aa:	460f      	mov	r7, r1
 800e2ac:	4690      	mov	r8, r2
 800e2ae:	4699      	mov	r9, r3
 800e2b0:	b930      	cbnz	r0, 800e2c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800e2b2:	4b1c      	ldr	r3, [pc, #112]	; (800e324 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800e2b4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e2b8:	4a1b      	ldr	r2, [pc, #108]	; (800e328 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800e2ba:	481c      	ldr	r0, [pc, #112]	; (800e32c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800e2bc:	f011 fa84 	bl	801f7c8 <__assert_func>
 800e2c0:	ad04      	add	r5, sp, #16
 800e2c2:	2600      	movs	r6, #0
 800e2c4:	f845 6d04 	str.w	r6, [r5, #-4]!
 800e2c8:	6806      	ldr	r6, [r0, #0]
 800e2ca:	9501      	str	r5, [sp, #4]
 800e2cc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800e2d0:	9500      	str	r5, [sp, #0]
 800e2d2:	6835      	ldr	r5, [r6, #0]
 800e2d4:	47a8      	blx	r5
 800e2d6:	4d16      	ldr	r5, [pc, #88]	; (800e330 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800e2d8:	4606      	mov	r6, r0
 800e2da:	f8a5 9000 	strh.w	r9, [r5]
 800e2de:	f7ff ffd3 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e2e2:	6803      	ldr	r3, [r0, #0]
 800e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e6:	4798      	blx	r3
 800e2e8:	2801      	cmp	r0, #1
 800e2ea:	d012      	beq.n	800e312 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800e2ec:	d306      	bcc.n	800e2fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800e2ee:	280d      	cmp	r0, #13
 800e2f0:	d80b      	bhi.n	800e30a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800e2f2:	4b10      	ldr	r3, [pc, #64]	; (800e334 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e2f4:	f240 1167 	movw	r1, #359	; 0x167
 800e2f8:	4a0b      	ldr	r2, [pc, #44]	; (800e328 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800e2fa:	e7de      	b.n	800e2ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800e2fc:	882b      	ldrh	r3, [r5, #0]
 800e2fe:	fb08 7203 	mla	r2, r8, r3, r7
 800e302:	9b03      	ldr	r3, [sp, #12]
 800e304:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e308:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e30a:	4630      	mov	r0, r6
 800e30c:	b005      	add	sp, #20
 800e30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e312:	882a      	ldrh	r2, [r5, #0]
 800e314:	9b03      	ldr	r3, [sp, #12]
 800e316:	fb08 7202 	mla	r2, r8, r2, r7
 800e31a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e31e:	1a9a      	subs	r2, r3, r2
 800e320:	63e2      	str	r2, [r4, #60]	; 0x3c
 800e322:	e7f2      	b.n	800e30a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800e324:	08022674 	.word	0x08022674
 800e328:	08022932 	.word	0x08022932
 800e32c:	080226b9 	.word	0x080226b9
 800e330:	2400e9ea 	.word	0x2400e9ea
 800e334:	080226df 	.word	0x080226df

0800e338 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33a:	b08b      	sub	sp, #44	; 0x2c
 800e33c:	4617      	mov	r7, r2
 800e33e:	4604      	mov	r4, r0
 800e340:	460e      	mov	r6, r1
 800e342:	461d      	mov	r5, r3
 800e344:	f7ff ffa0 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e348:	6803      	ldr	r3, [r0, #0]
 800e34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34c:	4798      	blx	r3
 800e34e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e352:	9007      	str	r0, [sp, #28]
 800e354:	4631      	mov	r1, r6
 800e356:	6822      	ldr	r2, [r4, #0]
 800e358:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e35c:	4b0c      	ldr	r3, [pc, #48]	; (800e390 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e35e:	4620      	mov	r0, r4
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e368:	9305      	str	r3, [sp, #20]
 800e36a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e374:	9303      	str	r3, [sp, #12]
 800e376:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e37a:	9302      	str	r3, [sp, #8]
 800e37c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e380:	e9cd 5300 	strd	r5, r3, [sp]
 800e384:	463b      	mov	r3, r7
 800e386:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800e388:	2200      	movs	r2, #0
 800e38a:	47a8      	blx	r5
 800e38c:	b00b      	add	sp, #44	; 0x2c
 800e38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e390:	2400e9ea 	.word	0x2400e9ea

0800e394 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e398:	4698      	mov	r8, r3
 800e39a:	6803      	ldr	r3, [r0, #0]
 800e39c:	b08b      	sub	sp, #44	; 0x2c
 800e39e:	4617      	mov	r7, r2
 800e3a0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e3a2:	460e      	mov	r6, r1
 800e3a4:	4b13      	ldr	r3, [pc, #76]	; (800e3f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	f8b3 9000 	ldrh.w	r9, [r3]
 800e3ac:	f7ff ff6c 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e3b0:	6803      	ldr	r3, [r0, #0]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	4798      	blx	r3
 800e3b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	4631      	mov	r1, r6
 800e3be:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	9305      	str	r3, [sp, #20]
 800e3ce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e3d8:	9303      	str	r3, [sp, #12]
 800e3da:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e3de:	9302      	str	r3, [sp, #8]
 800e3e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e3e4:	e9cd 8300 	strd	r8, r3, [sp]
 800e3e8:	463b      	mov	r3, r7
 800e3ea:	47a8      	blx	r5
 800e3ec:	b00b      	add	sp, #44	; 0x2c
 800e3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3f2:	bf00      	nop
 800e3f4:	2400e9ea 	.word	0x2400e9ea

0800e3f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3fc:	4698      	mov	r8, r3
 800e3fe:	6803      	ldr	r3, [r0, #0]
 800e400:	b087      	sub	sp, #28
 800e402:	460e      	mov	r6, r1
 800e404:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800e406:	4617      	mov	r7, r2
 800e408:	4b0f      	ldr	r3, [pc, #60]	; (800e448 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e40a:	4604      	mov	r4, r0
 800e40c:	f8b3 9000 	ldrh.w	r9, [r3]
 800e410:	f7ff ff3a 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e414:	6803      	ldr	r3, [r0, #0]
 800e416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e418:	4798      	blx	r3
 800e41a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e41e:	463a      	mov	r2, r7
 800e420:	4631      	mov	r1, r6
 800e422:	f8cd 900c 	str.w	r9, [sp, #12]
 800e426:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e42a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e42e:	4620      	mov	r0, r4
 800e430:	9302      	str	r3, [sp, #8]
 800e432:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	4643      	mov	r3, r8
 800e440:	47a8      	blx	r5
 800e442:	b007      	add	sp, #28
 800e444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e448:	2400e9ea 	.word	0x2400e9ea

0800e44c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	4604      	mov	r4, r0
 800e452:	b08f      	sub	sp, #60	; 0x3c
 800e454:	4610      	mov	r0, r2
 800e456:	460d      	mov	r5, r1
 800e458:	4691      	mov	r9, r2
 800e45a:	461e      	mov	r6, r3
 800e45c:	f007 f9f0 	bl	8015840 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e460:	2800      	cmp	r0, #0
 800e462:	f000 809c 	beq.w	800e59e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	4620      	mov	r0, r4
 800e46a:	f8df b194 	ldr.w	fp, [pc, #404]	; 800e600 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800e46e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e474:	4798      	blx	r3
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	4620      	mov	r0, r4
 800e47a:	f8df a188 	ldr.w	sl, [pc, #392]	; 800e604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e480:	4798      	blx	r3
 800e482:	f8bb 3000 	ldrh.w	r3, [fp]
 800e486:	4f5b      	ldr	r7, [pc, #364]	; (800e5f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e488:	9301      	str	r3, [sp, #4]
 800e48a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e48e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e492:	4640      	mov	r0, r8
 800e494:	9302      	str	r3, [sp, #8]
 800e496:	883b      	ldrh	r3, [r7, #0]
 800e498:	9303      	str	r3, [sp, #12]
 800e49a:	4b57      	ldr	r3, [pc, #348]	; (800e5f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e49c:	881a      	ldrh	r2, [r3, #0]
 800e49e:	9305      	str	r3, [sp, #20]
 800e4a0:	9204      	str	r2, [sp, #16]
 800e4a2:	f007 fa87 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e4a6:	8038      	strh	r0, [r7, #0]
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	f007 fabd 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e4ae:	9b05      	ldr	r3, [sp, #20]
 800e4b0:	8018      	strh	r0, [r3, #0]
 800e4b2:	4b52      	ldr	r3, [pc, #328]	; (800e5fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d174      	bne.n	800e5a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800e4ba:	883b      	ldrh	r3, [r7, #0]
 800e4bc:	f8aa 0000 	strh.w	r0, [sl]
 800e4c0:	f8ab 3000 	strh.w	r3, [fp]
 800e4c4:	4648      	mov	r0, r9
 800e4c6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e4ca:	f007 f9b9 	bl	8015840 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e4dc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e4e0:	f7f4 fbb0 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e4ea:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e4ee:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dd5c      	ble.n	800e5b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e4f6:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	dd58      	ble.n	800e5b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800e4fe:	462a      	mov	r2, r5
 800e500:	ab0a      	add	r3, sp, #40	; 0x28
 800e502:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e506:	6851      	ldr	r1, [r2, #4]
 800e508:	c303      	stmia	r3!, {r0, r1}
 800e50a:	4631      	mov	r1, r6
 800e50c:	a80a      	add	r0, sp, #40	; 0x28
 800e50e:	f7ff fbeb 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 800e512:	4b38      	ldr	r3, [pc, #224]	; (800e5f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e514:	2100      	movs	r1, #0
 800e516:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e51a:	4b37      	ldr	r3, [pc, #220]	; (800e5f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e51c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e520:	aa0a      	add	r2, sp, #40	; 0x28
 800e522:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e526:	910c      	str	r1, [sp, #48]	; 0x30
 800e528:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e52c:	ab08      	add	r3, sp, #32
 800e52e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e532:	e883 0003 	stmia.w	r3, {r0, r1}
 800e536:	4618      	mov	r0, r3
 800e538:	a90c      	add	r1, sp, #48	; 0x30
 800e53a:	f7ff fbd5 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 800e53e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d13c      	bne.n	800e5be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800e544:	2000      	movs	r0, #0
 800e546:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800e54a:	2600      	movs	r6, #0
 800e54c:	696b      	ldr	r3, [r5, #20]
 800e54e:	a908      	add	r1, sp, #32
 800e550:	682a      	ldr	r2, [r5, #0]
 800e552:	4628      	mov	r0, r5
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	616e      	str	r6, [r5, #20]
 800e558:	6892      	ldr	r2, [r2, #8]
 800e55a:	4790      	blx	r2
 800e55c:	9b05      	ldr	r3, [sp, #20]
 800e55e:	4652      	mov	r2, sl
 800e560:	4649      	mov	r1, r9
 800e562:	616b      	str	r3, [r5, #20]
 800e564:	4628      	mov	r0, r5
 800e566:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800e56a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e56e:	f7f4 fb69 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
 800e572:	9a01      	ldr	r2, [sp, #4]
 800e574:	4b22      	ldr	r3, [pc, #136]	; (800e600 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e576:	4620      	mov	r0, r4
 800e578:	801a      	strh	r2, [r3, #0]
 800e57a:	9a02      	ldr	r2, [sp, #8]
 800e57c:	4b21      	ldr	r3, [pc, #132]	; (800e604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e57e:	801a      	strh	r2, [r3, #0]
 800e580:	9a03      	ldr	r2, [sp, #12]
 800e582:	4b1c      	ldr	r3, [pc, #112]	; (800e5f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800e584:	801a      	strh	r2, [r3, #0]
 800e586:	4b1c      	ldr	r3, [pc, #112]	; (800e5f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e588:	9a04      	ldr	r2, [sp, #16]
 800e58a:	801a      	strh	r2, [r3, #0]
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800e592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e594:	4798      	blx	r3
 800e596:	6823      	ldr	r3, [r4, #0]
 800e598:	4620      	mov	r0, r4
 800e59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59c:	4798      	blx	r3
 800e59e:	b00f      	add	sp, #60	; 0x3c
 800e5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a4:	883b      	ldrh	r3, [r7, #0]
 800e5a6:	f8ab 0000 	strh.w	r0, [fp]
 800e5aa:	f8aa 3000 	strh.w	r3, [sl]
 800e5ae:	e789      	b.n	800e4c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	ab0a      	add	r3, sp, #40	; 0x28
 800e5b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e5b8:	6851      	ldr	r1, [r2, #4]
 800e5ba:	c303      	stmia	r3!, {r0, r1}
 800e5bc:	e7a9      	b.n	800e512 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800e5be:	a807      	add	r0, sp, #28
 800e5c0:	f007 fb50 	bl	8015c64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e5c8:	6803      	ldr	r3, [r0, #0]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5cc:	4798      	blx	r3
 800e5ce:	4286      	cmp	r6, r0
 800e5d0:	d1b8      	bne.n	800e544 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800e5d2:	f7ff fe59 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e5d6:	6803      	ldr	r3, [r0, #0]
 800e5d8:	4606      	mov	r6, r0
 800e5da:	a807      	add	r0, sp, #28
 800e5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5de:	9305      	str	r3, [sp, #20]
 800e5e0:	f007 fb40 	bl	8015c64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e5e4:	9b05      	ldr	r3, [sp, #20]
 800e5e6:	4601      	mov	r1, r0
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	4798      	blx	r3
 800e5ec:	f080 0001 	eor.w	r0, r0, #1
 800e5f0:	b2c0      	uxtb	r0, r0
 800e5f2:	e7a8      	b.n	800e546 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e5f4:	2400e9e4 	.word	0x2400e9e4
 800e5f8:	2400e9e6 	.word	0x2400e9e6
 800e5fc:	2400e9e8 	.word	0x2400e9e8
 800e600:	2400e9ea 	.word	0x2400e9ea
 800e604:	2400e9ec 	.word	0x2400e9ec

0800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e608:	4b07      	ldr	r3, [pc, #28]	; (800e628 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e60a:	b510      	push	{r4, lr}
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	4604      	mov	r4, r0
 800e610:	b13b      	cbz	r3, 800e622 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e612:	6803      	ldr	r3, [r0, #0]
 800e614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e616:	4798      	blx	r3
 800e618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e61a:	4283      	cmp	r3, r0
 800e61c:	d101      	bne.n	800e622 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e61e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e620:	bd10      	pop	{r4, pc}
 800e622:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e624:	e7fc      	b.n	800e620 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e626:	bf00      	nop
 800e628:	2400e9ee 	.word	0x2400e9ee

0800e62c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	b088      	sub	sp, #32
 800e632:	4692      	mov	sl, r2
 800e634:	461d      	mov	r5, r3
 800e636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e63a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800e63e:	2400      	movs	r4, #0
 800e640:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800e644:	4606      	mov	r6, r0
 800e646:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800e64a:	fb09 a505 	mla	r5, r9, r5, sl
 800e64e:	9403      	str	r4, [sp, #12]
 800e650:	f8ad 8014 	strh.w	r8, [sp, #20]
 800e654:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e658:	f88d 401c 	strb.w	r4, [sp, #28]
 800e65c:	e9cd 3100 	strd	r3, r1, [sp]
 800e660:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e664:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e668:	f7ff ffce 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e66c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e670:	f8ad 901a 	strh.w	r9, [sp, #26]
 800e674:	f88d 401e 	strb.w	r4, [sp, #30]
 800e678:	9504      	str	r5, [sp, #16]
 800e67a:	f88d 401d 	strb.w	r4, [sp, #29]
 800e67e:	f88d 401f 	strb.w	r4, [sp, #31]
 800e682:	f1b8 0f00 	cmp.w	r8, #0
 800e686:	d000      	beq.n	800e68a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800e688:	b937      	cbnz	r7, 800e698 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800e68a:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800e68c:	f240 210b 	movw	r1, #523	; 0x20b
 800e690:	4a0c      	ldr	r2, [pc, #48]	; (800e6c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800e692:	480d      	ldr	r0, [pc, #52]	; (800e6c8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800e694:	f011 f898 	bl	801f7c8 <__assert_func>
 800e698:	6833      	ldr	r3, [r6, #0]
 800e69a:	4630      	mov	r0, r6
 800e69c:	9c00      	ldr	r4, [sp, #0]
 800e69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a0:	4798      	blx	r3
 800e6a2:	4220      	tst	r0, r4
 800e6a4:	d104      	bne.n	800e6b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800e6a6:	4b09      	ldr	r3, [pc, #36]	; (800e6cc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800e6a8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800e6ac:	4a05      	ldr	r2, [pc, #20]	; (800e6c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800e6ae:	e7f0      	b.n	800e692 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800e6b0:	6870      	ldr	r0, [r6, #4]
 800e6b2:	4669      	mov	r1, sp
 800e6b4:	6803      	ldr	r3, [r0, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	4798      	blx	r3
 800e6ba:	b008      	add	sp, #32
 800e6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c0:	08022507 	.word	0x08022507
 800e6c4:	08022767 	.word	0x08022767
 800e6c8:	080226b9 	.word	0x080226b9
 800e6cc:	0802253f 	.word	0x0802253f

0800e6d0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	b089      	sub	sp, #36	; 0x24
 800e6d6:	4693      	mov	fp, r2
 800e6d8:	461d      	mov	r5, r3
 800e6da:	2400      	movs	r4, #0
 800e6dc:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800e6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6e4:	468a      	mov	sl, r1
 800e6e6:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800e6ea:	fb09 b505 	mla	r5, r9, r5, fp
 800e6ee:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	9403      	str	r4, [sp, #12]
 800e6f6:	e9cd 3400 	strd	r3, r4, [sp]
 800e6fa:	f7ff ff85 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e6fe:	f8ad 8014 	strh.w	r8, [sp, #20]
 800e702:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e706:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e70a:	f8ad 4018 	strh.w	r4, [sp, #24]
 800e70e:	9504      	str	r5, [sp, #16]
 800e710:	f8ad 901a 	strh.w	r9, [sp, #26]
 800e714:	f8cd a00c 	str.w	sl, [sp, #12]
 800e718:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e71c:	f88d 401e 	strb.w	r4, [sp, #30]
 800e720:	f88d 401f 	strb.w	r4, [sp, #31]
 800e724:	f1b8 0f00 	cmp.w	r8, #0
 800e728:	d000      	beq.n	800e72c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800e72a:	b937      	cbnz	r7, 800e73a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800e72c:	4b0d      	ldr	r3, [pc, #52]	; (800e764 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800e72e:	f240 2121 	movw	r1, #545	; 0x221
 800e732:	4a0d      	ldr	r2, [pc, #52]	; (800e768 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800e734:	480d      	ldr	r0, [pc, #52]	; (800e76c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800e736:	f011 f847 	bl	801f7c8 <__assert_func>
 800e73a:	6833      	ldr	r3, [r6, #0]
 800e73c:	4630      	mov	r0, r6
 800e73e:	9c00      	ldr	r4, [sp, #0]
 800e740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e742:	4798      	blx	r3
 800e744:	4220      	tst	r0, r4
 800e746:	d104      	bne.n	800e752 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800e748:	4b09      	ldr	r3, [pc, #36]	; (800e770 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800e74a:	f240 2122 	movw	r1, #546	; 0x222
 800e74e:	4a06      	ldr	r2, [pc, #24]	; (800e768 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800e750:	e7f0      	b.n	800e734 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800e752:	6870      	ldr	r0, [r6, #4]
 800e754:	4669      	mov	r1, sp
 800e756:	6803      	ldr	r3, [r0, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	4798      	blx	r3
 800e75c:	b009      	add	sp, #36	; 0x24
 800e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e762:	bf00      	nop
 800e764:	08022584 	.word	0x08022584
 800e768:	080227dd 	.word	0x080227dd
 800e76c:	080226b9 	.word	0x080226b9
 800e770:	080225bc 	.word	0x080225bc

0800e774 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800e774:	b508      	push	{r3, lr}
 800e776:	290d      	cmp	r1, #13
 800e778:	d817      	bhi.n	800e7aa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800e77a:	e8df f001 	tbb	[pc, r1]
 800e77e:	090b      	.short	0x090b
 800e780:	0d0d0d07 	.word	0x0d0d0d07
 800e784:	1414140d 	.word	0x1414140d
 800e788:	0d0d1414 	.word	0x0d0d1414
 800e78c:	2020      	movs	r0, #32
 800e78e:	bd08      	pop	{r3, pc}
 800e790:	2018      	movs	r0, #24
 800e792:	e7fc      	b.n	800e78e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e794:	2010      	movs	r0, #16
 800e796:	e7fa      	b.n	800e78e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e798:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800e79a:	f240 2182 	movw	r1, #642	; 0x282
 800e79e:	4a05      	ldr	r2, [pc, #20]	; (800e7b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800e7a0:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800e7a2:	f011 f811 	bl	801f7c8 <__assert_func>
 800e7a6:	2008      	movs	r0, #8
 800e7a8:	e7f1      	b.n	800e78e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	e7ef      	b.n	800e78e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e7ae:	bf00      	nop
 800e7b0:	08022735 	.word	0x08022735
 800e7b4:	08022b08 	.word	0x08022b08
 800e7b8:	080226b9 	.word	0x080226b9

0800e7bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	460d      	mov	r5, r1
 800e7c0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	461c      	mov	r4, r3
 800e7c8:	f7ff ffd4 	bl	800e774 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800e7cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800e7d0:	10c0      	asrs	r0, r0, #3
 800e7d2:	fb06 5101 	mla	r1, r6, r1, r5
 800e7d6:	fb00 4001 	mla	r0, r0, r1, r4
 800e7da:	bd70      	pop	{r4, r5, r6, pc}

0800e7dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e0:	b08a      	sub	sp, #40	; 0x28
 800e7e2:	f04f 0c00 	mov.w	ip, #0
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	469a      	mov	sl, r3
 800e7ea:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800e7ee:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800e7f2:	2d0b      	cmp	r5, #11
 800e7f4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800e7f8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e7fc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800e800:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800e804:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800e808:	f8cd c014 	str.w	ip, [sp, #20]
 800e80c:	d12d      	bne.n	800e86a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800e80e:	2080      	movs	r0, #128	; 0x80
 800e810:	9204      	str	r2, [sp, #16]
 800e812:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800e816:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e81a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e81e:	f8ad 701c 	strh.w	r7, [sp, #28]
 800e822:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7ff feec 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e830:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800e834:	4603      	mov	r3, r0
 800e836:	4651      	mov	r1, sl
 800e838:	4620      	mov	r0, r4
 800e83a:	e9cd 9800 	strd	r9, r8, [sp]
 800e83e:	f7ff ffbd 	bl	800e7bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e842:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800e846:	9006      	str	r0, [sp, #24]
 800e848:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800e84c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800e850:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800e854:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800e858:	b107      	cbz	r7, 800e85c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800e85a:	b9d6      	cbnz	r6, 800e892 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800e85c:	4b17      	ldr	r3, [pc, #92]	; (800e8bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800e85e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800e862:	4a17      	ldr	r2, [pc, #92]	; (800e8c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800e864:	4817      	ldr	r0, [pc, #92]	; (800e8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800e866:	f010 ffaf 	bl	801f7c8 <__assert_func>
 800e86a:	2d02      	cmp	r5, #2
 800e86c:	d108      	bne.n	800e880 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800e86e:	2bff      	cmp	r3, #255	; 0xff
 800e870:	d104      	bne.n	800e87c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800e872:	2800      	cmp	r0, #0
 800e874:	bf14      	ite	ne
 800e876:	2040      	movne	r0, #64	; 0x40
 800e878:	2020      	moveq	r0, #32
 800e87a:	e7c9      	b.n	800e810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e87c:	2040      	movs	r0, #64	; 0x40
 800e87e:	e7c7      	b.n	800e810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e880:	2bff      	cmp	r3, #255	; 0xff
 800e882:	d104      	bne.n	800e88e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800e884:	2800      	cmp	r0, #0
 800e886:	bf14      	ite	ne
 800e888:	2004      	movne	r0, #4
 800e88a:	2001      	moveq	r0, #1
 800e88c:	e7c0      	b.n	800e810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e88e:	2004      	movs	r0, #4
 800e890:	e7be      	b.n	800e810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	4620      	mov	r0, r4
 800e896:	9d02      	ldr	r5, [sp, #8]
 800e898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e89a:	4798      	blx	r3
 800e89c:	4228      	tst	r0, r5
 800e89e:	d104      	bne.n	800e8aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800e8a0:	4b09      	ldr	r3, [pc, #36]	; (800e8c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800e8a2:	f240 11d5 	movw	r1, #469	; 0x1d5
 800e8a6:	4a06      	ldr	r2, [pc, #24]	; (800e8c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800e8a8:	e7dc      	b.n	800e864 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800e8aa:	6860      	ldr	r0, [r4, #4]
 800e8ac:	a902      	add	r1, sp, #8
 800e8ae:	6803      	ldr	r3, [r0, #0]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	4798      	blx	r3
 800e8b4:	b00a      	add	sp, #40	; 0x28
 800e8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ba:	bf00      	nop
 800e8bc:	08022507 	.word	0x08022507
 800e8c0:	08022996 	.word	0x08022996
 800e8c4:	080226b9 	.word	0x080226b9
 800e8c8:	0802253f 	.word	0x0802253f

0800e8cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d0:	b08b      	sub	sp, #44	; 0x2c
 800e8d2:	469b      	mov	fp, r3
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	4692      	mov	sl, r2
 800e8d8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800e8dc:	2600      	movs	r6, #0
 800e8de:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800e8e2:	4689      	mov	r9, r1
 800e8e4:	2fff      	cmp	r7, #255	; 0xff
 800e8e6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800e8ea:	9605      	str	r6, [sp, #20]
 800e8ec:	bf14      	ite	ne
 800e8ee:	2308      	movne	r3, #8
 800e8f0:	2302      	moveq	r3, #2
 800e8f2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800e8f6:	f7ff fe87 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e8fa:	465a      	mov	r2, fp
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	4651      	mov	r1, sl
 800e900:	4620      	mov	r0, r4
 800e902:	e9cd 8500 	strd	r8, r5, [sp]
 800e906:	f7ff ff59 	bl	800e7bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e90a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e90e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800e912:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e916:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e91a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800e91e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e922:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e926:	9d02      	ldr	r5, [sp, #8]
 800e928:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	9006      	str	r0, [sp, #24]
 800e930:	4620      	mov	r0, r4
 800e932:	f8ad 6020 	strh.w	r6, [sp, #32]
 800e936:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800e93a:	f8cd 9014 	str.w	r9, [sp, #20]
 800e93e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800e942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e944:	4798      	blx	r3
 800e946:	4228      	tst	r0, r5
 800e948:	d106      	bne.n	800e958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800e94a:	4b07      	ldr	r3, [pc, #28]	; (800e968 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800e94c:	f240 2137 	movw	r1, #567	; 0x237
 800e950:	4a06      	ldr	r2, [pc, #24]	; (800e96c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800e952:	4807      	ldr	r0, [pc, #28]	; (800e970 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800e954:	f010 ff38 	bl	801f7c8 <__assert_func>
 800e958:	6860      	ldr	r0, [r4, #4]
 800e95a:	a902      	add	r1, sp, #8
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	4798      	blx	r3
 800e962:	b00b      	add	sp, #44	; 0x2c
 800e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e968:	0802253f 	.word	0x0802253f
 800e96c:	08022a6d 	.word	0x08022a6d
 800e970:	080226b9 	.word	0x080226b9

0800e974 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e978:	461f      	mov	r7, r3
 800e97a:	4b0b      	ldr	r3, [pc, #44]	; (800e9a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e97c:	460d      	mov	r5, r1
 800e97e:	4616      	mov	r6, r2
 800e980:	f8b3 8000 	ldrh.w	r8, [r3]
 800e984:	4604      	mov	r4, r0
 800e986:	f7ff fc7f 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800e98a:	6803      	ldr	r3, [r0, #0]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	4798      	blx	r3
 800e990:	463b      	mov	r3, r7
 800e992:	4632      	mov	r2, r6
 800e994:	4629      	mov	r1, r5
 800e996:	e9cd 8000 	strd	r8, r0, [sp]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff ff0e 	bl	800e7bc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e9a0:	b002      	add	sp, #8
 800e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a6:	bf00      	nop
 800e9a8:	2400e9ea 	.word	0x2400e9ea

0800e9ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b0:	4698      	mov	r8, r3
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4617      	mov	r7, r2
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800e9be:	9303      	str	r3, [sp, #12]
 800e9c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e9c4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e9c8:	f8ad 6014 	strh.w	r6, [sp, #20]
 800e9cc:	f8ad 5016 	strh.w	r5, [sp, #22]
 800e9d0:	e9cd 3100 	strd	r3, r1, [sp]
 800e9d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e9d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e9dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800e9e0:	f88d 301c 	strb.w	r3, [sp, #28]
 800e9e4:	f7ff fe10 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7ff ffc0 	bl	800e974 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e9f4:	4b18      	ldr	r3, [pc, #96]	; (800ea58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800e9f6:	9004      	str	r0, [sp, #16]
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e9fe:	f7ff fc43 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800ea02:	6803      	ldr	r3, [r0, #0]
 800ea04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea06:	4798      	blx	r3
 800ea08:	f88d 001e 	strb.w	r0, [sp, #30]
 800ea0c:	f88d 001d 	strb.w	r0, [sp, #29]
 800ea10:	b106      	cbz	r6, 800ea14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800ea12:	b935      	cbnz	r5, 800ea22 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800ea14:	4b11      	ldr	r3, [pc, #68]	; (800ea5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800ea16:	f240 11f1 	movw	r1, #497	; 0x1f1
 800ea1a:	4a11      	ldr	r2, [pc, #68]	; (800ea60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800ea1c:	4811      	ldr	r0, [pc, #68]	; (800ea64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800ea1e:	f010 fed3 	bl	801f7c8 <__assert_func>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	4620      	mov	r0, r4
 800ea26:	9d00      	ldr	r5, [sp, #0]
 800ea28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2a:	4798      	blx	r3
 800ea2c:	4228      	tst	r0, r5
 800ea2e:	d104      	bne.n	800ea3a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800ea30:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800ea32:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800ea36:	4a0a      	ldr	r2, [pc, #40]	; (800ea60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800ea38:	e7f0      	b.n	800ea1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800ea3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea3c:	4669      	mov	r1, sp
 800ea3e:	6860      	ldr	r0, [r4, #4]
 800ea40:	9303      	str	r3, [sp, #12]
 800ea42:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ea46:	f88d 301f 	strb.w	r3, [sp, #31]
 800ea4a:	6803      	ldr	r3, [r0, #0]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	4798      	blx	r3
 800ea50:	b008      	add	sp, #32
 800ea52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea56:	bf00      	nop
 800ea58:	2400e9ea 	.word	0x2400e9ea
 800ea5c:	08022507 	.word	0x08022507
 800ea60:	08022842 	.word	0x08022842
 800ea64:	080226b9 	.word	0x080226b9
 800ea68:	0802253f 	.word	0x0802253f

0800ea6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ea6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea6e:	b08b      	sub	sp, #44	; 0x2c
 800ea70:	4604      	mov	r4, r0
 800ea72:	466b      	mov	r3, sp
 800ea74:	e883 0006 	stmia.w	r3, {r1, r2}
 800ea78:	4b20      	ldr	r3, [pc, #128]	; (800eafc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b933      	cbnz	r3, 800ea8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800ea7e:	4b20      	ldr	r3, [pc, #128]	; (800eb00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800ea80:	f44f 7112 	mov.w	r1, #584	; 0x248
 800ea84:	4a1f      	ldr	r2, [pc, #124]	; (800eb04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800ea86:	4820      	ldr	r0, [pc, #128]	; (800eb08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800ea88:	f010 fe9e 	bl	801f7c8 <__assert_func>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	2500      	movs	r5, #0
 800ea90:	f8bd 6000 	ldrh.w	r6, [sp]
 800ea94:	9302      	str	r3, [sp, #8]
 800ea96:	6803      	ldr	r3, [r0, #0]
 800ea98:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ea9c:	9505      	str	r5, [sp, #20]
 800ea9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa0:	4798      	blx	r3
 800eaa2:	463a      	mov	r2, r7
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f7ff ff63 	bl	800e974 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eaae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eab0:	9003      	str	r0, [sp, #12]
 800eab2:	9306      	str	r3, [sp, #24]
 800eab4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eab8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eabc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eac0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eac4:	4b11      	ldr	r3, [pc, #68]	; (800eb0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eacc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ead0:	f7ff fbda 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800ead4:	6803      	ldr	r3, [r0, #0]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	4798      	blx	r3
 800eada:	23ff      	movs	r3, #255	; 0xff
 800eadc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800eae0:	a902      	add	r1, sp, #8
 800eae2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800eae6:	6860      	ldr	r0, [r4, #4]
 800eae8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eaec:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800eaf0:	6803      	ldr	r3, [r0, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	4798      	blx	r3
 800eaf6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800eaf8:	b00b      	add	sp, #44	; 0x2c
 800eafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eafc:	2400e9ef 	.word	0x2400e9ef
 800eb00:	08022606 	.word	0x08022606
 800eb04:	080228ec 	.word	0x080228ec
 800eb08:	080226b9 	.word	0x080226b9
 800eb0c:	2400e9ea 	.word	0x2400e9ea

0800eb10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800eb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb14:	b08a      	sub	sp, #40	; 0x28
 800eb16:	2600      	movs	r6, #0
 800eb18:	4604      	mov	r4, r0
 800eb1a:	466d      	mov	r5, sp
 800eb1c:	9605      	str	r6, [sp, #20]
 800eb1e:	e885 0006 	stmia.w	r5, {r1, r2}
 800eb22:	461d      	mov	r5, r3
 800eb24:	2301      	movs	r3, #1
 800eb26:	f8bd 7000 	ldrh.w	r7, [sp]
 800eb2a:	9302      	str	r3, [sp, #8]
 800eb2c:	6803      	ldr	r3, [r0, #0]
 800eb2e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800eb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb34:	4798      	blx	r3
 800eb36:	4642      	mov	r2, r8
 800eb38:	4639      	mov	r1, r7
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7ff ff19 	bl	800e974 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eb42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eb46:	9003      	str	r0, [sp, #12]
 800eb48:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eb50:	9506      	str	r5, [sp, #24]
 800eb52:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb56:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eb5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb60:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800eb64:	f7ff fb90 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 800eb68:	6803      	ldr	r3, [r0, #0]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	4798      	blx	r3
 800eb6e:	23ff      	movs	r3, #255	; 0xff
 800eb70:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800eb74:	a902      	add	r1, sp, #8
 800eb76:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800eb7a:	6860      	ldr	r0, [r4, #4]
 800eb7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eb80:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800eb84:	6803      	ldr	r3, [r0, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	4798      	blx	r3
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	b00a      	add	sp, #40	; 0x28
 800eb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb92:	bf00      	nop
 800eb94:	2400e9ea 	.word	0x2400e9ea

0800eb98 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800eb9e:	4604      	mov	r4, r0
 800eba0:	b19b      	cbz	r3, 800ebca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800eba2:	2002      	movs	r0, #2
 800eba4:	f7f2 feb5 	bl	8001912 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ebb0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800ebb4:	6823      	ldr	r3, [r4, #0]
 800ebb6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800ebba:	f7ff fd25 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	462b      	mov	r3, r5
 800ebc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebc8:	4718      	bx	r3
 800ebca:	bd70      	pop	{r4, r5, r6, pc}

0800ebcc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	4605      	mov	r5, r0
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	2003      	movs	r0, #3
 800ebd4:	b149      	cbz	r1, 800ebea <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800ebd6:	f7f2 fe9a 	bl	800190e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ebda:	6928      	ldr	r0, [r5, #16]
 800ebdc:	b168      	cbz	r0, 800ebfa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800ebde:	6803      	ldr	r3, [r0, #0]
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebe8:	4718      	bx	r3
 800ebea:	f7f2 fe91 	bl	8001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800ebee:	6928      	ldr	r0, [r5, #16]
 800ebf0:	b118      	cbz	r0, 800ebfa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800ebf2:	6803      	ldr	r3, [r0, #0]
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	695b      	ldr	r3, [r3, #20]
 800ebf8:	e7f4      	b.n	800ebe4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}

0800ebfc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800ec02:	4604      	mov	r4, r0
 800ec04:	460d      	mov	r5, r1
 800ec06:	428a      	cmp	r2, r1
 800ec08:	d008      	beq.n	800ec1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800ec0a:	2a01      	cmp	r2, #1
 800ec0c:	6803      	ldr	r3, [r0, #0]
 800ec0e:	d106      	bne.n	800ec1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ec10:	b929      	cbnz	r1, 800ec1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800ec12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ec16:	4798      	blx	r3
 800ec18:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800ec1c:	bd38      	pop	{r3, r4, r5, pc}
 800ec1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ec22:	4620      	mov	r0, r4
 800ec24:	e7f7      	b.n	800ec16 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800ec28 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ec28:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ec2a:	b510      	push	{r4, lr}
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	4604      	mov	r4, r0
 800ec30:	b95b      	cbnz	r3, 800ec4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ec32:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d007      	beq.n	800ec4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ec3a:	6840      	ldr	r0, [r0, #4]
 800ec3c:	f000 f93a 	bl	800eeb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ec40:	b118      	cbz	r0, 800ec4a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ec42:	6862      	ldr	r2, [r4, #4]
 800ec44:	7a53      	ldrb	r3, [r2, #9]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0fc      	beq.n	800ec44 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ec4a:	f7f3 f959 	bl	8001f00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ec4e:	4620      	mov	r0, r4
 800ec50:	2100      	movs	r1, #0
 800ec52:	f7ff ffd3 	bl	800ebfc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ec56:	4620      	mov	r0, r4
 800ec58:	f7ff fcd6 	bl	800e608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ec5c:	bd10      	pop	{r4, pc}
 800ec5e:	bf00      	nop
 800ec60:	2400e9ee 	.word	0x2400e9ee

0800ec64 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ec64:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ec68:	1a13      	subs	r3, r2, r0
 800ec6a:	4258      	negs	r0, r3
 800ec6c:	4158      	adcs	r0, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ec70:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ec74:	1a9b      	subs	r3, r3, r2
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	bfdc      	itt	le
 800ec7a:	6882      	ldrle	r2, [r0, #8]
 800ec7c:	189b      	addle	r3, r3, r2
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	bfcc      	ite	gt
 800ec82:	2000      	movgt	r0, #0
 800ec84:	2001      	movle	r0, #1
 800ec86:	4770      	bx	lr

0800ec88 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ec88:	6902      	ldr	r2, [r0, #16]
 800ec8a:	6840      	ldr	r0, [r0, #4]
 800ec8c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800ec90:	4770      	bx	lr

0800ec92 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ec92:	6803      	ldr	r3, [r0, #0]
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	4718      	bx	r3

0800ec98 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ec98:	4770      	bx	lr

0800ec9a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ec9a:	4770      	bx	lr

0800ec9c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800ec9c:	4770      	bx	lr
	...

0800eca0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800eca0:	2301      	movs	r3, #1
 800eca2:	b570      	push	{r4, r5, r6, lr}
 800eca4:	7203      	strb	r3, [r0, #8]
 800eca6:	4604      	mov	r4, r0
 800eca8:	6840      	ldr	r0, [r0, #4]
 800ecaa:	6803      	ldr	r3, [r0, #0]
 800ecac:	699b      	ldr	r3, [r3, #24]
 800ecae:	4798      	blx	r3
 800ecb0:	6803      	ldr	r3, [r0, #0]
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	2b40      	cmp	r3, #64	; 0x40
 800ecb6:	d039      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecb8:	d815      	bhi.n	800ece6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	d022      	beq.n	800ed04 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ecbe:	d808      	bhi.n	800ecd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d033      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d108      	bne.n	800ecda <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	4620      	mov	r0, r4
 800eccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecce:	4798      	blx	r3
 800ecd0:	e025      	b.n	800ed1e <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800ecd2:	2b08      	cmp	r3, #8
 800ecd4:	d01e      	beq.n	800ed14 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	d028      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecda:	4b17      	ldr	r3, [pc, #92]	; (800ed38 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800ecdc:	218b      	movs	r1, #139	; 0x8b
 800ecde:	4a17      	ldr	r2, [pc, #92]	; (800ed3c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800ece0:	4817      	ldr	r0, [pc, #92]	; (800ed40 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800ece2:	f010 fd71 	bl	801f7c8 <__assert_func>
 800ece6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecea:	d01f      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecec:	d804      	bhi.n	800ecf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800ecee:	2b80      	cmp	r3, #128	; 0x80
 800ecf0:	d01c      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecf6:	e7ef      	b.n	800ecd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800ecf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecfc:	d016      	beq.n	800ed2c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ecfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed02:	e7e0      	b.n	800ecc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	7f01      	ldrb	r1, [r0, #28]
 800ed08:	4620      	mov	r0, r4
 800ed0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0c:	4798      	blx	r3
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed12:	e006      	b.n	800ed22 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800ed14:	6823      	ldr	r3, [r4, #0]
 800ed16:	7f01      	ldrb	r1, [r0, #28]
 800ed18:	4620      	mov	r0, r4
 800ed1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1c:	4798      	blx	r3
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed22:	4629      	mov	r1, r5
 800ed24:	4620      	mov	r0, r4
 800ed26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed2a:	4718      	bx	r3
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	4620      	mov	r0, r4
 800ed30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed32:	4798      	blx	r3
 800ed34:	e7eb      	b.n	800ed0e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800ed36:	bf00      	nop
 800ed38:	08022b51 	.word	0x08022b51
 800ed3c:	08022c10 	.word	0x08022c10
 800ed40:	08022b76 	.word	0x08022b76

0800ed44 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ed44:	b570      	push	{r4, r5, r6, lr}
 800ed46:	4604      	mov	r4, r0
 800ed48:	460e      	mov	r6, r1
 800ed4a:	6860      	ldr	r0, [r4, #4]
 800ed4c:	6803      	ldr	r3, [r0, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	4798      	blx	r3
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d1f9      	bne.n	800ed4a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ed56:	4d0d      	ldr	r5, [pc, #52]	; (800ed8c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ed58:	6828      	ldr	r0, [r5, #0]
 800ed5a:	6803      	ldr	r3, [r0, #0]
 800ed5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed5e:	4798      	blx	r3
 800ed60:	f7f3 f8dc 	bl	8001f1c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ed64:	6828      	ldr	r0, [r5, #0]
 800ed66:	2101      	movs	r1, #1
 800ed68:	f7ff ff48 	bl	800ebfc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ed6c:	6860      	ldr	r0, [r4, #4]
 800ed6e:	4631      	mov	r1, r6
 800ed70:	6803      	ldr	r3, [r0, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	4798      	blx	r3
 800ed76:	6823      	ldr	r3, [r4, #0]
 800ed78:	4620      	mov	r0, r4
 800ed7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7c:	4798      	blx	r3
 800ed7e:	6828      	ldr	r0, [r5, #0]
 800ed80:	6803      	ldr	r3, [r0, #0]
 800ed82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed88:	4718      	bx	r3
 800ed8a:	bf00      	nop
 800ed8c:	2400e9f0 	.word	0x2400e9f0

0800ed90 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ed90:	b508      	push	{r3, lr}
 800ed92:	f7f3 f8b5 	bl	8001f00 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ed96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ed9a:	f7f3 b8b9 	b.w	8001f10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ed9e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ed9e:	b510      	push	{r4, lr}
 800eda0:	4604      	mov	r4, r0
 800eda2:	2114      	movs	r1, #20
 800eda4:	f010 fce1 	bl	801f76a <_ZdlPvj>
 800eda8:	4620      	mov	r0, r4
 800edaa:	bd10      	pop	{r4, pc}

0800edac <_ZN8touchgfx13DMA_Interface5startEv>:
 800edac:	b510      	push	{r4, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	6840      	ldr	r0, [r0, #4]
 800edb2:	6803      	ldr	r3, [r0, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4798      	blx	r3
 800edb8:	b948      	cbnz	r0, 800edce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800edba:	7a63      	ldrb	r3, [r4, #9]
 800edbc:	b13b      	cbz	r3, 800edce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800edbe:	7a23      	ldrb	r3, [r4, #8]
 800edc0:	b92b      	cbnz	r3, 800edce <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	4620      	mov	r0, r4
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edcc:	4718      	bx	r3
 800edce:	bd10      	pop	{r4, pc}

0800edd0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800edd6:	4606      	mov	r6, r0
 800edd8:	1a9b      	subs	r3, r3, r2
 800edda:	2b00      	cmp	r3, #0
 800eddc:	bfdc      	itt	le
 800edde:	6880      	ldrle	r0, [r0, #8]
 800ede0:	181b      	addle	r3, r3, r0
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	dd13      	ble.n	800ee0e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800ede6:	6874      	ldr	r4, [r6, #4]
 800ede8:	460d      	mov	r5, r1
 800edea:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800edee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edf2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800edf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800edfa:	68f3      	ldr	r3, [r6, #12]
 800edfc:	68b2      	ldr	r2, [r6, #8]
 800edfe:	f3bf 8f5b 	dmb	ish
 800ee02:	3301      	adds	r3, #1
 800ee04:	429a      	cmp	r2, r3
 800ee06:	bfd8      	it	le
 800ee08:	1a9b      	suble	r3, r3, r2
 800ee0a:	60f3      	str	r3, [r6, #12]
 800ee0c:	bd70      	pop	{r4, r5, r6, pc}
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800ee10:	2139      	movs	r1, #57	; 0x39
 800ee12:	4a03      	ldr	r2, [pc, #12]	; (800ee20 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800ee14:	4803      	ldr	r0, [pc, #12]	; (800ee24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800ee16:	f010 fcd7 	bl	801f7c8 <__assert_func>
 800ee1a:	bf00      	nop
 800ee1c:	08022b9c 	.word	0x08022b9c
 800ee20:	08022c40 	.word	0x08022c40
 800ee24:	08022b76 	.word	0x08022b76

0800ee28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	6803      	ldr	r3, [r0, #0]
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4798      	blx	r3
 800ee32:	b128      	cbz	r0, 800ee40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800ee34:	4b07      	ldr	r3, [pc, #28]	; (800ee54 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800ee36:	213f      	movs	r1, #63	; 0x3f
 800ee38:	4a07      	ldr	r2, [pc, #28]	; (800ee58 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800ee3a:	4808      	ldr	r0, [pc, #32]	; (800ee5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800ee3c:	f010 fcc4 	bl	801f7c8 <__assert_func>
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	68a2      	ldr	r2, [r4, #8]
 800ee44:	f3bf 8f5b 	dmb	ish
 800ee48:	3301      	adds	r3, #1
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	bfd8      	it	le
 800ee4e:	1a9b      	suble	r3, r3, r2
 800ee50:	6123      	str	r3, [r4, #16]
 800ee52:	bd10      	pop	{r4, pc}
 800ee54:	08022bbf 	.word	0x08022bbf
 800ee58:	08022c8e 	.word	0x08022c8e
 800ee5c:	08022b76 	.word	0x08022b76

0800ee60 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4604      	mov	r4, r0
 800ee64:	6840      	ldr	r0, [r0, #4]
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4798      	blx	r3
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	b930      	cbnz	r0, 800ee7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ee70:	7a23      	ldrb	r3, [r4, #8]
 800ee72:	b123      	cbz	r3, 800ee7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ee74:	6860      	ldr	r0, [r4, #4]
 800ee76:	6803      	ldr	r3, [r0, #0]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	4798      	blx	r3
 800ee7c:	7225      	strb	r5, [r4, #8]
 800ee7e:	6860      	ldr	r0, [r4, #4]
 800ee80:	6803      	ldr	r3, [r0, #0]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4798      	blx	r3
 800ee86:	b928      	cbnz	r0, 800ee94 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee92:	4718      	bx	r3
 800ee94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee98:	f7f3 b848 	b.w	8001f2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ee9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	6082      	str	r2, [r0, #8]
 800eea0:	2200      	movs	r2, #0
 800eea2:	4c03      	ldr	r4, [pc, #12]	; (800eeb0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800eea4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800eea8:	e9c0 4100 	strd	r4, r1, [r0]
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	bf00      	nop
 800eeb0:	08022bf4 	.word	0x08022bf4

0800eeb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800eeb4:	6840      	ldr	r0, [r0, #4]
 800eeb6:	6803      	ldr	r3, [r0, #0]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4718      	bx	r3

0800eebc <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 800eebc:	2001      	movs	r0, #1
 800eebe:	4770      	bx	lr

0800eec0 <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 800eec0:	2000      	movs	r0, #0
 800eec2:	4770      	bx	lr

0800eec4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 800eec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eec8:	460d      	mov	r5, r1
 800eeca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800eece:	b085      	sub	sp, #20
 800eed0:	4690      	mov	r8, r2
 800eed2:	4411      	add	r1, r2
 800eed4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800eed8:	4699      	mov	r9, r3
 800eeda:	6803      	ldr	r3, [r0, #0]
 800eedc:	60c1      	str	r1, [r0, #12]
 800eede:	4604      	mov	r4, r0
 800eee0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eee2:	440a      	add	r2, r1
 800eee4:	6102      	str	r2, [r0, #16]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 800eeec:	4798      	blx	r3
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d03a      	beq.n	800ef68 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 800eef2:	44c8      	add	r8, r9
 800eef4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800eef8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800eefc:	4445      	add	r5, r8
 800eefe:	442e      	add	r6, r5
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	f10d 020f 	add.w	r2, sp, #15
 800ef06:	a903      	add	r1, sp, #12
 800ef08:	4620      	mov	r0, r4
 800ef0a:	9200      	str	r2, [sp, #0]
 800ef0c:	f10d 020d 	add.w	r2, sp, #13
 800ef10:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ef14:	f10d 030e 	add.w	r3, sp, #14
 800ef18:	47c0      	blx	r8
 800ef1a:	b1f0      	cbz	r0, 800ef5a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 800ef1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ef20:	7a20      	ldrb	r0, [r4, #8]
 800ef22:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ef26:	4358      	muls	r0, r3
 800ef28:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 800ef32:	7838      	ldrb	r0, [r7, #0]
 800ef34:	121b      	asrs	r3, r3, #8
 800ef36:	fb10 f003 	smulbb	r0, r0, r3
 800ef3a:	b283      	uxth	r3, r0
 800ef3c:	1c58      	adds	r0, r3, #1
 800ef3e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	1200      	asrs	r0, r0, #8
 800ef46:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ef4a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ef4e:	28ff      	cmp	r0, #255	; 0xff
 800ef50:	d10d      	bne.n	800ef6e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 800ef52:	9100      	str	r1, [sp, #0]
 800ef54:	4629      	mov	r1, r5
 800ef56:	4620      	mov	r0, r4
 800ef58:	47c0      	blx	r8
 800ef5a:	68e3      	ldr	r3, [r4, #12]
 800ef5c:	3503      	adds	r5, #3
 800ef5e:	3701      	adds	r7, #1
 800ef60:	3301      	adds	r3, #1
 800ef62:	42ae      	cmp	r6, r5
 800ef64:	60e3      	str	r3, [r4, #12]
 800ef66:	d8cb      	bhi.n	800ef00 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 800ef68:	b005      	add	sp, #20
 800ef6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef6e:	fa1f fc80 	uxth.w	ip, r0
 800ef72:	43c0      	mvns	r0, r0
 800ef74:	f895 e002 	ldrb.w	lr, [r5, #2]
 800ef78:	fb12 f20c 	smulbb	r2, r2, ip
 800ef7c:	b2c0      	uxtb	r0, r0
 800ef7e:	fb13 f30c 	smulbb	r3, r3, ip
 800ef82:	fb0e 2200 	mla	r2, lr, r0, r2
 800ef86:	f895 e001 	ldrb.w	lr, [r5, #1]
 800ef8a:	fb11 f10c 	smulbb	r1, r1, ip
 800ef8e:	fb0e 3300 	mla	r3, lr, r0, r3
 800ef92:	f895 e000 	ldrb.w	lr, [r5]
 800ef96:	b292      	uxth	r2, r2
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	fb0e 1000 	mla	r0, lr, r0, r1
 800ef9e:	1c59      	adds	r1, r3, #1
 800efa0:	b280      	uxth	r0, r0
 800efa2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800efa6:	1c51      	adds	r1, r2, #1
 800efa8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800efac:	1c41      	adds	r1, r0, #1
 800efae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800efb2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 800efb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800efba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800efbe:	9000      	str	r0, [sp, #0]
 800efc0:	e7c8      	b.n	800ef54 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0800efc2 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 800efc2:	f89d 0000 	ldrb.w	r0, [sp]
 800efc6:	704b      	strb	r3, [r1, #1]
 800efc8:	7008      	strb	r0, [r1, #0]
 800efca:	708a      	strb	r2, [r1, #2]
 800efcc:	4770      	bx	lr

0800efce <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
 800efce:	4770      	bx	lr

0800efd0 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800efd0:	b510      	push	{r4, lr}
 800efd2:	4604      	mov	r4, r0
 800efd4:	2114      	movs	r1, #20
 800efd6:	f010 fbc8 	bl	801f76a <_ZdlPvj>
 800efda:	4620      	mov	r0, r4
 800efdc:	bd10      	pop	{r4, pc}

0800efde <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 800efde:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 800efe2:	4770      	bx	lr

0800efe4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 800efe4:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 800efe8:	4770      	bx	lr

0800efea <_ZN8touchgfx6CircleD1Ev>:
 800efea:	4770      	bx	lr

0800efec <_ZN8touchgfx6CircleD0Ev>:
 800efec:	b510      	push	{r4, lr}
 800efee:	4604      	mov	r4, r0
 800eff0:	214c      	movs	r1, #76	; 0x4c
 800eff2:	f010 fbba 	bl	801f76a <_ZdlPvj>
 800eff6:	4620      	mov	r0, r4
 800eff8:	bd10      	pop	{r4, pc}

0800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 800effa:	b507      	push	{r0, r1, r2, lr}
 800effc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f000:	ab01      	add	r3, sp, #4
 800f002:	6809      	ldr	r1, [r1, #0]
 800f004:	6800      	ldr	r0, [r0, #0]
 800f006:	f004 fd4d 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 800f00a:	b003      	add	sp, #12
 800f00c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f010 <_ZN8touchgfx7CWRUtil4sineEi>:
 800f010:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f014:	fb90 f3f2 	sdiv	r3, r0, r2
 800f018:	fb03 0312 	mls	r3, r3, r2, r0
 800f01c:	4413      	add	r3, r2
 800f01e:	fb93 f0f2 	sdiv	r0, r3, r2
 800f022:	fb02 3010 	mls	r0, r2, r0, r3
 800f026:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 800f028:	285a      	cmp	r0, #90	; 0x5a
 800f02a:	dc02      	bgt.n	800f032 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 800f02c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f030:	4770      	bx	lr
 800f032:	28b4      	cmp	r0, #180	; 0xb4
 800f034:	dc02      	bgt.n	800f03c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 800f036:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 800f03a:	e7f7      	b.n	800f02c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 800f03c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 800f040:	bfd4      	ite	le
 800f042:	38b4      	suble	r0, #180	; 0xb4
 800f044:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 800f048:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f04c:	4240      	negs	r0, r0
 800f04e:	4770      	bx	lr
 800f050:	08022ce0 	.word	0x08022ce0

0800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 800f054:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 800f058:	fb90 f3f2 	sdiv	r3, r0, r2
 800f05c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f05e:	fb03 0012 	mls	r0, r3, r2, r0
 800f062:	4410      	add	r0, r2
 800f064:	fb90 f4f2 	sdiv	r4, r0, r2
 800f068:	fb02 0414 	mls	r4, r2, r4, r0
 800f06c:	f004 061f 	and.w	r6, r4, #31
 800f070:	1164      	asrs	r4, r4, #5
 800f072:	4620      	mov	r0, r4
 800f074:	f7ff ffcc 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 800f078:	4605      	mov	r5, r0
 800f07a:	b90e      	cbnz	r6, 800f080 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 800f07c:	b002      	add	sp, #8
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	1c60      	adds	r0, r4, #1
 800f082:	f7ff ffc5 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 800f086:	ab01      	add	r3, sp, #4
 800f088:	2220      	movs	r2, #32
 800f08a:	4631      	mov	r1, r6
 800f08c:	1b40      	subs	r0, r0, r5
 800f08e:	f004 fd09 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 800f092:	4428      	add	r0, r5
 800f094:	e7f2      	b.n	800f07c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 800f096:	b508      	push	{r3, lr}
 800f098:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 800f09c:	f7ff ffda 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f0a0:	bd08      	pop	{r3, pc}
	...

0800f0a4 <_ZN8touchgfx6CircleC1Ev>:
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	f000 fd28 	bl	800fafc <_ZN8touchgfx12CanvasWidgetC1Ev>
 800f0ac:	4b08      	ldr	r3, [pc, #32]	; (800f0d0 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 800f0ae:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 800f0bc:	f24b 4205 	movw	r2, #46085	; 0xb405
 800f0c0:	60a3      	str	r3, [r4, #8]
 800f0c2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 800f0c6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800f0ca:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800f0ce:	bd10      	pop	{r4, pc}
 800f0d0:	08022da0 	.word	0x08022da0

0800f0d4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 800f0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0d8:	4606      	mov	r6, r0
 800f0da:	6810      	ldr	r0, [r2, #0]
 800f0dc:	4698      	mov	r8, r3
 800f0de:	4691      	mov	r9, r2
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	f7ff ffb7 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f0e6:	a902      	add	r1, sp, #8
 800f0e8:	2402      	movs	r4, #2
 800f0ea:	f841 0d08 	str.w	r0, [r1, #-8]!
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	f7ff ff83 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f0f4:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800f0f6:	fb90 f0f4 	sdiv	r0, r0, r4
 800f0fa:	4405      	add	r5, r0
 800f0fc:	f8d9 0000 	ldr.w	r0, [r9]
 800f100:	f7ff ffc9 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f104:	a902      	add	r1, sp, #8
 800f106:	f841 0d04 	str.w	r0, [r1, #-4]!
 800f10a:	4640      	mov	r0, r8
 800f10c:	f7ff ff75 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f110:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800f112:	4629      	mov	r1, r5
 800f114:	fb90 f0f4 	sdiv	r0, r0, r4
 800f118:	1a12      	subs	r2, r2, r0
 800f11a:	4638      	mov	r0, r7
 800f11c:	f00f f903 	bl	801e326 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f120:	b003      	add	sp, #12
 800f122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f126 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 800f126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f12a:	9e08      	ldr	r6, [sp, #32]
 800f12c:	4698      	mov	r8, r3
 800f12e:	4615      	mov	r5, r2
 800f130:	460f      	mov	r7, r1
 800f132:	6830      	ldr	r0, [r6, #0]
 800f134:	2402      	movs	r4, #2
 800f136:	f7ff ff8d 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f13a:	a902      	add	r1, sp, #8
 800f13c:	f841 0d08 	str.w	r0, [r1, #-8]!
 800f140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f142:	f7ff ff5a 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f146:	682d      	ldr	r5, [r5, #0]
 800f148:	fb90 f0f4 	sdiv	r0, r0, r4
 800f14c:	4405      	add	r5, r0
 800f14e:	6830      	ldr	r0, [r6, #0]
 800f150:	f7ff ffa1 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f154:	a902      	add	r1, sp, #8
 800f156:	f841 0d04 	str.w	r0, [r1, #-4]!
 800f15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f15c:	f7ff ff4d 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f160:	f8d8 2000 	ldr.w	r2, [r8]
 800f164:	4629      	mov	r1, r5
 800f166:	fb90 f0f4 	sdiv	r0, r0, r4
 800f16a:	1a12      	subs	r2, r2, r0
 800f16c:	4638      	mov	r0, r7
 800f16e:	f00f f869 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800f172:	b002      	add	sp, #8
 800f174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 800f178:	b513      	push	{r0, r1, r4, lr}
 800f17a:	e9cd 2300 	strd	r2, r3, [sp]
 800f17e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800f182:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800f186:	f7ff ffce 	bl	800f126 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 800f18a:	b002      	add	sp, #8
 800f18c:	bd10      	pop	{r4, pc}

0800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 800f18e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f190:	680e      	ldr	r6, [r1, #0]
 800f192:	681f      	ldr	r7, [r3, #0]
 800f194:	9807      	ldr	r0, [sp, #28]
 800f196:	42be      	cmp	r6, r7
 800f198:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 800f19c:	bfb8      	it	lt
 800f19e:	601e      	strlt	r6, [r3, #0]
 800f1a0:	680b      	ldr	r3, [r1, #0]
 800f1a2:	6829      	ldr	r1, [r5, #0]
 800f1a4:	428b      	cmp	r3, r1
 800f1a6:	bfc8      	it	gt
 800f1a8:	602b      	strgt	r3, [r5, #0]
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	6821      	ldr	r1, [r4, #0]
 800f1ae:	428b      	cmp	r3, r1
 800f1b0:	bfb8      	it	lt
 800f1b2:	6023      	strlt	r3, [r4, #0]
 800f1b4:	6813      	ldr	r3, [r2, #0]
 800f1b6:	6802      	ldr	r2, [r0, #0]
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	bfc8      	it	gt
 800f1bc:	6003      	strgt	r3, [r0, #0]
 800f1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 800f1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	b089      	sub	sp, #36	; 0x24
 800f1c6:	4690      	mov	r8, r2
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	2402      	movs	r4, #2
 800f1cc:	ad08      	add	r5, sp, #32
 800f1ce:	6808      	ldr	r0, [r1, #0]
 800f1d0:	461f      	mov	r7, r3
 800f1d2:	4689      	mov	r9, r1
 800f1d4:	f7ff ff3e 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f1d8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f1dc:	4640      	mov	r0, r8
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7ff ff0b 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f1e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800f1e6:	fb90 f0f4 	sdiv	r0, r0, r4
 800f1ea:	4418      	add	r0, r3
 800f1ec:	9005      	str	r0, [sp, #20]
 800f1ee:	f8d9 0000 	ldr.w	r0, [r9]
 800f1f2:	f7ff ff50 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	9007      	str	r0, [sp, #28]
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	f7ff fefd 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f202:	aa08      	add	r2, sp, #32
 800f204:	a905      	add	r1, sp, #20
 800f206:	fb90 f0f4 	sdiv	r0, r0, r4
 800f20a:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800f20c:	1a24      	subs	r4, r4, r0
 800f20e:	4630      	mov	r0, r6
 800f210:	f842 4d08 	str.w	r4, [r2, #-8]!
 800f214:	9302      	str	r3, [sp, #8]
 800f216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	463b      	mov	r3, r7
 800f220:	f7ff ffb5 	bl	800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f224:	b009      	add	sp, #36	; 0x24
 800f226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f22a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 800f22a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22e:	4291      	cmp	r1, r2
 800f230:	b08d      	sub	sp, #52	; 0x34
 800f232:	461e      	mov	r6, r3
 800f234:	4604      	mov	r4, r0
 800f236:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800f23a:	ad0c      	add	r5, sp, #48	; 0x30
 800f23c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800f240:	e9cd 2106 	strd	r2, r1, [sp, #24]
 800f244:	bfc8      	it	gt
 800f246:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 800f24a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f24e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 800f252:	1a9b      	subs	r3, r3, r2
 800f254:	a907      	add	r1, sp, #28
 800f256:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f25a:	bfa2      	ittt	ge
 800f25c:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 800f260:	2200      	movge	r2, #0
 800f262:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 800f266:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800f268:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f26a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f26e:	f845 3d04 	str.w	r3, [r5, #-4]!
 800f272:	4633      	mov	r3, r6
 800f274:	462a      	mov	r2, r5
 800f276:	9700      	str	r7, [sp, #0]
 800f278:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f27c:	f7ff ffa0 	bl	800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f280:	9b07      	ldr	r3, [sp, #28]
 800f282:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 800f286:	f103 0120 	add.w	r1, r3, #32
 800f28a:	fb91 f3f0 	sdiv	r3, r1, r0
 800f28e:	fb00 1313 	mls	r3, r0, r3, r1
 800f292:	1ac3      	subs	r3, r0, r3
 800f294:	fb93 f2f0 	sdiv	r2, r3, r0
 800f298:	fb00 3312 	mls	r3, r0, r2, r3
 800f29c:	440b      	add	r3, r1
 800f29e:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 800f2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a4:	9906      	ldr	r1, [sp, #24]
 800f2a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2a8:	4291      	cmp	r1, r2
 800f2aa:	db11      	blt.n	800f2d0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 800f2ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f2ae:	4651      	mov	r1, sl
 800f2b0:	9700      	str	r7, [sp, #0]
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f2b8:	462a      	mov	r2, r5
 800f2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2bc:	4633      	mov	r3, r6
 800f2be:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f2c2:	f7ff ff7d 	bl	800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c8:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800f2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ce:	e7e8      	b.n	800f2a2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 800f2d0:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 800f2d4:	4291      	cmp	r1, r2
 800f2d6:	dd0c      	ble.n	800f2f2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 800f2d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f2da:	a906      	add	r1, sp, #24
 800f2dc:	9700      	str	r7, [sp, #0]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2e8:	4633      	mov	r3, r6
 800f2ea:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f2ee:	f7ff ff67 	bl	800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f2f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f040 8097 	bne.w	800f428 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 800f2fa:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 800f2fe:	1a52      	subs	r2, r2, r1
 800f300:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 800f304:	da0a      	bge.n	800f31c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 800f306:	462a      	mov	r2, r5
 800f308:	a90a      	add	r1, sp, #40	; 0x28
 800f30a:	9700      	str	r7, [sp, #0]
 800f30c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800f310:	4633      	mov	r3, r6
 800f312:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f316:	4620      	mov	r0, r4
 800f318:	f7ff ff52 	bl	800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f31c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800f320:	2bb3      	cmp	r3, #179	; 0xb3
 800f322:	d87e      	bhi.n	800f422 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 800f324:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 800f328:	1a1b      	subs	r3, r3, r0
 800f32a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f32e:	da78      	bge.n	800f422 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 800f330:	ad0c      	add	r5, sp, #48	; 0x30
 800f332:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800f336:	f7ff fe8d 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f33a:	f04f 0a02 	mov.w	sl, #2
 800f33e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f342:	4658      	mov	r0, fp
 800f344:	4629      	mov	r1, r5
 800f346:	f7ff fe58 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f34a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f34c:	18c3      	adds	r3, r0, r3
 800f34e:	9807      	ldr	r0, [sp, #28]
 800f350:	9305      	str	r3, [sp, #20]
 800f352:	f7ff fea0 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f356:	4629      	mov	r1, r5
 800f358:	900b      	str	r0, [sp, #44]	; 0x2c
 800f35a:	4658      	mov	r0, fp
 800f35c:	f7ff fe4d 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f362:	9a05      	ldr	r2, [sp, #20]
 800f364:	a90a      	add	r1, sp, #40	; 0x28
 800f366:	1a1b      	subs	r3, r3, r0
 800f368:	9700      	str	r7, [sp, #0]
 800f36a:	4620      	mov	r0, r4
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f370:	fb93 f3fa 	sdiv	r3, r3, sl
 800f374:	1ad2      	subs	r2, r2, r3
 800f376:	920a      	str	r2, [sp, #40]	; 0x28
 800f378:	9a04      	ldr	r2, [sp, #16]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	462a      	mov	r2, r5
 800f37e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f380:	4633      	mov	r3, r6
 800f382:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f386:	f7ff ff02 	bl	800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f38a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f38c:	9a05      	ldr	r2, [sp, #20]
 800f38e:	a90a      	add	r1, sp, #40	; 0x28
 800f390:	4620      	mov	r0, r4
 800f392:	9700      	str	r7, [sp, #0]
 800f394:	fb93 f3fa 	sdiv	r3, r3, sl
 800f398:	189a      	adds	r2, r3, r2
 800f39a:	920a      	str	r2, [sp, #40]	; 0x28
 800f39c:	9a04      	ldr	r2, [sp, #16]
 800f39e:	4413      	add	r3, r2
 800f3a0:	462a      	mov	r2, r5
 800f3a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3a4:	4633      	mov	r3, r6
 800f3a6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f3aa:	f7ff fef0 	bl	800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f3ae:	9806      	ldr	r0, [sp, #24]
 800f3b0:	f7ff fe50 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3b8:	4658      	mov	r0, fp
 800f3ba:	f7ff fe1e 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f3be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f3c0:	18c3      	adds	r3, r0, r3
 800f3c2:	9806      	ldr	r0, [sp, #24]
 800f3c4:	9304      	str	r3, [sp, #16]
 800f3c6:	f7ff fe66 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3ce:	4658      	mov	r0, fp
 800f3d0:	f7ff fe13 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f3d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3d6:	9a04      	ldr	r2, [sp, #16]
 800f3d8:	a90a      	add	r1, sp, #40	; 0x28
 800f3da:	eba3 0b00 	sub.w	fp, r3, r0
 800f3de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	9700      	str	r7, [sp, #0]
 800f3e4:	fb93 f3fa 	sdiv	r3, r3, sl
 800f3e8:	1ad2      	subs	r2, r2, r3
 800f3ea:	ebab 0303 	sub.w	r3, fp, r3
 800f3ee:	920a      	str	r2, [sp, #40]	; 0x28
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3f4:	4633      	mov	r3, r6
 800f3f6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f3fa:	f7ff fec8 	bl	800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f3fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f400:	9700      	str	r7, [sp, #0]
 800f402:	462a      	mov	r2, r5
 800f404:	a90a      	add	r1, sp, #40	; 0x28
 800f406:	4620      	mov	r0, r4
 800f408:	fb93 fafa 	sdiv	sl, r3, sl
 800f40c:	9b04      	ldr	r3, [sp, #16]
 800f40e:	4453      	add	r3, sl
 800f410:	930a      	str	r3, [sp, #40]	; 0x28
 800f412:	eb0a 030b 	add.w	r3, sl, fp
 800f416:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f41c:	4633      	mov	r3, r6
 800f41e:	f7ff feb6 	bl	800f18e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f422:	b00d      	add	sp, #52	; 0x34
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f42a:	a907      	add	r1, sp, #28
 800f42c:	9700      	str	r7, [sp, #0]
 800f42e:	4620      	mov	r0, r4
 800f430:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 800f434:	462a      	mov	r2, r5
 800f436:	930b      	str	r3, [sp, #44]	; 0x2c
 800f438:	4633      	mov	r3, r6
 800f43a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f43e:	f7ff febf 	bl	800f1c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 800f442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f444:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f446:	a906      	add	r1, sp, #24
 800f448:	9700      	str	r7, [sp, #0]
 800f44a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 800f44e:	462a      	mov	r2, r5
 800f450:	930b      	str	r3, [sp, #44]	; 0x2c
 800f452:	4633      	mov	r3, r6
 800f454:	e9cd 8901 	strd	r8, r9, [sp, #4]
 800f458:	e75d      	b.n	800f316 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0800f45a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 800f45a:	b530      	push	{r4, r5, lr}
 800f45c:	4604      	mov	r4, r0
 800f45e:	4608      	mov	r0, r1
 800f460:	4611      	mov	r1, r2
 800f462:	461a      	mov	r2, r3
 800f464:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f468:	b089      	sub	sp, #36	; 0x24
 800f46a:	2500      	movs	r5, #0
 800f46c:	015b      	lsls	r3, r3, #5
 800f46e:	9505      	str	r5, [sp, #20]
 800f470:	9304      	str	r3, [sp, #16]
 800f472:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f476:	015b      	lsls	r3, r3, #5
 800f478:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800f47c:	ab07      	add	r3, sp, #28
 800f47e:	2520      	movs	r5, #32
 800f480:	9302      	str	r3, [sp, #8]
 800f482:	ab06      	add	r3, sp, #24
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	ab05      	add	r3, sp, #20
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	ab04      	add	r3, sp, #16
 800f48c:	f7ff fecd 	bl	800f22a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 800f490:	9a04      	ldr	r2, [sp, #16]
 800f492:	9805      	ldr	r0, [sp, #20]
 800f494:	9b06      	ldr	r3, [sp, #24]
 800f496:	9907      	ldr	r1, [sp, #28]
 800f498:	fb92 f2f5 	sdiv	r2, r2, r5
 800f49c:	fb90 f0f5 	sdiv	r0, r0, r5
 800f4a0:	fb93 f3f5 	sdiv	r3, r3, r5
 800f4a4:	fb91 f1f5 	sdiv	r1, r1, r5
 800f4a8:	b292      	uxth	r2, r2
 800f4aa:	3002      	adds	r0, #2
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	3102      	adds	r1, #2
 800f4b0:	1a80      	subs	r0, r0, r2
 800f4b2:	3a01      	subs	r2, #1
 800f4b4:	1ac9      	subs	r1, r1, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	80a0      	strh	r0, [r4, #4]
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	8022      	strh	r2, [r4, #0]
 800f4be:	8063      	strh	r3, [r4, #2]
 800f4c0:	80e1      	strh	r1, [r4, #6]
 800f4c2:	b009      	add	sp, #36	; 0x24
 800f4c4:	bd30      	pop	{r4, r5, pc}

0800f4c6 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 800f4c6:	b510      	push	{r4, lr}
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 800f4ce:	f7ff ffc4 	bl	800f45a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	bd10      	pop	{r4, pc}

0800f4d6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 800f4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f4dc:	b0ba      	sub	sp, #232	; 0xe8
 800f4de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	9303      	str	r3, [sp, #12]
 800f4e4:	460f      	mov	r7, r1
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	9204      	str	r2, [sp, #16]
 800f4ea:	ae0a      	add	r6, sp, #40	; 0x28
 800f4ec:	bfb8      	it	lt
 800f4ee:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 800f4f2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f4f6:	1a9b      	subs	r3, r3, r2
 800f4f8:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f4fc:	bfa2      	ittt	ge
 800f4fe:	2200      	movge	r2, #0
 800f500:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 800f504:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 800f508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f50a:	2a00      	cmp	r2, #0
 800f50c:	d131      	bne.n	800f572 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 800f50e:	463a      	mov	r2, r7
 800f510:	4621      	mov	r1, r4
 800f512:	a80b      	add	r0, sp, #44	; 0x2c
 800f514:	f00e fd3c 	bl	801df90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800f518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f51a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f51c:	9205      	str	r2, [sp, #20]
 800f51e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f522:	9306      	str	r3, [sp, #24]
 800f524:	dc6f      	bgt.n	800f606 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	a90b      	add	r1, sp, #44	; 0x2c
 800f52a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 800f52e:	4620      	mov	r0, r4
 800f530:	9307      	str	r3, [sp, #28]
 800f532:	016d      	lsls	r5, r5, #5
 800f534:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800f538:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f53c:	aa07      	add	r2, sp, #28
 800f53e:	930a      	str	r3, [sp, #40]	; 0x28
 800f540:	4633      	mov	r3, r6
 800f542:	f7ff fdc7 	bl	800f0d4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f546:	9f07      	ldr	r7, [sp, #28]
 800f548:	2d00      	cmp	r5, #0
 800f54a:	d165      	bne.n	800f618 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 800f54c:	3720      	adds	r7, #32
 800f54e:	4639      	mov	r1, r7
 800f550:	9a04      	ldr	r2, [sp, #16]
 800f552:	9b06      	ldr	r3, [sp, #24]
 800f554:	442f      	add	r7, r5
 800f556:	4291      	cmp	r1, r2
 800f558:	dc6b      	bgt.n	800f632 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 800f55a:	9a05      	ldr	r2, [sp, #20]
 800f55c:	4620      	mov	r0, r4
 800f55e:	9107      	str	r1, [sp, #28]
 800f560:	a90b      	add	r1, sp, #44	; 0x2c
 800f562:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f566:	aa07      	add	r2, sp, #28
 800f568:	930a      	str	r3, [sp, #40]	; 0x28
 800f56a:	4633      	mov	r3, r6
 800f56c:	f7ff fe04 	bl	800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f570:	e7ed      	b.n	800f54e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 800f572:	f9b1 c000 	ldrsh.w	ip, [r1]
 800f576:	88bd      	ldrh	r5, [r7, #4]
 800f578:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800f57c:	4465      	add	r5, ip
 800f57e:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 800f582:	b22d      	sxth	r5, r5
 800f584:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 800f588:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 800f58c:	2d00      	cmp	r5, #0
 800f58e:	bfb8      	it	lt
 800f590:	426d      	neglt	r5, r5
 800f592:	2b00      	cmp	r3, #0
 800f594:	bfb8      	it	lt
 800f596:	425b      	neglt	r3, r3
 800f598:	429d      	cmp	r5, r3
 800f59a:	bfb8      	it	lt
 800f59c:	461d      	movlt	r5, r3
 800f59e:	88fb      	ldrh	r3, [r7, #6]
 800f5a0:	4403      	add	r3, r0
 800f5a2:	116d      	asrs	r5, r5, #5
 800f5a4:	b21b      	sxth	r3, r3
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 800f5ac:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 800f5b0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f100 0001 	add.w	r0, r0, #1
 800f5ba:	bfb8      	it	lt
 800f5bc:	425b      	neglt	r3, r3
 800f5be:	2900      	cmp	r1, #0
 800f5c0:	ea4f 0060 	mov.w	r0, r0, asr #1
 800f5c4:	bfb8      	it	lt
 800f5c6:	4249      	neglt	r1, r1
 800f5c8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800f5cc:	428b      	cmp	r3, r1
 800f5ce:	bfb8      	it	lt
 800f5d0:	460b      	movlt	r3, r1
 800f5d2:	115b      	asrs	r3, r3, #5
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	435b      	muls	r3, r3
 800f5d8:	fb05 3505 	mla	r5, r5, r5, r3
 800f5dc:	2302      	movs	r3, #2
 800f5de:	fb92 f2f3 	sdiv	r2, r2, r3
 800f5e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5e4:	1a9a      	subs	r2, r3, r2
 800f5e6:	920a      	str	r2, [sp, #40]	; 0x28
 800f5e8:	f7ff fd12 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 800f5ec:	a90b      	add	r1, sp, #44	; 0x2c
 800f5ee:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f7ff fd02 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f5f6:	2320      	movs	r3, #32
 800f5f8:	fb90 f0f3 	sdiv	r0, r0, r3
 800f5fc:	4340      	muls	r0, r0
 800f5fe:	42a8      	cmp	r0, r5
 800f600:	dd85      	ble.n	800f50e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 800f602:	2401      	movs	r4, #1
 800f604:	e037      	b.n	800f676 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a0>
 800f606:	2102      	movs	r1, #2
 800f608:	fb93 f3f1 	sdiv	r3, r3, r1
 800f60c:	4413      	add	r3, r2
 800f60e:	9306      	str	r3, [sp, #24]
 800f610:	fb93 f3f1 	sdiv	r3, r3, r1
 800f614:	9305      	str	r3, [sp, #20]
 800f616:	e786      	b.n	800f526 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 800f618:	f107 0320 	add.w	r3, r7, #32
 800f61c:	fb93 f7f5 	sdiv	r7, r3, r5
 800f620:	fb05 3717 	mls	r7, r5, r7, r3
 800f624:	1bea      	subs	r2, r5, r7
 800f626:	fb92 f7f5 	sdiv	r7, r2, r5
 800f62a:	fb05 2717 	mls	r7, r5, r7, r2
 800f62e:	441f      	add	r7, r3
 800f630:	e78d      	b.n	800f54e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 800f632:	9907      	ldr	r1, [sp, #28]
 800f634:	428a      	cmp	r2, r1
 800f636:	dd09      	ble.n	800f64c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 800f638:	9a05      	ldr	r2, [sp, #20]
 800f63a:	a90b      	add	r1, sp, #44	; 0x2c
 800f63c:	4620      	mov	r0, r4
 800f63e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f642:	aa04      	add	r2, sp, #16
 800f644:	930a      	str	r3, [sp, #40]	; 0x28
 800f646:	4633      	mov	r3, r6
 800f648:	f7ff fd96 	bl	800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f64c:	9a06      	ldr	r2, [sp, #24]
 800f64e:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 800f652:	1ac3      	subs	r3, r0, r3
 800f654:	b99a      	cbnz	r2, 800f67e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a8>
 800f656:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f65a:	da04      	bge.n	800f666 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 800f65c:	a80b      	add	r0, sp, #44	; 0x2c
 800f65e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800f662:	f00e fdef 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800f666:	21ff      	movs	r1, #255	; 0xff
 800f668:	a80b      	add	r0, sp, #44	; 0x2c
 800f66a:	f00e ff60 	bl	801e52e <_ZN8touchgfx6Canvas6renderEh>
 800f66e:	4604      	mov	r4, r0
 800f670:	a80b      	add	r0, sp, #44	; 0x2c
 800f672:	f00e ff9b 	bl	801e5ac <_ZN8touchgfx6CanvasD1Ev>
 800f676:	4620      	mov	r0, r4
 800f678:	b03a      	add	sp, #232	; 0xe8
 800f67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67e:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 800f682:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f686:	ea4f 1747 	mov.w	r7, r7, lsl #5
 800f68a:	da2b      	bge.n	800f6e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 800f68c:	f7ff fce2 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f690:	4631      	mov	r1, r6
 800f692:	900a      	str	r0, [sp, #40]	; 0x28
 800f694:	a805      	add	r0, sp, #20
 800f696:	f7ff fcb0 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f69c:	f10d 0818 	add.w	r8, sp, #24
 800f6a0:	4418      	add	r0, r3
 800f6a2:	9008      	str	r0, [sp, #32]
 800f6a4:	9804      	ldr	r0, [sp, #16]
 800f6a6:	f7ff fcf6 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	900a      	str	r0, [sp, #40]	; 0x28
 800f6ae:	a805      	add	r0, sp, #20
 800f6b0:	f7ff fca3 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6b6:	1a18      	subs	r0, r3, r0
 800f6b8:	9b04      	ldr	r3, [sp, #16]
 800f6ba:	443b      	add	r3, r7
 800f6bc:	9009      	str	r0, [sp, #36]	; 0x24
 800f6be:	930a      	str	r3, [sp, #40]	; 0x28
 800f6c0:	9b04      	ldr	r3, [sp, #16]
 800f6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6c4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	dd0b      	ble.n	800f6e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 800f6cc:	ab09      	add	r3, sp, #36	; 0x24
 800f6ce:	aa08      	add	r2, sp, #32
 800f6d0:	a90b      	add	r1, sp, #44	; 0x2c
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	e9cd 6800 	strd	r6, r8, [sp]
 800f6d8:	f7ff fd25 	bl	800f126 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 800f6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6de:	443b      	add	r3, r7
 800f6e0:	930a      	str	r3, [sp, #40]	; 0x28
 800f6e2:	e7ed      	b.n	800f6c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 800f6e4:	9a04      	ldr	r2, [sp, #16]
 800f6e6:	9b07      	ldr	r3, [sp, #28]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	dd0a      	ble.n	800f702 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 800f6ec:	a90b      	add	r1, sp, #44	; 0x2c
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800f6f4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 800f6f8:	aa04      	add	r2, sp, #16
 800f6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f6fc:	4633      	mov	r3, r6
 800f6fe:	f7ff fd3b 	bl	800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f702:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f706:	4642      	mov	r2, r8
 800f708:	9b03      	ldr	r3, [sp, #12]
 800f70a:	eba8 0805 	sub.w	r8, r8, r5
 800f70e:	429a      	cmp	r2, r3
 800f710:	db0c      	blt.n	800f72c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 800f712:	9207      	str	r2, [sp, #28]
 800f714:	a90b      	add	r1, sp, #44	; 0x2c
 800f716:	4620      	mov	r0, r4
 800f718:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800f71c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 800f720:	aa07      	add	r2, sp, #28
 800f722:	930a      	str	r3, [sp, #40]	; 0x28
 800f724:	4633      	mov	r3, r6
 800f726:	f7ff fd27 	bl	800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f72a:	e7ec      	b.n	800f706 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 800f72c:	9a07      	ldr	r2, [sp, #28]
 800f72e:	4293      	cmp	r3, r2
 800f730:	da0a      	bge.n	800f748 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 800f732:	a90b      	add	r1, sp, #44	; 0x2c
 800f734:	4620      	mov	r0, r4
 800f736:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800f73a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 800f73e:	aa03      	add	r2, sp, #12
 800f740:	930a      	str	r3, [sp, #40]	; 0x28
 800f742:	4633      	mov	r3, r6
 800f744:	f7ff fd18 	bl	800f178 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 800f748:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 800f74c:	1a1b      	subs	r3, r3, r0
 800f74e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800f752:	da88      	bge.n	800f666 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 800f754:	f7ff fc7e 	bl	800f054 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 800f758:	4631      	mov	r1, r6
 800f75a:	900a      	str	r0, [sp, #40]	; 0x28
 800f75c:	a805      	add	r0, sp, #20
 800f75e:	f7ff fc4c 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f762:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f764:	ad06      	add	r5, sp, #24
 800f766:	4418      	add	r0, r3
 800f768:	9008      	str	r0, [sp, #32]
 800f76a:	9803      	ldr	r0, [sp, #12]
 800f76c:	f7ff fc93 	bl	800f096 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 800f770:	4631      	mov	r1, r6
 800f772:	900a      	str	r0, [sp, #40]	; 0x28
 800f774:	a805      	add	r0, sp, #20
 800f776:	f7ff fc40 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800f77a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f77c:	1a18      	subs	r0, r3, r0
 800f77e:	9b03      	ldr	r3, [sp, #12]
 800f780:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 800f784:	9009      	str	r0, [sp, #36]	; 0x24
 800f786:	443b      	add	r3, r7
 800f788:	930a      	str	r3, [sp, #40]	; 0x28
 800f78a:	9a03      	ldr	r2, [sp, #12]
 800f78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f78e:	429a      	cmp	r2, r3
 800f790:	f77f af69 	ble.w	800f666 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 800f794:	ab09      	add	r3, sp, #36	; 0x24
 800f796:	aa08      	add	r2, sp, #32
 800f798:	a90b      	add	r1, sp, #44	; 0x2c
 800f79a:	4620      	mov	r0, r4
 800f79c:	e9cd 6500 	strd	r6, r5, [sp]
 800f7a0:	f7ff fcc1 	bl	800f126 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 800f7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a6:	443b      	add	r3, r7
 800f7a8:	930a      	str	r3, [sp, #40]	; 0x28
 800f7aa:	e7ee      	b.n	800f78a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

0800f7ac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 800f7ac:	4413      	add	r3, r2
 800f7ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7b4:	4419      	add	r1, r3
 800f7b6:	7a03      	ldrb	r3, [r0, #8]
 800f7b8:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 800f7bc:	2bff      	cmp	r3, #255	; 0xff
 800f7be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f7c2:	440e      	add	r6, r1
 800f7c4:	d13d      	bne.n	800f842 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 800f7c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7ca:	3103      	adds	r1, #3
 800f7cc:	7d87      	ldrb	r7, [r0, #22]
 800f7ce:	2bff      	cmp	r3, #255	; 0xff
 800f7d0:	d10a      	bne.n	800f7e8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 800f7d2:	f801 7c03 	strb.w	r7, [r1, #-3]
 800f7d6:	7d43      	ldrb	r3, [r0, #21]
 800f7d8:	f801 3c02 	strb.w	r3, [r1, #-2]
 800f7dc:	7d03      	ldrb	r3, [r0, #20]
 800f7de:	f801 3c01 	strb.w	r3, [r1, #-1]
 800f7e2:	428e      	cmp	r6, r1
 800f7e4:	d8ef      	bhi.n	800f7c6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 800f7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	43db      	mvns	r3, r3
 800f7ec:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 800f7f0:	fb17 f702 	smulbb	r7, r7, r2
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	fb05 7503 	mla	r5, r5, r3, r7
 800f7fa:	b2ad      	uxth	r5, r5
 800f7fc:	1c6f      	adds	r7, r5, #1
 800f7fe:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800f802:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 800f806:	fb17 f703 	smulbb	r7, r7, r3
 800f80a:	122d      	asrs	r5, r5, #8
 800f80c:	f801 5c03 	strb.w	r5, [r1, #-3]
 800f810:	7d45      	ldrb	r5, [r0, #21]
 800f812:	fb05 7502 	mla	r5, r5, r2, r7
 800f816:	b2ad      	uxth	r5, r5
 800f818:	1c6f      	adds	r7, r5, #1
 800f81a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800f81e:	122d      	asrs	r5, r5, #8
 800f820:	f801 5c02 	strb.w	r5, [r1, #-2]
 800f824:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800f828:	7d07      	ldrb	r7, [r0, #20]
 800f82a:	fb15 f303 	smulbb	r3, r5, r3
 800f82e:	fb07 3202 	mla	r2, r7, r2, r3
 800f832:	b292      	uxth	r2, r2
 800f834:	1c53      	adds	r3, r2, #1
 800f836:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 800f83a:	1212      	asrs	r2, r2, #8
 800f83c:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f840:	e7cf      	b.n	800f7e2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 800f842:	3103      	adds	r1, #3
 800f844:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f848:	428e      	cmp	r6, r1
 800f84a:	7a03      	ldrb	r3, [r0, #8]
 800f84c:	f101 0103 	add.w	r1, r1, #3
 800f850:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 800f854:	fb02 f303 	mul.w	r3, r2, r3
 800f858:	f103 0201 	add.w	r2, r3, #1
 800f85c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 800f860:	ea4f 2222 	mov.w	r2, r2, asr #8
 800f864:	b295      	uxth	r5, r2
 800f866:	ea6f 0202 	mvn.w	r2, r2
 800f86a:	b2d3      	uxtb	r3, r2
 800f86c:	7d82      	ldrb	r2, [r0, #22]
 800f86e:	fb1c fc03 	smulbb	ip, ip, r3
 800f872:	fb02 c205 	mla	r2, r2, r5, ip
 800f876:	b292      	uxth	r2, r2
 800f878:	f102 0c01 	add.w	ip, r2, #1
 800f87c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800f880:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 800f884:	fb1c fc03 	smulbb	ip, ip, r3
 800f888:	ea4f 2222 	mov.w	r2, r2, asr #8
 800f88c:	f801 2c06 	strb.w	r2, [r1, #-6]
 800f890:	7d42      	ldrb	r2, [r0, #21]
 800f892:	fb02 c205 	mla	r2, r2, r5, ip
 800f896:	b292      	uxth	r2, r2
 800f898:	f102 0c01 	add.w	ip, r2, #1
 800f89c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800f8a0:	ea4f 2222 	mov.w	r2, r2, asr #8
 800f8a4:	f801 2c05 	strb.w	r2, [r1, #-5]
 800f8a8:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800f8ac:	f890 c014 	ldrb.w	ip, [r0, #20]
 800f8b0:	fb12 f303 	smulbb	r3, r2, r3
 800f8b4:	fb0c 3305 	mla	r3, ip, r5, r3
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	f103 0201 	add.w	r2, r3, #1
 800f8be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 800f8c2:	ea4f 2323 	mov.w	r3, r3, asr #8
 800f8c6:	f801 3c04 	strb.w	r3, [r1, #-4]
 800f8ca:	d8bb      	bhi.n	800f844 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 800f8cc:	e78b      	b.n	800f7e6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

0800f8ce <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 800f8ce:	b510      	push	{r4, lr}
 800f8d0:	7d04      	ldrb	r4, [r0, #20]
 800f8d2:	700c      	strb	r4, [r1, #0]
 800f8d4:	7d41      	ldrb	r1, [r0, #21]
 800f8d6:	7011      	strb	r1, [r2, #0]
 800f8d8:	7d82      	ldrb	r2, [r0, #22]
 800f8da:	2001      	movs	r0, #1
 800f8dc:	701a      	strb	r2, [r3, #0]
 800f8de:	22ff      	movs	r2, #255	; 0xff
 800f8e0:	9b02      	ldr	r3, [sp, #8]
 800f8e2:	701a      	strb	r2, [r3, #0]
 800f8e4:	bd10      	pop	{r4, pc}

0800f8e6 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800f8e6:	4770      	bx	lr

0800f8e8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800f8e8:	b510      	push	{r4, lr}
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	2118      	movs	r1, #24
 800f8ee:	f00f ff3c 	bl	801f76a <_ZdlPvj>
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	bd10      	pop	{r4, pc}

0800f8f6 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 800f8f6:	6281      	str	r1, [r0, #40]	; 0x28
 800f8f8:	4770      	bx	lr

0800f8fa <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800f902:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800f906:	8002      	strh	r2, [r0, #0]
 800f908:	8042      	strh	r2, [r0, #2]
 800f90a:	8084      	strh	r4, [r0, #4]
 800f90c:	80c1      	strh	r1, [r0, #6]
 800f90e:	bd10      	pop	{r4, pc}

0800f910 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 800f910:	2200      	movs	r2, #0
 800f912:	8002      	strh	r2, [r0, #0]
 800f914:	8042      	strh	r2, [r0, #2]
 800f916:	8082      	strh	r2, [r0, #4]
 800f918:	80c2      	strh	r2, [r0, #6]
 800f91a:	4770      	bx	lr

0800f91c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 800f91c:	b508      	push	{r3, lr}
 800f91e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f920:	b928      	cbnz	r0, 800f92e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 800f922:	4b03      	ldr	r3, [pc, #12]	; (800f930 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 800f924:	2126      	movs	r1, #38	; 0x26
 800f926:	4a03      	ldr	r2, [pc, #12]	; (800f934 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 800f928:	4803      	ldr	r0, [pc, #12]	; (800f938 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 800f92a:	f00f ff4d 	bl	801f7c8 <__assert_func>
 800f92e:	bd08      	pop	{r3, pc}
 800f930:	08022e34 	.word	0x08022e34
 800f934:	08022f14 	.word	0x08022f14
 800f938:	08022e5b 	.word	0x08022e5b

0800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800f93c:	b510      	push	{r4, lr}
 800f93e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f942:	888a      	ldrh	r2, [r1, #4]
 800f944:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f948:	4422      	add	r2, r4
 800f94a:	b212      	sxth	r2, r2
 800f94c:	4293      	cmp	r3, r2
 800f94e:	da15      	bge.n	800f97c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f950:	8882      	ldrh	r2, [r0, #4]
 800f952:	4413      	add	r3, r2
 800f954:	b21b      	sxth	r3, r3
 800f956:	429c      	cmp	r4, r3
 800f958:	da10      	bge.n	800f97c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f95a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f95e:	88c9      	ldrh	r1, [r1, #6]
 800f960:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f964:	4419      	add	r1, r3
 800f966:	b209      	sxth	r1, r1
 800f968:	428a      	cmp	r2, r1
 800f96a:	da07      	bge.n	800f97c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800f96c:	88c0      	ldrh	r0, [r0, #6]
 800f96e:	4410      	add	r0, r2
 800f970:	b200      	sxth	r0, r0
 800f972:	4283      	cmp	r3, r0
 800f974:	bfac      	ite	ge
 800f976:	2000      	movge	r0, #0
 800f978:	2001      	movlt	r0, #1
 800f97a:	bd10      	pop	{r4, pc}
 800f97c:	2000      	movs	r0, #0
 800f97e:	e7fc      	b.n	800f97a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800f980 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	b08b      	sub	sp, #44	; 0x2c
 800f986:	4604      	mov	r4, r0
 800f988:	6808      	ldr	r0, [r1, #0]
 800f98a:	f04f 0a00 	mov.w	sl, #0
 800f98e:	6849      	ldr	r1, [r1, #4]
 800f990:	ab04      	add	r3, sp, #16
 800f992:	f647 7bff 	movw	fp, #32767	; 0x7fff
 800f996:	c303      	stmia	r3!, {r0, r1}
 800f998:	4b35      	ldr	r3, [pc, #212]	; (800fa70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 800f99a:	4621      	mov	r1, r4
 800f99c:	a806      	add	r0, sp, #24
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a6:	bf1f      	itttt	ne
 800f9a8:	f10d 090e 	addne.w	r9, sp, #14
 800f9ac:	ae05      	addne	r6, sp, #20
 800f9ae:	f10d 0516 	addne.w	r5, sp, #22
 800f9b2:	f10d 0812 	addne.w	r8, sp, #18
 800f9b6:	bf01      	itttt	eq
 800f9b8:	f10d 0916 	addeq.w	r9, sp, #22
 800f9bc:	f10d 060e 	addeq.w	r6, sp, #14
 800f9c0:	ad05      	addeq	r5, sp, #20
 800f9c2:	f10d 0810 	addeq.w	r8, sp, #16
 800f9c6:	4798      	blx	r3
 800f9c8:	f9b5 3000 	ldrsh.w	r3, [r5]
 800f9cc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d042      	beq.n	800fa5a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	bfa8      	it	ge
 800f9d8:	4613      	movge	r3, r2
 800f9da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9de:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 800f9e2:	2f00      	cmp	r7, #0
 800f9e4:	dd21      	ble.n	800fa2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 800f9e6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800f9ea:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800f9ee:	f9b6 2000 	ldrsh.w	r2, [r6]
 800f9f2:	f9b9 3000 	ldrsh.w	r3, [r9]
 800f9f6:	f8ad 0020 	strh.w	r0, [sp, #32]
 800f9fa:	a808      	add	r0, sp, #32
 800f9fc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800fa00:	a906      	add	r1, sp, #24
 800fa02:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800fa06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fa0a:	f7ff ff97 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800fa0e:	9001      	str	r0, [sp, #4]
 800fa10:	b1d0      	cbz	r0, 800fa48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800fa12:	6822      	ldr	r2, [r4, #0]
 800fa14:	a908      	add	r1, sp, #32
 800fa16:	4620      	mov	r0, r4
 800fa18:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800fa1a:	4790      	blx	r2
 800fa1c:	b9a0      	cbnz	r0, 800fa48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800fa1e:	107f      	asrs	r7, r7, #1
 800fa20:	9b01      	ldr	r3, [sp, #4]
 800fa22:	f8ad 700e 	strh.w	r7, [sp, #14]
 800fa26:	469a      	mov	sl, r3
 800fa28:	e7d9      	b.n	800f9de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800fa2a:	d10d      	bne.n	800fa48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fa32:	f8b8 2000 	ldrh.w	r2, [r8]
 800fa36:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800fa3a:	440a      	add	r2, r1
 800fa3c:	f8a8 2000 	strh.w	r2, [r8]
 800fa40:	882b      	ldrh	r3, [r5, #0]
 800fa42:	1a5b      	subs	r3, r3, r1
 800fa44:	802b      	strh	r3, [r5, #0]
 800fa46:	e7bf      	b.n	800f9c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fa48:	f1ba 0f00 	cmp.w	sl, #0
 800fa4c:	d0f1      	beq.n	800fa32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800fa4e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800fa52:	455b      	cmp	r3, fp
 800fa54:	bf08      	it	eq
 800fa56:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 800fa58:	e7eb      	b.n	800fa32 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800fa5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	bf04      	itt	eq
 800fa62:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 800fa66:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 800fa68:	b00b      	add	sp, #44	; 0x2c
 800fa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6e:	bf00      	nop
 800fa70:	2400e9e8 	.word	0x2400e9e8

0800fa74 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa76:	b085      	sub	sp, #20
 800fa78:	6803      	ldr	r3, [r0, #0]
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	4601      	mov	r1, r0
 800fa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa80:	4668      	mov	r0, sp
 800fa82:	4798      	blx	r3
 800fa84:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800fa88:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	a902      	add	r1, sp, #8
 800fa90:	4668      	mov	r0, sp
 800fa92:	9302      	str	r3, [sp, #8]
 800fa94:	f8ad 600c 	strh.w	r6, [sp, #12]
 800fa98:	f8ad 500e 	strh.w	r5, [sp, #14]
 800fa9c:	f7ff ff4e 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 800faa0:	b340      	cbz	r0, 800faf4 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 800faa2:	f9bd 2000 	ldrsh.w	r2, [sp]
 800faa6:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 800faaa:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800faae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800fab2:	443a      	add	r2, r7
 800fab4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800fab8:	f8ad 0000 	strh.w	r0, [sp]
 800fabc:	b292      	uxth	r2, r2
 800fabe:	f8ad 1002 	strh.w	r1, [sp, #2]
 800fac2:	b217      	sxth	r7, r2
 800fac4:	42be      	cmp	r6, r7
 800fac6:	bfd8      	it	le
 800fac8:	b2b2      	uxthle	r2, r6
 800faca:	1a12      	subs	r2, r2, r0
 800facc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fad0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fad4:	4413      	add	r3, r2
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	b21a      	sxth	r2, r3
 800fada:	4295      	cmp	r5, r2
 800fadc:	bfd8      	it	le
 800fade:	b2ab      	uxthle	r3, r5
 800fae0:	1a5b      	subs	r3, r3, r1
 800fae2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fae6:	6823      	ldr	r3, [r4, #0]
 800fae8:	4669      	mov	r1, sp
 800faea:	4620      	mov	r0, r4
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	4798      	blx	r3
 800faf0:	b005      	add	sp, #20
 800faf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faf4:	e9cd 0000 	strd	r0, r0, [sp]
 800faf8:	e7f5      	b.n	800fae6 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0800fafc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800fafc:	2200      	movs	r2, #0
 800fafe:	2101      	movs	r1, #1
 800fb00:	8082      	strh	r2, [r0, #4]
 800fb02:	80c2      	strh	r2, [r0, #6]
 800fb04:	8102      	strh	r2, [r0, #8]
 800fb06:	8142      	strh	r2, [r0, #10]
 800fb08:	8182      	strh	r2, [r0, #12]
 800fb0a:	81c2      	strh	r2, [r0, #14]
 800fb0c:	8202      	strh	r2, [r0, #16]
 800fb0e:	8242      	strh	r2, [r0, #18]
 800fb10:	61c2      	str	r2, [r0, #28]
 800fb12:	8402      	strh	r2, [r0, #32]
 800fb14:	8442      	strh	r2, [r0, #34]	; 0x22
 800fb16:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800fb1a:	6282      	str	r2, [r0, #40]	; 0x28
 800fb1c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800fb20:	4905      	ldr	r1, [pc, #20]	; (800fb38 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 800fb22:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fb26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb2a:	6001      	str	r1, [r0, #0]
 800fb2c:	8582      	strh	r2, [r0, #44]	; 0x2c
 800fb2e:	22ff      	movs	r2, #255	; 0xff
 800fb30:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	08022ea0 	.word	0x08022ea0

0800fb3c <_ZNK8touchgfx4Line14getMinimalRectEv>:
 800fb3c:	f101 0368 	add.w	r3, r1, #104	; 0x68
 800fb40:	4602      	mov	r2, r0
 800fb42:	cb03      	ldmia	r3!, {r0, r1}
 800fb44:	6010      	str	r0, [r2, #0]
 800fb46:	4610      	mov	r0, r2
 800fb48:	6051      	str	r1, [r2, #4]
 800fb4a:	4770      	bx	lr

0800fb4c <_ZN8touchgfx4LineD1Ev>:
 800fb4c:	4770      	bx	lr

0800fb4e <_ZN8touchgfx4LineD0Ev>:
 800fb4e:	b510      	push	{r4, lr}
 800fb50:	4604      	mov	r4, r0
 800fb52:	2174      	movs	r1, #116	; 0x74
 800fb54:	f00f fe09 	bl	801f76a <_ZdlPvj>
 800fb58:	4620      	mov	r0, r4
 800fb5a:	bd10      	pop	{r4, pc}

0800fb5c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 800fb5c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800fb60:	f04f 0300 	mov.w	r3, #0
 800fb64:	bf2c      	ite	cs
 800fb66:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 800fb6a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 800fb6e:	1899      	adds	r1, r3, r2
 800fb70:	4288      	cmp	r0, r1
 800fb72:	bf24      	itt	cs
 800fb74:	1853      	addcs	r3, r2, r1
 800fb76:	1a40      	subcs	r0, r0, r1
 800fb78:	0892      	lsrs	r2, r2, #2
 800fb7a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800fb7e:	d1f6      	bne.n	800fb6e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 800fb80:	4618      	mov	r0, r3
 800fb82:	4770      	bx	lr

0800fb84 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800fb84:	b510      	push	{r4, lr}
 800fb86:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800fb8a:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800fb8e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800fb92:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800fb96:	139b      	asrs	r3, r3, #14
 800fb98:	13a4      	asrs	r4, r4, #14
 800fb9a:	429c      	cmp	r4, r3
 800fb9c:	bfb8      	it	lt
 800fb9e:	461c      	movlt	r4, r3
 800fba0:	2c01      	cmp	r4, #1
 800fba2:	dd07      	ble.n	800fbb4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800fba4:	fb91 f1f4 	sdiv	r1, r1, r4
 800fba8:	fb90 f0f4 	sdiv	r0, r0, r4
 800fbac:	f7ff ffea 	bl	800fb84 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800fbb0:	4360      	muls	r0, r4
 800fbb2:	bd10      	pop	{r4, pc}
 800fbb4:	4340      	muls	r0, r0
 800fbb6:	fb01 0001 	mla	r0, r1, r1, r0
 800fbba:	f7ff ffcf 	bl	800fb5c <_ZN8touchgfx7CWRUtil5isqrtEm>
 800fbbe:	e7f8      	b.n	800fbb2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800fbc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	b508      	push	{r3, lr}
 800fbc4:	da05      	bge.n	800fbd2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 800fbc6:	4240      	negs	r0, r0
 800fbc8:	f7ff fffa 	bl	800fbc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 800fbcc:	4240      	negs	r0, r0
 800fbce:	b240      	sxtb	r0, r0
 800fbd0:	bd08      	pop	{r3, pc}
 800fbd2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fbd6:	dc11      	bgt.n	800fbfc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 800fbd8:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 800fbdc:	dd09      	ble.n	800fbf2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 800fbde:	4340      	muls	r0, r0
 800fbe0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 800fbe4:	f7ff ffba 	bl	800fb5c <_ZN8touchgfx7CWRUtil5isqrtEm>
 800fbe8:	f7ff ffea 	bl	800fbc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 800fbec:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800fbf0:	e7ed      	b.n	800fbce <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 800fbf2:	3003      	adds	r0, #3
 800fbf4:	4b02      	ldr	r3, [pc, #8]	; (800fc00 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 800fbf6:	10c0      	asrs	r0, r0, #3
 800fbf8:	5618      	ldrsb	r0, [r3, r0]
 800fbfa:	e7e9      	b.n	800fbd0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e7e7      	b.n	800fbd0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 800fc00:	08022f62 	.word	0x08022f62

0800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 800fc04:	1e03      	subs	r3, r0, #0
 800fc06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc08:	460c      	mov	r4, r1
 800fc0a:	4615      	mov	r5, r2
 800fc0c:	db01      	blt.n	800fc12 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 800fc0e:	2900      	cmp	r1, #0
 800fc10:	da06      	bge.n	800fc20 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 800fc12:	4b10      	ldr	r3, [pc, #64]	; (800fc54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 800fc14:	f240 312a 	movw	r1, #810	; 0x32a
 800fc18:	4a0f      	ldr	r2, [pc, #60]	; (800fc58 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 800fc1a:	4810      	ldr	r0, [pc, #64]	; (800fc5c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 800fc1c:	f00f fdd4 	bl	801f7c8 <__assert_func>
 800fc20:	4299      	cmp	r1, r3
 800fc22:	dd07      	ble.n	800fc34 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 800fc24:	4619      	mov	r1, r3
 800fc26:	4620      	mov	r0, r4
 800fc28:	f7ff ffec 	bl	800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800fc2c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800fc30:	b003      	add	sp, #12
 800fc32:	bd30      	pop	{r4, r5, pc}
 800fc34:	f7ff ffa6 	bl	800fb84 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800fc38:	6028      	str	r0, [r5, #0]
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d0f8      	beq.n	800fc30 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	ab01      	add	r3, sp, #4
 800fc42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc46:	4620      	mov	r0, r4
 800fc48:	f003 ff2c 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 800fc4c:	f7ff ffb8 	bl	800fbc0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 800fc50:	e7ee      	b.n	800fc30 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 800fc52:	bf00      	nop
 800fc54:	08022fbd 	.word	0x08022fbd
 800fc58:	08023080 	.word	0x08023080
 800fc5c:	08022fce 	.word	0x08022fce

0800fc60 <_ZN8touchgfx4LineC1Ev>:
 800fc60:	b510      	push	{r4, lr}
 800fc62:	4604      	mov	r4, r0
 800fc64:	f7ff ff4a 	bl	800fafc <_ZN8touchgfx12CanvasWidgetC1Ev>
 800fc68:	4b0c      	ldr	r3, [pc, #48]	; (800fc9c <_ZN8touchgfx4LineC1Ev+0x3c>)
 800fc6a:	2220      	movs	r2, #32
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	2300      	movs	r3, #0
 800fc72:	6422      	str	r2, [r4, #64]	; 0x40
 800fc74:	2212      	movs	r2, #18
 800fc76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fc7a:	6722      	str	r2, [r4, #112]	; 0x70
 800fc7c:	60a3      	str	r3, [r4, #8]
 800fc7e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 800fc82:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800fc86:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fc8a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 800fc8e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 800fc92:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 800fc96:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 800fc9a:	bd10      	pop	{r4, pc}
 800fc9c:	0802300c 	.word	0x0802300c

0800fca0 <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 800fca0:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800fca4:	4770      	bx	lr
	...

0800fca8 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 800fca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800fcae:	4604      	mov	r4, r0
 800fcb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fcb2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800fcb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fcb6:	1af6      	subs	r6, r6, r3
 800fcb8:	eba5 0502 	sub.w	r5, r5, r2
 800fcbc:	f040 808e 	bne.w	800fddc <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 800fcc0:	b955      	cbnz	r5, 800fcd8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 800fcc2:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 800fcc6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fcca:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800fcce:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 800fcd2:	b003      	add	sp, #12
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 800fcdc:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 800fce0:	f04f 0802 	mov.w	r8, #2
 800fce4:	463a      	mov	r2, r7
 800fce6:	4629      	mov	r1, r5
 800fce8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800fcea:	f003 fefa 	bl	8013ae2 <_ZN8touchgfx6muldivElll>
 800fcee:	4631      	mov	r1, r6
 800fcf0:	463a      	mov	r2, r7
 800fcf2:	fb90 f5f8 	sdiv	r5, r0, r8
 800fcf6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800fcf8:	f003 fef3 	bl	8013ae2 <_ZN8touchgfx6muldivElll>
 800fcfc:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 800fd00:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800fd02:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800fd04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd06:	fb90 f0f8 	sdiv	r0, r0, r8
 800fd0a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800fd0e:	eba8 0305 	sub.w	r3, r8, r5
 800fd12:	f1ba 0f00 	cmp.w	sl, #0
 800fd16:	f040 80b8 	bne.w	800fe8a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 800fd1a:	64a3      	str	r3, [r4, #72]	; 0x48
 800fd1c:	1843      	adds	r3, r0, r1
 800fd1e:	65a3      	str	r3, [r4, #88]	; 0x58
 800fd20:	1b7b      	subs	r3, r7, r5
 800fd22:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fd24:	1983      	adds	r3, r0, r6
 800fd26:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fd28:	19eb      	adds	r3, r5, r7
 800fd2a:	6523      	str	r3, [r4, #80]	; 0x50
 800fd2c:	1a33      	subs	r3, r6, r0
 800fd2e:	6623      	str	r3, [r4, #96]	; 0x60
 800fd30:	eb05 0308 	add.w	r3, r5, r8
 800fd34:	6563      	str	r3, [r4, #84]	; 0x54
 800fd36:	1a0b      	subs	r3, r1, r0
 800fd38:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 800fd3c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 800fd40:	6663      	str	r3, [r4, #100]	; 0x64
 800fd42:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800fd46:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 800fd4a:	4672      	mov	r2, lr
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	f8cd c000 	str.w	ip, [sp]
 800fd52:	f859 bb04 	ldr.w	fp, [r9], #4
 800fd56:	9b00      	ldr	r3, [sp, #0]
 800fd58:	45de      	cmp	lr, fp
 800fd5a:	bfa8      	it	ge
 800fd5c:	46de      	movge	lr, fp
 800fd5e:	455a      	cmp	r2, fp
 800fd60:	bfb8      	it	lt
 800fd62:	465a      	movlt	r2, fp
 800fd64:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800fd68:	45dc      	cmp	ip, fp
 800fd6a:	bfa8      	it	ge
 800fd6c:	46dc      	movge	ip, fp
 800fd6e:	455b      	cmp	r3, fp
 800fd70:	bfb8      	it	lt
 800fd72:	465b      	movlt	r3, fp
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	9b01      	ldr	r3, [sp, #4]
 800fd78:	454b      	cmp	r3, r9
 800fd7a:	d1ea      	bne.n	800fd52 <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 800fd7c:	f04f 0920 	mov.w	r9, #32
 800fd80:	9b00      	ldr	r3, [sp, #0]
 800fd82:	f1ba 0f01 	cmp.w	sl, #1
 800fd86:	fb92 f2f9 	sdiv	r2, r2, r9
 800fd8a:	fb93 f3f9 	sdiv	r3, r3, r9
 800fd8e:	fb9e fef9 	sdiv	lr, lr, r9
 800fd92:	fb9c fcf9 	sdiv	ip, ip, r9
 800fd96:	f102 0201 	add.w	r2, r2, #1
 800fd9a:	f103 0301 	add.w	r3, r3, #1
 800fd9e:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 800fda2:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 800fda6:	eba2 0e0e 	sub.w	lr, r2, lr
 800fdaa:	eba3 0c0c 	sub.w	ip, r3, ip
 800fdae:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 800fdb2:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 800fdb6:	d18c      	bne.n	800fcd2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 800fdb8:	eba8 0305 	sub.w	r3, r8, r5
 800fdbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800fdbe:	1843      	adds	r3, r0, r1
 800fdc0:	65a3      	str	r3, [r4, #88]	; 0x58
 800fdc2:	1b7b      	subs	r3, r7, r5
 800fdc4:	442f      	add	r7, r5
 800fdc6:	4445      	add	r5, r8
 800fdc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fdca:	1983      	adds	r3, r0, r6
 800fdcc:	1a36      	subs	r6, r6, r0
 800fdce:	1a08      	subs	r0, r1, r0
 800fdd0:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fdd2:	6527      	str	r7, [r4, #80]	; 0x50
 800fdd4:	6626      	str	r6, [r4, #96]	; 0x60
 800fdd6:	6565      	str	r5, [r4, #84]	; 0x54
 800fdd8:	6660      	str	r0, [r4, #100]	; 0x64
 800fdda:	e77a      	b.n	800fcd2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 800fddc:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 800fde0:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 800fde4:	2d00      	cmp	r5, #0
 800fde6:	f43f af7b 	beq.w	800fce0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 800fdea:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 800fdee:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 800fdf2:	fb93 f2f7 	sdiv	r2, r3, r7
 800fdf6:	fb07 3312 	mls	r3, r7, r2, r3
 800fdfa:	b34b      	cbz	r3, 800fe50 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 800fdfc:	fb97 f2f3 	sdiv	r2, r7, r3
 800fe00:	fb03 7712 	mls	r7, r3, r2, r7
 800fe04:	2f00      	cmp	r7, #0
 800fe06:	d1f4      	bne.n	800fdf2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	f24b 5204 	movw	r2, #46340	; 0xb504
 800fe0e:	bf18      	it	ne
 800fe10:	fb96 f6f3 	sdivne	r6, r6, r3
 800fe14:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 800fe18:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 800fe1c:	bf18      	it	ne
 800fe1e:	fb95 f5f3 	sdivne	r5, r5, r3
 800fe22:	4291      	cmp	r1, r2
 800fe24:	dd16      	ble.n	800fe54 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 800fe26:	2d00      	cmp	r5, #0
 800fe28:	da47      	bge.n	800feba <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 800fe2a:	4b26      	ldr	r3, [pc, #152]	; (800fec4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 800fe2c:	429d      	cmp	r5, r3
 800fe2e:	da25      	bge.n	800fe7c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 800fe30:	426a      	negs	r2, r5
 800fe32:	f24b 5304 	movw	r3, #46340	; 0xb504
 800fe36:	fb91 f1f3 	sdiv	r1, r1, r3
 800fe3a:	fb92 f3f3 	sdiv	r3, r2, r3
 800fe3e:	4299      	cmp	r1, r3
 800fe40:	bfcc      	ite	gt
 800fe42:	1c4b      	addgt	r3, r1, #1
 800fe44:	3301      	addle	r3, #1
 800fe46:	fb96 f6f3 	sdiv	r6, r6, r3
 800fe4a:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe4e:	e00f      	b.n	800fe70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 800fe50:	463b      	mov	r3, r7
 800fe52:	e7d9      	b.n	800fe08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 800fe54:	2d00      	cmp	r5, #0
 800fe56:	fb92 f2f1 	sdiv	r2, r2, r1
 800fe5a:	da11      	bge.n	800fe80 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 800fe5c:	4269      	negs	r1, r5
 800fe5e:	f24b 5304 	movw	r3, #46340	; 0xb504
 800fe62:	fb93 f3f1 	sdiv	r3, r3, r1
 800fe66:	429a      	cmp	r2, r3
 800fe68:	bfa8      	it	ge
 800fe6a:	461a      	movge	r2, r3
 800fe6c:	4356      	muls	r6, r2
 800fe6e:	4355      	muls	r5, r2
 800fe70:	4629      	mov	r1, r5
 800fe72:	4630      	mov	r0, r6
 800fe74:	f7ff fe86 	bl	800fb84 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800fe78:	4607      	mov	r7, r0
 800fe7a:	e731      	b.n	800fce0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	e7ed      	b.n	800fe5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 800fe80:	4629      	mov	r1, r5
 800fe82:	e7ec      	b.n	800fe5e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 800fe84:	4629      	mov	r1, r5
 800fe86:	2200      	movs	r2, #0
 800fe88:	e7e9      	b.n	800fe5e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 800fe8a:	1a1b      	subs	r3, r3, r0
 800fe8c:	64a3      	str	r3, [r4, #72]	; 0x48
 800fe8e:	1843      	adds	r3, r0, r1
 800fe90:	1b5b      	subs	r3, r3, r5
 800fe92:	65a3      	str	r3, [r4, #88]	; 0x58
 800fe94:	1b7b      	subs	r3, r7, r5
 800fe96:	4403      	add	r3, r0
 800fe98:	64e3      	str	r3, [r4, #76]	; 0x4c
 800fe9a:	1983      	adds	r3, r0, r6
 800fe9c:	442b      	add	r3, r5
 800fe9e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fea0:	19eb      	adds	r3, r5, r7
 800fea2:	4403      	add	r3, r0
 800fea4:	6523      	str	r3, [r4, #80]	; 0x50
 800fea6:	1a33      	subs	r3, r6, r0
 800fea8:	442b      	add	r3, r5
 800feaa:	6623      	str	r3, [r4, #96]	; 0x60
 800feac:	eb05 0308 	add.w	r3, r5, r8
 800feb0:	1a1b      	subs	r3, r3, r0
 800feb2:	6563      	str	r3, [r4, #84]	; 0x54
 800feb4:	1a0b      	subs	r3, r1, r0
 800feb6:	1b5b      	subs	r3, r3, r5
 800feb8:	e73e      	b.n	800fd38 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 800feba:	4295      	cmp	r5, r2
 800febc:	dde2      	ble.n	800fe84 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 800febe:	462a      	mov	r2, r5
 800fec0:	e7b7      	b.n	800fe32 <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 800fec2:	bf00      	nop
 800fec4:	ffff4afc 	.word	0xffff4afc

0800fec8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 800fec8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800feca:	428b      	cmp	r3, r1
 800fecc:	d102      	bne.n	800fed4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 800fece:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d003      	beq.n	800fedc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 800fed4:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 800fed8:	f7ff bee6 	b.w	800fca8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800fedc:	4770      	bx	lr

0800fede <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 800fede:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fee0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fee2:	4604      	mov	r4, r0
 800fee4:	460e      	mov	r6, r1
 800fee6:	4615      	mov	r5, r2
 800fee8:	428b      	cmp	r3, r1
 800feea:	d102      	bne.n	800fef2 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 800feec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800feee:	4293      	cmp	r3, r2
 800fef0:	d018      	beq.n	800ff24 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x46>
 800fef2:	6823      	ldr	r3, [r4, #0]
 800fef4:	4621      	mov	r1, r4
 800fef6:	4668      	mov	r0, sp
 800fef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fefa:	4798      	blx	r3
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	4669      	mov	r1, sp
 800ff00:	4620      	mov	r0, r4
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	4798      	blx	r3
 800ff06:	4620      	mov	r0, r4
 800ff08:	e9c4 650e 	strd	r6, r5, [r4, #56]	; 0x38
 800ff0c:	f7ff fecc 	bl	800fca8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	4621      	mov	r1, r4
 800ff14:	a802      	add	r0, sp, #8
 800ff16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff18:	4798      	blx	r3
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	a902      	add	r1, sp, #8
 800ff1e:	4620      	mov	r0, r4
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	4798      	blx	r3
 800ff24:	b004      	add	sp, #16
 800ff26:	bd70      	pop	{r4, r5, r6, pc}

0800ff28 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 800ff28:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 800ff2c:	f7ff bebc 	b.w	800fca8 <_ZN8touchgfx4Line17updateCachedShapeEv>

0800ff30 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 800ff30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff34:	b0b3      	sub	sp, #204	; 0xcc
 800ff36:	4604      	mov	r4, r0
 800ff38:	460a      	mov	r2, r1
 800ff3a:	4601      	mov	r1, r0
 800ff3c:	a803      	add	r0, sp, #12
 800ff3e:	ad32      	add	r5, sp, #200	; 0xc8
 800ff40:	f00e f826 	bl	801df90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800ff44:	2300      	movs	r3, #0
 800ff46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ff48:	f845 3dc8 	str.w	r3, [r5, #-200]!
 800ff4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ff50:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ff52:	1ac0      	subs	r0, r0, r3
 800ff54:	eba1 0102 	sub.w	r1, r1, r2
 800ff58:	d43c      	bmi.n	800ffd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 800ff5a:	2900      	cmp	r1, #0
 800ff5c:	462a      	mov	r2, r5
 800ff5e:	db33      	blt.n	800ffc8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 800ff60:	f7ff fe50 	bl	800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800ff64:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 800ff68:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ff6a:	a803      	add	r0, sp, #12
 800ff6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ff6e:	f00e f9da 	bl	801e326 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800ff72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ff74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ff76:	a803      	add	r0, sp, #12
 800ff78:	f00e f964 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800ff7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d137      	bne.n	800fff4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 800ff84:	6f26      	ldr	r6, [r4, #112]	; 0x70
 800ff86:	2eb3      	cmp	r6, #179	; 0xb3
 800ff88:	dc34      	bgt.n	800fff4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 800ff8a:	eba7 0906 	sub.w	r9, r7, r6
 800ff8e:	4648      	mov	r0, r9
 800ff90:	f7ff f83e 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 800ff94:	a901      	add	r1, sp, #4
 800ff96:	9001      	str	r0, [sp, #4]
 800ff98:	4628      	mov	r0, r5
 800ff9a:	f7ff f82e 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800ff9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ffa0:	eb00 0801 	add.w	r8, r0, r1
 800ffa4:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 800ffa8:	f7ff f832 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 800ffac:	a902      	add	r1, sp, #8
 800ffae:	9002      	str	r0, [sp, #8]
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	f7ff f822 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 800ffb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ffb8:	4641      	mov	r1, r8
 800ffba:	1a12      	subs	r2, r2, r0
 800ffbc:	a803      	add	r0, sp, #12
 800ffbe:	f00e f941 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800ffc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ffc4:	441e      	add	r6, r3
 800ffc6:	e7de      	b.n	800ff86 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 800ffc8:	4249      	negs	r1, r1
 800ffca:	f7ff fe1b 	bl	800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800ffce:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 800ffd2:	e7c9      	b.n	800ff68 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	f1c0 0000 	rsb	r0, r0, #0
 800ffda:	462a      	mov	r2, r5
 800ffdc:	db04      	blt.n	800ffe8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 800ffde:	f7ff fe11 	bl	800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800ffe2:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 800ffe6:	e7bf      	b.n	800ff68 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 800ffe8:	4249      	negs	r1, r1
 800ffea:	f7ff fe0b 	bl	800fc04 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 800ffee:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 800fff2:	e7b9      	b.n	800ff68 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 800fff4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800fff6:	a803      	add	r0, sp, #12
 800fff8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800fffa:	f00e f923 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800fffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010000:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8010002:	a803      	add	r0, sp, #12
 8010004:	f00e f91e 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010008:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801000c:	2b01      	cmp	r3, #1
 801000e:	d123      	bne.n	8010058 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8010010:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8010012:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8010016:	2e00      	cmp	r6, #0
 8010018:	dd1e      	ble.n	8010058 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801001a:	eb06 0907 	add.w	r9, r6, r7
 801001e:	4648      	mov	r0, r9
 8010020:	f7fe fff6 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 8010024:	a901      	add	r1, sp, #4
 8010026:	9001      	str	r0, [sp, #4]
 8010028:	4628      	mov	r0, r5
 801002a:	f7fe ffe6 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801002e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010030:	eb00 0801 	add.w	r8, r0, r1
 8010034:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8010038:	f7fe ffea 	bl	800f010 <_ZN8touchgfx7CWRUtil4sineEi>
 801003c:	a902      	add	r1, sp, #8
 801003e:	9002      	str	r0, [sp, #8]
 8010040:	4628      	mov	r0, r5
 8010042:	f7fe ffda 	bl	800effa <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8010046:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010048:	4641      	mov	r1, r8
 801004a:	1a12      	subs	r2, r2, r0
 801004c:	a803      	add	r0, sp, #12
 801004e:	f00e f8f9 	bl	801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8010052:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010054:	1af6      	subs	r6, r6, r3
 8010056:	e7de      	b.n	8010016 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8010058:	21ff      	movs	r1, #255	; 0xff
 801005a:	a803      	add	r0, sp, #12
 801005c:	f00e fa67 	bl	801e52e <_ZN8touchgfx6Canvas6renderEh>
 8010060:	4604      	mov	r4, r0
 8010062:	a803      	add	r0, sp, #12
 8010064:	f00e faa2 	bl	801e5ac <_ZN8touchgfx6CanvasD1Ev>
 8010068:	4620      	mov	r0, r4
 801006a:	b033      	add	sp, #204	; 0xcc
 801006c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010070 <_ZN8touchgfx13AnimatedImageD1Ev>:
 8010070:	4770      	bx	lr

08010072 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 8010072:	b513      	push	{r0, r1, r4, lr}
 8010074:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010078:	4604      	mov	r4, r0
 801007a:	b13b      	cbz	r3, 801008c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1a>
 801007c:	f002 fba2 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8010080:	4621      	mov	r1, r4
 8010082:	f002 fbd7 	bl	8012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8010086:	2300      	movs	r3, #0
 8010088:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801008c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8010090:	b163      	cbz	r3, 80100ac <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3a>
 8010092:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010094:	a901      	add	r1, sp, #4
 8010096:	4620      	mov	r0, r4
 8010098:	f8ad 3004 	strh.w	r3, [sp, #4]
 801009c:	f000 fceb 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	4620      	mov	r0, r4
 80100a4:	695b      	ldr	r3, [r3, #20]
 80100a6:	4798      	blx	r3
 80100a8:	b002      	add	sp, #8
 80100aa:	bd10      	pop	{r4, pc}
 80100ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80100ae:	e7f1      	b.n	8010094 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x22>

080100b0 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 80100b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100b2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80100b6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 80100b8:	4604      	mov	r4, r0
 80100ba:	42bd      	cmp	r5, r7
 80100bc:	d019      	beq.n	80100f2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 80100be:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 80100c0:	42be      	cmp	r6, r7
 80100c2:	d016      	beq.n	80100f2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 80100c4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 80100c8:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
 80100cc:	b199      	cbz	r1, 80100f6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x46>
 80100ce:	b142      	cbz	r2, 80100e2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 80100d0:	a902      	add	r1, sp, #8
 80100d2:	f821 6d04 	strh.w	r6, [r1, #-4]!
 80100d6:	f000 fcce 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	4620      	mov	r0, r4
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	4798      	blx	r3
 80100e2:	f002 fb6f 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 80100e6:	4621      	mov	r1, r4
 80100e8:	f002 fb72 	bl	80127d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 80100ec:	2301      	movs	r3, #1
 80100ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80100f2:	b003      	add	sp, #12
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	2a00      	cmp	r2, #0
 80100f8:	d0f3      	beq.n	80100e2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 80100fa:	a902      	add	r1, sp, #8
 80100fc:	f821 5d04 	strh.w	r5, [r1, #-4]!
 8010100:	e7e9      	b.n	80100d6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

08010102 <_ZN8touchgfx13AnimatedImageD0Ev>:
 8010102:	b510      	push	{r4, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	213c      	movs	r1, #60	; 0x3c
 8010108:	f00f fb2f 	bl	801f76a <_ZdlPvj>
 801010c:	4620      	mov	r0, r4
 801010e:	bd10      	pop	{r4, pc}

08010110 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 8010110:	b510      	push	{r4, lr}
 8010112:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010116:	4604      	mov	r4, r0
 8010118:	b143      	cbz	r3, 801012c <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1c>
 801011a:	f002 fb53 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 801011e:	4621      	mov	r1, r4
 8010120:	f002 fb88 	bl	8012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8010124:	2300      	movs	r3, #0
 8010126:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801012a:	bd10      	pop	{r4, pc}
 801012c:	f002 fb4a 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8010130:	4621      	mov	r1, r4
 8010132:	f002 fb4d 	bl	80127d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8010136:	2301      	movs	r3, #1
 8010138:	e7f5      	b.n	8010126 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x16>
	...

0801013c <_ZNK8touchgfx6Bitmap5getIdEv>:
 801013c:	b508      	push	{r3, lr}
 801013e:	4b05      	ldr	r3, [pc, #20]	; (8010154 <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	b92b      	cbnz	r3, 8010150 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 8010144:	4b04      	ldr	r3, [pc, #16]	; (8010158 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 8010146:	2187      	movs	r1, #135	; 0x87
 8010148:	4a04      	ldr	r2, [pc, #16]	; (801015c <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 801014a:	4805      	ldr	r0, [pc, #20]	; (8010160 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 801014c:	f00f fb3c 	bl	801f7c8 <__assert_func>
 8010150:	8800      	ldrh	r0, [r0, #0]
 8010152:	bd08      	pop	{r3, pc}
 8010154:	2400ea98 	.word	0x2400ea98
 8010158:	080230eb 	.word	0x080230eb
 801015c:	080231c8 	.word	0x080231c8
 8010160:	08023127 	.word	0x08023127

08010164 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 8010164:	b538      	push	{r3, r4, r5, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	460d      	mov	r5, r1
 801016a:	4608      	mov	r0, r1
 801016c:	f7ff ffe6 	bl	801013c <_ZNK8touchgfx6Bitmap5getIdEv>
 8010170:	4629      	mov	r1, r5
 8010172:	8620      	strh	r0, [r4, #48]	; 0x30
 8010174:	4620      	mov	r0, r4
 8010176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801017a:	f000 bc7c 	b.w	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

0801017e <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 801017e:	b510      	push	{r4, lr}
 8010180:	4604      	mov	r4, r0
 8010182:	4608      	mov	r0, r1
 8010184:	f7ff ffda 	bl	801013c <_ZNK8touchgfx6Bitmap5getIdEv>
 8010188:	8660      	strh	r0, [r4, #50]	; 0x32
 801018a:	bd10      	pop	{r4, pc}

0801018c <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 801018c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801018e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010192:	4604      	mov	r4, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d047      	beq.n	8010228 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>
 8010198:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801019c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80101a0:	3301      	adds	r3, #1
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	429a      	cmp	r2, r3
 80101a6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 80101aa:	d13d      	bne.n	8010228 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>
 80101ac:	2300      	movs	r3, #0
 80101ae:	ad02      	add	r5, sp, #8
 80101b0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 80101b4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80101b6:	f825 3d04 	strh.w	r3, [r5, #-4]!
 80101ba:	4628      	mov	r0, r5
 80101bc:	f7ff ffbe 	bl	801013c <_ZNK8touchgfx6Bitmap5getIdEv>
 80101c0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80101c2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80101c6:	4282      	cmp	r2, r0
 80101c8:	d100      	bne.n	80101cc <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x40>
 80101ca:	b123      	cbz	r3, 80101d6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x4a>
 80101cc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80101ce:	4282      	cmp	r2, r0
 80101d0:	d12e      	bne.n	8010230 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa4>
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d032      	beq.n	801023c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xb0>
 80101d6:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80101da:	b936      	cbnz	r6, 80101ea <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x5e>
 80101dc:	f002 faf2 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 80101e0:	4621      	mov	r1, r4
 80101e2:	f002 fb27 	bl	8012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80101e6:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 80101ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80101ec:	b140      	cbz	r0, 8010200 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x74>
 80101ee:	6803      	ldr	r3, [r0, #0]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	4798      	blx	r3
 80101f4:	b120      	cbz	r0, 8010200 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x74>
 80101f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80101f8:	4621      	mov	r1, r4
 80101fa:	6803      	ldr	r3, [r0, #0]
 80101fc:	689b      	ldr	r3, [r3, #8]
 80101fe:	4798      	blx	r3
 8010200:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010204:	b183      	cbz	r3, 8010228 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>
 8010206:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801020a:	b16b      	cbz	r3, 8010228 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>
 801020c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8010210:	b163      	cbz	r3, 801022c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa0>
 8010212:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010214:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010218:	4620      	mov	r0, r4
 801021a:	4629      	mov	r1, r5
 801021c:	f000 fc2b 	bl	8010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	4620      	mov	r0, r4
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	4798      	blx	r3
 8010228:	b002      	add	sp, #8
 801022a:	bd70      	pop	{r4, r5, r6, pc}
 801022c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801022e:	e7f1      	b.n	8010214 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x88>
 8010230:	b123      	cbz	r3, 801023c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xb0>
 8010232:	3801      	subs	r0, #1
 8010234:	b280      	uxth	r0, r0
 8010236:	f8ad 0004 	strh.w	r0, [sp, #4]
 801023a:	e7ed      	b.n	8010218 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x8c>
 801023c:	3001      	adds	r0, #1
 801023e:	e7f9      	b.n	8010234 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>

08010240 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 8010240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010242:	ac02      	add	r4, sp, #8
 8010244:	6803      	ldr	r3, [r0, #0]
 8010246:	4605      	mov	r5, r0
 8010248:	4616      	mov	r6, r2
 801024a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801024c:	f824 1d04 	strh.w	r1, [r4, #-4]!
 8010250:	4621      	mov	r1, r4
 8010252:	4798      	blx	r3
 8010254:	682b      	ldr	r3, [r5, #0]
 8010256:	4621      	mov	r1, r4
 8010258:	4628      	mov	r0, r5
 801025a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801025c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8010260:	4798      	blx	r3
 8010262:	b002      	add	sp, #8
 8010264:	bd70      	pop	{r4, r5, r6, pc}

08010266 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 8010266:	2300      	movs	r3, #0
 8010268:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 801026c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 8010270:	4770      	bx	lr

08010272 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8010272:	2200      	movs	r2, #0
 8010274:	8002      	strh	r2, [r0, #0]
 8010276:	8042      	strh	r2, [r0, #2]
 8010278:	8082      	strh	r2, [r0, #4]
 801027a:	80c2      	strh	r2, [r0, #6]
 801027c:	4770      	bx	lr

0801027e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801027e:	b570      	push	{r4, r5, r6, lr}
 8010280:	6803      	ldr	r3, [r0, #0]
 8010282:	4604      	mov	r4, r0
 8010284:	4615      	mov	r5, r2
 8010286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010288:	4798      	blx	r3
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	4629      	mov	r1, r5
 801028e:	4620      	mov	r0, r4
 8010290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010296:	4718      	bx	r3

08010298 <_ZN8touchgfx8TextAreaD1Ev>:
 8010298:	4770      	bx	lr
	...

0801029c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801029c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801029e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80102a4:	4299      	cmp	r1, r3
 80102a6:	d029      	beq.n	80102fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80102a8:	4b15      	ldr	r3, [pc, #84]	; (8010300 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	b92b      	cbnz	r3, 80102ba <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80102ae:	4b15      	ldr	r3, [pc, #84]	; (8010304 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80102b0:	21ae      	movs	r1, #174	; 0xae
 80102b2:	4a15      	ldr	r2, [pc, #84]	; (8010308 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80102b4:	4815      	ldr	r0, [pc, #84]	; (801030c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80102b6:	f00f fa87 	bl	801f7c8 <__assert_func>
 80102ba:	4a15      	ldr	r2, [pc, #84]	; (8010310 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80102bc:	8812      	ldrh	r2, [r2, #0]
 80102be:	428a      	cmp	r2, r1
 80102c0:	d803      	bhi.n	80102ca <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80102c2:	4b14      	ldr	r3, [pc, #80]	; (8010314 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80102c4:	21af      	movs	r1, #175	; 0xaf
 80102c6:	4a10      	ldr	r2, [pc, #64]	; (8010308 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80102c8:	e7f4      	b.n	80102b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80102ca:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80102ce:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80102d2:	4b11      	ldr	r3, [pc, #68]	; (8010318 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80102d4:	7854      	ldrb	r4, [r2, #1]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80102dc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80102e0:	682b      	ldr	r3, [r5, #0]
 80102e2:	69de      	ldr	r6, [r3, #28]
 80102e4:	4b0d      	ldr	r3, [pc, #52]	; (801031c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	f7f3 fcb8 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 80102ec:	2300      	movs	r3, #0
 80102ee:	4602      	mov	r2, r0
 80102f0:	4621      	mov	r1, r4
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	4628      	mov	r0, r5
 80102f6:	47b0      	blx	r6
 80102f8:	b002      	add	sp, #8
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	2000      	movs	r0, #0
 80102fe:	e7fb      	b.n	80102f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8010300:	2400ea60 	.word	0x2400ea60
 8010304:	08021837 	.word	0x08021837
 8010308:	08023274 	.word	0x08023274
 801030c:	080218d3 	.word	0x080218d3
 8010310:	2400ea64 	.word	0x2400ea64
 8010314:	080218fc 	.word	0x080218fc
 8010318:	2400ea68 	.word	0x2400ea68
 801031c:	2400ea6c 	.word	0x2400ea6c

08010320 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	6803      	ldr	r3, [r0, #0]
 8010324:	4604      	mov	r4, r0
 8010326:	b28d      	uxth	r5, r1
 8010328:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801032a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801032c:	4b10      	ldr	r3, [pc, #64]	; (8010370 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	b92b      	cbnz	r3, 801033e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8010332:	4b10      	ldr	r3, [pc, #64]	; (8010374 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8010334:	21ae      	movs	r1, #174	; 0xae
 8010336:	4a10      	ldr	r2, [pc, #64]	; (8010378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8010338:	4810      	ldr	r0, [pc, #64]	; (801037c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801033a:	f00f fa45 	bl	801f7c8 <__assert_func>
 801033e:	4910      	ldr	r1, [pc, #64]	; (8010380 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8010340:	8809      	ldrh	r1, [r1, #0]
 8010342:	4291      	cmp	r1, r2
 8010344:	d803      	bhi.n	801034e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8010346:	4b0f      	ldr	r3, [pc, #60]	; (8010384 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8010348:	21af      	movs	r1, #175	; 0xaf
 801034a:	4a0b      	ldr	r2, [pc, #44]	; (8010378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801034c:	e7f4      	b.n	8010338 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801034e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010352:	4b0d      	ldr	r3, [pc, #52]	; (8010388 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801035a:	6803      	ldr	r3, [r0, #0]
 801035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035e:	4798      	blx	r3
 8010360:	1a29      	subs	r1, r5, r0
 8010362:	4633      	mov	r3, r6
 8010364:	4620      	mov	r0, r4
 8010366:	b209      	sxth	r1, r1
 8010368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801036c:	4718      	bx	r3
 801036e:	bf00      	nop
 8010370:	2400ea60 	.word	0x2400ea60
 8010374:	08021837 	.word	0x08021837
 8010378:	08023274 	.word	0x08023274
 801037c:	080218d3 	.word	0x080218d3
 8010380:	2400ea64 	.word	0x2400ea64
 8010384:	080218fc 	.word	0x080218fc
 8010388:	2400ea68 	.word	0x2400ea68

0801038c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801038c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010394:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010396:	b08c      	sub	sp, #48	; 0x30
 8010398:	4604      	mov	r4, r0
 801039a:	4293      	cmp	r3, r2
 801039c:	4688      	mov	r8, r1
 801039e:	d05f      	beq.n	8010460 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80103a0:	4e31      	ldr	r6, [pc, #196]	; (8010468 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 80103a2:	6832      	ldr	r2, [r6, #0]
 80103a4:	b92a      	cbnz	r2, 80103b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 80103a6:	4b31      	ldr	r3, [pc, #196]	; (801046c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 80103a8:	21ae      	movs	r1, #174	; 0xae
 80103aa:	4a31      	ldr	r2, [pc, #196]	; (8010470 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80103ac:	4831      	ldr	r0, [pc, #196]	; (8010474 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 80103ae:	f00f fa0b 	bl	801f7c8 <__assert_func>
 80103b2:	4d31      	ldr	r5, [pc, #196]	; (8010478 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 80103b4:	8829      	ldrh	r1, [r5, #0]
 80103b6:	4299      	cmp	r1, r3
 80103b8:	d803      	bhi.n	80103c2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 80103ba:	4b30      	ldr	r3, [pc, #192]	; (801047c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80103bc:	21af      	movs	r1, #175	; 0xaf
 80103be:	4a2c      	ldr	r2, [pc, #176]	; (8010470 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80103c0:	e7f4      	b.n	80103ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80103c2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80103c6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80103ca:	4b2d      	ldr	r3, [pc, #180]	; (8010480 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d044      	beq.n	8010460 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80103d6:	784b      	ldrb	r3, [r1, #1]
 80103d8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80103dc:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80103e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80103e4:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80103e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80103ec:	4b25      	ldr	r3, [pc, #148]	; (8010484 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80103ee:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80103f8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80103fc:	9207      	str	r2, [sp, #28]
 80103fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010400:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010404:	f88d a020 	strb.w	sl, [sp, #32]
 8010408:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801040c:	9009      	str	r0, [sp, #36]	; 0x24
 801040e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8010412:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8010416:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801041a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801041e:	b10a      	cbz	r2, 8010424 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8010420:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8010422:	b907      	cbnz	r7, 8010426 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8010424:	689f      	ldr	r7, [r3, #8]
 8010426:	f10d 0914 	add.w	r9, sp, #20
 801042a:	4621      	mov	r1, r4
 801042c:	4648      	mov	r0, r9
 801042e:	f003 fa2b 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010432:	6833      	ldr	r3, [r6, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d0b6      	beq.n	80103a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8010438:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801043a:	882b      	ldrh	r3, [r5, #0]
 801043c:	428b      	cmp	r3, r1
 801043e:	d9bc      	bls.n	80103ba <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8010440:	4b11      	ldr	r3, [pc, #68]	; (8010488 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8010442:	6818      	ldr	r0, [r3, #0]
 8010444:	f7f3 fc0a 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 8010448:	2300      	movs	r3, #0
 801044a:	9001      	str	r0, [sp, #4]
 801044c:	4638      	mov	r0, r7
 801044e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010452:	ab07      	add	r3, sp, #28
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	4643      	mov	r3, r8
 8010458:	e899 0006 	ldmia.w	r9, {r1, r2}
 801045c:	f7f3 fbb0 	bl	8003bc0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010460:	b00c      	add	sp, #48	; 0x30
 8010462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010466:	bf00      	nop
 8010468:	2400ea60 	.word	0x2400ea60
 801046c:	08021837 	.word	0x08021837
 8010470:	08023274 	.word	0x08023274
 8010474:	080218d3 	.word	0x080218d3
 8010478:	2400ea64 	.word	0x2400ea64
 801047c:	080218fc 	.word	0x080218fc
 8010480:	2400ea68 	.word	0x2400ea68
 8010484:	2400e9f0 	.word	0x2400e9f0
 8010488:	2400ea6c 	.word	0x2400ea6c

0801048c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801048c:	b40e      	push	{r1, r2, r3}
 801048e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010496:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010498:	b09c      	sub	sp, #112	; 0x70
 801049a:	4604      	mov	r4, r0
 801049c:	4293      	cmp	r3, r2
 801049e:	d06b      	beq.n	8010578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80104a0:	aa26      	add	r2, sp, #152	; 0x98
 80104a2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801058c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80104a6:	9202      	str	r2, [sp, #8]
 80104a8:	f8da 2000 	ldr.w	r2, [sl]
 80104ac:	b92a      	cbnz	r2, 80104ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 80104ae:	4b33      	ldr	r3, [pc, #204]	; (801057c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 80104b0:	21ae      	movs	r1, #174	; 0xae
 80104b2:	4a33      	ldr	r2, [pc, #204]	; (8010580 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80104b4:	4833      	ldr	r0, [pc, #204]	; (8010584 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 80104b6:	f00f f987 	bl	801f7c8 <__assert_func>
 80104ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8010590 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 80104be:	f8b8 1000 	ldrh.w	r1, [r8]
 80104c2:	4299      	cmp	r1, r3
 80104c4:	d803      	bhi.n	80104ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80104c6:	4b30      	ldr	r3, [pc, #192]	; (8010588 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 80104c8:	21af      	movs	r1, #175	; 0xaf
 80104ca:	4a2d      	ldr	r2, [pc, #180]	; (8010580 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80104cc:	e7f2      	b.n	80104b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80104ce:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8010594 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 80104d2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80104d6:	f8d9 3000 	ldr.w	r3, [r9]
 80104da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	4628      	mov	r0, r5
 80104e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e4:	4798      	blx	r3
 80104e6:	4606      	mov	r6, r0
 80104e8:	b207      	sxth	r7, r0
 80104ea:	a803      	add	r0, sp, #12
 80104ec:	f003 fe61 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	4628      	mov	r0, r5
 80104f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f6:	4798      	blx	r3
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	4683      	mov	fp, r0
 80104fc:	4628      	mov	r0, r5
 80104fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010500:	4798      	blx	r3
 8010502:	465b      	mov	r3, fp
 8010504:	9000      	str	r0, [sp, #0]
 8010506:	a803      	add	r0, sp, #12
 8010508:	9925      	ldr	r1, [sp, #148]	; 0x94
 801050a:	9a02      	ldr	r2, [sp, #8]
 801050c:	f003 fea4 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010510:	f8da 3000 	ldr.w	r3, [sl]
 8010514:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8010518:	2b00      	cmp	r3, #0
 801051a:	d0c8      	beq.n	80104ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801051c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801051e:	f8b8 0000 	ldrh.w	r0, [r8]
 8010522:	4290      	cmp	r0, r2
 8010524:	d9cf      	bls.n	80104c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8010526:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801052a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801052e:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8010532:	786a      	ldrb	r2, [r5, #1]
 8010534:	8925      	ldrh	r5, [r4, #8]
 8010536:	f8d9 3000 	ldr.w	r3, [r9]
 801053a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801053e:	eba5 050c 	sub.w	r5, r5, ip
 8010542:	b22d      	sxth	r5, r5
 8010544:	9500      	str	r5, [sp, #0]
 8010546:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801054a:	a803      	add	r0, sp, #12
 801054c:	f001 fcad 	bl	8011eaa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010550:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8010554:	b203      	sxth	r3, r0
 8010556:	18b9      	adds	r1, r7, r2
 8010558:	2900      	cmp	r1, #0
 801055a:	dd0b      	ble.n	8010574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801055c:	3b01      	subs	r3, #1
 801055e:	fb13 f302 	smulbb	r3, r3, r2
 8010562:	fb16 3300 	smlabb	r3, r6, r0, r3
 8010566:	b21f      	sxth	r7, r3
 8010568:	4638      	mov	r0, r7
 801056a:	b01c      	add	sp, #112	; 0x70
 801056c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010570:	b003      	add	sp, #12
 8010572:	4770      	bx	lr
 8010574:	2b00      	cmp	r3, #0
 8010576:	dcf7      	bgt.n	8010568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8010578:	2700      	movs	r7, #0
 801057a:	e7f5      	b.n	8010568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801057c:	08021837 	.word	0x08021837
 8010580:	08023274 	.word	0x08023274
 8010584:	080218d3 	.word	0x080218d3
 8010588:	080218fc 	.word	0x080218fc
 801058c:	2400ea60 	.word	0x2400ea60
 8010590:	2400ea64 	.word	0x2400ea64
 8010594:	2400ea68 	.word	0x2400ea68

08010598 <_ZN8touchgfx8TextAreaD0Ev>:
 8010598:	b510      	push	{r4, lr}
 801059a:	4604      	mov	r4, r0
 801059c:	213c      	movs	r1, #60	; 0x3c
 801059e:	f00f f8e4 	bl	801f76a <_ZdlPvj>
 80105a2:	4620      	mov	r0, r4
 80105a4:	bd10      	pop	{r4, pc}
	...

080105a8 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ae:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80105b0:	4604      	mov	r4, r0
 80105b2:	4299      	cmp	r1, r3
 80105b4:	d01e      	beq.n	80105f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80105b6:	6803      	ldr	r3, [r0, #0]
 80105b8:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80105ba:	4b0f      	ldr	r3, [pc, #60]	; (80105f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	b92b      	cbnz	r3, 80105cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80105c0:	4b0e      	ldr	r3, [pc, #56]	; (80105fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80105c2:	21ae      	movs	r1, #174	; 0xae
 80105c4:	4a0e      	ldr	r2, [pc, #56]	; (8010600 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80105c6:	480f      	ldr	r0, [pc, #60]	; (8010604 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80105c8:	f00f f8fe 	bl	801f7c8 <__assert_func>
 80105cc:	4b0e      	ldr	r3, [pc, #56]	; (8010608 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80105ce:	881b      	ldrh	r3, [r3, #0]
 80105d0:	428b      	cmp	r3, r1
 80105d2:	d803      	bhi.n	80105dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80105d4:	4b0d      	ldr	r3, [pc, #52]	; (801060c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80105d6:	21af      	movs	r1, #175	; 0xaf
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80105da:	e7f4      	b.n	80105c6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80105dc:	4b0c      	ldr	r3, [pc, #48]	; (8010610 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80105de:	6818      	ldr	r0, [r3, #0]
 80105e0:	f7f3 fb3c 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 80105e4:	2300      	movs	r3, #0
 80105e6:	4601      	mov	r1, r0
 80105e8:	46ac      	mov	ip, r5
 80105ea:	4620      	mov	r0, r4
 80105ec:	461a      	mov	r2, r3
 80105ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105f2:	4760      	bx	ip
 80105f4:	2000      	movs	r0, #0
 80105f6:	bd70      	pop	{r4, r5, r6, pc}
 80105f8:	2400ea60 	.word	0x2400ea60
 80105fc:	08021837 	.word	0x08021837
 8010600:	08023274 	.word	0x08023274
 8010604:	080218d3 	.word	0x080218d3
 8010608:	2400ea64 	.word	0x2400ea64
 801060c:	080218fc 	.word	0x080218fc
 8010610:	2400ea6c 	.word	0x2400ea6c

08010614 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801061a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801061c:	4604      	mov	r4, r0
 801061e:	429a      	cmp	r2, r3
 8010620:	d014      	beq.n	801064c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8010622:	6803      	ldr	r3, [r0, #0]
 8010624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010626:	4798      	blx	r3
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	4605      	mov	r5, r0
 801062c:	4620      	mov	r0, r4
 801062e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010630:	4798      	blx	r3
 8010632:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010636:	b22d      	sxth	r5, r5
 8010638:	4601      	mov	r1, r0
 801063a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801063e:	bf06      	itte	eq
 8010640:	4602      	moveq	r2, r0
 8010642:	4629      	moveq	r1, r5
 8010644:	462a      	movne	r2, r5
 8010646:	4620      	mov	r0, r4
 8010648:	f7fc ff99 	bl	800d57e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801064c:	bd38      	pop	{r3, r4, r5, pc}

0801064e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801064e:	888a      	ldrh	r2, [r1, #4]
 8010650:	8582      	strh	r2, [r0, #44]	; 0x2c
 8010652:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8010656:	b922      	cbnz	r2, 8010662 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8010658:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801065c:	b90b      	cbnz	r3, 8010662 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801065e:	f7ff bfd9 	b.w	8010614 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8010662:	4770      	bx	lr

08010664 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010664:	2300      	movs	r3, #0
 8010666:	8083      	strh	r3, [r0, #4]
 8010668:	80c3      	strh	r3, [r0, #6]
 801066a:	8003      	strh	r3, [r0, #0]
 801066c:	8043      	strh	r3, [r0, #2]
 801066e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8010672:	2bff      	cmp	r3, #255	; 0xff
 8010674:	bf01      	itttt	eq
 8010676:	890b      	ldrheq	r3, [r1, #8]
 8010678:	8083      	strheq	r3, [r0, #4]
 801067a:	894b      	ldrheq	r3, [r1, #10]
 801067c:	80c3      	strheq	r3, [r0, #6]
 801067e:	4770      	bx	lr

08010680 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8010680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010682:	4604      	mov	r4, r0
 8010684:	466b      	mov	r3, sp
 8010686:	6808      	ldr	r0, [r1, #0]
 8010688:	6849      	ldr	r1, [r1, #4]
 801068a:	c303      	stmia	r3!, {r0, r1}
 801068c:	6823      	ldr	r3, [r4, #0]
 801068e:	4669      	mov	r1, sp
 8010690:	4620      	mov	r0, r4
 8010692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010694:	4798      	blx	r3
 8010696:	4b08      	ldr	r3, [pc, #32]	; (80106b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801069e:	b10a      	cbz	r2, 80106a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80106a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80106a2:	b900      	cbnz	r0, 80106a6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80106a4:	6898      	ldr	r0, [r3, #8]
 80106a6:	6803      	ldr	r3, [r0, #0]
 80106a8:	4669      	mov	r1, sp
 80106aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80106ac:	699d      	ldr	r5, [r3, #24]
 80106ae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80106b2:	47a8      	blx	r5
 80106b4:	b003      	add	sp, #12
 80106b6:	bd30      	pop	{r4, r5, pc}
 80106b8:	2400e9f0 	.word	0x2400e9f0

080106bc <_ZN8touchgfx3BoxD1Ev>:
 80106bc:	4770      	bx	lr

080106be <_ZN8touchgfx3BoxD0Ev>:
 80106be:	b510      	push	{r4, lr}
 80106c0:	4604      	mov	r4, r0
 80106c2:	212c      	movs	r1, #44	; 0x2c
 80106c4:	f00f f851 	bl	801f76a <_ZdlPvj>
 80106c8:	4620      	mov	r0, r4
 80106ca:	bd10      	pop	{r4, pc}

080106cc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80106cc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80106d0:	4770      	bx	lr

080106d2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80106d2:	b570      	push	{r4, r5, r6, lr}
 80106d4:	880b      	ldrh	r3, [r1, #0]
 80106d6:	4605      	mov	r5, r0
 80106d8:	4604      	mov	r4, r0
 80106da:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80106dc:	8813      	ldrh	r3, [r2, #0]
 80106de:	f825 3f30 	strh.w	r3, [r5, #48]!
 80106e2:	4628      	mov	r0, r5
 80106e4:	f005 f966 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80106e8:	4606      	mov	r6, r0
 80106ea:	4628      	mov	r0, r5
 80106ec:	f005 f99c 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106f0:	6823      	ldr	r3, [r4, #0]
 80106f2:	4605      	mov	r5, r0
 80106f4:	b231      	sxth	r1, r6
 80106f6:	4620      	mov	r0, r4
 80106f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106fa:	4798      	blx	r3
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	b229      	sxth	r1, r5
 8010700:	4620      	mov	r0, r4
 8010702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010708:	4718      	bx	r3

0801070a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801070a:	b510      	push	{r4, lr}
 801070c:	4604      	mov	r4, r0
 801070e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010710:	b150      	cbz	r0, 8010728 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8010712:	6803      	ldr	r3, [r0, #0]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	4798      	blx	r3
 8010718:	b130      	cbz	r0, 8010728 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801071a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801071c:	4621      	mov	r1, r4
 801071e:	6803      	ldr	r3, [r0, #0]
 8010720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	4718      	bx	r3
 8010728:	bd10      	pop	{r4, pc}

0801072a <_ZNK8touchgfx6Button12getSolidRectEv>:
 801072a:	b510      	push	{r4, lr}
 801072c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8010730:	4604      	mov	r4, r0
 8010732:	2bff      	cmp	r3, #255	; 0xff
 8010734:	d006      	beq.n	8010744 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8010736:	2300      	movs	r3, #0
 8010738:	8003      	strh	r3, [r0, #0]
 801073a:	8043      	strh	r3, [r0, #2]
 801073c:	8083      	strh	r3, [r0, #4]
 801073e:	80c3      	strh	r3, [r0, #6]
 8010740:	4620      	mov	r0, r4
 8010742:	bd10      	pop	{r4, pc}
 8010744:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8010748:	b11b      	cbz	r3, 8010752 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801074a:	3130      	adds	r1, #48	; 0x30
 801074c:	f005 f9a6 	bl	8015a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010750:	e7f6      	b.n	8010740 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8010752:	312e      	adds	r1, #46	; 0x2e
 8010754:	e7fa      	b.n	801074c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08010758 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8010758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8010760:	b08a      	sub	sp, #40	; 0x28
 8010762:	4604      	mov	r4, r0
 8010764:	4688      	mov	r8, r1
 8010766:	2b00      	cmp	r3, #0
 8010768:	d044      	beq.n	80107f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801076a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801076c:	a805      	add	r0, sp, #20
 801076e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010772:	f005 f91f 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010776:	4605      	mov	r5, r0
 8010778:	b206      	sxth	r6, r0
 801077a:	a805      	add	r0, sp, #20
 801077c:	f005 f954 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010780:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010784:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8010788:	2300      	movs	r3, #0
 801078a:	fa0f fc80 	sxth.w	ip, r0
 801078e:	4417      	add	r7, r2
 8010790:	9306      	str	r3, [sp, #24]
 8010792:	b2bf      	uxth	r7, r7
 8010794:	fa0f fe87 	sxth.w	lr, r7
 8010798:	459e      	cmp	lr, r3
 801079a:	dd2d      	ble.n	80107f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801079c:	4296      	cmp	r6, r2
 801079e:	dd2b      	ble.n	80107f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80107a0:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80107a4:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80107a8:	4419      	add	r1, r3
 80107aa:	b289      	uxth	r1, r1
 80107ac:	fa0f f881 	sxth.w	r8, r1
 80107b0:	f1b8 0f00 	cmp.w	r8, #0
 80107b4:	dd20      	ble.n	80107f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80107b6:	459c      	cmp	ip, r3
 80107b8:	dd1e      	ble.n	80107f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80107ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80107be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80107c2:	4576      	cmp	r6, lr
 80107c4:	bfa8      	it	ge
 80107c6:	463d      	movge	r5, r7
 80107c8:	45c4      	cmp	ip, r8
 80107ca:	bfa8      	it	ge
 80107cc:	4608      	movge	r0, r1
 80107ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80107d2:	1aad      	subs	r5, r5, r2
 80107d4:	1ac0      	subs	r0, r0, r3
 80107d6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80107da:	f8ad 501c 	strh.w	r5, [sp, #28]
 80107de:	f8ad 001e 	strh.w	r0, [sp, #30]
 80107e2:	4b1f      	ldr	r3, [pc, #124]	; (8010860 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	b953      	cbnz	r3, 80107fe <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80107e8:	4b1e      	ldr	r3, [pc, #120]	; (8010864 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80107ea:	2187      	movs	r1, #135	; 0x87
 80107ec:	4a1e      	ldr	r2, [pc, #120]	; (8010868 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80107ee:	481f      	ldr	r0, [pc, #124]	; (801086c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80107f0:	f00e ffea 	bl	801f7c8 <__assert_func>
 80107f4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80107f6:	e7b9      	b.n	801076c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80107f8:	2300      	movs	r3, #0
 80107fa:	9307      	str	r3, [sp, #28]
 80107fc:	e7f1      	b.n	80107e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80107fe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010806:	429a      	cmp	r2, r3
 8010808:	d026      	beq.n	8010858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801080a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801080e:	2b00      	cmp	r3, #0
 8010810:	dd22      	ble.n	8010858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8010812:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010816:	2b00      	cmp	r3, #0
 8010818:	dd1e      	ble.n	8010858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801081a:	2300      	movs	r3, #0
 801081c:	a908      	add	r1, sp, #32
 801081e:	4620      	mov	r0, r4
 8010820:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010828:	4798      	blx	r3
 801082a:	4b11      	ldr	r3, [pc, #68]	; (8010870 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010832:	b10a      	cbz	r2, 8010838 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8010834:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010836:	b900      	cbnz	r0, 801083a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8010838:	6898      	ldr	r0, [r3, #8]
 801083a:	2501      	movs	r5, #1
 801083c:	6801      	ldr	r1, [r0, #0]
 801083e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8010842:	9502      	str	r5, [sp, #8]
 8010844:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8010848:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801084c:	9401      	str	r4, [sp, #4]
 801084e:	ac06      	add	r4, sp, #24
 8010850:	9400      	str	r4, [sp, #0]
 8010852:	688c      	ldr	r4, [r1, #8]
 8010854:	a905      	add	r1, sp, #20
 8010856:	47a0      	blx	r4
 8010858:	b00a      	add	sp, #40	; 0x28
 801085a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801085e:	bf00      	nop
 8010860:	2400ea98 	.word	0x2400ea98
 8010864:	080230eb 	.word	0x080230eb
 8010868:	08023308 	.word	0x08023308
 801086c:	08023127 	.word	0x08023127
 8010870:	2400e9f0 	.word	0x2400e9f0

08010874 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 8010874:	4770      	bx	lr
	...

08010878 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8010878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801087e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010880:	4606      	mov	r6, r0
 8010882:	4299      	cmp	r1, r3
 8010884:	d02a      	beq.n	80108dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8010886:	4b16      	ldr	r3, [pc, #88]	; (80108e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	b92b      	cbnz	r3, 8010898 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801088c:	4b15      	ldr	r3, [pc, #84]	; (80108e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801088e:	21ae      	movs	r1, #174	; 0xae
 8010890:	4a15      	ldr	r2, [pc, #84]	; (80108e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8010892:	4816      	ldr	r0, [pc, #88]	; (80108ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8010894:	f00e ff98 	bl	801f7c8 <__assert_func>
 8010898:	4a15      	ldr	r2, [pc, #84]	; (80108f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801089a:	8812      	ldrh	r2, [r2, #0]
 801089c:	428a      	cmp	r2, r1
 801089e:	d803      	bhi.n	80108a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80108a0:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80108a2:	21af      	movs	r1, #175	; 0xaf
 80108a4:	4a10      	ldr	r2, [pc, #64]	; (80108e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80108a6:	e7f4      	b.n	8010892 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80108a8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80108ac:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80108b0:	4b11      	ldr	r3, [pc, #68]	; (80108f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80108b2:	7854      	ldrb	r4, [r2, #1]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80108ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	69df      	ldr	r7, [r3, #28]
 80108c2:	4b0e      	ldr	r3, [pc, #56]	; (80108fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80108c4:	6818      	ldr	r0, [r3, #0]
 80108c6:	f7f3 f9c9 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 80108ca:	2300      	movs	r3, #0
 80108cc:	4602      	mov	r2, r0
 80108ce:	4621      	mov	r1, r4
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	4628      	mov	r0, r5
 80108d4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80108d6:	47b8      	blx	r7
 80108d8:	b003      	add	sp, #12
 80108da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108dc:	2000      	movs	r0, #0
 80108de:	e7fb      	b.n	80108d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80108e0:	2400ea60 	.word	0x2400ea60
 80108e4:	08021837 	.word	0x08021837
 80108e8:	080233b4 	.word	0x080233b4
 80108ec:	080218d3 	.word	0x080218d3
 80108f0:	2400ea64 	.word	0x2400ea64
 80108f4:	080218fc 	.word	0x080218fc
 80108f8:	2400ea68 	.word	0x2400ea68
 80108fc:	2400ea6c 	.word	0x2400ea6c

08010900 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010906:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010908:	4604      	mov	r4, r0
 801090a:	4299      	cmp	r1, r3
 801090c:	d01e      	beq.n	801094c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801090e:	6803      	ldr	r3, [r0, #0]
 8010910:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8010912:	4b0f      	ldr	r3, [pc, #60]	; (8010950 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	b92b      	cbnz	r3, 8010924 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8010918:	4b0e      	ldr	r3, [pc, #56]	; (8010954 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801091a:	21ae      	movs	r1, #174	; 0xae
 801091c:	4a0e      	ldr	r2, [pc, #56]	; (8010958 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801091e:	480f      	ldr	r0, [pc, #60]	; (801095c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8010920:	f00e ff52 	bl	801f7c8 <__assert_func>
 8010924:	4b0e      	ldr	r3, [pc, #56]	; (8010960 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	428b      	cmp	r3, r1
 801092a:	d803      	bhi.n	8010934 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801092c:	4b0d      	ldr	r3, [pc, #52]	; (8010964 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801092e:	21af      	movs	r1, #175	; 0xaf
 8010930:	4a09      	ldr	r2, [pc, #36]	; (8010958 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8010932:	e7f4      	b.n	801091e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8010934:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8010936:	6818      	ldr	r0, [r3, #0]
 8010938:	f7f3 f990 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 801093c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801093e:	4601      	mov	r1, r0
 8010940:	46ac      	mov	ip, r5
 8010942:	4620      	mov	r0, r4
 8010944:	2300      	movs	r3, #0
 8010946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801094a:	4760      	bx	ip
 801094c:	2000      	movs	r0, #0
 801094e:	bd70      	pop	{r4, r5, r6, pc}
 8010950:	2400ea60 	.word	0x2400ea60
 8010954:	08021837 	.word	0x08021837
 8010958:	080233b4 	.word	0x080233b4
 801095c:	080218d3 	.word	0x080218d3
 8010960:	2400ea64 	.word	0x2400ea64
 8010964:	080218fc 	.word	0x080218fc
 8010968:	2400ea6c 	.word	0x2400ea6c

0801096c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801096c:	b510      	push	{r4, lr}
 801096e:	4604      	mov	r4, r0
 8010970:	2140      	movs	r1, #64	; 0x40
 8010972:	f00e fefa 	bl	801f76a <_ZdlPvj>
 8010976:	4620      	mov	r0, r4
 8010978:	bd10      	pop	{r4, pc}
	...

0801097c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010984:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010986:	b08c      	sub	sp, #48	; 0x30
 8010988:	4604      	mov	r4, r0
 801098a:	4293      	cmp	r3, r2
 801098c:	460e      	mov	r6, r1
 801098e:	d05d      	beq.n	8010a4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8010990:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8010a70 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8010994:	f8d8 2000 	ldr.w	r2, [r8]
 8010998:	b92a      	cbnz	r2, 80109a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801099a:	4b2e      	ldr	r3, [pc, #184]	; (8010a54 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801099c:	21ae      	movs	r1, #174	; 0xae
 801099e:	4a2e      	ldr	r2, [pc, #184]	; (8010a58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80109a0:	482e      	ldr	r0, [pc, #184]	; (8010a5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80109a2:	f00e ff11 	bl	801f7c8 <__assert_func>
 80109a6:	4f2e      	ldr	r7, [pc, #184]	; (8010a60 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80109a8:	8839      	ldrh	r1, [r7, #0]
 80109aa:	4299      	cmp	r1, r3
 80109ac:	d803      	bhi.n	80109b6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80109ae:	4b2d      	ldr	r3, [pc, #180]	; (8010a64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80109b0:	21af      	movs	r1, #175	; 0xaf
 80109b2:	4a29      	ldr	r2, [pc, #164]	; (8010a58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80109b4:	e7f4      	b.n	80109a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 80109b6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80109ba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80109be:	4b2a      	ldr	r3, [pc, #168]	; (8010a68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80109c6:	2a00      	cmp	r2, #0
 80109c8:	d040      	beq.n	8010a4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80109ca:	784b      	ldrb	r3, [r1, #1]
 80109cc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 80109d0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80109d4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80109d8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80109dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80109e0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80109e4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80109e8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80109ec:	ad05      	add	r5, sp, #20
 80109ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80109f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80109f4:	9207      	str	r2, [sp, #28]
 80109f6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80109fa:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80109fe:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8010a02:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8010a06:	f88d a020 	strb.w	sl, [sp, #32]
 8010a0a:	9009      	str	r0, [sp, #36]	; 0x24
 8010a0c:	f7fd fc3c 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 8010a10:	4621      	mov	r1, r4
 8010a12:	4681      	mov	r9, r0
 8010a14:	4628      	mov	r0, r5
 8010a16:	f002 ff37 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d0bb      	beq.n	801099a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8010a22:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8010a24:	883b      	ldrh	r3, [r7, #0]
 8010a26:	428b      	cmp	r3, r1
 8010a28:	d9c1      	bls.n	80109ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8010a2a:	4b10      	ldr	r3, [pc, #64]	; (8010a6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8010a2c:	6818      	ldr	r0, [r3, #0]
 8010a2e:	f7f3 f915 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 8010a32:	2300      	movs	r3, #0
 8010a34:	9303      	str	r3, [sp, #12]
 8010a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a38:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8010a3c:	ab07      	add	r3, sp, #28
 8010a3e:	4648      	mov	r0, r9
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	4633      	mov	r3, r6
 8010a44:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010a48:	f7f3 f8ba 	bl	8003bc0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010a4c:	b00c      	add	sp, #48	; 0x30
 8010a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a52:	bf00      	nop
 8010a54:	08021837 	.word	0x08021837
 8010a58:	080233b4 	.word	0x080233b4
 8010a5c:	080218d3 	.word	0x080218d3
 8010a60:	2400ea64 	.word	0x2400ea64
 8010a64:	080218fc 	.word	0x080218fc
 8010a68:	2400ea68 	.word	0x2400ea68
 8010a6c:	2400ea6c 	.word	0x2400ea6c
 8010a70:	2400ea60 	.word	0x2400ea60

08010a74 <_ZN8touchgfx5ImageD1Ev>:
 8010a74:	4770      	bx	lr

08010a76 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8010a76:	b570      	push	{r4, r5, r6, lr}
 8010a78:	880b      	ldrh	r3, [r1, #0]
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010a80:	4608      	mov	r0, r1
 8010a82:	f004 ff97 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010a86:	4606      	mov	r6, r0
 8010a88:	4628      	mov	r0, r5
 8010a8a:	f004 ffcd 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010a8e:	6823      	ldr	r3, [r4, #0]
 8010a90:	4605      	mov	r5, r0
 8010a92:	b231      	sxth	r1, r6
 8010a94:	4620      	mov	r0, r4
 8010a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a98:	4798      	blx	r3
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	b229      	sxth	r1, r5
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010aa6:	4718      	bx	r3

08010aa8 <_ZN8touchgfx5ImageD0Ev>:
 8010aa8:	b510      	push	{r4, lr}
 8010aaa:	4604      	mov	r4, r0
 8010aac:	212c      	movs	r1, #44	; 0x2c
 8010aae:	f00e fe5c 	bl	801f76a <_ZdlPvj>
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	bd10      	pop	{r4, pc}

08010ab6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010abc:	4604      	mov	r4, r0
 8010abe:	2bff      	cmp	r3, #255	; 0xff
 8010ac0:	d006      	beq.n	8010ad0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	8003      	strh	r3, [r0, #0]
 8010ac6:	8043      	strh	r3, [r0, #2]
 8010ac8:	8083      	strh	r3, [r0, #4]
 8010aca:	80c3      	strh	r3, [r0, #6]
 8010acc:	4620      	mov	r0, r4
 8010ace:	bd10      	pop	{r4, pc}
 8010ad0:	3126      	adds	r1, #38	; 0x26
 8010ad2:	f004 ffe3 	bl	8015a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010ad6:	e7f9      	b.n	8010acc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010ad8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010adc:	4604      	mov	r4, r0
 8010ade:	b088      	sub	sp, #32
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	460f      	mov	r7, r1
 8010ae4:	f854 3b26 	ldr.w	r3, [r4], #38
 8010ae8:	a904      	add	r1, sp, #16
 8010aea:	4606      	mov	r6, r0
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010af2:	4798      	blx	r3
 8010af4:	4620      	mov	r0, r4
 8010af6:	f004 ff5d 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010afa:	4680      	mov	r8, r0
 8010afc:	4620      	mov	r0, r4
 8010afe:	f004 ff93 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b02:	9506      	str	r5, [sp, #24]
 8010b04:	ad06      	add	r5, sp, #24
 8010b06:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8010b10:	4628      	mov	r0, r5
 8010b12:	f7fd f8e9 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8010b16:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	dd19      	ble.n	8010b52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010b1e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dd15      	ble.n	8010b52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010b26:	4b0c      	ldr	r3, [pc, #48]	; (8010b58 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010b2e:	b10a      	cbz	r2, 8010b34 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8010b30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010b32:	b900      	cbnz	r0, 8010b36 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010b34:	6898      	ldr	r0, [r3, #8]
 8010b36:	2701      	movs	r7, #1
 8010b38:	6801      	ldr	r1, [r0, #0]
 8010b3a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010b3e:	9702      	str	r7, [sp, #8]
 8010b40:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8010b44:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010b48:	e9cd 5600 	strd	r5, r6, [sp]
 8010b4c:	688d      	ldr	r5, [r1, #8]
 8010b4e:	4621      	mov	r1, r4
 8010b50:	47a8      	blx	r5
 8010b52:	b008      	add	sp, #32
 8010b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b58:	2400e9f0 	.word	0x2400e9f0

08010b5c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8010b5c:	4770      	bx	lr

08010b5e <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010b5e:	b510      	push	{r4, lr}
 8010b60:	4604      	mov	r4, r0
 8010b62:	2148      	movs	r1, #72	; 0x48
 8010b64:	f00e fe01 	bl	801f76a <_ZdlPvj>
 8010b68:	4620      	mov	r0, r4
 8010b6a:	bd10      	pop	{r4, pc}

08010b6c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8010b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b70:	4604      	mov	r4, r0
 8010b72:	b08c      	sub	sp, #48	; 0x30
 8010b74:	4688      	mov	r8, r1
 8010b76:	f7ff fdef 	bl	8010758 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8010b7a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b80:	4293      	cmp	r3, r2
 8010b82:	f000 809a 	beq.w	8010cba <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8010b86:	4e55      	ldr	r6, [pc, #340]	; (8010cdc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8010b88:	6832      	ldr	r2, [r6, #0]
 8010b8a:	b92a      	cbnz	r2, 8010b98 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8010b8c:	4b54      	ldr	r3, [pc, #336]	; (8010ce0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8010b8e:	21ae      	movs	r1, #174	; 0xae
 8010b90:	4a54      	ldr	r2, [pc, #336]	; (8010ce4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8010b92:	4855      	ldr	r0, [pc, #340]	; (8010ce8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8010b94:	f00e fe18 	bl	801f7c8 <__assert_func>
 8010b98:	4d54      	ldr	r5, [pc, #336]	; (8010cec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8010b9a:	8829      	ldrh	r1, [r5, #0]
 8010b9c:	4299      	cmp	r1, r3
 8010b9e:	d803      	bhi.n	8010ba8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8010ba0:	4b53      	ldr	r3, [pc, #332]	; (8010cf0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 8010ba2:	21af      	movs	r1, #175	; 0xaf
 8010ba4:	4a4f      	ldr	r2, [pc, #316]	; (8010ce4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8010ba6:	e7f4      	b.n	8010b92 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8010ba8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010bac:	f04f 0c02 	mov.w	ip, #2
 8010bb0:	4b50      	ldr	r3, [pc, #320]	; (8010cf4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 8010bb2:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010bbc:	f1be 0f01 	cmp.w	lr, #1
 8010bc0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8010bc4:	f04f 0300 	mov.w	r3, #0
 8010bc8:	b208      	sxth	r0, r1
 8010bca:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8010bce:	9303      	str	r3, [sp, #12]
 8010bd0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8010bd4:	d074      	beq.n	8010cc0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8010bd6:	f1be 0f03 	cmp.w	lr, #3
 8010bda:	d071      	beq.n	8010cc0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8010bdc:	1a52      	subs	r2, r2, r1
 8010bde:	f8ad 3010 	strh.w	r3, [sp, #16]
 8010be2:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010be6:	fb92 f2fc 	sdiv	r2, r2, ip
 8010bea:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010bee:	f10d 090c 	add.w	r9, sp, #12
 8010bf2:	f10d 0a14 	add.w	sl, sp, #20
 8010bf6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010bfa:	e88a 0003 	stmia.w	sl, {r0, r1}
 8010bfe:	4641      	mov	r1, r8
 8010c00:	4650      	mov	r0, sl
 8010c02:	f7fd f871 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8010c06:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dd55      	ble.n	8010cba <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8010c0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	dd51      	ble.n	8010cba <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8010c16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010c20:	4620      	mov	r0, r4
 8010c22:	1a9b      	subs	r3, r3, r2
 8010c24:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010c28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010c30:	1a9b      	subs	r3, r3, r2
 8010c32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3a:	4798      	blx	r3
 8010c3c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d047      	beq.n	8010cd4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 8010c44:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8010c48:	6833      	ldr	r3, [r6, #0]
 8010c4a:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d09c      	beq.n	8010b8c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8010c52:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8010c54:	882d      	ldrh	r5, [r5, #0]
 8010c56:	428d      	cmp	r5, r1
 8010c58:	d9a2      	bls.n	8010ba0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8010c5a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010c5e:	6812      	ldr	r2, [r2, #0]
 8010c60:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8010c64:	785b      	ldrb	r3, [r3, #1]
 8010c66:	9209      	str	r2, [sp, #36]	; 0x24
 8010c68:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8010c6c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010c70:	9707      	str	r7, [sp, #28]
 8010c72:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8010c76:	2300      	movs	r3, #0
 8010c78:	f88d 5020 	strb.w	r5, [sp, #32]
 8010c7c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010c80:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8010c84:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010c88:	4b1b      	ldr	r3, [pc, #108]	; (8010cf8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8010c8a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010c94:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010c98:	b10a      	cbz	r2, 8010c9e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8010c9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c9c:	b904      	cbnz	r4, 8010ca0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 8010c9e:	689c      	ldr	r4, [r3, #8]
 8010ca0:	4b16      	ldr	r3, [pc, #88]	; (8010cfc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 8010ca2:	6818      	ldr	r0, [r3, #0]
 8010ca4:	f7f2 ffda 	bl	8003c5c <_ZNK8touchgfx5Texts7getTextEt>
 8010ca8:	ab07      	add	r3, sp, #28
 8010caa:	9001      	str	r0, [sp, #4]
 8010cac:	4620      	mov	r0, r4
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	4653      	mov	r3, sl
 8010cb2:	e899 0006 	ldmia.w	r9, {r1, r2}
 8010cb6:	f7f2 ff83 	bl	8003bc0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8010cba:	b00c      	add	sp, #48	; 0x30
 8010cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc0:	1a5b      	subs	r3, r3, r1
 8010cc2:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010cc6:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010cca:	fb93 f3fc 	sdiv	r3, r3, ip
 8010cce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010cd2:	e78c      	b.n	8010bee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 8010cd4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8010cd8:	e7b6      	b.n	8010c48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 8010cda:	bf00      	nop
 8010cdc:	2400ea60 	.word	0x2400ea60
 8010ce0:	08021837 	.word	0x08021837
 8010ce4:	080234bc 	.word	0x080234bc
 8010ce8:	080218d3 	.word	0x080218d3
 8010cec:	2400ea64 	.word	0x2400ea64
 8010cf0:	080218fc 	.word	0x080218fc
 8010cf4:	2400ea68 	.word	0x2400ea68
 8010cf8:	2400e9f0 	.word	0x2400e9f0
 8010cfc:	2400ea6c 	.word	0x2400ea6c

08010d00 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8010d00:	2101      	movs	r1, #1
 8010d02:	2200      	movs	r2, #0
 8010d04:	b510      	push	{r4, lr}
 8010d06:	4c13      	ldr	r4, [pc, #76]	; (8010d54 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8010d08:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8010d0c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8010d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d14:	6004      	str	r4, [r0, #0]
 8010d16:	4c10      	ldr	r4, [pc, #64]	; (8010d58 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8010d18:	8082      	strh	r2, [r0, #4]
 8010d1a:	80c2      	strh	r2, [r0, #6]
 8010d1c:	8102      	strh	r2, [r0, #8]
 8010d1e:	8142      	strh	r2, [r0, #10]
 8010d20:	8182      	strh	r2, [r0, #12]
 8010d22:	81c2      	strh	r2, [r0, #14]
 8010d24:	8202      	strh	r2, [r0, #16]
 8010d26:	8242      	strh	r2, [r0, #18]
 8010d28:	61c2      	str	r2, [r0, #28]
 8010d2a:	8402      	strh	r2, [r0, #32]
 8010d2c:	8442      	strh	r2, [r0, #34]	; 0x22
 8010d2e:	6282      	str	r2, [r0, #40]	; 0x28
 8010d30:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8010d34:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8010d36:	8601      	strh	r1, [r0, #48]	; 0x30
 8010d38:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8010d3c:	6344      	str	r4, [r0, #52]	; 0x34
 8010d3e:	8701      	strh	r1, [r0, #56]	; 0x38
 8010d40:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8010d44:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8010d48:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010d4c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	bf00      	nop
 8010d54:	08023454 	.word	0x08023454
 8010d58:	08021328 	.word	0x08021328

08010d5c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8010d5c:	4b02      	ldr	r3, [pc, #8]	; (8010d68 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8010d5e:	6018      	str	r0, [r3, #0]
 8010d60:	4b02      	ldr	r3, [pc, #8]	; (8010d6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8010d62:	6019      	str	r1, [r3, #0]
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	2400e9f8 	.word	0x2400e9f8
 8010d6c:	2400ea0c 	.word	0x2400ea0c

08010d70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4c2b      	ldr	r4, [pc, #172]	; (8010e20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8010d74:	4b2b      	ldr	r3, [pc, #172]	; (8010e24 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8010d76:	6821      	ldr	r1, [r4, #0]
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	4281      	cmp	r1, r0
 8010d7c:	4d2a      	ldr	r5, [pc, #168]	; (8010e28 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8010d7e:	492b      	ldr	r1, [pc, #172]	; (8010e2c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8010d80:	d108      	bne.n	8010d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8010d82:	682b      	ldr	r3, [r5, #0]
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d105      	bne.n	8010d94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8010d88:	6808      	ldr	r0, [r1, #0]
 8010d8a:	280f      	cmp	r0, #15
 8010d8c:	bf94      	ite	ls
 8010d8e:	2000      	movls	r0, #0
 8010d90:	2001      	movhi	r0, #1
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	4b26      	ldr	r3, [pc, #152]	; (8010e30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8010d96:	6020      	str	r0, [r4, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	602a      	str	r2, [r5, #0]
 8010d9c:	4298      	cmp	r0, r3
 8010d9e:	d905      	bls.n	8010dac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8010da0:	4b24      	ldr	r3, [pc, #144]	; (8010e34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010da2:	2137      	movs	r1, #55	; 0x37
 8010da4:	4a24      	ldr	r2, [pc, #144]	; (8010e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010da6:	4825      	ldr	r0, [pc, #148]	; (8010e3c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8010da8:	f00e fd0e 	bl	801f7c8 <__assert_func>
 8010dac:	f010 0403 	ands.w	r4, r0, #3
 8010db0:	bf1f      	itttt	ne
 8010db2:	f1c4 0504 	rsbne	r5, r4, #4
 8010db6:	3b04      	subne	r3, #4
 8010db8:	1952      	addne	r2, r2, r5
 8010dba:	191b      	addne	r3, r3, r4
 8010dbc:	4d20      	ldr	r5, [pc, #128]	; (8010e40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8010dbe:	4402      	add	r2, r0
 8010dc0:	1a1b      	subs	r3, r3, r0
 8010dc2:	3001      	adds	r0, #1
 8010dc4:	602a      	str	r2, [r5, #0]
 8010dc6:	f020 0401 	bic.w	r4, r0, #1
 8010dca:	42a3      	cmp	r3, r4
 8010dcc:	d203      	bcs.n	8010dd6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8010dce:	4b19      	ldr	r3, [pc, #100]	; (8010e34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010dd0:	214a      	movs	r1, #74	; 0x4a
 8010dd2:	4a19      	ldr	r2, [pc, #100]	; (8010e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010dd4:	e7e7      	b.n	8010da6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8010dd6:	f010 0002 	ands.w	r0, r0, #2
 8010dda:	bf1f      	itttt	ne
 8010ddc:	f1c0 0504 	rsbne	r5, r0, #4
 8010de0:	1952      	addne	r2, r2, r5
 8010de2:	1f05      	subne	r5, r0, #4
 8010de4:	195b      	addne	r3, r3, r5
 8010de6:	4422      	add	r2, r4
 8010de8:	4d16      	ldr	r5, [pc, #88]	; (8010e44 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8010dea:	1b1b      	subs	r3, r3, r4
 8010dec:	602a      	str	r2, [r5, #0]
 8010dee:	429c      	cmp	r4, r3
 8010df0:	d903      	bls.n	8010dfa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8010df2:	4b10      	ldr	r3, [pc, #64]	; (8010e34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010df4:	215d      	movs	r1, #93	; 0x5d
 8010df6:	4a10      	ldr	r2, [pc, #64]	; (8010e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010df8:	e7d5      	b.n	8010da6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8010dfa:	b120      	cbz	r0, 8010e06 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8010dfc:	f1c0 0504 	rsb	r5, r0, #4
 8010e00:	3804      	subs	r0, #4
 8010e02:	442a      	add	r2, r5
 8010e04:	4403      	add	r3, r0
 8010e06:	1b1b      	subs	r3, r3, r4
 8010e08:	4422      	add	r2, r4
 8010e0a:	480f      	ldr	r0, [pc, #60]	; (8010e48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8010e0c:	2b0f      	cmp	r3, #15
 8010e0e:	600b      	str	r3, [r1, #0]
 8010e10:	6002      	str	r2, [r0, #0]
 8010e12:	d803      	bhi.n	8010e1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8010e14:	4b0d      	ldr	r3, [pc, #52]	; (8010e4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8010e16:	2170      	movs	r1, #112	; 0x70
 8010e18:	4a07      	ldr	r2, [pc, #28]	; (8010e38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010e1a:	e7c4      	b.n	8010da6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8010e1c:	2001      	movs	r0, #1
 8010e1e:	e7b8      	b.n	8010d92 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8010e20:	2400ea00 	.word	0x2400ea00
 8010e24:	2400e9f8 	.word	0x2400e9f8
 8010e28:	2400ea08 	.word	0x2400ea08
 8010e2c:	2400ea10 	.word	0x2400ea10
 8010e30:	2400ea0c 	.word	0x2400ea0c
 8010e34:	080234ea 	.word	0x080234ea
 8010e38:	080235b2 	.word	0x080235b2
 8010e3c:	08023523 	.word	0x08023523
 8010e40:	2400ea14 	.word	0x2400ea14
 8010e44:	2400ea04 	.word	0x2400ea04
 8010e48:	2400e9fc 	.word	0x2400e9fc
 8010e4c:	0802356d 	.word	0x0802356d

08010e50 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8010e50:	4b04      	ldr	r3, [pc, #16]	; (8010e64 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8010e52:	6818      	ldr	r0, [r3, #0]
 8010e54:	b120      	cbz	r0, 8010e60 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8010e56:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8010e58:	6818      	ldr	r0, [r3, #0]
 8010e5a:	3000      	adds	r0, #0
 8010e5c:	bf18      	it	ne
 8010e5e:	2001      	movne	r0, #1
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop
 8010e64:	2400e9f8 	.word	0x2400e9f8
 8010e68:	2400ea0c 	.word	0x2400ea0c

08010e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8010e6c:	4b01      	ldr	r3, [pc, #4]	; (8010e74 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8010e6e:	6818      	ldr	r0, [r3, #0]
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	2400ea00 	.word	0x2400ea00

08010e78 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8010e78:	4b01      	ldr	r3, [pc, #4]	; (8010e80 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8010e7a:	6818      	ldr	r0, [r3, #0]
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	2400ea08 	.word	0x2400ea08

08010e84 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8010e84:	4b01      	ldr	r3, [pc, #4]	; (8010e8c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8010e86:	6818      	ldr	r0, [r3, #0]
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	2400ea14 	.word	0x2400ea14

08010e90 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8010e90:	4b01      	ldr	r3, [pc, #4]	; (8010e98 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	2400ea04 	.word	0x2400ea04

08010e9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010e9c:	4b01      	ldr	r3, [pc, #4]	; (8010ea4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	2400e9fc 	.word	0x2400e9fc

08010ea8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010ea8:	4b01      	ldr	r3, [pc, #4]	; (8010eb0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010eaa:	6818      	ldr	r0, [r3, #0]
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	2400ea10 	.word	0x2400ea10

08010eb4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	6803      	ldr	r3, [r0, #0]
 8010eb8:	460c      	mov	r4, r1
 8010eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ebc:	4798      	blx	r3
 8010ebe:	1b03      	subs	r3, r0, r4
 8010ec0:	4258      	negs	r0, r3
 8010ec2:	4158      	adcs	r0, r3
 8010ec4:	bd10      	pop	{r4, pc}
	...

08010ec8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010ec8:	4b01      	ldr	r3, [pc, #4]	; (8010ed0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010eca:	6019      	str	r1, [r3, #0]
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	2400ea18 	.word	0x2400ea18

08010ed4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed8:	4696      	mov	lr, r2
 8010eda:	b097      	sub	sp, #92	; 0x5c
 8010edc:	4605      	mov	r5, r0
 8010ede:	4614      	mov	r4, r2
 8010ee0:	460e      	mov	r6, r1
 8010ee2:	461f      	mov	r7, r3
 8010ee4:	f10d 0c1c 	add.w	ip, sp, #28
 8010ee8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010eec:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8010ef0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010efc:	f8de 3000 	ldr.w	r3, [lr]
 8010f00:	f104 0e14 	add.w	lr, r4, #20
 8010f04:	f8cc 3000 	str.w	r3, [ip]
 8010f08:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010f0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f14:	f8de 3000 	ldr.w	r3, [lr]
 8010f18:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010f1c:	f8cc 3000 	str.w	r3, [ip]
 8010f20:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010f24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f2c:	f8de 3000 	ldr.w	r3, [lr]
 8010f30:	4631      	mov	r1, r6
 8010f32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010f34:	4628      	mov	r0, r5
 8010f36:	f8cc 3000 	str.w	r3, [ip]
 8010f3a:	682b      	ldr	r3, [r5, #0]
 8010f3c:	9201      	str	r2, [sp, #4]
 8010f3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010f40:	f8cd 8008 	str.w	r8, [sp, #8]
 8010f44:	9200      	str	r2, [sp, #0]
 8010f46:	aa07      	add	r2, sp, #28
 8010f48:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010f4c:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8010f50:	463b      	mov	r3, r7
 8010f52:	47d8      	blx	fp
 8010f54:	46a6      	mov	lr, r4
 8010f56:	f10d 0c1c 	add.w	ip, sp, #28
 8010f5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f62:	f8de 3000 	ldr.w	r3, [lr]
 8010f66:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010f6a:	343c      	adds	r4, #60	; 0x3c
 8010f6c:	f8cc 3000 	str.w	r3, [ip]
 8010f70:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f7c:	f8de 3000 	ldr.w	r3, [lr]
 8010f80:	f8cc 3000 	str.w	r3, [ip]
 8010f84:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	4631      	mov	r1, r6
 8010f92:	4628      	mov	r0, r5
 8010f94:	f8cc 3000 	str.w	r3, [ip]
 8010f98:	682b      	ldr	r3, [r5, #0]
 8010f9a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010f9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010fa0:	f8cd 8008 	str.w	r8, [sp, #8]
 8010fa4:	9201      	str	r2, [sp, #4]
 8010fa6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010fa8:	9200      	str	r2, [sp, #0]
 8010faa:	aa07      	add	r2, sp, #28
 8010fac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8010fae:	463b      	mov	r3, r7
 8010fb0:	47a0      	blx	r4
 8010fb2:	b017      	add	sp, #92	; 0x5c
 8010fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	b08d      	sub	sp, #52	; 0x34
 8010fbe:	4688      	mov	r8, r1
 8010fc0:	f8d3 c000 	ldr.w	ip, [r3]
 8010fc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010fc6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010fca:	680f      	ldr	r7, [r1, #0]
 8010fcc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010fd0:	eba7 070c 	sub.w	r7, r7, ip
 8010fd4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010fd8:	edd3 6a07 	vldr	s13, [r3, #28]
 8010fdc:	42bc      	cmp	r4, r7
 8010fde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010fe0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8010fe4:	bfa8      	it	ge
 8010fe6:	463c      	movge	r4, r7
 8010fe8:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010fec:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010ff0:	ee07 4a90 	vmov	s15, r4
 8010ff4:	eb09 0e0c 	add.w	lr, r9, ip
 8010ff8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010ffc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011000:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011004:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8011008:	4571      	cmp	r1, lr
 801100a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801100e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011012:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011016:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801101a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801101e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011022:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011026:	ee36 0a84 	vadd.f32	s0, s13, s8
 801102a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801102e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011032:	f340 808c 	ble.w	801114e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011036:	eba1 060e 	sub.w	r6, r1, lr
 801103a:	fb96 f5f4 	sdiv	r5, r6, r4
 801103e:	ee07 5a10 	vmov	s14, r5
 8011042:	2d00      	cmp	r5, #0
 8011044:	fb04 6615 	mls	r6, r4, r5, r6
 8011048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801104c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011050:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011054:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011058:	dd12      	ble.n	8011080 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801105a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801105e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011062:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011066:	eef5 6a40 	vcmp.f32	s13, #0.0
 801106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106e:	bf14      	ite	ne
 8011070:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011074:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011078:	ee61 1a87 	vmul.f32	s3, s3, s14
 801107c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011080:	fb05 f204 	mul.w	r2, r5, r4
 8011084:	1abf      	subs	r7, r7, r2
 8011086:	4494      	add	ip, r2
 8011088:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801108c:	4411      	add	r1, r2
 801108e:	eb09 020c 	add.w	r2, r9, ip
 8011092:	b209      	sxth	r1, r1
 8011094:	443a      	add	r2, r7
 8011096:	428a      	cmp	r2, r1
 8011098:	bfc4      	itt	gt
 801109a:	eba1 0209 	subgt.w	r2, r1, r9
 801109e:	eba2 070c 	subgt.w	r7, r2, ip
 80110a2:	2f00      	cmp	r7, #0
 80110a4:	dd50      	ble.n	8011148 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80110a6:	fb97 f1f4 	sdiv	r1, r7, r4
 80110aa:	fb04 7211 	mls	r2, r4, r1, r7
 80110ae:	b90a      	cbnz	r2, 80110b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80110b0:	3901      	subs	r1, #1
 80110b2:	4622      	mov	r2, r4
 80110b4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80110b8:	6840      	ldr	r0, [r0, #4]
 80110ba:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80110be:	44b6      	add	lr, r6
 80110c0:	f8d0 a000 	ldr.w	sl, [r0]
 80110c4:	2900      	cmp	r1, #0
 80110c6:	bfcc      	ite	gt
 80110c8:	46a1      	movgt	r9, r4
 80110ca:	4691      	movle	r9, r2
 80110cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80110ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80110d0:	fb04 e505 	mla	r5, r4, r5, lr
 80110d4:	eef0 6a42 	vmov.f32	s13, s4
 80110d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80110dc:	9008      	str	r0, [sp, #32]
 80110de:	eeb0 7a61 	vmov.f32	s14, s3
 80110e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80110e4:	695b      	ldr	r3, [r3, #20]
 80110e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80110ea:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80110ee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80110f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80110f4:	445b      	add	r3, fp
 80110f6:	9307      	str	r3, [sp, #28]
 80110f8:	ee16 3a90 	vmov	r3, s13
 80110fc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011100:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011104:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011108:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801110c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011110:	ee17 7a90 	vmov	r7, s15
 8011114:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011118:	fb97 f7f4 	sdiv	r7, r7, r4
 801111c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011120:	ee17 ca90 	vmov	ip, s15
 8011124:	fb9c fcf4 	sdiv	ip, ip, r4
 8011128:	fb0c 3306 	mla	r3, ip, r6, r3
 801112c:	9302      	str	r3, [sp, #8]
 801112e:	ee17 3a10 	vmov	r3, s14
 8011132:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011136:	fb07 3706 	mla	r7, r7, r6, r3
 801113a:	eba9 0306 	sub.w	r3, r9, r6
 801113e:	e9cd 4700 	strd	r4, r7, [sp]
 8011142:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011146:	47a0      	blx	r4
 8011148:	b00d      	add	sp, #52	; 0x34
 801114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114e:	2500      	movs	r5, #0
 8011150:	462e      	mov	r6, r5
 8011152:	e799      	b.n	8011088 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	b0db      	sub	sp, #364	; 0x16c
 801115a:	461d      	mov	r5, r3
 801115c:	4614      	mov	r4, r2
 801115e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011162:	910f      	str	r1, [sp, #60]	; 0x3c
 8011164:	4629      	mov	r1, r5
 8011166:	930a      	str	r3, [sp, #40]	; 0x28
 8011168:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801116c:	9009      	str	r0, [sp, #36]	; 0x24
 801116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011170:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011174:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011178:	9310      	str	r3, [sp, #64]	; 0x40
 801117a:	6803      	ldr	r3, [r0, #0]
 801117c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801117e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011182:	47b8      	blx	r7
 8011184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011186:	6058      	str	r0, [r3, #4]
 8011188:	2800      	cmp	r0, #0
 801118a:	f000 83a1 	beq.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801118e:	682b      	ldr	r3, [r5, #0]
 8011190:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8011194:	ed94 7a02 	vldr	s14, [r4, #8]
 8011198:	9314      	str	r3, [sp, #80]	; 0x50
 801119a:	686b      	ldr	r3, [r5, #4]
 801119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111a0:	9315      	str	r3, [sp, #84]	; 0x54
 80111a2:	4bc1      	ldr	r3, [pc, #772]	; (80114a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80111a4:	7819      	ldrb	r1, [r3, #0]
 80111a6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80111aa:	2900      	cmp	r1, #0
 80111ac:	bf16      	itet	ne
 80111ae:	4619      	movne	r1, r3
 80111b0:	4611      	moveq	r1, r2
 80111b2:	4613      	movne	r3, r2
 80111b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b8:	9116      	str	r1, [sp, #88]	; 0x58
 80111ba:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80111be:	f240 8387 	bls.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80111c2:	ed94 7a07 	vldr	s14, [r4, #28]
 80111c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	f240 837f 	bls.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80111d2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80111d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111de:	f240 8377 	bls.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80111e2:	6822      	ldr	r2, [r4, #0]
 80111e4:	4bb1      	ldr	r3, [pc, #708]	; (80114ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80111e6:	429a      	cmp	r2, r3
 80111e8:	f2c0 8372 	blt.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80111ec:	49b0      	ldr	r1, [pc, #704]	; (80114b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80111ee:	6963      	ldr	r3, [r4, #20]
 80111f0:	428a      	cmp	r2, r1
 80111f2:	f300 836d 	bgt.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80111f6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80111fa:	48ae      	ldr	r0, [pc, #696]	; (80114b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80111fc:	33ff      	adds	r3, #255	; 0xff
 80111fe:	4283      	cmp	r3, r0
 8011200:	f200 8366 	bhi.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011206:	4dac      	ldr	r5, [pc, #688]	; (80114b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011208:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801120c:	33ff      	adds	r3, #255	; 0xff
 801120e:	42ab      	cmp	r3, r5
 8011210:	f200 835e 	bhi.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011214:	6862      	ldr	r2, [r4, #4]
 8011216:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801121a:	33ff      	adds	r3, #255	; 0xff
 801121c:	4283      	cmp	r3, r0
 801121e:	f200 8357 	bhi.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011222:	69a1      	ldr	r1, [r4, #24]
 8011224:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8011228:	33ff      	adds	r3, #255	; 0xff
 801122a:	4283      	cmp	r3, r0
 801122c:	f200 8350 	bhi.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011232:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8011236:	30ff      	adds	r0, #255	; 0xff
 8011238:	42a8      	cmp	r0, r5
 801123a:	f200 8349 	bhi.w	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801123e:	428a      	cmp	r2, r1
 8011240:	f280 8110 	bge.w	8011464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011244:	429a      	cmp	r2, r3
 8011246:	f300 8119 	bgt.w	801147c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801124a:	4299      	cmp	r1, r3
 801124c:	f280 811d 	bge.w	801148a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011250:	2502      	movs	r5, #2
 8011252:	2701      	movs	r7, #1
 8011254:	46a9      	mov	r9, r5
 8011256:	46b8      	mov	r8, r7
 8011258:	f04f 0a00 	mov.w	sl, #0
 801125c:	4621      	mov	r1, r4
 801125e:	a849      	add	r0, sp, #292	; 0x124
 8011260:	f003 fd76 	bl	8014d50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011264:	4622      	mov	r2, r4
 8011266:	4653      	mov	r3, sl
 8011268:	a949      	add	r1, sp, #292	; 0x124
 801126a:	f8cd 9000 	str.w	r9, [sp]
 801126e:	a819      	add	r0, sp, #100	; 0x64
 8011270:	f003 fe9e 	bl	8014fb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011274:	4622      	mov	r2, r4
 8011276:	4653      	mov	r3, sl
 8011278:	a949      	add	r1, sp, #292	; 0x124
 801127a:	f8cd 8000 	str.w	r8, [sp]
 801127e:	a829      	add	r0, sp, #164	; 0xa4
 8011280:	f003 fe96 	bl	8014fb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011284:	4643      	mov	r3, r8
 8011286:	4622      	mov	r2, r4
 8011288:	a949      	add	r1, sp, #292	; 0x124
 801128a:	f8cd 9000 	str.w	r9, [sp]
 801128e:	a839      	add	r0, sp, #228	; 0xe4
 8011290:	f003 fe8e 	bl	8014fb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011294:	42af      	cmp	r7, r5
 8011296:	af12      	add	r7, sp, #72	; 0x48
 8011298:	bfb7      	itett	lt
 801129a:	2300      	movlt	r3, #0
 801129c:	2301      	movge	r3, #1
 801129e:	ad29      	addlt	r5, sp, #164	; 0xa4
 80112a0:	ac19      	addlt	r4, sp, #100	; 0x64
 80112a2:	bfb1      	iteee	lt
 80112a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80112a6:	ad19      	addge	r5, sp, #100	; 0x64
 80112a8:	930e      	strge	r3, [sp, #56]	; 0x38
 80112aa:	ac29      	addge	r4, sp, #164	; 0xa4
 80112ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80112b6:	b928      	cbnz	r0, 80112c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80112b8:	4b80      	ldr	r3, [pc, #512]	; (80114bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80112ba:	6818      	ldr	r0, [r3, #0]
 80112bc:	6803      	ldr	r3, [r0, #0]
 80112be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c0:	4798      	blx	r3
 80112c2:	6038      	str	r0, [r7, #0]
 80112c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80112c6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80112ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80112d0:	930c      	str	r3, [sp, #48]	; 0x30
 80112d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80112d4:	6963      	ldr	r3, [r4, #20]
 80112d6:	440b      	add	r3, r1
 80112d8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80112dc:	4408      	add	r0, r1
 80112de:	b200      	sxth	r0, r0
 80112e0:	4283      	cmp	r3, r0
 80112e2:	900d      	str	r0, [sp, #52]	; 0x34
 80112e4:	f280 80dd 	bge.w	80114a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80112e8:	428b      	cmp	r3, r1
 80112ea:	da08      	bge.n	80112fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	dd06      	ble.n	80112fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80112f0:	1acb      	subs	r3, r1, r3
 80112f2:	429a      	cmp	r2, r3
 80112f4:	f2c0 80e4 	blt.w	80114c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f300 80e2 	bgt.w	80114c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80112fe:	6967      	ldr	r7, [r4, #20]
 8011300:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011306:	443b      	add	r3, r7
 8011308:	461f      	mov	r7, r3
 801130a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801130c:	1bdf      	subs	r7, r3, r7
 801130e:	4297      	cmp	r7, r2
 8011310:	bfa8      	it	ge
 8011312:	4617      	movge	r7, r2
 8011314:	2f00      	cmp	r7, #0
 8011316:	f340 8166 	ble.w	80115e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801131a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801131c:	6829      	ldr	r1, [r5, #0]
 801131e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011322:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011326:	4411      	add	r1, r2
 8011328:	6820      	ldr	r0, [r4, #0]
 801132a:	4299      	cmp	r1, r3
 801132c:	dd1a      	ble.n	8011364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801132e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011332:	4402      	add	r2, r0
 8011334:	440b      	add	r3, r1
 8011336:	b21b      	sxth	r3, r3
 8011338:	429a      	cmp	r2, r3
 801133a:	dc13      	bgt.n	8011364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801133c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801133e:	a912      	add	r1, sp, #72	; 0x48
 8011340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011342:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	9206      	str	r2, [sp, #24]
 8011348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801134a:	9500      	str	r5, [sp, #0]
 801134c:	9205      	str	r2, [sp, #20]
 801134e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011350:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011354:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011356:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801135a:	aa49      	add	r2, sp, #292	; 0x124
 801135c:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8011360:	4623      	mov	r3, r4
 8011362:	47c8      	blx	r9
 8011364:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011368:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801136c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011374:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011378:	68a1      	ldr	r1, [r4, #8]
 801137a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801137e:	ed94 6a08 	vldr	s12, [r4, #32]
 8011382:	edd4 6a07 	vldr	s13, [r4, #28]
 8011386:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801138a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801138e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011392:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011396:	edc4 6a07 	vstr	s13, [r4, #28]
 801139a:	441a      	add	r2, r3
 801139c:	6963      	ldr	r3, [r4, #20]
 801139e:	3301      	adds	r3, #1
 80113a0:	6022      	str	r2, [r4, #0]
 80113a2:	6163      	str	r3, [r4, #20]
 80113a4:	69a3      	ldr	r3, [r4, #24]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	61a3      	str	r3, [r4, #24]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	440b      	add	r3, r1
 80113ae:	68e1      	ldr	r1, [r4, #12]
 80113b0:	428b      	cmp	r3, r1
 80113b2:	6123      	str	r3, [r4, #16]
 80113b4:	db15      	blt.n	80113e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80113b6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80113ba:	3201      	adds	r2, #1
 80113bc:	1a5b      	subs	r3, r3, r1
 80113be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80113c2:	6022      	str	r2, [r4, #0]
 80113c4:	6123      	str	r3, [r4, #16]
 80113c6:	edc4 6a07 	vstr	s13, [r4, #28]
 80113ca:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80113ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80113d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80113d6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80113da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113de:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80113e2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80113e6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80113ea:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80113ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113f2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80113f6:	68a9      	ldr	r1, [r5, #8]
 80113f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113fc:	ed95 6a08 	vldr	s12, [r5, #32]
 8011400:	edd5 6a07 	vldr	s13, [r5, #28]
 8011404:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011408:	ee76 6a86 	vadd.f32	s13, s13, s12
 801140c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011410:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011414:	edc5 6a07 	vstr	s13, [r5, #28]
 8011418:	441a      	add	r2, r3
 801141a:	696b      	ldr	r3, [r5, #20]
 801141c:	3301      	adds	r3, #1
 801141e:	602a      	str	r2, [r5, #0]
 8011420:	616b      	str	r3, [r5, #20]
 8011422:	69ab      	ldr	r3, [r5, #24]
 8011424:	3b01      	subs	r3, #1
 8011426:	61ab      	str	r3, [r5, #24]
 8011428:	692b      	ldr	r3, [r5, #16]
 801142a:	440b      	add	r3, r1
 801142c:	68e9      	ldr	r1, [r5, #12]
 801142e:	428b      	cmp	r3, r1
 8011430:	612b      	str	r3, [r5, #16]
 8011432:	db15      	blt.n	8011460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011434:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011438:	3201      	adds	r2, #1
 801143a:	1a5b      	subs	r3, r3, r1
 801143c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011440:	602a      	str	r2, [r5, #0]
 8011442:	612b      	str	r3, [r5, #16]
 8011444:	edc5 6a07 	vstr	s13, [r5, #28]
 8011448:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801144c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011450:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011454:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011458:	ee77 7a27 	vadd.f32	s15, s14, s15
 801145c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011460:	3f01      	subs	r7, #1
 8011462:	e757      	b.n	8011314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011464:	4299      	cmp	r1, r3
 8011466:	dc13      	bgt.n	8011490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011468:	429a      	cmp	r2, r3
 801146a:	da14      	bge.n	8011496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801146c:	2502      	movs	r5, #2
 801146e:	2703      	movs	r7, #3
 8011470:	f04f 0800 	mov.w	r8, #0
 8011474:	46a9      	mov	r9, r5
 8011476:	f04f 0a01 	mov.w	sl, #1
 801147a:	e6ef      	b.n	801125c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801147c:	2501      	movs	r5, #1
 801147e:	2700      	movs	r7, #0
 8011480:	46a9      	mov	r9, r5
 8011482:	46b8      	mov	r8, r7
 8011484:	f04f 0a02 	mov.w	sl, #2
 8011488:	e6e8      	b.n	801125c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801148a:	2501      	movs	r5, #1
 801148c:	2702      	movs	r7, #2
 801148e:	e6e1      	b.n	8011254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011490:	2500      	movs	r5, #0
 8011492:	2701      	movs	r7, #1
 8011494:	e7f4      	b.n	8011480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011496:	2702      	movs	r7, #2
 8011498:	2503      	movs	r5, #3
 801149a:	f04f 0900 	mov.w	r9, #0
 801149e:	46b8      	mov	r8, r7
 80114a0:	e7e9      	b.n	8011476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80114a2:	4613      	mov	r3, r2
 80114a4:	e728      	b.n	80112f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80114a6:	bf00      	nop
 80114a8:	2400e9e8 	.word	0x2400e9e8
 80114ac:	fffd8f01 	.word	0xfffd8f01
 80114b0:	00027100 	.word	0x00027100
 80114b4:	0004e1ff 	.word	0x0004e1ff
 80114b8:	0004e1fe 	.word	0x0004e1fe
 80114bc:	2400e9f0 	.word	0x2400e9f0
 80114c0:	4613      	mov	r3, r2
 80114c2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80114c4:	469e      	mov	lr, r3
 80114c6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80114c8:	469c      	mov	ip, r3
 80114ca:	9111      	str	r1, [sp, #68]	; 0x44
 80114cc:	f04f 0900 	mov.w	r9, #0
 80114d0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80114d4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80114d8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80114dc:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80114e0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80114e4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80114e8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80114ec:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80114f0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80114f4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80114f8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80114fc:	f1bc 0f00 	cmp.w	ip, #0
 8011500:	d147      	bne.n	8011592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011502:	eb03 0c07 	add.w	ip, r3, r7
 8011506:	1ad7      	subs	r7, r2, r3
 8011508:	f1b9 0f00 	cmp.w	r9, #0
 801150c:	d009      	beq.n	8011522 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801150e:	9029      	str	r0, [sp, #164]	; 0xa4
 8011510:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8011514:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8011518:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801151c:	912d      	str	r1, [sp, #180]	; 0xb4
 801151e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8011522:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011524:	f04f 0800 	mov.w	r8, #0
 8011528:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801152c:	9111      	str	r1, [sp, #68]	; 0x44
 801152e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011532:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011536:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801153a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801153e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011542:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011546:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801154a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801154e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011552:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011556:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801155a:	f1be 0f00 	cmp.w	lr, #0
 801155e:	d031      	beq.n	80115c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011560:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011562:	4450      	add	r0, sl
 8011564:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011568:	4431      	add	r1, r6
 801156a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801156e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011572:	4549      	cmp	r1, r9
 8011574:	db08      	blt.n	8011588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011576:	ee77 7a85 	vadd.f32	s15, s15, s10
 801157a:	3001      	adds	r0, #1
 801157c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011580:	eba1 0109 	sub.w	r1, r1, r9
 8011584:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011588:	f10e 3eff 	add.w	lr, lr, #4294967295
 801158c:	f04f 0801 	mov.w	r8, #1
 8011590:	e7e3      	b.n	801155a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011592:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011594:	4450      	add	r0, sl
 8011596:	ee37 7a24 	vadd.f32	s14, s14, s9
 801159a:	4431      	add	r1, r6
 801159c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80115a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80115a4:	4541      	cmp	r1, r8
 80115a6:	db08      	blt.n	80115ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80115a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80115ac:	3001      	adds	r0, #1
 80115ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80115b2:	eba1 0108 	sub.w	r1, r1, r8
 80115b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80115ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80115be:	f04f 0901 	mov.w	r9, #1
 80115c2:	e79b      	b.n	80114fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80115c4:	449c      	add	ip, r3
 80115c6:	1aff      	subs	r7, r7, r3
 80115c8:	f1b8 0f00 	cmp.w	r8, #0
 80115cc:	d009      	beq.n	80115e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80115ce:	9019      	str	r0, [sp, #100]	; 0x64
 80115d0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80115d4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80115d8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80115dc:	911d      	str	r1, [sp, #116]	; 0x74
 80115de:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80115e2:	1ad2      	subs	r2, r2, r3
 80115e4:	e68b      	b.n	80112fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80115e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 80d1 	beq.w	8011792 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80115f0:	ad19      	add	r5, sp, #100	; 0x64
 80115f2:	ac39      	add	r4, sp, #228	; 0xe4
 80115f4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80115f6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80115fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80115fe:	930c      	str	r3, [sp, #48]	; 0x30
 8011600:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011602:	6963      	ldr	r3, [r4, #20]
 8011604:	440b      	add	r3, r1
 8011606:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801160a:	4408      	add	r0, r1
 801160c:	b200      	sxth	r0, r0
 801160e:	4283      	cmp	r3, r0
 8011610:	900d      	str	r0, [sp, #52]	; 0x34
 8011612:	f280 80c1 	bge.w	8011798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011616:	428b      	cmp	r3, r1
 8011618:	da08      	bge.n	801162c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801161a:	2a00      	cmp	r2, #0
 801161c:	dd06      	ble.n	801162c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801161e:	1acb      	subs	r3, r1, r3
 8011620:	429a      	cmp	r2, r3
 8011622:	f2c0 80bb 	blt.w	801179c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011626:	2b00      	cmp	r3, #0
 8011628:	f300 80b9 	bgt.w	801179e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801162c:	6967      	ldr	r7, [r4, #20]
 801162e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011634:	443b      	add	r3, r7
 8011636:	461f      	mov	r7, r3
 8011638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801163a:	1bdf      	subs	r7, r3, r7
 801163c:	4297      	cmp	r7, r2
 801163e:	bfa8      	it	ge
 8011640:	4617      	movge	r7, r2
 8011642:	2f00      	cmp	r7, #0
 8011644:	f340 813c 	ble.w	80118c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011648:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801164a:	6829      	ldr	r1, [r5, #0]
 801164c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011650:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011654:	4411      	add	r1, r2
 8011656:	6820      	ldr	r0, [r4, #0]
 8011658:	4299      	cmp	r1, r3
 801165a:	dd1a      	ble.n	8011692 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801165c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011660:	4402      	add	r2, r0
 8011662:	440b      	add	r3, r1
 8011664:	b21b      	sxth	r3, r3
 8011666:	429a      	cmp	r2, r3
 8011668:	dc13      	bgt.n	8011692 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801166a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801166c:	a912      	add	r1, sp, #72	; 0x48
 801166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	9206      	str	r2, [sp, #24]
 8011676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011678:	9500      	str	r5, [sp, #0]
 801167a:	9205      	str	r2, [sp, #20]
 801167c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801167e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011682:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011684:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011688:	aa49      	add	r2, sp, #292	; 0x124
 801168a:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801168e:	4623      	mov	r3, r4
 8011690:	47c8      	blx	r9
 8011692:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011696:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801169a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116a2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80116a6:	68a1      	ldr	r1, [r4, #8]
 80116a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116ac:	ed94 6a08 	vldr	s12, [r4, #32]
 80116b0:	edd4 6a07 	vldr	s13, [r4, #28]
 80116b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80116b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80116bc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80116c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116c4:	edc4 6a07 	vstr	s13, [r4, #28]
 80116c8:	441a      	add	r2, r3
 80116ca:	6963      	ldr	r3, [r4, #20]
 80116cc:	3301      	adds	r3, #1
 80116ce:	6022      	str	r2, [r4, #0]
 80116d0:	6163      	str	r3, [r4, #20]
 80116d2:	69a3      	ldr	r3, [r4, #24]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	61a3      	str	r3, [r4, #24]
 80116d8:	6923      	ldr	r3, [r4, #16]
 80116da:	440b      	add	r3, r1
 80116dc:	68e1      	ldr	r1, [r4, #12]
 80116de:	428b      	cmp	r3, r1
 80116e0:	6123      	str	r3, [r4, #16]
 80116e2:	db15      	blt.n	8011710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80116e4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80116e8:	3201      	adds	r2, #1
 80116ea:	1a5b      	subs	r3, r3, r1
 80116ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80116f0:	6022      	str	r2, [r4, #0]
 80116f2:	6123      	str	r3, [r4, #16]
 80116f4:	edc4 6a07 	vstr	s13, [r4, #28]
 80116f8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80116fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011700:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011704:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011708:	ee77 7a27 	vadd.f32	s15, s14, s15
 801170c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011710:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011714:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011718:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801171c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011720:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011724:	68a9      	ldr	r1, [r5, #8]
 8011726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801172a:	ed95 6a08 	vldr	s12, [r5, #32]
 801172e:	edd5 6a07 	vldr	s13, [r5, #28]
 8011732:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011736:	ee76 6a86 	vadd.f32	s13, s13, s12
 801173a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801173e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011742:	edc5 6a07 	vstr	s13, [r5, #28]
 8011746:	441a      	add	r2, r3
 8011748:	696b      	ldr	r3, [r5, #20]
 801174a:	3301      	adds	r3, #1
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	616b      	str	r3, [r5, #20]
 8011750:	69ab      	ldr	r3, [r5, #24]
 8011752:	3b01      	subs	r3, #1
 8011754:	61ab      	str	r3, [r5, #24]
 8011756:	692b      	ldr	r3, [r5, #16]
 8011758:	440b      	add	r3, r1
 801175a:	68e9      	ldr	r1, [r5, #12]
 801175c:	428b      	cmp	r3, r1
 801175e:	612b      	str	r3, [r5, #16]
 8011760:	db15      	blt.n	801178e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011762:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011766:	3201      	adds	r2, #1
 8011768:	1a5b      	subs	r3, r3, r1
 801176a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801176e:	602a      	str	r2, [r5, #0]
 8011770:	612b      	str	r3, [r5, #16]
 8011772:	edc5 6a07 	vstr	s13, [r5, #28]
 8011776:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801177a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801177e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011782:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011786:	ee77 7a27 	vadd.f32	s15, s14, s15
 801178a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801178e:	3f01      	subs	r7, #1
 8011790:	e757      	b.n	8011642 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011792:	ad39      	add	r5, sp, #228	; 0xe4
 8011794:	ac19      	add	r4, sp, #100	; 0x64
 8011796:	e72d      	b.n	80115f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011798:	4613      	mov	r3, r2
 801179a:	e744      	b.n	8011626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801179c:	4613      	mov	r3, r2
 801179e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80117a0:	469e      	mov	lr, r3
 80117a2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80117a6:	461f      	mov	r7, r3
 80117a8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80117ac:	f04f 0900 	mov.w	r9, #0
 80117b0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80117b4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80117b8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80117bc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80117c0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80117c4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80117c6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80117ca:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80117ce:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80117d2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80117d6:	960e      	str	r6, [sp, #56]	; 0x38
 80117d8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80117dc:	2f00      	cmp	r7, #0
 80117de:	d146      	bne.n	801186e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80117e0:	449c      	add	ip, r3
 80117e2:	1ad7      	subs	r7, r2, r3
 80117e4:	f1b9 0f00 	cmp.w	r9, #0
 80117e8:	d009      	beq.n	80117fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80117ea:	9039      	str	r0, [sp, #228]	; 0xe4
 80117ec:	913d      	str	r1, [sp, #244]	; 0xf4
 80117ee:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80117f2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80117f6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80117fa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80117fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011800:	f04f 0800 	mov.w	r8, #0
 8011804:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011808:	910e      	str	r1, [sp, #56]	; 0x38
 801180a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801180e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011812:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011816:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801181a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801181e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011822:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011826:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801182a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801182e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011832:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011836:	f1be 0f00 	cmp.w	lr, #0
 801183a:	d030      	beq.n	801189e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801183c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801183e:	4450      	add	r0, sl
 8011840:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011844:	4431      	add	r1, r6
 8011846:	ee37 7a04 	vadd.f32	s14, s14, s8
 801184a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801184e:	4549      	cmp	r1, r9
 8011850:	db08      	blt.n	8011864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011852:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011856:	3001      	adds	r0, #1
 8011858:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801185c:	eba1 0109 	sub.w	r1, r1, r9
 8011860:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011864:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011868:	f04f 0801 	mov.w	r8, #1
 801186c:	e7e3      	b.n	8011836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801186e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011870:	4450      	add	r0, sl
 8011872:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011876:	4431      	add	r1, r6
 8011878:	ee77 7a84 	vadd.f32	s15, s15, s8
 801187c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011880:	4541      	cmp	r1, r8
 8011882:	db08      	blt.n	8011896 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011884:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011888:	3001      	adds	r0, #1
 801188a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801188e:	eba1 0108 	sub.w	r1, r1, r8
 8011892:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011896:	3f01      	subs	r7, #1
 8011898:	f04f 0901 	mov.w	r9, #1
 801189c:	e79e      	b.n	80117dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801189e:	449c      	add	ip, r3
 80118a0:	1aff      	subs	r7, r7, r3
 80118a2:	f1b8 0f00 	cmp.w	r8, #0
 80118a6:	d009      	beq.n	80118bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80118a8:	9019      	str	r0, [sp, #100]	; 0x64
 80118aa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80118ae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80118b2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80118b6:	911d      	str	r1, [sp, #116]	; 0x74
 80118b8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80118bc:	1ad2      	subs	r2, r2, r3
 80118be:	e6b5      	b.n	801162c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80118c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	b923      	cbnz	r3, 80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118c6:	4b04      	ldr	r3, [pc, #16]	; (80118d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	6803      	ldr	r3, [r0, #0]
 80118cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ce:	4798      	blx	r3
 80118d0:	b05b      	add	sp, #364	; 0x16c
 80118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d6:	bf00      	nop
 80118d8:	2400e9f0 	.word	0x2400e9f0

080118dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80118dc:	b570      	push	{r4, r5, r6, lr}
 80118de:	4604      	mov	r4, r0
 80118e0:	2500      	movs	r5, #0
 80118e2:	9804      	ldr	r0, [sp, #16]
 80118e4:	7223      	strb	r3, [r4, #8]
 80118e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80118ea:	8025      	strh	r5, [r4, #0]
 80118ec:	6061      	str	r1, [r4, #4]
 80118ee:	7263      	strb	r3, [r4, #9]
 80118f0:	60e0      	str	r0, [r4, #12]
 80118f2:	8222      	strh	r2, [r4, #16]
 80118f4:	8265      	strh	r5, [r4, #18]
 80118f6:	82a5      	strh	r5, [r4, #20]
 80118f8:	82e5      	strh	r5, [r4, #22]
 80118fa:	8325      	strh	r5, [r4, #24]
 80118fc:	8365      	strh	r5, [r4, #26]
 80118fe:	83a5      	strh	r5, [r4, #28]
 8011900:	77a5      	strb	r5, [r4, #30]
 8011902:	6803      	ldr	r3, [r0, #0]
 8011904:	695b      	ldr	r3, [r3, #20]
 8011906:	4798      	blx	r3
 8011908:	4606      	mov	r6, r0
 801190a:	b1f8      	cbz	r0, 801194c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801190c:	68e0      	ldr	r0, [r4, #12]
 801190e:	4631      	mov	r1, r6
 8011910:	6803      	ldr	r3, [r0, #0]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	4798      	blx	r3
 8011916:	7b43      	ldrb	r3, [r0, #13]
 8011918:	7a82      	ldrb	r2, [r0, #10]
 801191a:	4605      	mov	r5, r0
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011922:	4313      	orrs	r3, r2
 8011924:	83a3      	strh	r3, [r4, #28]
 8011926:	7a63      	ldrb	r3, [r4, #9]
 8011928:	2b04      	cmp	r3, #4
 801192a:	d10f      	bne.n	801194c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801192c:	68e0      	ldr	r0, [r4, #12]
 801192e:	462a      	mov	r2, r5
 8011930:	4631      	mov	r1, r6
 8011932:	6803      	ldr	r3, [r0, #0]
 8011934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011936:	4798      	blx	r3
 8011938:	7b6b      	ldrb	r3, [r5, #13]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011940:	7aab      	ldrb	r3, [r5, #10]
 8011942:	4313      	orrs	r3, r2
 8011944:	4418      	add	r0, r3
 8011946:	8ba3      	ldrh	r3, [r4, #28]
 8011948:	4418      	add	r0, r3
 801194a:	83a0      	strh	r0, [r4, #28]
 801194c:	4620      	mov	r0, r4
 801194e:	bd70      	pop	{r4, r5, r6, pc}

08011950 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	2400      	movs	r4, #0
 8011956:	b085      	sub	sp, #20
 8011958:	4681      	mov	r9, r0
 801195a:	4688      	mov	r8, r1
 801195c:	4692      	mov	sl, r2
 801195e:	469b      	mov	fp, r3
 8011960:	4627      	mov	r7, r4
 8011962:	4625      	mov	r5, r4
 8011964:	4626      	mov	r6, r4
 8011966:	4554      	cmp	r4, sl
 8011968:	da2a      	bge.n	80119c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801196a:	2300      	movs	r3, #0
 801196c:	9303      	str	r3, [sp, #12]
 801196e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011972:	429d      	cmp	r5, r3
 8011974:	d004      	beq.n	8011980 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8011976:	f242 030b 	movw	r3, #8203	; 0x200b
 801197a:	429d      	cmp	r5, r3
 801197c:	bf18      	it	ne
 801197e:	462f      	movne	r7, r5
 8011980:	ab03      	add	r3, sp, #12
 8011982:	4642      	mov	r2, r8
 8011984:	4659      	mov	r1, fp
 8011986:	4648      	mov	r0, r9
 8011988:	f002 ff66 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801198c:	4605      	mov	r5, r0
 801198e:	b1b8      	cbz	r0, 80119c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011990:	280a      	cmp	r0, #10
 8011992:	d015      	beq.n	80119c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011994:	9a03      	ldr	r2, [sp, #12]
 8011996:	b18a      	cbz	r2, 80119bc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8011998:	7b50      	ldrb	r0, [r2, #13]
 801199a:	4639      	mov	r1, r7
 801199c:	7a93      	ldrb	r3, [r2, #10]
 801199e:	0040      	lsls	r0, r0, #1
 80119a0:	8895      	ldrh	r5, [r2, #4]
 80119a2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80119a6:	4303      	orrs	r3, r0
 80119a8:	4640      	mov	r0, r8
 80119aa:	9301      	str	r3, [sp, #4]
 80119ac:	f8d8 3000 	ldr.w	r3, [r8]
 80119b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b2:	4798      	blx	r3
 80119b4:	9b01      	ldr	r3, [sp, #4]
 80119b6:	4418      	add	r0, r3
 80119b8:	4406      	add	r6, r0
 80119ba:	b2b6      	uxth	r6, r6
 80119bc:	3401      	adds	r4, #1
 80119be:	e7d2      	b.n	8011966 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80119c0:	4630      	mov	r0, r6
 80119c2:	b005      	add	sp, #20
 80119c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80119c8:	2a02      	cmp	r2, #2
 80119ca:	b530      	push	{r4, r5, lr}
 80119cc:	d011      	beq.n	80119f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80119ce:	2a03      	cmp	r2, #3
 80119d0:	d01c      	beq.n	8011a0c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80119d2:	2a01      	cmp	r2, #1
 80119d4:	d10c      	bne.n	80119f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80119d6:	888b      	ldrh	r3, [r1, #4]
 80119d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80119dc:	8801      	ldrh	r1, [r0, #0]
 80119de:	1a9b      	subs	r3, r3, r2
 80119e0:	8844      	ldrh	r4, [r0, #2]
 80119e2:	1a5b      	subs	r3, r3, r1
 80119e4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80119e8:	8004      	strh	r4, [r0, #0]
 80119ea:	8043      	strh	r3, [r0, #2]
 80119ec:	8081      	strh	r1, [r0, #4]
 80119ee:	80c2      	strh	r2, [r0, #6]
 80119f0:	bd30      	pop	{r4, r5, pc}
 80119f2:	88cb      	ldrh	r3, [r1, #6]
 80119f4:	88c2      	ldrh	r2, [r0, #6]
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	8842      	ldrh	r2, [r0, #2]
 80119fa:	1a9b      	subs	r3, r3, r2
 80119fc:	888a      	ldrh	r2, [r1, #4]
 80119fe:	8881      	ldrh	r1, [r0, #4]
 8011a00:	8043      	strh	r3, [r0, #2]
 8011a02:	1a52      	subs	r2, r2, r1
 8011a04:	8801      	ldrh	r1, [r0, #0]
 8011a06:	1a52      	subs	r2, r2, r1
 8011a08:	8002      	strh	r2, [r0, #0]
 8011a0a:	e7f1      	b.n	80119f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011a0c:	88cb      	ldrh	r3, [r1, #6]
 8011a0e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011a12:	8841      	ldrh	r1, [r0, #2]
 8011a14:	1a9b      	subs	r3, r3, r2
 8011a16:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011a1a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011a1e:	1a5b      	subs	r3, r3, r1
 8011a20:	8045      	strh	r5, [r0, #2]
 8011a22:	8082      	strh	r2, [r0, #4]
 8011a24:	8003      	strh	r3, [r0, #0]
 8011a26:	80c4      	strh	r4, [r0, #6]
 8011a28:	e7e2      	b.n	80119f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2e:	b09f      	sub	sp, #124	; 0x7c
 8011a30:	9116      	str	r1, [sp, #88]	; 0x58
 8011a32:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a34:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011a36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011a38:	8809      	ldrh	r1, [r1, #0]
 8011a3a:	889b      	ldrh	r3, [r3, #4]
 8011a3c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8011a40:	440b      	add	r3, r1
 8011a42:	9212      	str	r2, [sp, #72]	; 0x48
 8011a44:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8011a48:	b21b      	sxth	r3, r3
 8011a4a:	9011      	str	r0, [sp, #68]	; 0x44
 8011a4c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8011a50:	9310      	str	r3, [sp, #64]	; 0x40
 8011a52:	f8d8 3000 	ldr.w	r3, [r8]
 8011a56:	7a59      	ldrb	r1, [r3, #9]
 8011a58:	7a1b      	ldrb	r3, [r3, #8]
 8011a5a:	9114      	str	r1, [sp, #80]	; 0x50
 8011a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8011a5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011a64:	2a00      	cmp	r2, #0
 8011a66:	d067      	beq.n	8011b38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8011a68:	f898 3010 	ldrb.w	r3, [r8, #16]
 8011a6c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011a6e:	2b04      	cmp	r3, #4
 8011a70:	bf14      	ite	ne
 8011a72:	2301      	movne	r3, #1
 8011a74:	2302      	moveq	r3, #2
 8011a76:	4413      	add	r3, r2
 8011a78:	f04f 0900 	mov.w	r9, #0
 8011a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a7e:	464c      	mov	r4, r9
 8011a80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011a84:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011a88:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	f280 808c 	bge.w	8011baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011a92:	2300      	movs	r3, #0
 8011a94:	931c      	str	r3, [sp, #112]	; 0x70
 8011a96:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011a9a:	429c      	cmp	r4, r3
 8011a9c:	d006      	beq.n	8011aac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8011a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa0:	f242 020b 	movw	r2, #8203	; 0x200b
 8011aa4:	4294      	cmp	r4, r2
 8011aa6:	bf18      	it	ne
 8011aa8:	4623      	movne	r3, r4
 8011aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8011aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aae:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011ab0:	f8d8 2000 	ldr.w	r2, [r8]
 8011ab4:	428b      	cmp	r3, r1
 8011ab6:	db41      	blt.n	8011b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011ab8:	6813      	ldr	r3, [r2, #0]
 8011aba:	4610      	mov	r0, r2
 8011abc:	695b      	ldr	r3, [r3, #20]
 8011abe:	4798      	blx	r3
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	f8d8 0000 	ldr.w	r0, [r8]
 8011ac6:	aa1d      	add	r2, sp, #116	; 0x74
 8011ac8:	4621      	mov	r1, r4
 8011aca:	6803      	ldr	r3, [r0, #0]
 8011acc:	689e      	ldr	r6, [r3, #8]
 8011ace:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011ad2:	47b0      	blx	r6
 8011ad4:	901c      	str	r0, [sp, #112]	; 0x70
 8011ad6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011ada:	429c      	cmp	r4, r3
 8011adc:	f000 80ea 	beq.w	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011ae0:	f242 030b 	movw	r3, #8203	; 0x200b
 8011ae4:	429c      	cmp	r4, r3
 8011ae6:	f000 80e5 	beq.w	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011aea:	2c00      	cmp	r4, #0
 8011aec:	f000 80f7 	beq.w	8011cde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8011af0:	2c0a      	cmp	r4, #10
 8011af2:	d060      	beq.n	8011bb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011af4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011af6:	b36a      	cbz	r2, 8011b54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8011af8:	8894      	ldrh	r4, [r2, #4]
 8011afa:	f1bb 0f00 	cmp.w	fp, #0
 8011afe:	d03b      	beq.n	8011b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8011b00:	f892 900d 	ldrb.w	r9, [r2, #13]
 8011b04:	f1bb 0f01 	cmp.w	fp, #1
 8011b08:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8011b0c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8011b10:	f892 900a 	ldrb.w	r9, [r2, #10]
 8011b14:	ea49 0903 	orr.w	r9, r9, r3
 8011b18:	d134      	bne.n	8011b84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8011b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b1c:	eba5 0509 	sub.w	r5, r5, r9
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d14f      	bne.n	8011bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b26:	eb09 0305 	add.w	r3, r9, r5
 8011b2a:	4413      	add	r3, r2
 8011b2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011b2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011b32:	4293      	cmp	r3, r2
 8011b34:	da51      	bge.n	8011bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8011b36:	e038      	b.n	8011baa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011b38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011b3a:	e79d      	b.n	8011a78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8011b3c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011b40:	4659      	mov	r1, fp
 8011b42:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	ab1d      	add	r3, sp, #116	; 0x74
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	ab1c      	add	r3, sp, #112	; 0x70
 8011b4c:	f002 fedc 	bl	8014908 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011b50:	4604      	mov	r4, r0
 8011b52:	e7c0      	b.n	8011ad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8011b54:	f8d8 0000 	ldr.w	r0, [r8]
 8011b58:	6803      	ldr	r3, [r0, #0]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	4798      	blx	r3
 8011b5e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011b62:	4298      	cmp	r0, r3
 8011b64:	f000 80a6 	beq.w	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011b68:	f242 030b 	movw	r3, #8203	; 0x200b
 8011b6c:	4298      	cmp	r0, r3
 8011b6e:	f000 80a1 	beq.w	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011b72:	f1bb 0f00 	cmp.w	fp, #0
 8011b76:	d100      	bne.n	8011b7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8011b78:	444d      	add	r5, r9
 8011b7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011b7c:	2a00      	cmp	r2, #0
 8011b7e:	d1bf      	bne.n	8011b00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8011b80:	4691      	mov	r9, r2
 8011b82:	e097      	b.n	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 80ab 	beq.w	8011ce2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8011b8c:	f1bb 0f00 	cmp.w	fp, #0
 8011b90:	d118      	bne.n	8011bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011b92:	f8d8 0000 	ldr.w	r0, [r8]
 8011b96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011b98:	6803      	ldr	r3, [r0, #0]
 8011b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b9c:	4798      	blx	r3
 8011b9e:	4405      	add	r5, r0
 8011ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ba4:	1aeb      	subs	r3, r5, r3
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	dd17      	ble.n	8011bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8011baa:	2c00      	cmp	r4, #0
 8011bac:	f000 8097 	beq.w	8011cde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8011bb0:	2c0a      	cmp	r4, #10
 8011bb2:	f040 8085 	bne.w	8011cc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8011bb6:	240a      	movs	r4, #10
 8011bb8:	fab4 f084 	clz	r0, r4
 8011bbc:	0940      	lsrs	r0, r0, #5
 8011bbe:	b01f      	add	sp, #124	; 0x7c
 8011bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc4:	f8d8 0000 	ldr.w	r0, [r8]
 8011bc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011bca:	6803      	ldr	r3, [r0, #0]
 8011bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bce:	4798      	blx	r3
 8011bd0:	f1bb 0f01 	cmp.w	fp, #1
 8011bd4:	eba5 0500 	sub.w	r5, r5, r0
 8011bd8:	d0a4      	beq.n	8011b24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8011bda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011bdc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011bde:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011be6:	7b43      	ldrb	r3, [r0, #13]
 8011be8:	4429      	add	r1, r5
 8011bea:	015b      	lsls	r3, r3, #5
 8011bec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011bf0:	7983      	ldrb	r3, [r0, #6]
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	42b3      	cmp	r3, r6
 8011bf8:	db5c      	blt.n	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bfc:	4299      	cmp	r1, r3
 8011bfe:	da59      	bge.n	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011c00:	f8d8 0000 	ldr.w	r0, [r8]
 8011c04:	42ae      	cmp	r6, r5
 8011c06:	6803      	ldr	r3, [r0, #0]
 8011c08:	bfcc      	ite	gt
 8011c0a:	1b76      	subgt	r6, r6, r5
 8011c0c:	2600      	movle	r6, #0
 8011c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c10:	bfc8      	it	gt
 8011c12:	b2b6      	uxthgt	r6, r6
 8011c14:	4798      	blx	r3
 8011c16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011c18:	7b5a      	ldrb	r2, [r3, #13]
 8011c1a:	00d1      	lsls	r1, r2, #3
 8011c1c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8011c20:	7a19      	ldrb	r1, [r3, #8]
 8011c22:	4339      	orrs	r1, r7
 8011c24:	0657      	lsls	r7, r2, #25
 8011c26:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8011c28:	bf48      	it	mi
 8011c2a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8011c2e:	4407      	add	r7, r0
 8011c30:	bf48      	it	mi
 8011c32:	b209      	sxthmi	r1, r1
 8011c34:	1a7f      	subs	r7, r7, r1
 8011c36:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011c38:	b2bf      	uxth	r7, r7
 8011c3a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011c3e:	fa0f fa87 	sxth.w	sl, r7
 8011c42:	4551      	cmp	r1, sl
 8011c44:	dd3a      	ble.n	8011cbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011c46:	0112      	lsls	r2, r2, #4
 8011c48:	79d8      	ldrb	r0, [r3, #7]
 8011c4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011c4e:	4302      	orrs	r2, r0
 8011c50:	4492      	add	sl, r2
 8011c52:	4551      	cmp	r1, sl
 8011c54:	dc2e      	bgt.n	8011cb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8011c56:	1bcf      	subs	r7, r1, r7
 8011c58:	468a      	mov	sl, r1
 8011c5a:	b2bf      	uxth	r7, r7
 8011c5c:	9319      	str	r3, [sp, #100]	; 0x64
 8011c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c60:	f8d8 0000 	ldr.w	r0, [r8]
 8011c64:	681a      	ldr	r2, [r3, #0]
 8011c66:	6801      	ldr	r1, [r0, #0]
 8011c68:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011c6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011c6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c6e:	9218      	str	r2, [sp, #96]	; 0x60
 8011c70:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8011c72:	4788      	blx	r1
 8011c74:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8011c7c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8011c80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011c82:	910a      	str	r1, [sp, #40]	; 0x28
 8011c84:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8011c88:	9109      	str	r1, [sp, #36]	; 0x24
 8011c8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011c8e:	9305      	str	r3, [sp, #20]
 8011c90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011c92:	9206      	str	r2, [sp, #24]
 8011c94:	e9cd a601 	strd	sl, r6, [sp, #4]
 8011c98:	442e      	add	r6, r5
 8011c9a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8011c9e:	b236      	sxth	r6, r6
 8011ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ca2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011ca6:	9600      	str	r6, [sp, #0]
 8011ca8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011cb2:	47b0      	blx	r6
 8011cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8011cba:	e6e5      	b.n	8011a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8011cbc:	2700      	movs	r7, #0
 8011cbe:	e7cd      	b.n	8011c5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8011cc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011cc2:	3501      	adds	r5, #1
 8011cc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011cc6:	429d      	cmp	r5, r3
 8011cc8:	f6bf af76 	bge.w	8011bb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011ccc:	4659      	mov	r1, fp
 8011cce:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011cd0:	f7f1 ff32 	bl	8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	b110      	cbz	r0, 8011cde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8011cd8:	280a      	cmp	r0, #10
 8011cda:	d1f2      	bne.n	8011cc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8011cdc:	e76b      	b.n	8011bb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011cde:	2400      	movs	r4, #0
 8011ce0:	e76a      	b.n	8011bb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011ce2:	f1bb 0f00 	cmp.w	fp, #0
 8011ce6:	f43f af5b 	beq.w	8011ba0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8011cea:	e776      	b.n	8011bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08011cec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8011cec:	b530      	push	{r4, r5, lr}
 8011cee:	8a44      	ldrh	r4, [r0, #18]
 8011cf0:	8ac5      	ldrh	r5, [r0, #22]
 8011cf2:	82c3      	strh	r3, [r0, #22]
 8011cf4:	442c      	add	r4, r5
 8011cf6:	1ae4      	subs	r4, r4, r3
 8011cf8:	8b03      	ldrh	r3, [r0, #24]
 8011cfa:	8244      	strh	r4, [r0, #18]
 8011cfc:	8a84      	ldrh	r4, [r0, #20]
 8011cfe:	4422      	add	r2, r4
 8011d00:	440c      	add	r4, r1
 8011d02:	1a59      	subs	r1, r3, r1
 8011d04:	8342      	strh	r2, [r0, #26]
 8011d06:	8284      	strh	r4, [r0, #20]
 8011d08:	8301      	strh	r1, [r0, #24]
 8011d0a:	bd30      	pop	{r4, r5, pc}

08011d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8011d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d10:	7a43      	ldrb	r3, [r0, #9]
 8011d12:	b087      	sub	sp, #28
 8011d14:	4604      	mov	r4, r0
 8011d16:	460f      	mov	r7, r1
 8011d18:	1eda      	subs	r2, r3, #3
 8011d1a:	b2d2      	uxtb	r2, r2
 8011d1c:	2900      	cmp	r1, #0
 8011d1e:	d036      	beq.n	8011d8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8011d20:	2a01      	cmp	r2, #1
 8011d22:	d932      	bls.n	8011d8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8011d24:	1e58      	subs	r0, r3, #1
 8011d26:	f1d0 0b00 	rsbs	fp, r0, #0
 8011d2a:	eb4b 0b00 	adc.w	fp, fp, r0
 8011d2e:	1e99      	subs	r1, r3, #2
 8011d30:	424b      	negs	r3, r1
 8011d32:	414b      	adcs	r3, r1
 8011d34:	9303      	str	r3, [sp, #12]
 8011d36:	2300      	movs	r3, #0
 8011d38:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011d3c:	2500      	movs	r5, #0
 8011d3e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8011d42:	46a9      	mov	r9, r5
 8011d44:	8265      	strh	r5, [r4, #18]
 8011d46:	82a5      	strh	r5, [r4, #20]
 8011d48:	2300      	movs	r3, #0
 8011d4a:	9305      	str	r3, [sp, #20]
 8011d4c:	8823      	ldrh	r3, [r4, #0]
 8011d4e:	2b20      	cmp	r3, #32
 8011d50:	d02b      	beq.n	8011daa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8011d52:	eba3 020a 	sub.w	r2, r3, sl
 8011d56:	4256      	negs	r6, r2
 8011d58:	4156      	adcs	r6, r2
 8011d5a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d004      	beq.n	8011d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8011d62:	4553      	cmp	r3, sl
 8011d64:	bf16      	itet	ne
 8011d66:	4699      	movne	r9, r3
 8011d68:	2601      	moveq	r6, #1
 8011d6a:	2600      	movne	r6, #0
 8011d6c:	ab05      	add	r3, sp, #20
 8011d6e:	68e2      	ldr	r2, [r4, #12]
 8011d70:	7a21      	ldrb	r1, [r4, #8]
 8011d72:	6860      	ldr	r0, [r4, #4]
 8011d74:	f002 fd70 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011d78:	8020      	strh	r0, [r4, #0]
 8011d7a:	b9c8      	cbnz	r0, 8011db0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8011d7c:	8b22      	ldrh	r2, [r4, #24]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	4611      	mov	r1, r2
 8011d82:	4620      	mov	r0, r4
 8011d84:	f7ff ffb2 	bl	8011cec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011d88:	e066      	b.n	8011e58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8011d8a:	468b      	mov	fp, r1
 8011d8c:	e7cf      	b.n	8011d2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	2a01      	cmp	r2, #1
 8011d92:	9103      	str	r1, [sp, #12]
 8011d94:	468b      	mov	fp, r1
 8011d96:	bf8c      	ite	hi
 8011d98:	2200      	movhi	r2, #0
 8011d9a:	2201      	movls	r2, #1
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	9202      	str	r2, [sp, #8]
 8011da0:	bf8c      	ite	hi
 8011da2:	2300      	movhi	r3, #0
 8011da4:	2301      	movls	r3, #1
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	e7c8      	b.n	8011d3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8011daa:	4699      	mov	r9, r3
 8011dac:	2601      	movs	r6, #1
 8011dae:	e7dd      	b.n	8011d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8011db0:	8ae3      	ldrh	r3, [r4, #22]
 8011db2:	280a      	cmp	r0, #10
 8011db4:	f103 0301 	add.w	r3, r3, #1
 8011db8:	82e3      	strh	r3, [r4, #22]
 8011dba:	d0df      	beq.n	8011d7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8011dbc:	9a05      	ldr	r2, [sp, #20]
 8011dbe:	bb42      	cbnz	r2, 8011e12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8011dc0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011dc4:	4298      	cmp	r0, r3
 8011dc6:	d001      	beq.n	8011dcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8011dc8:	4550      	cmp	r0, sl
 8011dca:	d1bd      	bne.n	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011dcc:	8823      	ldrh	r3, [r4, #0]
 8011dce:	8b21      	ldrh	r1, [r4, #24]
 8011dd0:	2b20      	cmp	r3, #32
 8011dd2:	d001      	beq.n	8011dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8011dd4:	4553      	cmp	r3, sl
 8011dd6:	d131      	bne.n	8011e3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8011dd8:	2e00      	cmp	r6, #0
 8011dda:	bf0a      	itet	eq
 8011ddc:	460d      	moveq	r5, r1
 8011dde:	4630      	movne	r0, r6
 8011de0:	2001      	moveq	r0, #1
 8011de2:	440a      	add	r2, r1
 8011de4:	8aa3      	ldrh	r3, [r4, #20]
 8011de6:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8011dea:	b292      	uxth	r2, r2
 8011dec:	8322      	strh	r2, [r4, #24]
 8011dee:	4413      	add	r3, r2
 8011df0:	2f00      	cmp	r7, #0
 8011df2:	d03a      	beq.n	8011e6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8011df4:	f1bb 0f00 	cmp.w	fp, #0
 8011df8:	d102      	bne.n	8011e00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8011dfa:	9903      	ldr	r1, [sp, #12]
 8011dfc:	b301      	cbz	r1, 8011e40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8011dfe:	b1f8      	cbz	r0, 8011e40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8011e00:	8ba1      	ldrh	r1, [r4, #28]
 8011e02:	4419      	add	r1, r3
 8011e04:	458c      	cmp	ip, r1
 8011e06:	da2a      	bge.n	8011e5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8011e08:	8a61      	ldrh	r1, [r4, #18]
 8011e0a:	b341      	cbz	r1, 8011e5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8011e0c:	4563      	cmp	r3, ip
 8011e0e:	dd9b      	ble.n	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e10:	e01c      	b.n	8011e4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8011e12:	8893      	ldrh	r3, [r2, #4]
 8011e14:	4649      	mov	r1, r9
 8011e16:	8023      	strh	r3, [r4, #0]
 8011e18:	f892 800d 	ldrb.w	r8, [r2, #13]
 8011e1c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8011e20:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8011e24:	f892 800a 	ldrb.w	r8, [r2, #10]
 8011e28:	ea48 0800 	orr.w	r8, r8, r0
 8011e2c:	68e0      	ldr	r0, [r4, #12]
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e32:	4798      	blx	r3
 8011e34:	eb08 0200 	add.w	r2, r8, r0
 8011e38:	b292      	uxth	r2, r2
 8011e3a:	e7c7      	b.n	8011dcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	e7d0      	b.n	8011de2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8011e40:	4563      	cmp	r3, ip
 8011e42:	dd81      	ble.n	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e44:	8a63      	ldrh	r3, [r4, #18]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f43f af7e 	beq.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	8ba2      	ldrh	r2, [r4, #28]
 8011e50:	77a3      	strb	r3, [r4, #30]
 8011e52:	8b63      	ldrh	r3, [r4, #26]
 8011e54:	4413      	add	r3, r2
 8011e56:	8363      	strh	r3, [r4, #26]
 8011e58:	b007      	add	sp, #28
 8011e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5e:	2300      	movs	r3, #0
 8011e60:	4611      	mov	r1, r2
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7ff ff42 	bl	8011cec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011e68:	e76e      	b.n	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e6a:	4563      	cmp	r3, ip
 8011e6c:	dd14      	ble.n	8011e98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8011e6e:	9b02      	ldr	r3, [sp, #8]
 8011e70:	b113      	cbz	r3, 8011e78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8011e72:	2301      	movs	r3, #1
 8011e74:	460a      	mov	r2, r1
 8011e76:	e783      	b.n	8011d80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8011e78:	9b01      	ldr	r3, [sp, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f43f af64 	beq.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	f47f af61 	bne.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e86:	b116      	cbz	r6, 8011e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	462a      	mov	r2, r5
 8011e8c:	e779      	b.n	8011d82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8011e8e:	8a63      	ldrh	r3, [r4, #18]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f43f af59 	beq.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e96:	e7df      	b.n	8011e58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	f47f af55 	bne.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011e9e:	2e00      	cmp	r6, #0
 8011ea0:	f43f af52 	beq.w	8011d48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	462a      	mov	r2, r5
 8011ea8:	e7db      	b.n	8011e62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08011eaa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8011eaa:	b530      	push	{r4, r5, lr}
 8011eac:	4605      	mov	r5, r0
 8011eae:	b08b      	sub	sp, #44	; 0x2c
 8011eb0:	b191      	cbz	r1, 8011ed8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8011eb2:	2401      	movs	r4, #1
 8011eb4:	e9cd 3100 	strd	r3, r1, [sp]
 8011eb8:	4613      	mov	r3, r2
 8011eba:	4601      	mov	r1, r0
 8011ebc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8011ec0:	a802      	add	r0, sp, #8
 8011ec2:	f7ff fd0b 	bl	80118dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	a802      	add	r0, sp, #8
 8011eca:	f7ff ff1f 	bl	8011d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011ece:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011ed2:	b163      	cbz	r3, 8011eee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8011ed4:	3401      	adds	r4, #1
 8011ed6:	e7f6      	b.n	8011ec6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8011ed8:	2401      	movs	r4, #1
 8011eda:	f002 fdb7 	bl	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011ede:	280a      	cmp	r0, #10
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	bf08      	it	eq
 8011ee4:	3401      	addeq	r4, #1
 8011ee6:	f002 fdb1 	bl	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d1f7      	bne.n	8011ede <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8011eee:	b2a0      	uxth	r0, r4
 8011ef0:	b00b      	add	sp, #44	; 0x2c
 8011ef2:	bd30      	pop	{r4, r5, pc}

08011ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	b0e5      	sub	sp, #404	; 0x194
 8011efa:	4689      	mov	r9, r1
 8011efc:	461c      	mov	r4, r3
 8011efe:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8011f02:	900a      	str	r0, [sp, #40]	; 0x28
 8011f04:	f1ba 0f00 	cmp.w	sl, #0
 8011f08:	f000 80b4 	beq.w	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f000 80b0 	beq.w	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011f14:	7ba3      	ldrb	r3, [r4, #14]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 80ac 	beq.w	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011f1c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8011f20:	6810      	ldr	r0, [r2, #0]
 8011f22:	6851      	ldr	r1, [r2, #4]
 8011f24:	2500      	movs	r5, #0
 8011f26:	4643      	mov	r3, r8
 8011f28:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8011f2c:	950f      	str	r5, [sp, #60]	; 0x3c
 8011f2e:	af19      	add	r7, sp, #100	; 0x64
 8011f30:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011f34:	79a2      	ldrb	r2, [r4, #6]
 8011f36:	c303      	stmia	r3!, {r0, r1}
 8011f38:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8011f3c:	a90f      	add	r1, sp, #60	; 0x3c
 8011f3e:	4640      	mov	r0, r8
 8011f40:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8011f44:	f7ff fd40 	bl	80119c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011f48:	a90f      	add	r1, sp, #60	; 0x3c
 8011f4a:	79a2      	ldrb	r2, [r4, #6]
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	f7ff fd3b 	bl	80119c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011f52:	4638      	mov	r0, r7
 8011f54:	f002 f92d 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 8011f58:	6820      	ldr	r0, [r4, #0]
 8011f5a:	6803      	ldr	r3, [r0, #0]
 8011f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f5e:	4798      	blx	r3
 8011f60:	4606      	mov	r6, r0
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f68:	4798      	blx	r3
 8011f6a:	4633      	mov	r3, r6
 8011f6c:	9000      	str	r0, [sp, #0]
 8011f6e:	4651      	mov	r1, sl
 8011f70:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8011f72:	4638      	mov	r0, r7
 8011f74:	f002 f970 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011f78:	7923      	ldrb	r3, [r4, #4]
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	9308      	str	r3, [sp, #32]
 8011f7e:	6803      	ldr	r3, [r0, #0]
 8011f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f82:	4798      	blx	r3
 8011f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f88:	181e      	adds	r6, r3, r0
 8011f8a:	42ae      	cmp	r6, r5
 8011f8c:	dd06      	ble.n	8011f9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8011f8e:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8011f92:	4282      	cmp	r2, r0
 8011f94:	bfa4      	itt	ge
 8011f96:	189d      	addge	r5, r3, r2
 8011f98:	fb95 f5f6 	sdivge	r5, r5, r6
 8011f9c:	a832      	add	r0, sp, #200	; 0xc8
 8011f9e:	f002 f908 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 8011fa2:	7c23      	ldrb	r3, [r4, #16]
 8011fa4:	b17b      	cbz	r3, 8011fc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	6803      	ldr	r3, [r0, #0]
 8011faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fac:	4798      	blx	r3
 8011fae:	4683      	mov	fp, r0
 8011fb0:	6820      	ldr	r0, [r4, #0]
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fb6:	4798      	blx	r3
 8011fb8:	465b      	mov	r3, fp
 8011fba:	9000      	str	r0, [sp, #0]
 8011fbc:	4651      	mov	r1, sl
 8011fbe:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8011fc0:	a832      	add	r0, sp, #200	; 0xc8
 8011fc2:	f002 f949 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011fc6:	7be1      	ldrb	r1, [r4, #15]
 8011fc8:	a811      	add	r0, sp, #68	; 0x44
 8011fca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011fce:	7963      	ldrb	r3, [r4, #5]
 8011fd0:	1a52      	subs	r2, r2, r1
 8011fd2:	7c21      	ldrb	r1, [r4, #16]
 8011fd4:	9101      	str	r1, [sp, #4]
 8011fd6:	b292      	uxth	r2, r2
 8011fd8:	6821      	ldr	r1, [r4, #0]
 8011fda:	9100      	str	r1, [sp, #0]
 8011fdc:	a932      	add	r1, sp, #200	; 0xc8
 8011fde:	f7ff fc7d 	bl	80118dc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011fe2:	7c23      	ldrb	r3, [r4, #16]
 8011fe4:	b9bb      	cbnz	r3, 8012016 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8011fe6:	fa1f fa86 	uxth.w	sl, r6
 8011fea:	2d00      	cmp	r5, #0
 8011fec:	dd45      	ble.n	801207a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8011fee:	4638      	mov	r0, r7
 8011ff0:	f002 fd2c 	bl	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d03d      	beq.n	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011ff8:	280a      	cmp	r0, #10
 8011ffa:	d1f6      	bne.n	8011fea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8011ffc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012000:	3d01      	subs	r5, #1
 8012002:	4453      	add	r3, sl
 8012004:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012008:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801200c:	eba3 030a 	sub.w	r3, r3, sl
 8012010:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012014:	e7e9      	b.n	8011fea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8012016:	0073      	lsls	r3, r6, #1
 8012018:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801201c:	fa1f fa86 	uxth.w	sl, r6
 8012020:	9309      	str	r3, [sp, #36]	; 0x24
 8012022:	2d00      	cmp	r5, #0
 8012024:	dd29      	ble.n	801207a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8012026:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801202a:	a811      	add	r0, sp, #68	; 0x44
 801202c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801202e:	428b      	cmp	r3, r1
 8012030:	bfd4      	ite	le
 8012032:	2100      	movle	r1, #0
 8012034:	2101      	movgt	r1, #1
 8012036:	f7ff fe69 	bl	8011d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801203a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801203e:	3b01      	subs	r3, #1
 8012040:	b29b      	uxth	r3, r3
 8012042:	455b      	cmp	r3, fp
 8012044:	930b      	str	r3, [sp, #44]	; 0x2c
 8012046:	d005      	beq.n	8012054 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8012048:	7961      	ldrb	r1, [r4, #5]
 801204a:	4638      	mov	r0, r7
 801204c:	f7f1 fd74 	bl	8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012052:	e7f4      	b.n	801203e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8012054:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012058:	3d01      	subs	r5, #1
 801205a:	4453      	add	r3, sl
 801205c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012060:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8012064:	eba3 030a 	sub.w	r3, r3, sl
 8012068:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801206c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1d6      	bne.n	8012022 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8012074:	b065      	add	sp, #404	; 0x194
 8012076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801207e:	ad4b      	add	r5, sp, #300	; 0x12c
 8012080:	f04f 0b00 	mov.w	fp, #0
 8012084:	7c23      	ldrb	r3, [r4, #16]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d067      	beq.n	801215a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801208a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801208e:	a811      	add	r0, sp, #68	; 0x44
 8012090:	458a      	cmp	sl, r1
 8012092:	bfd4      	ite	le
 8012094:	2100      	movle	r1, #0
 8012096:	2101      	movgt	r1, #1
 8012098:	f7ff fe38 	bl	8011d0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801209c:	9b08      	ldr	r3, [sp, #32]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d056      	beq.n	8012150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80120a2:	7c23      	ldrb	r3, [r4, #16]
 80120a4:	2264      	movs	r2, #100	; 0x64
 80120a6:	4639      	mov	r1, r7
 80120a8:	4628      	mov	r0, r5
 80120aa:	9309      	str	r3, [sp, #36]	; 0x24
 80120ac:	f00d fc0e 	bl	801f8cc <memcpy>
 80120b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d059      	beq.n	801216a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 80120b6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80120ba:	7922      	ldrb	r2, [r4, #4]
 80120bc:	2a01      	cmp	r2, #1
 80120be:	d13d      	bne.n	801213c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 80120c0:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80120c4:	1ac0      	subs	r0, r0, r3
 80120c6:	2302      	movs	r3, #2
 80120c8:	fb90 f0f3 	sdiv	r0, r0, r3
 80120cc:	b200      	sxth	r0, r0
 80120ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80120d2:	4418      	add	r0, r3
 80120d4:	7c23      	ldrb	r3, [r4, #16]
 80120d6:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d03a      	beq.n	8012154 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80120de:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80120e2:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80120e6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80120ea:	9500      	str	r5, [sp, #0]
 80120ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80120ee:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80120f2:	e9cd b703 	strd	fp, r7, [sp, #12]
 80120f6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80120fa:	464a      	mov	r2, r9
 80120fc:	2100      	movs	r1, #0
 80120fe:	f7ff fc94 	bl	8011a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012102:	2800      	cmp	r0, #0
 8012104:	d1b6      	bne.n	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8012106:	b2b2      	uxth	r2, r6
 8012108:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801210c:	4611      	mov	r1, r2
 801210e:	4413      	add	r3, r2
 8012110:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012114:	b21b      	sxth	r3, r3
 8012116:	1a52      	subs	r2, r2, r1
 8012118:	7c21      	ldrb	r1, [r4, #16]
 801211a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801211e:	b212      	sxth	r2, r2
 8012120:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8012124:	b109      	cbz	r1, 801212a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 8012126:	42b2      	cmp	r2, r6
 8012128:	dba4      	blt.n	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801212a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801212e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8012132:	440a      	add	r2, r1
 8012134:	b212      	sxth	r2, r2
 8012136:	4293      	cmp	r3, r2
 8012138:	dda4      	ble.n	8012084 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801213a:	e79b      	b.n	8012074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801213c:	2a02      	cmp	r2, #2
 801213e:	d105      	bne.n	801214c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8012140:	7be2      	ldrb	r2, [r4, #15]
 8012142:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8012146:	1a80      	subs	r0, r0, r2
 8012148:	1ac0      	subs	r0, r0, r3
 801214a:	e7bf      	b.n	80120cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801214c:	2000      	movs	r0, #0
 801214e:	e7be      	b.n	80120ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8012150:	7be0      	ldrb	r0, [r4, #15]
 8012152:	e7bc      	b.n	80120ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8012154:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012158:	e7c3      	b.n	80120e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801215a:	9b08      	ldr	r3, [sp, #32]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d0f7      	beq.n	8012150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012160:	2264      	movs	r2, #100	; 0x64
 8012162:	4639      	mov	r1, r7
 8012164:	4628      	mov	r0, r5
 8012166:	f00d fbb1 	bl	801f8cc <memcpy>
 801216a:	2300      	movs	r3, #0
 801216c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012170:	6821      	ldr	r1, [r4, #0]
 8012172:	4628      	mov	r0, r5
 8012174:	f7ff fbec 	bl	8011950 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012178:	b203      	sxth	r3, r0
 801217a:	e79e      	b.n	80120ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801217c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801217c:	2b02      	cmp	r3, #2
 801217e:	b510      	push	{r4, lr}
 8012180:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012184:	d00b      	beq.n	801219e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8012186:	2b03      	cmp	r3, #3
 8012188:	d00e      	beq.n	80121a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801218a:	2b01      	cmp	r3, #1
 801218c:	d001      	beq.n	8012192 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801218e:	1860      	adds	r0, r4, r1
 8012190:	bd10      	pop	{r4, pc}
 8012192:	8880      	ldrh	r0, [r0, #4]
 8012194:	4420      	add	r0, r4
 8012196:	b200      	sxth	r0, r0
 8012198:	1a80      	subs	r0, r0, r2
 801219a:	3801      	subs	r0, #1
 801219c:	e7f8      	b.n	8012190 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801219e:	8880      	ldrh	r0, [r0, #4]
 80121a0:	4420      	add	r0, r4
 80121a2:	b200      	sxth	r0, r0
 80121a4:	1a40      	subs	r0, r0, r1
 80121a6:	e7f8      	b.n	801219a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80121a8:	18a0      	adds	r0, r4, r2
 80121aa:	e7f1      	b.n	8012190 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080121ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	b510      	push	{r4, lr}
 80121b0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80121b4:	d006      	beq.n	80121c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80121b6:	2b03      	cmp	r3, #3
 80121b8:	d00a      	beq.n	80121d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	bf14      	ite	ne
 80121be:	18a0      	addne	r0, r4, r2
 80121c0:	1860      	addeq	r0, r4, r1
 80121c2:	bd10      	pop	{r4, pc}
 80121c4:	88c0      	ldrh	r0, [r0, #6]
 80121c6:	4420      	add	r0, r4
 80121c8:	b200      	sxth	r0, r0
 80121ca:	1a80      	subs	r0, r0, r2
 80121cc:	3801      	subs	r0, #1
 80121ce:	e7f8      	b.n	80121c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80121d0:	88c0      	ldrh	r0, [r0, #6]
 80121d2:	4420      	add	r0, r4
 80121d4:	b200      	sxth	r0, r0
 80121d6:	1a40      	subs	r0, r0, r1
 80121d8:	e7f8      	b.n	80121cc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080121dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80121dc:	4b01      	ldr	r3, [pc, #4]	; (80121e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80121de:	2200      	movs	r2, #0
 80121e0:	601a      	str	r2, [r3, #0]
 80121e2:	4770      	bx	lr
 80121e4:	2400ea18 	.word	0x2400ea18

080121e8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80121e8:	4603      	mov	r3, r0
 80121ea:	b1c8      	cbz	r0, 8012220 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80121ec:	0c02      	lsrs	r2, r0, #16
 80121ee:	0412      	lsls	r2, r2, #16
 80121f0:	b9a2      	cbnz	r2, 801221c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80121f2:	0403      	lsls	r3, r0, #16
 80121f4:	2010      	movs	r0, #16
 80121f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80121fa:	bf04      	itt	eq
 80121fc:	021b      	lsleq	r3, r3, #8
 80121fe:	3008      	addeq	r0, #8
 8012200:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012204:	bf04      	itt	eq
 8012206:	011b      	lsleq	r3, r3, #4
 8012208:	3004      	addeq	r0, #4
 801220a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801220e:	bf04      	itt	eq
 8012210:	009b      	lsleq	r3, r3, #2
 8012212:	3002      	addeq	r0, #2
 8012214:	2b00      	cmp	r3, #0
 8012216:	db04      	blt.n	8012222 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012218:	3001      	adds	r0, #1
 801221a:	4770      	bx	lr
 801221c:	2000      	movs	r0, #0
 801221e:	e7ea      	b.n	80121f6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012220:	2020      	movs	r0, #32
 8012222:	4770      	bx	lr

08012224 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012228:	b087      	sub	sp, #28
 801222a:	4681      	mov	r9, r0
 801222c:	4698      	mov	r8, r3
 801222e:	4610      	mov	r0, r2
 8012230:	460d      	mov	r5, r1
 8012232:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8012236:	b981      	cbnz	r1, 801225a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8012238:	b14b      	cbz	r3, 801224e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801223a:	460b      	mov	r3, r1
 801223c:	464a      	mov	r2, r9
 801223e:	4641      	mov	r1, r8
 8012240:	e9cd 4700 	strd	r4, r7, [sp]
 8012244:	f7ff ffee 	bl	8012224 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012248:	b007      	add	sp, #28
 801224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224e:	f04f 33ff 	mov.w	r3, #4294967295
 8012252:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012256:	603b      	str	r3, [r7, #0]
 8012258:	e7f6      	b.n	8012248 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801225a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801225e:	d107      	bne.n	8012270 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8012260:	fb09 f602 	mul.w	r6, r9, r2
 8012264:	fbb6 f0f4 	udiv	r0, r6, r4
 8012268:	fb04 6610 	mls	r6, r4, r0, r6
 801226c:	603e      	str	r6, [r7, #0]
 801226e:	e7eb      	b.n	8012248 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012270:	2601      	movs	r6, #1
 8012272:	fa09 fb01 	lsl.w	fp, r9, r1
 8012276:	408e      	lsls	r6, r1
 8012278:	fbbb f3f4 	udiv	r3, fp, r4
 801227c:	3e01      	subs	r6, #1
 801227e:	9302      	str	r3, [sp, #8]
 8012280:	fb0a f303 	mul.w	r3, sl, r3
 8012284:	4016      	ands	r6, r2
 8012286:	9303      	str	r3, [sp, #12]
 8012288:	4630      	mov	r0, r6
 801228a:	f7ff ffad 	bl	80121e8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801228e:	464a      	mov	r2, r9
 8012290:	460b      	mov	r3, r1
 8012292:	4601      	mov	r1, r0
 8012294:	4630      	mov	r0, r6
 8012296:	e9cd 4700 	strd	r4, r7, [sp]
 801229a:	f7ff ffc3 	bl	8012224 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801229e:	9b02      	ldr	r3, [sp, #8]
 80122a0:	4606      	mov	r6, r0
 80122a2:	eb05 0108 	add.w	r1, r5, r8
 80122a6:	fb04 bb13 	mls	fp, r4, r3, fp
 80122aa:	4658      	mov	r0, fp
 80122ac:	f7ff ff9c 	bl	80121e8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80122b0:	ab05      	add	r3, sp, #20
 80122b2:	465a      	mov	r2, fp
 80122b4:	e9cd 4300 	strd	r4, r3, [sp]
 80122b8:	4603      	mov	r3, r0
 80122ba:	4650      	mov	r0, sl
 80122bc:	f7ff ffb2 	bl	8012224 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	9a05      	ldr	r2, [sp, #20]
 80122c4:	9b03      	ldr	r3, [sp, #12]
 80122c6:	4411      	add	r1, r2
 80122c8:	fbb1 f2f4 	udiv	r2, r1, r4
 80122cc:	18d3      	adds	r3, r2, r3
 80122ce:	fb04 1412 	mls	r4, r4, r2, r1
 80122d2:	441e      	add	r6, r3
 80122d4:	603c      	str	r4, [r7, #0]
 80122d6:	4430      	add	r0, r6
 80122d8:	e7b6      	b.n	8012248 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080122da <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80122da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122de:	b085      	sub	sp, #20
 80122e0:	f1b0 0900 	subs.w	r9, r0, #0
 80122e4:	461d      	mov	r5, r3
 80122e6:	4617      	mov	r7, r2
 80122e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80122ea:	bfbb      	ittet	lt
 80122ec:	f1c9 0900 	rsblt	r9, r9, #0
 80122f0:	f04f 36ff 	movlt.w	r6, #4294967295
 80122f4:	2601      	movge	r6, #1
 80122f6:	6823      	ldrlt	r3, [r4, #0]
 80122f8:	bfbc      	itt	lt
 80122fa:	425b      	neglt	r3, r3
 80122fc:	6023      	strlt	r3, [r4, #0]
 80122fe:	2a00      	cmp	r2, #0
 8012300:	da04      	bge.n	801230c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012302:	6823      	ldr	r3, [r4, #0]
 8012304:	4257      	negs	r7, r2
 8012306:	4276      	negs	r6, r6
 8012308:	425b      	negs	r3, r3
 801230a:	6023      	str	r3, [r4, #0]
 801230c:	2d00      	cmp	r5, #0
 801230e:	4638      	mov	r0, r7
 8012310:	bfba      	itte	lt
 8012312:	426d      	neglt	r5, r5
 8012314:	f04f 38ff 	movlt.w	r8, #4294967295
 8012318:	f04f 0801 	movge.w	r8, #1
 801231c:	f7ff ff64 	bl	80121e8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012320:	ab03      	add	r3, sp, #12
 8012322:	463a      	mov	r2, r7
 8012324:	e9cd 5300 	strd	r5, r3, [sp]
 8012328:	4603      	mov	r3, r0
 801232a:	4648      	mov	r0, r9
 801232c:	f7ff ff7a 	bl	8012224 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	9a03      	ldr	r2, [sp, #12]
 8012334:	4546      	cmp	r6, r8
 8012336:	441a      	add	r2, r3
 8012338:	fb92 f3f5 	sdiv	r3, r2, r5
 801233c:	4418      	add	r0, r3
 801233e:	fb05 2313 	mls	r3, r5, r3, r2
 8012342:	bf18      	it	ne
 8012344:	4240      	negne	r0, r0
 8012346:	1c72      	adds	r2, r6, #1
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	d105      	bne.n	8012358 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801234c:	2b00      	cmp	r3, #0
 801234e:	f1c3 0200 	rsb	r2, r3, #0
 8012352:	db0b      	blt.n	801236c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012354:	6022      	str	r2, [r4, #0]
 8012356:	e006      	b.n	8012366 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012358:	2e01      	cmp	r6, #1
 801235a:	d104      	bne.n	8012366 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801235c:	2b00      	cmp	r3, #0
 801235e:	da02      	bge.n	8012366 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012360:	442b      	add	r3, r5
 8012362:	3801      	subs	r0, #1
 8012364:	6023      	str	r3, [r4, #0]
 8012366:	b005      	add	sp, #20
 8012368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801236c:	3801      	subs	r0, #1
 801236e:	1b52      	subs	r2, r2, r5
 8012370:	e7f0      	b.n	8012354 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08012374 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012378:	4c1c      	ldr	r4, [pc, #112]	; (80123ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801237a:	4605      	mov	r5, r0
 801237c:	6807      	ldr	r7, [r0, #0]
 801237e:	69a3      	ldr	r3, [r4, #24]
 8012380:	b92b      	cbnz	r3, 801238e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012382:	6840      	ldr	r0, [r0, #4]
 8012384:	e9c5 7000 	strd	r7, r0, [r5]
 8012388:	b004      	add	sp, #16
 801238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238e:	f04f 0802 	mov.w	r8, #2
 8012392:	68a2      	ldr	r2, [r4, #8]
 8012394:	ae04      	add	r6, sp, #16
 8012396:	6820      	ldr	r0, [r4, #0]
 8012398:	fb93 f1f8 	sdiv	r1, r3, r8
 801239c:	440a      	add	r2, r1
 801239e:	69e1      	ldr	r1, [r4, #28]
 80123a0:	f846 2d04 	str.w	r2, [r6, #-4]!
 80123a4:	463a      	mov	r2, r7
 80123a6:	9600      	str	r6, [sp, #0]
 80123a8:	f7ff ff97 	bl	80122da <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80123ac:	69a3      	ldr	r3, [r4, #24]
 80123ae:	4607      	mov	r7, r0
 80123b0:	686a      	ldr	r2, [r5, #4]
 80123b2:	6a21      	ldr	r1, [r4, #32]
 80123b4:	9600      	str	r6, [sp, #0]
 80123b6:	6860      	ldr	r0, [r4, #4]
 80123b8:	f7ff ff8f 	bl	80122da <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80123bc:	69a3      	ldr	r3, [r4, #24]
 80123be:	6962      	ldr	r2, [r4, #20]
 80123c0:	4407      	add	r7, r0
 80123c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80123c4:	9600      	str	r6, [sp, #0]
 80123c6:	68e0      	ldr	r0, [r4, #12]
 80123c8:	fb93 f8f8 	sdiv	r8, r3, r8
 80123cc:	4442      	add	r2, r8
 80123ce:	9203      	str	r2, [sp, #12]
 80123d0:	682a      	ldr	r2, [r5, #0]
 80123d2:	f7ff ff82 	bl	80122da <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80123d6:	4680      	mov	r8, r0
 80123d8:	9600      	str	r6, [sp, #0]
 80123da:	69a3      	ldr	r3, [r4, #24]
 80123dc:	686a      	ldr	r2, [r5, #4]
 80123de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80123e0:	6920      	ldr	r0, [r4, #16]
 80123e2:	f7ff ff7a 	bl	80122da <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80123e6:	4440      	add	r0, r8
 80123e8:	e7cc      	b.n	8012384 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80123ea:	bf00      	nop
 80123ec:	2400ea1c 	.word	0x2400ea1c

080123f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80123f0:	4b07      	ldr	r3, [pc, #28]	; (8012410 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d109      	bne.n	801240c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80123f8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80123fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012400:	8003      	strh	r3, [r0, #0]
 8012402:	4b04      	ldr	r3, [pc, #16]	; (8012414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	3b01      	subs	r3, #1
 8012408:	1a9b      	subs	r3, r3, r2
 801240a:	800b      	strh	r3, [r1, #0]
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop
 8012410:	2400e9e8 	.word	0x2400e9e8
 8012414:	2400e9ec 	.word	0x2400e9ec

08012418 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012418:	4b07      	ldr	r3, [pc, #28]	; (8012438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801241a:	b510      	push	{r4, lr}
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d108      	bne.n	8012434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012422:	4b06      	ldr	r3, [pc, #24]	; (801243c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012424:	880c      	ldrh	r4, [r1, #0]
 8012426:	881b      	ldrh	r3, [r3, #0]
 8012428:	f9b0 2000 	ldrsh.w	r2, [r0]
 801242c:	3b01      	subs	r3, #1
 801242e:	1b1b      	subs	r3, r3, r4
 8012430:	8003      	strh	r3, [r0, #0]
 8012432:	800a      	strh	r2, [r1, #0]
 8012434:	bd10      	pop	{r4, pc}
 8012436:	bf00      	nop
 8012438:	2400e9e8 	.word	0x2400e9e8
 801243c:	2400e9ec 	.word	0x2400e9ec

08012440 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012440:	4b0a      	ldr	r3, [pc, #40]	; (801246c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012442:	b510      	push	{r4, lr}
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d10e      	bne.n	8012468 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801244a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801244e:	8843      	ldrh	r3, [r0, #2]
 8012450:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012454:	18ca      	adds	r2, r1, r3
 8012456:	4b06      	ldr	r3, [pc, #24]	; (8012470 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012458:	8044      	strh	r4, [r0, #2]
 801245a:	881b      	ldrh	r3, [r3, #0]
 801245c:	1a9b      	subs	r3, r3, r2
 801245e:	8003      	strh	r3, [r0, #0]
 8012460:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012464:	8081      	strh	r1, [r0, #4]
 8012466:	80c3      	strh	r3, [r0, #6]
 8012468:	bd10      	pop	{r4, pc}
 801246a:	bf00      	nop
 801246c:	2400e9e8 	.word	0x2400e9e8
 8012470:	2400e9ec 	.word	0x2400e9ec

08012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012474:	4b08      	ldr	r3, [pc, #32]	; (8012498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	2b01      	cmp	r3, #1
 801247a:	d10c      	bne.n	8012496 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801247c:	8803      	ldrh	r3, [r0, #0]
 801247e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012482:	8842      	ldrh	r2, [r0, #2]
 8012484:	8002      	strh	r2, [r0, #0]
 8012486:	185a      	adds	r2, r3, r1
 8012488:	4b04      	ldr	r3, [pc, #16]	; (801249c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	1a9b      	subs	r3, r3, r2
 801248e:	8043      	strh	r3, [r0, #2]
 8012490:	88c3      	ldrh	r3, [r0, #6]
 8012492:	80c1      	strh	r1, [r0, #6]
 8012494:	8083      	strh	r3, [r0, #4]
 8012496:	4770      	bx	lr
 8012498:	2400e9e8 	.word	0x2400e9e8
 801249c:	2400e9ec 	.word	0x2400e9ec

080124a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80124a0:	4b07      	ldr	r3, [pc, #28]	; (80124c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80124a2:	b510      	push	{r4, lr}
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d108      	bne.n	80124bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80124aa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80124ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 80124b2:	8003      	strh	r3, [r0, #0]
 80124b4:	8893      	ldrh	r3, [r2, #4]
 80124b6:	3b01      	subs	r3, #1
 80124b8:	1b1b      	subs	r3, r3, r4
 80124ba:	800b      	strh	r3, [r1, #0]
 80124bc:	bd10      	pop	{r4, pc}
 80124be:	bf00      	nop
 80124c0:	2400e9e8 	.word	0x2400e9e8

080124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80124c4:	4b0a      	ldr	r3, [pc, #40]	; (80124f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80124c6:	460a      	mov	r2, r1
 80124c8:	b510      	push	{r4, lr}
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d10d      	bne.n	80124ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80124d0:	8881      	ldrh	r1, [r0, #4]
 80124d2:	8803      	ldrh	r3, [r0, #0]
 80124d4:	440b      	add	r3, r1
 80124d6:	4601      	mov	r1, r0
 80124d8:	3b01      	subs	r3, #1
 80124da:	f821 3b02 	strh.w	r3, [r1], #2
 80124de:	f7ff ffdf 	bl	80124a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80124e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80124e6:	88c2      	ldrh	r2, [r0, #6]
 80124e8:	80c3      	strh	r3, [r0, #6]
 80124ea:	8082      	strh	r2, [r0, #4]
 80124ec:	bd10      	pop	{r4, pc}
 80124ee:	bf00      	nop
 80124f0:	2400e9e8 	.word	0x2400e9e8

080124f4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80124f4:	4b06      	ldr	r3, [pc, #24]	; (8012510 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80124f6:	2100      	movs	r1, #0
 80124f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124fc:	4b05      	ldr	r3, [pc, #20]	; (8012514 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80124fe:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8012502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012506:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801250a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801250e:	4770      	bx	lr
 8012510:	2400e9e4 	.word	0x2400e9e4
 8012514:	2400e9e6 	.word	0x2400e9e6

08012518 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012518:	4b03      	ldr	r3, [pc, #12]	; (8012528 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801251a:	6818      	ldr	r0, [r3, #0]
 801251c:	b110      	cbz	r0, 8012524 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801251e:	6803      	ldr	r3, [r0, #0]
 8012520:	699b      	ldr	r3, [r3, #24]
 8012522:	4718      	bx	r3
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	2400ea4c 	.word	0x2400ea4c

0801252c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801252c:	4770      	bx	lr
	...

08012530 <_ZN8touchgfx11Application4drawEv>:
 8012530:	4b09      	ldr	r3, [pc, #36]	; (8012558 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012532:	b507      	push	{r0, r1, r2, lr}
 8012534:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012538:	2100      	movs	r1, #0
 801253a:	4b08      	ldr	r3, [pc, #32]	; (801255c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801253c:	9100      	str	r1, [sp, #0]
 801253e:	4669      	mov	r1, sp
 8012540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012544:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012548:	f8ad 3006 	strh.w	r3, [sp, #6]
 801254c:	6803      	ldr	r3, [r0, #0]
 801254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012550:	4798      	blx	r3
 8012552:	b003      	add	sp, #12
 8012554:	f85d fb04 	ldr.w	pc, [sp], #4
 8012558:	2400e9e4 	.word	0x2400e9e4
 801255c:	2400e9e6 	.word	0x2400e9e6

08012560 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012560:	4b03      	ldr	r3, [pc, #12]	; (8012570 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012562:	6818      	ldr	r0, [r3, #0]
 8012564:	b110      	cbz	r0, 801256c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012566:	6803      	ldr	r3, [r0, #0]
 8012568:	69db      	ldr	r3, [r3, #28]
 801256a:	4718      	bx	r3
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	2400ea4c 	.word	0x2400ea4c

08012574 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012574:	4b03      	ldr	r3, [pc, #12]	; (8012584 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012576:	6818      	ldr	r0, [r3, #0]
 8012578:	b110      	cbz	r0, 8012580 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801257a:	6803      	ldr	r3, [r0, #0]
 801257c:	6a1b      	ldr	r3, [r3, #32]
 801257e:	4718      	bx	r3
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop
 8012584:	2400ea4c 	.word	0x2400ea4c

08012588 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012588:	4b03      	ldr	r3, [pc, #12]	; (8012598 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801258a:	6818      	ldr	r0, [r3, #0]
 801258c:	b110      	cbz	r0, 8012594 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801258e:	6803      	ldr	r3, [r0, #0]
 8012590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012592:	4718      	bx	r3
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	2400ea4c 	.word	0x2400ea4c

0801259c <_ZN8touchgfx11ApplicationD1Ev>:
 801259c:	4770      	bx	lr

0801259e <_ZN8touchgfx11ApplicationD0Ev>:
 801259e:	b510      	push	{r4, lr}
 80125a0:	4604      	mov	r4, r0
 80125a2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80125a6:	f00d f8e0 	bl	801f76a <_ZdlPvj>
 80125aa:	4620      	mov	r0, r4
 80125ac:	bd10      	pop	{r4, pc}
	...

080125b0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80125b0:	b570      	push	{r4, r5, r6, lr}
 80125b2:	4d38      	ldr	r5, [pc, #224]	; (8012694 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 80125b4:	4604      	mov	r4, r0
 80125b6:	6828      	ldr	r0, [r5, #0]
 80125b8:	b140      	cbz	r0, 80125cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80125ba:	7a03      	ldrb	r3, [r0, #8]
 80125bc:	b933      	cbnz	r3, 80125cc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80125be:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80125c2:	6803      	ldr	r3, [r0, #0]
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125ca:	4718      	bx	r3
 80125cc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80125d0:	b97b      	cbnz	r3, 80125f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80125d2:	b170      	cbz	r0, 80125f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80125d4:	7a03      	ldrb	r3, [r0, #8]
 80125d6:	b163      	cbz	r3, 80125f2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80125d8:	4b2f      	ldr	r3, [pc, #188]	; (8012698 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80125da:	6818      	ldr	r0, [r3, #0]
 80125dc:	b110      	cbz	r0, 80125e4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80125de:	6803      	ldr	r3, [r0, #0]
 80125e0:	691b      	ldr	r3, [r3, #16]
 80125e2:	4798      	blx	r3
 80125e4:	6828      	ldr	r0, [r5, #0]
 80125e6:	6803      	ldr	r3, [r0, #0]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	4798      	blx	r3
 80125ec:	2301      	movs	r3, #1
 80125ee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80125f2:	2500      	movs	r5, #0
 80125f4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80125f8:	42a8      	cmp	r0, r5
 80125fa:	dd0c      	ble.n	8012616 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80125fc:	1963      	adds	r3, r4, r5
 80125fe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012602:	b132      	cbz	r2, 8012612 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8012604:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8012608:	4413      	add	r3, r2
 801260a:	6858      	ldr	r0, [r3, #4]
 801260c:	6803      	ldr	r3, [r0, #0]
 801260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012610:	4798      	blx	r3
 8012612:	3501      	adds	r5, #1
 8012614:	e7ee      	b.n	80125f4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8012616:	2300      	movs	r3, #0
 8012618:	461a      	mov	r2, r3
 801261a:	4298      	cmp	r0, r3
 801261c:	d10f      	bne.n	801263e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801261e:	1d25      	adds	r5, r4, #4
 8012620:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8012624:	4291      	cmp	r1, r2
 8012626:	dd2d      	ble.n	8012684 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8012628:	1e48      	subs	r0, r1, #1
 801262a:	b280      	uxth	r0, r0
 801262c:	4288      	cmp	r0, r1
 801262e:	d31a      	bcc.n	8012666 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8012630:	4b1a      	ldr	r3, [pc, #104]	; (801269c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8012632:	f240 11a9 	movw	r1, #425	; 0x1a9
 8012636:	4a1a      	ldr	r2, [pc, #104]	; (80126a0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8012638:	481a      	ldr	r0, [pc, #104]	; (80126a4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801263a:	f00d f8c5 	bl	801f7c8 <__assert_func>
 801263e:	18e1      	adds	r1, r4, r3
 8012640:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8012644:	b16d      	cbz	r5, 8012662 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8012646:	429a      	cmp	r2, r3
 8012648:	d00a      	beq.n	8012660 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801264a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801264e:	4431      	add	r1, r6
 8012650:	684e      	ldr	r6, [r1, #4]
 8012652:	b291      	uxth	r1, r2
 8012654:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8012658:	604e      	str	r6, [r1, #4]
 801265a:	18a1      	adds	r1, r4, r2
 801265c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8012660:	3201      	adds	r2, #1
 8012662:	3301      	adds	r3, #1
 8012664:	e7d9      	b.n	801261a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8012666:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801266a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801266e:	3304      	adds	r3, #4
 8012670:	428b      	cmp	r3, r1
 8012672:	d004      	beq.n	801267e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8012674:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8012678:	f843 6c04 	str.w	r6, [r3, #-4]
 801267c:	e7f8      	b.n	8012670 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801267e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8012682:	e7cd      	b.n	8012620 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8012684:	4b04      	ldr	r3, [pc, #16]	; (8012698 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8012686:	6818      	ldr	r0, [r3, #0]
 8012688:	b110      	cbz	r0, 8012690 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801268a:	6803      	ldr	r3, [r0, #0]
 801268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268e:	e79a      	b.n	80125c6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012690:	bd70      	pop	{r4, r5, r6, pc}
 8012692:	bf00      	nop
 8012694:	2400ea50 	.word	0x2400ea50
 8012698:	2400ea4c 	.word	0x2400ea4c
 801269c:	08023631 	.word	0x08023631
 80126a0:	08023889 	.word	0x08023889
 80126a4:	0802363f 	.word	0x0802363f

080126a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	4606      	mov	r6, r0
 80126ac:	460c      	mov	r4, r1
 80126ae:	b929      	cbnz	r1, 80126bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80126b0:	4b0c      	ldr	r3, [pc, #48]	; (80126e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80126b2:	2167      	movs	r1, #103	; 0x67
 80126b4:	4a0c      	ldr	r2, [pc, #48]	; (80126e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80126b6:	480d      	ldr	r0, [pc, #52]	; (80126ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80126b8:	f00d f886 	bl	801f7c8 <__assert_func>
 80126bc:	2300      	movs	r3, #0
 80126be:	4d0c      	ldr	r5, [pc, #48]	; (80126f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80126c0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80126c4:	6828      	ldr	r0, [r5, #0]
 80126c6:	b110      	cbz	r0, 80126ce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80126c8:	6803      	ldr	r3, [r0, #0]
 80126ca:	695b      	ldr	r3, [r3, #20]
 80126cc:	4798      	blx	r3
 80126ce:	602c      	str	r4, [r5, #0]
 80126d0:	4620      	mov	r0, r4
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	68db      	ldr	r3, [r3, #12]
 80126d6:	4798      	blx	r3
 80126d8:	6833      	ldr	r3, [r6, #0]
 80126da:	4630      	mov	r0, r6
 80126dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e2:	4718      	bx	r3
 80126e4:	080235fd 	.word	0x080235fd
 80126e8:	08023704 	.word	0x08023704
 80126ec:	08023607 	.word	0x08023607
 80126f0:	2400ea4c 	.word	0x2400ea4c

080126f4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80126f4:	b570      	push	{r4, r5, r6, lr}
 80126f6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80126fa:	f9b0 5000 	ldrsh.w	r5, [r0]
 80126fe:	42ac      	cmp	r4, r5
 8012700:	db18      	blt.n	8012734 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8012702:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8012706:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801270a:	429a      	cmp	r2, r3
 801270c:	db12      	blt.n	8012734 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801270e:	8886      	ldrh	r6, [r0, #4]
 8012710:	4435      	add	r5, r6
 8012712:	888e      	ldrh	r6, [r1, #4]
 8012714:	4434      	add	r4, r6
 8012716:	b22d      	sxth	r5, r5
 8012718:	b224      	sxth	r4, r4
 801271a:	42a5      	cmp	r5, r4
 801271c:	db0a      	blt.n	8012734 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801271e:	88c0      	ldrh	r0, [r0, #6]
 8012720:	4418      	add	r0, r3
 8012722:	88cb      	ldrh	r3, [r1, #6]
 8012724:	441a      	add	r2, r3
 8012726:	b200      	sxth	r0, r0
 8012728:	b212      	sxth	r2, r2
 801272a:	4290      	cmp	r0, r2
 801272c:	bfb4      	ite	lt
 801272e:	2000      	movlt	r0, #0
 8012730:	2001      	movge	r0, #1
 8012732:	bd70      	pop	{r4, r5, r6, pc}
 8012734:	2000      	movs	r0, #0
 8012736:	e7fc      	b.n	8012732 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08012738 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273a:	4604      	mov	r4, r0
 801273c:	4608      	mov	r0, r1
 801273e:	460d      	mov	r5, r1
 8012740:	f7fb fb15 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012744:	b978      	cbnz	r0, 8012766 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012746:	4620      	mov	r0, r4
 8012748:	f7fb fb11 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 801274c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012750:	b150      	cbz	r0, 8012768 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012752:	8026      	strh	r6, [r4, #0]
 8012754:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012758:	8063      	strh	r3, [r4, #2]
 801275a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801275e:	80a3      	strh	r3, [r4, #4]
 8012760:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012764:	80e3      	strh	r3, [r4, #6]
 8012766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012768:	f9b4 1000 	ldrsh.w	r1, [r4]
 801276c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012770:	42b1      	cmp	r1, r6
 8012772:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012776:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801277a:	460f      	mov	r7, r1
 801277c:	88ed      	ldrh	r5, [r5, #6]
 801277e:	bfa8      	it	ge
 8012780:	4637      	movge	r7, r6
 8012782:	4293      	cmp	r3, r2
 8012784:	4618      	mov	r0, r3
 8012786:	4466      	add	r6, ip
 8012788:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801278c:	bfa8      	it	ge
 801278e:	4610      	movge	r0, r2
 8012790:	442a      	add	r2, r5
 8012792:	88e5      	ldrh	r5, [r4, #6]
 8012794:	4461      	add	r1, ip
 8012796:	b236      	sxth	r6, r6
 8012798:	8027      	strh	r7, [r4, #0]
 801279a:	442b      	add	r3, r5
 801279c:	b209      	sxth	r1, r1
 801279e:	b212      	sxth	r2, r2
 80127a0:	8060      	strh	r0, [r4, #2]
 80127a2:	b21b      	sxth	r3, r3
 80127a4:	428e      	cmp	r6, r1
 80127a6:	bfac      	ite	ge
 80127a8:	ebc7 0106 	rsbge	r1, r7, r6
 80127ac:	ebc7 0101 	rsblt	r1, r7, r1
 80127b0:	429a      	cmp	r2, r3
 80127b2:	bfac      	ite	ge
 80127b4:	ebc0 0202 	rsbge	r2, r0, r2
 80127b8:	ebc0 0203 	rsblt	r2, r0, r3
 80127bc:	80a1      	strh	r1, [r4, #4]
 80127be:	80e2      	strh	r2, [r4, #6]
 80127c0:	e7d1      	b.n	8012766 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080127c4 <_ZN8touchgfx11Application11getInstanceEv>:
 80127c4:	4b01      	ldr	r3, [pc, #4]	; (80127cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	2400ea5c 	.word	0x2400ea5c

080127d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80127d0:	b570      	push	{r4, r5, r6, lr}
 80127d2:	2200      	movs	r2, #0
 80127d4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80127d8:	1d04      	adds	r4, r0, #4
 80127da:	b295      	uxth	r5, r2
 80127dc:	42ab      	cmp	r3, r5
 80127de:	d90e      	bls.n	80127fe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80127e0:	f854 6b04 	ldr.w	r6, [r4], #4
 80127e4:	4615      	mov	r5, r2
 80127e6:	3201      	adds	r2, #1
 80127e8:	428e      	cmp	r6, r1
 80127ea:	d1f6      	bne.n	80127da <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 80127ec:	4428      	add	r0, r5
 80127ee:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80127f2:	2bff      	cmp	r3, #255	; 0xff
 80127f4:	d002      	beq.n	80127fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80127f6:	3301      	adds	r3, #1
 80127f8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80127fc:	bd70      	pop	{r4, r5, r6, pc}
 80127fe:	2b20      	cmp	r3, #32
 8012800:	d106      	bne.n	8012810 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8012802:	4b09      	ldr	r3, [pc, #36]	; (8012828 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8012804:	f240 215f 	movw	r1, #607	; 0x25f
 8012808:	4a08      	ldr	r2, [pc, #32]	; (801282c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801280a:	4809      	ldr	r0, [pc, #36]	; (8012830 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801280c:	f00c ffdc 	bl	801f7c8 <__assert_func>
 8012810:	18c2      	adds	r2, r0, r3
 8012812:	2401      	movs	r4, #1
 8012814:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8012818:	191a      	adds	r2, r3, r4
 801281a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801281e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012822:	6041      	str	r1, [r0, #4]
 8012824:	e7ea      	b.n	80127fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8012826:	bf00      	nop
 8012828:	08023668 	.word	0x08023668
 801282c:	08023748 	.word	0x08023748
 8012830:	08023607 	.word	0x08023607

08012834 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	2300      	movs	r3, #0
 8012838:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801283c:	1d04      	adds	r4, r0, #4
 801283e:	b29a      	uxth	r2, r3
 8012840:	4296      	cmp	r6, r2
 8012842:	d90a      	bls.n	801285a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8012844:	f854 2b04 	ldr.w	r2, [r4], #4
 8012848:	428a      	cmp	r2, r1
 801284a:	d107      	bne.n	801285c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801284c:	18c5      	adds	r5, r0, r3
 801284e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8012852:	b11a      	cbz	r2, 801285c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8012854:	3a01      	subs	r2, #1
 8012856:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801285a:	bd70      	pop	{r4, r5, r6, pc}
 801285c:	3301      	adds	r3, #1
 801285e:	e7ee      	b.n	801283e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08012860 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8012860:	2300      	movs	r3, #0
 8012862:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8012866:	30a8      	adds	r0, #168	; 0xa8
 8012868:	f820 3c24 	strh.w	r3, [r0, #-36]
 801286c:	f802 3b01 	strb.w	r3, [r2], #1
 8012870:	4282      	cmp	r2, r0
 8012872:	d1fb      	bne.n	801286c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8012874:	4770      	bx	lr

08012876 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012876:	4603      	mov	r3, r0
 8012878:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801287c:	2200      	movs	r2, #0
 801287e:	801a      	strh	r2, [r3, #0]
 8012880:	3308      	adds	r3, #8
 8012882:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012886:	f823 2c04 	strh.w	r2, [r3, #-4]
 801288a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801288e:	428b      	cmp	r3, r1
 8012890:	d1f5      	bne.n	801287e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012892:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012896:	4770      	bx	lr

08012898 <_ZN8touchgfx11ApplicationC1Ev>:
 8012898:	b570      	push	{r4, r5, r6, lr}
 801289a:	4b1a      	ldr	r3, [pc, #104]	; (8012904 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801289c:	2500      	movs	r5, #0
 801289e:	4604      	mov	r4, r0
 80128a0:	30a8      	adds	r0, #168	; 0xa8
 80128a2:	f840 3ca8 	str.w	r3, [r0, #-168]
 80128a6:	f820 5c24 	strh.w	r5, [r0, #-36]
 80128aa:	f7ff ffe4 	bl	8012876 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80128ae:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80128b2:	f7ff ffe0 	bl	8012876 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80128b6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80128ba:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80128be:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80128c2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80128c6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80128ca:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 80128ce:	490e      	ldr	r1, [pc, #56]	; (8012908 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80128d0:	480e      	ldr	r0, [pc, #56]	; (801290c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80128d2:	f00b fa05 	bl	801dce0 <CRC_Lock>
 80128d6:	4e0e      	ldr	r6, [pc, #56]	; (8012910 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80128d8:	4b0e      	ldr	r3, [pc, #56]	; (8012914 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80128da:	b158      	cbz	r0, 80128f4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 80128dc:	801d      	strh	r5, [r3, #0]
 80128de:	2300      	movs	r3, #0
 80128e0:	4a0d      	ldr	r2, [pc, #52]	; (8012918 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80128e2:	4620      	mov	r0, r4
 80128e4:	6013      	str	r3, [r2, #0]
 80128e6:	4a0d      	ldr	r2, [pc, #52]	; (801291c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80128e8:	6033      	str	r3, [r6, #0]
 80128ea:	6013      	str	r3, [r2, #0]
 80128ec:	f7ff ffb8 	bl	8012860 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80128f0:	4620      	mov	r0, r4
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80128f8:	2002      	movs	r0, #2
 80128fa:	801a      	strh	r2, [r3, #0]
 80128fc:	6030      	str	r0, [r6, #0]
 80128fe:	f001 fab1 	bl	8013e64 <_ZN8touchgfx6Screen4drawEv>
 8012902:	e7ec      	b.n	80128de <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8012904:	080236c8 	.word	0x080236c8
 8012908:	b5e8b5cd 	.word	0xb5e8b5cd
 801290c:	f407a5c2 	.word	0xf407a5c2
 8012910:	2400ea4c 	.word	0x2400ea4c
 8012914:	24000074 	.word	0x24000074
 8012918:	2400ea5c 	.word	0x2400ea5c
 801291c:	2400ea50 	.word	0x2400ea50

08012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012920:	b510      	push	{r4, lr}
 8012922:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012926:	428b      	cmp	r3, r1
 8012928:	d806      	bhi.n	8012938 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801292a:	4b0b      	ldr	r3, [pc, #44]	; (8012958 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801292c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8012930:	4a0a      	ldr	r2, [pc, #40]	; (801295c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8012932:	480b      	ldr	r0, [pc, #44]	; (8012960 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8012934:	f00c ff48 	bl	801f7c8 <__assert_func>
 8012938:	3b01      	subs	r3, #1
 801293a:	b29b      	uxth	r3, r3
 801293c:	428b      	cmp	r3, r1
 801293e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8012942:	d908      	bls.n	8012956 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8012944:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012948:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012952:	685a      	ldr	r2, [r3, #4]
 8012954:	6062      	str	r2, [r4, #4]
 8012956:	bd10      	pop	{r4, pc}
 8012958:	08023631 	.word	0x08023631
 801295c:	0802378d 	.word	0x0802378d
 8012960:	0802363f 	.word	0x0802363f

08012964 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8012964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012966:	466b      	mov	r3, sp
 8012968:	4604      	mov	r4, r0
 801296a:	e883 0006 	stmia.w	r3, {r1, r2}
 801296e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8012972:	2a07      	cmp	r2, #7
 8012974:	d906      	bls.n	8012984 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8012976:	4b09      	ldr	r3, [pc, #36]	; (801299c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8012978:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801297c:	4a08      	ldr	r2, [pc, #32]	; (80129a0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801297e:	4809      	ldr	r0, [pc, #36]	; (80129a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8012980:	f00c ff22 	bl	801f7c8 <__assert_func>
 8012984:	1c51      	adds	r1, r2, #1
 8012986:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801298a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801298e:	cb03      	ldmia	r3!, {r0, r1}
 8012990:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8012994:	6069      	str	r1, [r5, #4]
 8012996:	b003      	add	sp, #12
 8012998:	bd30      	pop	{r4, r5, pc}
 801299a:	bf00      	nop
 801299c:	08023690 	.word	0x08023690
 80129a0:	08023823 	.word	0x08023823
 80129a4:	0802363f 	.word	0x0802363f

080129a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	b08d      	sub	sp, #52	; 0x34
 80129ae:	4683      	mov	fp, r0
 80129b0:	ac08      	add	r4, sp, #32
 80129b2:	4620      	mov	r0, r4
 80129b4:	e884 0006 	stmia.w	r4, {r1, r2}
 80129b8:	f7fb f9d9 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80129bc:	2800      	cmp	r0, #0
 80129be:	d16a      	bne.n	8012a96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80129c0:	9402      	str	r4, [sp, #8]
 80129c2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80129c6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80129ca:	2400      	movs	r4, #0
 80129cc:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80129d0:	9301      	str	r3, [sp, #4]
 80129d2:	36a0      	adds	r6, #160	; 0xa0
 80129d4:	42a5      	cmp	r5, r4
 80129d6:	d00d      	beq.n	80129f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 80129d8:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80129dc:	9802      	ldr	r0, [sp, #8]
 80129de:	f7ff fe89 	bl	80126f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80129e2:	b128      	cbz	r0, 80129f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80129e4:	1e69      	subs	r1, r5, #1
 80129e6:	9801      	ldr	r0, [sp, #4]
 80129e8:	1b09      	subs	r1, r1, r4
 80129ea:	b289      	uxth	r1, r1
 80129ec:	f7ff ff98 	bl	8012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80129f0:	3401      	adds	r4, #1
 80129f2:	e7ef      	b.n	80129d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80129f4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80129f8:	1e7b      	subs	r3, r7, #1
 80129fa:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80129fe:	9703      	str	r7, [sp, #12]
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	2400      	movs	r4, #0
 8012a04:	4655      	mov	r5, sl
 8012a06:	9704      	str	r7, [sp, #16]
 8012a08:	4626      	mov	r6, r4
 8012a0a:	9b04      	ldr	r3, [sp, #16]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d078      	beq.n	8012b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8012a10:	9902      	ldr	r1, [sp, #8]
 8012a12:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012a16:	f7fc ff91 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012a1a:	b360      	cbz	r0, 8012a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8012a1c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8012a20:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8012a24:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8012a28:	45e6      	cmp	lr, ip
 8012a2a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8012a2e:	db35      	blt.n	8012a9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8012a30:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012a34:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8012a38:	4472      	add	r2, lr
 8012a3a:	4463      	add	r3, ip
 8012a3c:	b212      	sxth	r2, r2
 8012a3e:	b21b      	sxth	r3, r3
 8012a40:	429a      	cmp	r2, r3
 8012a42:	dc2b      	bgt.n	8012a9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8012a44:	fa1f f288 	uxth.w	r2, r8
 8012a48:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8012a4c:	45c1      	cmp	r9, r8
 8012a4e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012a52:	4413      	add	r3, r2
 8012a54:	fa1f fc89 	uxth.w	ip, r9
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	fa0f fe83 	sxth.w	lr, r3
 8012a5e:	db0f      	blt.n	8012a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8012a60:	eba3 030c 	sub.w	r3, r3, ip
 8012a64:	1ac9      	subs	r1, r1, r3
 8012a66:	b209      	sxth	r1, r1
 8012a68:	2900      	cmp	r1, #0
 8012a6a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8012a6e:	dd12      	ble.n	8012a96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012a70:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8012a74:	4604      	mov	r4, r0
 8012a76:	9b04      	ldr	r3, [sp, #16]
 8012a78:	3d08      	subs	r5, #8
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	9304      	str	r3, [sp, #16]
 8012a7e:	e7c4      	b.n	8012a0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8012a80:	4461      	add	r1, ip
 8012a82:	b209      	sxth	r1, r1
 8012a84:	4571      	cmp	r1, lr
 8012a86:	dc3a      	bgt.n	8012afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012a88:	eba2 020c 	sub.w	r2, r2, ip
 8012a8c:	b212      	sxth	r2, r2
 8012a8e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012a92:	2a00      	cmp	r2, #0
 8012a94:	dcee      	bgt.n	8012a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8012a96:	b00d      	add	sp, #52	; 0x34
 8012a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a9c:	45c1      	cmp	r9, r8
 8012a9e:	db2e      	blt.n	8012afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012aa0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012aa4:	4499      	add	r9, r3
 8012aa6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8012aaa:	4498      	add	r8, r3
 8012aac:	fa0f f989 	sxth.w	r9, r9
 8012ab0:	fa0f f888 	sxth.w	r8, r8
 8012ab4:	45c1      	cmp	r9, r8
 8012ab6:	dc22      	bgt.n	8012afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012ab8:	fa1f f28c 	uxth.w	r2, ip
 8012abc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8012ac0:	45e6      	cmp	lr, ip
 8012ac2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012ac6:	4413      	add	r3, r2
 8012ac8:	fa1f f88e 	uxth.w	r8, lr
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	fa0f f983 	sxth.w	r9, r3
 8012ad2:	db0a      	blt.n	8012aea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8012ad4:	eba3 0308 	sub.w	r3, r3, r8
 8012ad8:	1ac9      	subs	r1, r1, r3
 8012ada:	b209      	sxth	r1, r1
 8012adc:	2900      	cmp	r1, #0
 8012ade:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8012ae2:	ddd8      	ble.n	8012a96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012ae4:	f8ad 9020 	strh.w	r9, [sp, #32]
 8012ae8:	e7c4      	b.n	8012a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8012aea:	4441      	add	r1, r8
 8012aec:	b209      	sxth	r1, r1
 8012aee:	4549      	cmp	r1, r9
 8012af0:	dc05      	bgt.n	8012afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8012af2:	eba2 0208 	sub.w	r2, r2, r8
 8012af6:	b212      	sxth	r2, r2
 8012af8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8012afc:	e7c9      	b.n	8012a92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012afe:	4606      	mov	r6, r0
 8012b00:	e7b9      	b.n	8012a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8012b02:	2c00      	cmp	r4, #0
 8012b04:	f47f af7d 	bne.w	8012a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8012b08:	2e00      	cmp	r6, #0
 8012b0a:	f000 81dc 	beq.w	8012ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8012b0e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8012b12:	4655      	mov	r5, sl
 8012b14:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8012b18:	b2b9      	uxth	r1, r7
 8012b1a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012b1e:	b2b3      	uxth	r3, r6
 8012b20:	9104      	str	r1, [sp, #16]
 8012b22:	9804      	ldr	r0, [sp, #16]
 8012b24:	441a      	add	r2, r3
 8012b26:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012b2a:	b292      	uxth	r2, r2
 8012b2c:	4401      	add	r1, r0
 8012b2e:	fa0f f882 	sxth.w	r8, r2
 8012b32:	b289      	uxth	r1, r1
 8012b34:	9105      	str	r1, [sp, #20]
 8012b36:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8012b3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d054      	beq.n	8012bee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8012b44:	9902      	ldr	r1, [sp, #8]
 8012b46:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012b4a:	f7fc fef7 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b52:	b1d8      	cbz	r0, 8012b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012b54:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8012b58:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8012b5c:	4576      	cmp	r6, lr
 8012b5e:	dc26      	bgt.n	8012bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012b60:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8012b64:	44f4      	add	ip, lr
 8012b66:	fa0f fc8c 	sxth.w	ip, ip
 8012b6a:	45e0      	cmp	r8, ip
 8012b6c:	db1f      	blt.n	8012bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012b6e:	428f      	cmp	r7, r1
 8012b70:	fa1f fc81 	uxth.w	ip, r1
 8012b74:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8012b78:	dc0f      	bgt.n	8012b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8012b7a:	9805      	ldr	r0, [sp, #20]
 8012b7c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8012b80:	eba0 0c0c 	sub.w	ip, r0, ip
 8012b84:	eba1 010c 	sub.w	r1, r1, ip
 8012b88:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	9903      	ldr	r1, [sp, #12]
 8012b90:	3d08      	subs	r5, #8
 8012b92:	4604      	mov	r4, r0
 8012b94:	3901      	subs	r1, #1
 8012b96:	9103      	str	r1, [sp, #12]
 8012b98:	e7cf      	b.n	8012b3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8012b9a:	4461      	add	r1, ip
 8012b9c:	b209      	sxth	r1, r1
 8012b9e:	4549      	cmp	r1, r9
 8012ba0:	dcf5      	bgt.n	8012b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012ba2:	9904      	ldr	r1, [sp, #16]
 8012ba4:	eba1 0c0c 	sub.w	ip, r1, ip
 8012ba8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8012bac:	e7ee      	b.n	8012b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012bae:	428f      	cmp	r7, r1
 8012bb0:	dced      	bgt.n	8012b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012bb2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8012bb6:	4461      	add	r1, ip
 8012bb8:	b209      	sxth	r1, r1
 8012bba:	4589      	cmp	r9, r1
 8012bbc:	dbe7      	blt.n	8012b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012bbe:	4576      	cmp	r6, lr
 8012bc0:	fa1f fc8e 	uxth.w	ip, lr
 8012bc4:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8012bc8:	dc08      	bgt.n	8012bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8012bca:	eba2 0c0c 	sub.w	ip, r2, ip
 8012bce:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8012bd2:	eba1 010c 	sub.w	r1, r1, ip
 8012bd6:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8012bda:	e7d7      	b.n	8012b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012bdc:	4461      	add	r1, ip
 8012bde:	b209      	sxth	r1, r1
 8012be0:	4588      	cmp	r8, r1
 8012be2:	dbd4      	blt.n	8012b8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012be4:	eba3 0c0c 	sub.w	ip, r3, ip
 8012be8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8012bec:	e7ce      	b.n	8012b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012bee:	2c00      	cmp	r4, #0
 8012bf0:	f000 8169 	beq.w	8012ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8012bf4:	9b00      	ldr	r3, [sp, #0]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	f000 8165 	beq.w	8012ec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8012bfc:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8012c00:	9802      	ldr	r0, [sp, #8]
 8012c02:	4621      	mov	r1, r4
 8012c04:	f7ff fd76 	bl	80126f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012c08:	b120      	cbz	r0, 8012c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8012c0a:	f8bd 1000 	ldrh.w	r1, [sp]
 8012c0e:	9801      	ldr	r0, [sp, #4]
 8012c10:	f7ff fe86 	bl	8012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012c14:	9902      	ldr	r1, [sp, #8]
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7fc fe90 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	f000 809b 	beq.w	8012d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8012c22:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8012c26:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8012c2a:	fa1f f288 	uxth.w	r2, r8
 8012c2e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8012c32:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8012c36:	19d5      	adds	r5, r2, r7
 8012c38:	b2a1      	uxth	r1, r4
 8012c3a:	45a0      	cmp	r8, r4
 8012c3c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8012c40:	fa1f f985 	uxth.w	r9, r5
 8012c44:	440b      	add	r3, r1
 8012c46:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8012c4a:	fa0f f589 	sxth.w	r5, r9
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	9503      	str	r5, [sp, #12]
 8012c52:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8012c56:	9507      	str	r5, [sp, #28]
 8012c58:	f340 809d 	ble.w	8012d96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012c5c:	1a52      	subs	r2, r2, r1
 8012c5e:	4584      	cmp	ip, r0
 8012c60:	fa0f fe83 	sxth.w	lr, r3
 8012c64:	b292      	uxth	r2, r2
 8012c66:	b215      	sxth	r5, r2
 8012c68:	dd2f      	ble.n	8012cca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8012c6a:	9e00      	ldr	r6, [sp, #0]
 8012c6c:	fa1f fc8c 	uxth.w	ip, ip
 8012c70:	b280      	uxth	r0, r0
 8012c72:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012c76:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8012c7a:	9e03      	ldr	r6, [sp, #12]
 8012c7c:	ebac 0300 	sub.w	r3, ip, r0
 8012c80:	448c      	add	ip, r1
 8012c82:	eba6 060e 	sub.w	r6, r6, lr
 8012c86:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	4470      	add	r0, lr
 8012c8e:	fa0f fc8c 	sxth.w	ip, ip
 8012c92:	b21c      	sxth	r4, r3
 8012c94:	b200      	sxth	r0, r0
 8012c96:	4366      	muls	r6, r4
 8012c98:	ebac 0000 	sub.w	r0, ip, r0
 8012c9c:	4368      	muls	r0, r5
 8012c9e:	4286      	cmp	r6, r0
 8012ca0:	db09      	blt.n	8012cb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8012ca2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8012ca6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8012caa:	4417      	add	r7, r2
 8012cac:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012cb0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8012cb4:	e685      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012cb6:	440b      	add	r3, r1
 8012cb8:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8012cbc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012cc0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8012cc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012cc8:	e67b      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012cca:	9e03      	ldr	r6, [sp, #12]
 8012ccc:	45b6      	cmp	lr, r6
 8012cce:	da28      	bge.n	8012d22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8012cd0:	9b00      	ldr	r3, [sp, #0]
 8012cd2:	eba6 060e 	sub.w	r6, r6, lr
 8012cd6:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8012cda:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8012cde:	eb04 030c 	add.w	r3, r4, ip
 8012ce2:	fa1f f883 	uxth.w	r8, r3
 8012ce6:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8012cea:	4403      	add	r3, r0
 8012cec:	fa0f f988 	sxth.w	r9, r8
 8012cf0:	eba0 000c 	sub.w	r0, r0, ip
 8012cf4:	eba3 0308 	sub.w	r3, r3, r8
 8012cf8:	4368      	muls	r0, r5
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	fa0f f883 	sxth.w	r8, r3
 8012d00:	fb08 f606 	mul.w	r6, r8, r6
 8012d04:	42b0      	cmp	r0, r6
 8012d06:	dc06      	bgt.n	8012d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8012d08:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8012d0c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8012d10:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8012d14:	e7c9      	b.n	8012caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8012d16:	4423      	add	r3, r4
 8012d18:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8012d1c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012d20:	e64f      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012d22:	eba3 0309 	sub.w	r3, r3, r9
 8012d26:	9807      	ldr	r0, [sp, #28]
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	2806      	cmp	r0, #6
 8012d2c:	fa0f fc83 	sxth.w	ip, r3
 8012d30:	d818      	bhi.n	8012d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8012d32:	4652      	mov	r2, sl
 8012d34:	ab0a      	add	r3, sp, #40	; 0x28
 8012d36:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8012d3a:	6851      	ldr	r1, [r2, #4]
 8012d3c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8012d40:	c303      	stmia	r3!, {r0, r1}
 8012d42:	9b03      	ldr	r3, [sp, #12]
 8012d44:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8012d48:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8012d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8012d4e:	9801      	ldr	r0, [sp, #4]
 8012d50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012d54:	f7ff fe06 	bl	8012964 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8012d58:	9b00      	ldr	r3, [sp, #0]
 8012d5a:	f1aa 0a08 	sub.w	sl, sl, #8
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	e747      	b.n	8012bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012d64:	9800      	ldr	r0, [sp, #0]
 8012d66:	45ac      	cmp	ip, r5
 8012d68:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8012d6c:	db0c      	blt.n	8012d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8012d6e:	4417      	add	r7, r2
 8012d70:	4458      	add	r0, fp
 8012d72:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012d76:	b2bf      	uxth	r7, r7
 8012d78:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8012d7c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8012d80:	440f      	add	r7, r1
 8012d82:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8012d86:	e61c      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012d88:	4458      	add	r0, fp
 8012d8a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8012d8e:	443b      	add	r3, r7
 8012d90:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012d94:	e615      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012d96:	fa1f f18c 	uxth.w	r1, ip
 8012d9a:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8012d9e:	b282      	uxth	r2, r0
 8012da0:	4584      	cmp	ip, r0
 8012da2:	eb01 0e05 	add.w	lr, r1, r5
 8012da6:	9204      	str	r2, [sp, #16]
 8012da8:	fa1f fe8e 	uxth.w	lr, lr
 8012dac:	9e04      	ldr	r6, [sp, #16]
 8012dae:	fa0f f28e 	sxth.w	r2, lr
 8012db2:	9205      	str	r2, [sp, #20]
 8012db4:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8012db8:	4432      	add	r2, r6
 8012dba:	b292      	uxth	r2, r2
 8012dbc:	9206      	str	r2, [sp, #24]
 8012dbe:	da26      	bge.n	8012e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8012dc0:	eba3 0309 	sub.w	r3, r3, r9
 8012dc4:	eba2 020e 	sub.w	r2, r2, lr
 8012dc8:	eba0 000c 	sub.w	r0, r0, ip
 8012dcc:	eba4 0408 	sub.w	r4, r4, r8
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	b292      	uxth	r2, r2
 8012dd4:	fa0f fa83 	sxth.w	sl, r3
 8012dd8:	b211      	sxth	r1, r2
 8012dda:	fb0a f000 	mul.w	r0, sl, r0
 8012dde:	434c      	muls	r4, r1
 8012de0:	42a0      	cmp	r0, r4
 8012de2:	9800      	ldr	r0, [sp, #0]
 8012de4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8012de8:	dc06      	bgt.n	8012df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8012dea:	4458      	add	r0, fp
 8012dec:	9a05      	ldr	r2, [sp, #20]
 8012dee:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8012df2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8012df6:	e7ca      	b.n	8012d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8012df8:	eb0b 0300 	add.w	r3, fp, r0
 8012dfc:	9903      	ldr	r1, [sp, #12]
 8012dfe:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8012e02:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8012e06:	442a      	add	r2, r5
 8012e08:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012e0c:	e5d9      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012e0e:	9e04      	ldr	r6, [sp, #16]
 8012e10:	9a03      	ldr	r2, [sp, #12]
 8012e12:	1b89      	subs	r1, r1, r6
 8012e14:	b21e      	sxth	r6, r3
 8012e16:	b289      	uxth	r1, r1
 8012e18:	4296      	cmp	r6, r2
 8012e1a:	fa0f fc81 	sxth.w	ip, r1
 8012e1e:	dd25      	ble.n	8012e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8012e20:	eba3 0309 	sub.w	r3, r3, r9
 8012e24:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8012e28:	9e05      	ldr	r6, [sp, #20]
 8012e2a:	eba4 0408 	sub.w	r4, r4, r8
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	eba6 0902 	sub.w	r9, r6, r2
 8012e34:	fb0c f404 	mul.w	r4, ip, r4
 8012e38:	b218      	sxth	r0, r3
 8012e3a:	9a00      	ldr	r2, [sp, #0]
 8012e3c:	fb00 f909 	mul.w	r9, r0, r9
 8012e40:	00d2      	lsls	r2, r2, #3
 8012e42:	454c      	cmp	r4, r9
 8012e44:	db03      	blt.n	8012e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8012e46:	445a      	add	r2, fp
 8012e48:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8012e4c:	e79f      	b.n	8012d8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8012e4e:	eb0b 0302 	add.w	r3, fp, r2
 8012e52:	9a03      	ldr	r2, [sp, #12]
 8012e54:	4429      	add	r1, r5
 8012e56:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8012e5a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8012e5e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8012e62:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8012e66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012e6a:	e5aa      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012e6c:	9b06      	ldr	r3, [sp, #24]
 8012e6e:	9c07      	ldr	r4, [sp, #28]
 8012e70:	eba3 020e 	sub.w	r2, r3, lr
 8012e74:	2c06      	cmp	r4, #6
 8012e76:	b292      	uxth	r2, r2
 8012e78:	b213      	sxth	r3, r2
 8012e7a:	d80d      	bhi.n	8012e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8012e7c:	4651      	mov	r1, sl
 8012e7e:	aa0a      	add	r2, sp, #40	; 0x28
 8012e80:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8012e84:	6849      	ldr	r1, [r1, #4]
 8012e86:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8012e8a:	9b05      	ldr	r3, [sp, #20]
 8012e8c:	c203      	stmia	r2!, {r0, r1}
 8012e8e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8012e92:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8012e96:	e759      	b.n	8012d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8012e98:	9c00      	ldr	r4, [sp, #0]
 8012e9a:	4563      	cmp	r3, ip
 8012e9c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012ea0:	db0d      	blt.n	8012ebe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8012ea2:	4429      	add	r1, r5
 8012ea4:	9a04      	ldr	r2, [sp, #16]
 8012ea6:	445c      	add	r4, fp
 8012ea8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012eac:	b289      	uxth	r1, r1
 8012eae:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8012eb2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8012eb6:	4411      	add	r1, r2
 8012eb8:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8012ebc:	e581      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012ebe:	445c      	add	r4, fp
 8012ec0:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8012ec4:	e79f      	b.n	8012e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8012ec6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8012eca:	2f07      	cmp	r7, #7
 8012ecc:	d806      	bhi.n	8012edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8012ece:	ab08      	add	r3, sp, #32
 8012ed0:	9801      	ldr	r0, [sp, #4]
 8012ed2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012ed6:	f7ff fd45 	bl	8012964 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8012eda:	e5dc      	b.n	8012a96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8012edc:	f107 39ff 	add.w	r9, r7, #4294967295
 8012ee0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8012ee4:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8012ee8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012eec:	f04f 35ff 	mov.w	r5, #4294967295
 8012ef0:	2400      	movs	r4, #0
 8012ef2:	9304      	str	r3, [sp, #16]
 8012ef4:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8012ef8:	f109 32ff 	add.w	r2, r9, #4294967295
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	4690      	mov	r8, r2
 8012f00:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8012f04:	9303      	str	r3, [sp, #12]
 8012f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012f0a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012f0e:	6818      	ldr	r0, [r3, #0]
 8012f10:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8012f14:	9206      	str	r2, [sp, #24]
 8012f16:	bf16      	itet	ne
 8012f18:	9904      	ldrne	r1, [sp, #16]
 8012f1a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8012f1e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8012f22:	9305      	str	r3, [sp, #20]
 8012f24:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012f28:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8012f2c:	fb16 f601 	smulbb	r6, r6, r1
 8012f30:	6859      	ldr	r1, [r3, #4]
 8012f32:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012f36:	4671      	mov	r1, lr
 8012f38:	a80a      	add	r0, sp, #40	; 0x28
 8012f3a:	f7ff fbfd 	bl	8012738 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012f3e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8012f42:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012f46:	9b03      	ldr	r3, [sp, #12]
 8012f48:	9a00      	ldr	r2, [sp, #0]
 8012f4a:	fb11 f100 	smulbb	r1, r1, r0
 8012f4e:	2008      	movs	r0, #8
 8012f50:	fb02 6603 	mla	r6, r2, r3, r6
 8012f54:	1b8e      	subs	r6, r1, r6
 8012f56:	fb91 f1f0 	sdiv	r1, r1, r0
 8012f5a:	42b1      	cmp	r1, r6
 8012f5c:	dc21      	bgt.n	8012fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8012f5e:	4556      	cmp	r6, sl
 8012f60:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8012f64:	da03      	bge.n	8012f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8012f66:	b1e6      	cbz	r6, 8012fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8012f68:	46b2      	mov	sl, r6
 8012f6a:	4645      	mov	r5, r8
 8012f6c:	464c      	mov	r4, r9
 8012f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f72:	f118 0f02 	cmn.w	r8, #2
 8012f76:	d1c8      	bne.n	8012f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8012f78:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012f7c:	f1a7 0708 	sub.w	r7, r7, #8
 8012f80:	4691      	mov	r9, r2
 8012f82:	d1b7      	bne.n	8012ef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8012f84:	9b01      	ldr	r3, [sp, #4]
 8012f86:	b2a6      	uxth	r6, r4
 8012f88:	00e4      	lsls	r4, r4, #3
 8012f8a:	1918      	adds	r0, r3, r4
 8012f8c:	1c6b      	adds	r3, r5, #1
 8012f8e:	d10b      	bne.n	8012fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8012f90:	4601      	mov	r1, r0
 8012f92:	9802      	ldr	r0, [sp, #8]
 8012f94:	f7ff fbd0 	bl	8012738 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012f98:	4631      	mov	r1, r6
 8012f9a:	9801      	ldr	r0, [sp, #4]
 8012f9c:	f7ff fcc0 	bl	8012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012fa0:	e50f      	b.n	80129c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8012fa2:	4645      	mov	r5, r8
 8012fa4:	464c      	mov	r4, r9
 8012fa6:	e7ed      	b.n	8012f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8012fa8:	9b01      	ldr	r3, [sp, #4]
 8012faa:	00ed      	lsls	r5, r5, #3
 8012fac:	445c      	add	r4, fp
 8012fae:	1959      	adds	r1, r3, r5
 8012fb0:	445d      	add	r5, fp
 8012fb2:	f7ff fbc1 	bl	8012738 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012fb6:	9b02      	ldr	r3, [sp, #8]
 8012fb8:	cb03      	ldmia	r3!, {r0, r1}
 8012fba:	9b02      	ldr	r3, [sp, #8]
 8012fbc:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8012fc0:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8012fc4:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8012fc8:	6861      	ldr	r1, [r4, #4]
 8012fca:	c303      	stmia	r3!, {r0, r1}
 8012fcc:	e7e4      	b.n	8012f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08012fd0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012fd0:	4b1d      	ldr	r3, [pc, #116]	; (8013048 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8012fd2:	b530      	push	{r4, r5, lr}
 8012fd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012fd8:	b085      	sub	sp, #20
 8012fda:	4b1c      	ldr	r3, [pc, #112]	; (801304c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8012fdc:	460c      	mov	r4, r1
 8012fde:	2100      	movs	r1, #0
 8012fe0:	4605      	mov	r5, r0
 8012fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fe6:	6820      	ldr	r0, [r4, #0]
 8012fe8:	9100      	str	r1, [sp, #0]
 8012fea:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012fee:	ab02      	add	r3, sp, #8
 8012ff0:	6861      	ldr	r1, [r4, #4]
 8012ff2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012ff6:	c303      	stmia	r3!, {r0, r1}
 8012ff8:	4669      	mov	r1, sp
 8012ffa:	a802      	add	r0, sp, #8
 8012ffc:	f7fa fe74 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8013000:	ab02      	add	r3, sp, #8
 8013002:	cb03      	ldmia	r3!, {r0, r1}
 8013004:	4b12      	ldr	r3, [pc, #72]	; (8013050 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8013006:	6020      	str	r0, [r4, #0]
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	6061      	str	r1, [r4, #4]
 801300c:	b138      	cbz	r0, 801301e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801300e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8013012:	b133      	cbz	r3, 8013022 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8013014:	6821      	ldr	r1, [r4, #0]
 8013016:	4628      	mov	r0, r5
 8013018:	6862      	ldr	r2, [r4, #4]
 801301a:	f7ff fcc5 	bl	80129a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801301e:	b005      	add	sp, #20
 8013020:	bd30      	pop	{r4, r5, pc}
 8013022:	6803      	ldr	r3, [r0, #0]
 8013024:	4621      	mov	r1, r4
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	4798      	blx	r3
 801302a:	4b0a      	ldr	r3, [pc, #40]	; (8013054 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801302c:	6818      	ldr	r0, [r3, #0]
 801302e:	b118      	cbz	r0, 8013038 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8013030:	6803      	ldr	r3, [r0, #0]
 8013032:	4621      	mov	r1, r4
 8013034:	689b      	ldr	r3, [r3, #8]
 8013036:	4798      	blx	r3
 8013038:	4b07      	ldr	r3, [pc, #28]	; (8013058 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801303a:	4621      	mov	r1, r4
 801303c:	6818      	ldr	r0, [r3, #0]
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	69db      	ldr	r3, [r3, #28]
 8013042:	4798      	blx	r3
 8013044:	e7eb      	b.n	801301e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8013046:	bf00      	nop
 8013048:	2400e9e4 	.word	0x2400e9e4
 801304c:	2400e9e6 	.word	0x2400e9e6
 8013050:	2400ea4c 	.word	0x2400ea4c
 8013054:	2400ea48 	.word	0x2400ea48
 8013058:	2400e9f0 	.word	0x2400e9f0

0801305c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013060:	4604      	mov	r4, r0
 8013062:	b09b      	sub	sp, #108	; 0x6c
 8013064:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8013068:	b129      	cbz	r1, 8013076 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801306a:	2300      	movs	r3, #0
 801306c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8013070:	b01b      	add	sp, #108	; 0x6c
 8013072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013076:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801307a:	4630      	mov	r0, r6
 801307c:	f7fa fe77 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013080:	4605      	mov	r5, r0
 8013082:	b940      	cbnz	r0, 8013096 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8013084:	4620      	mov	r0, r4
 8013086:	e896 0006 	ldmia.w	r6, {r1, r2}
 801308a:	f7ff fc8d 	bl	80129a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801308e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8013092:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013096:	4ba6      	ldr	r3, [pc, #664]	; (8013330 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	b33b      	cbz	r3, 80130ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801309c:	4da5      	ldr	r5, [pc, #660]	; (8013334 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801309e:	4628      	mov	r0, r5
 80130a0:	f7fa fe65 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80130a4:	4606      	mov	r6, r0
 80130a6:	bb08      	cbnz	r0, 80130ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80130a8:	4628      	mov	r0, r5
 80130aa:	f7ff f9c9 	bl	8012440 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80130ae:	6829      	ldr	r1, [r5, #0]
 80130b0:	686a      	ldr	r2, [r5, #4]
 80130b2:	4620      	mov	r0, r4
 80130b4:	f7ff fc78 	bl	80129a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80130b8:	802e      	strh	r6, [r5, #0]
 80130ba:	806e      	strh	r6, [r5, #2]
 80130bc:	80ae      	strh	r6, [r5, #4]
 80130be:	80ee      	strh	r6, [r5, #6]
 80130c0:	4f9d      	ldr	r7, [pc, #628]	; (8013338 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80130c2:	a809      	add	r0, sp, #36	; 0x24
 80130c4:	f7ff fbd7 	bl	8012876 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80130c8:	883d      	ldrh	r5, [r7, #0]
 80130ca:	462e      	mov	r6, r5
 80130cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80130d0:	42b3      	cmp	r3, r6
 80130d2:	d910      	bls.n	80130f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80130d4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80130d8:	3601      	adds	r6, #1
 80130da:	a809      	add	r0, sp, #36	; 0x24
 80130dc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80130e0:	b2b6      	uxth	r6, r6
 80130e2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80130e6:	f7ff fc3d 	bl	8012964 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80130ea:	e7ef      	b.n	80130cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80130ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d1e5      	bne.n	80130c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80130f4:	e7bc      	b.n	8013070 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80130f6:	462e      	mov	r6, r5
 80130f8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80130fc:	42b3      	cmp	r3, r6
 80130fe:	d90b      	bls.n	8013118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8013100:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013104:	3601      	adds	r6, #1
 8013106:	4620      	mov	r0, r4
 8013108:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801310c:	b2b6      	uxth	r6, r6
 801310e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8013112:	f7ff fc49 	bl	80129a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013116:	e7ef      	b.n	80130f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8013118:	4a88      	ldr	r2, [pc, #544]	; (801333c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801311a:	6813      	ldr	r3, [r2, #0]
 801311c:	4690      	mov	r8, r2
 801311e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013122:	2b01      	cmp	r3, #1
 8013124:	f040 8094 	bne.w	8013250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8013128:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801312c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8013130:	f04f 0900 	mov.w	r9, #0
 8013134:	33aa      	adds	r3, #170	; 0xaa
 8013136:	42a8      	cmp	r0, r5
 8013138:	f103 0308 	add.w	r3, r3, #8
 801313c:	dd0a      	ble.n	8013154 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801313e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013142:	3501      	adds	r5, #1
 8013144:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8013148:	440a      	add	r2, r1
 801314a:	b212      	sxth	r2, r2
 801314c:	4591      	cmp	r9, r2
 801314e:	bfb8      	it	lt
 8013150:	4691      	movlt	r9, r2
 8013152:	e7f0      	b.n	8013136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 8013154:	4b7a      	ldr	r3, [pc, #488]	; (8013340 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8013156:	4e7b      	ldr	r6, [pc, #492]	; (8013344 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8013158:	881d      	ldrh	r5, [r3, #0]
 801315a:	2300      	movs	r3, #0
 801315c:	2d0f      	cmp	r5, #15
 801315e:	bf8c      	ite	hi
 8013160:	08ed      	lsrhi	r5, r5, #3
 8013162:	2501      	movls	r5, #1
 8013164:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013168:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801316c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8013170:	f8d8 0000 	ldr.w	r0, [r8]
 8013174:	440b      	add	r3, r1
 8013176:	6802      	ldr	r2, [r0, #0]
 8013178:	b21b      	sxth	r3, r3
 801317a:	4599      	cmp	r9, r3
 801317c:	dd4b      	ble.n	8013216 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801317e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8013182:	4798      	blx	r3
 8013184:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013188:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801318c:	4413      	add	r3, r2
 801318e:	b21b      	sxth	r3, r3
 8013190:	195a      	adds	r2, r3, r5
 8013192:	4290      	cmp	r0, r2
 8013194:	da07      	bge.n	80131a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8013196:	4581      	cmp	r9, r0
 8013198:	dd05      	ble.n	80131a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801319a:	4298      	cmp	r0, r3
 801319c:	da33      	bge.n	8013206 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801319e:	2b00      	cmp	r3, #0
 80131a0:	dd31      	ble.n	8013206 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80131a2:	4648      	mov	r0, r9
 80131a4:	e004      	b.n	80131b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80131a6:	4298      	cmp	r0, r3
 80131a8:	dbfb      	blt.n	80131a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80131aa:	4548      	cmp	r0, r9
 80131ac:	bfa8      	it	ge
 80131ae:	4648      	movge	r0, r9
 80131b0:	f9b6 2000 	ldrsh.w	r2, [r6]
 80131b4:	2100      	movs	r1, #0
 80131b6:	1ac0      	subs	r0, r0, r3
 80131b8:	f8b7 a000 	ldrh.w	sl, [r7]
 80131bc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80131c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80131c4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80131c8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80131cc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80131d0:	4553      	cmp	r3, sl
 80131d2:	d9c9      	bls.n	8013168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80131d4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80131d8:	ab07      	add	r3, sp, #28
 80131da:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80131de:	6851      	ldr	r1, [r2, #4]
 80131e0:	c303      	stmia	r3!, {r0, r1}
 80131e2:	a807      	add	r0, sp, #28
 80131e4:	a905      	add	r1, sp, #20
 80131e6:	f7fa fd7f 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 80131ea:	a807      	add	r0, sp, #28
 80131ec:	f7fa fdbf 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80131f0:	b920      	cbnz	r0, 80131fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80131f2:	6823      	ldr	r3, [r4, #0]
 80131f4:	a907      	add	r1, sp, #28
 80131f6:	4620      	mov	r0, r4
 80131f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131fa:	4798      	blx	r3
 80131fc:	f10a 0a01 	add.w	sl, sl, #1
 8013200:	fa1f fa8a 	uxth.w	sl, sl
 8013204:	e7e2      	b.n	80131cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8013206:	f8d8 0000 	ldr.w	r0, [r8]
 801320a:	2101      	movs	r1, #1
 801320c:	6803      	ldr	r3, [r0, #0]
 801320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013212:	4798      	blx	r3
 8013214:	e7a8      	b.n	8013168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8013216:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8013218:	4798      	blx	r3
 801321a:	4b4b      	ldr	r3, [pc, #300]	; (8013348 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	f43f af26 	beq.w	8013070 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013224:	2300      	movs	r3, #0
 8013226:	883d      	ldrh	r5, [r7, #0]
 8013228:	34ea      	adds	r4, #234	; 0xea
 801322a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801322e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8013232:	42ab      	cmp	r3, r5
 8013234:	f67f af1c 	bls.w	8013070 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8013238:	ab1a      	add	r3, sp, #104	; 0x68
 801323a:	4620      	mov	r0, r4
 801323c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013240:	3501      	adds	r5, #1
 8013242:	3b44      	subs	r3, #68	; 0x44
 8013244:	b2ad      	uxth	r5, r5
 8013246:	e893 0006 	ldmia.w	r3, {r1, r2}
 801324a:	f7ff fb8b 	bl	8012964 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801324e:	e7ee      	b.n	801322e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8013250:	2b02      	cmp	r3, #2
 8013252:	f040 813d 	bne.w	80134d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 8013256:	4b3d      	ldr	r3, [pc, #244]	; (801334c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d02c      	beq.n	80132b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801325e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8013262:	883a      	ldrh	r2, [r7, #0]
 8013264:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8013268:	3201      	adds	r2, #1
 801326a:	b292      	uxth	r2, r2
 801326c:	2900      	cmp	r1, #0
 801326e:	d0d4      	beq.n	801321a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8013270:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8013274:	4610      	mov	r0, r2
 8013276:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801327a:	f04f 0a00 	mov.w	sl, #0
 801327e:	441d      	add	r5, r3
 8013280:	b22d      	sxth	r5, r5
 8013282:	b283      	uxth	r3, r0
 8013284:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8013288:	4299      	cmp	r1, r3
 801328a:	f240 80c3 	bls.w	8013414 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801328e:	4426      	add	r6, r4
 8013290:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8013294:	4684      	mov	ip, r0
 8013296:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801329a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801329e:	4573      	cmp	r3, lr
 80132a0:	f340 80a5 	ble.w	80133ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80132a4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80132a8:	4475      	add	r5, lr
 80132aa:	b22d      	sxth	r5, r5
 80132ac:	429d      	cmp	r5, r3
 80132ae:	bfa8      	it	ge
 80132b0:	461d      	movge	r5, r3
 80132b2:	3001      	adds	r0, #1
 80132b4:	46e2      	mov	sl, ip
 80132b6:	e7e4      	b.n	8013282 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 80132b8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80132bc:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80132c0:	f1bb 0f00 	cmp.w	fp, #0
 80132c4:	d0a9      	beq.n	801321a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80132c6:	883b      	ldrh	r3, [r7, #0]
 80132c8:	2600      	movs	r6, #0
 80132ca:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80132ce:	3301      	adds	r3, #1
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	b299      	uxth	r1, r3
 80132d4:	00f5      	lsls	r5, r6, #3
 80132d6:	458b      	cmp	fp, r1
 80132d8:	d93a      	bls.n	8013350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80132da:	4425      	add	r5, r4
 80132dc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80132e0:	469c      	mov	ip, r3
 80132e2:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80132e6:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80132ea:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80132ee:	4408      	add	r0, r1
 80132f0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80132f4:	4471      	add	r1, lr
 80132f6:	b200      	sxth	r0, r0
 80132f8:	b209      	sxth	r1, r1
 80132fa:	4288      	cmp	r0, r1
 80132fc:	da06      	bge.n	801330c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 80132fe:	4586      	cmp	lr, r0
 8013300:	4672      	mov	r2, lr
 8013302:	bfb8      	it	lt
 8013304:	4602      	movlt	r2, r0
 8013306:	3301      	adds	r3, #1
 8013308:	4666      	mov	r6, ip
 801330a:	e7e2      	b.n	80132d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801330c:	d10b      	bne.n	8013326 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801330e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8013312:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8013316:	458c      	cmp	ip, r1
 8013318:	bfb4      	ite	lt
 801331a:	469c      	movlt	ip, r3
 801331c:	46b4      	movge	ip, r6
 801331e:	4572      	cmp	r2, lr
 8013320:	bfb8      	it	lt
 8013322:	4672      	movlt	r2, lr
 8013324:	e7ef      	b.n	8013306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8013326:	428a      	cmp	r2, r1
 8013328:	46b4      	mov	ip, r6
 801332a:	bfb8      	it	lt
 801332c:	460a      	movlt	r2, r1
 801332e:	e7ea      	b.n	8013306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8013330:	2400ea48 	.word	0x2400ea48
 8013334:	2400ea54 	.word	0x2400ea54
 8013338:	24000074 	.word	0x24000074
 801333c:	2400e9f0 	.word	0x2400e9f0
 8013340:	2400e9e6 	.word	0x2400e9e6
 8013344:	2400e9e4 	.word	0x2400e9e4
 8013348:	2400e9ee 	.word	0x2400e9ee
 801334c:	2400e9e8 	.word	0x2400e9e8
 8013350:	1961      	adds	r1, r4, r5
 8013352:	ab07      	add	r3, sp, #28
 8013354:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8013358:	6849      	ldr	r1, [r1, #4]
 801335a:	c303      	stmia	r3!, {r0, r1}
 801335c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013360:	a807      	add	r0, sp, #28
 8013362:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013366:	2b13      	cmp	r3, #19
 8013368:	440b      	add	r3, r1
 801336a:	bfd8      	it	le
 801336c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013370:	1a9b      	subs	r3, r3, r2
 8013372:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013376:	f8ad 3020 	strh.w	r3, [sp, #32]
 801337a:	f7ff f87b 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801337e:	a807      	add	r0, sp, #28
 8013380:	f7fa fcf5 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013384:	2800      	cmp	r0, #0
 8013386:	d199      	bne.n	80132bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8013388:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801338c:	4425      	add	r5, r4
 801338e:	f8d8 0000 	ldr.w	r0, [r8]
 8013392:	f1bc 0f14 	cmp.w	ip, #20
 8013396:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801339a:	f8d0 e000 	ldr.w	lr, [r0]
 801339e:	bfa8      	it	ge
 80133a0:	f04f 0c14 	movge.w	ip, #20
 80133a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80133a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80133ac:	fa1f fc8c 	uxth.w	ip, ip
 80133b0:	f8cd c000 	str.w	ip, [sp]
 80133b4:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 80133b8:	47d0      	blx	sl
 80133ba:	4682      	mov	sl, r0
 80133bc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80133c0:	a807      	add	r0, sp, #28
 80133c2:	f7ff f83d 	bl	8012440 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	4620      	mov	r0, r4
 80133ca:	a907      	add	r1, sp, #28
 80133cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133ce:	4798      	blx	r3
 80133d0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80133d4:	eba0 000a 	sub.w	r0, r0, sl
 80133d8:	b200      	sxth	r0, r0
 80133da:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80133de:	2800      	cmp	r0, #0
 80133e0:	f47f af6c 	bne.w	80132bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80133e4:	b2b1      	uxth	r1, r6
 80133e6:	4648      	mov	r0, r9
 80133e8:	f7ff fa9a 	bl	8012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80133ec:	e766      	b.n	80132bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80133ee:	d10c      	bne.n	801340a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80133f0:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80133f4:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 80133f8:	45b4      	cmp	ip, r6
 80133fa:	bfb4      	ite	lt
 80133fc:	4684      	movlt	ip, r0
 80133fe:	46d4      	movge	ip, sl
 8013400:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8013404:	4433      	add	r3, r6
 8013406:	b21b      	sxth	r3, r3
 8013408:	e750      	b.n	80132ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801340a:	4575      	cmp	r5, lr
 801340c:	46d4      	mov	ip, sl
 801340e:	bfa8      	it	ge
 8013410:	4675      	movge	r5, lr
 8013412:	e74e      	b.n	80132b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 8013414:	eb0b 0006 	add.w	r0, fp, r6
 8013418:	4426      	add	r6, r4
 801341a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801341e:	f1b9 0f13 	cmp.w	r9, #19
 8013422:	bfdc      	itt	le
 8013424:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8013428:	444d      	addle	r5, r9
 801342a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801342e:	bfd8      	it	le
 8013430:	b22d      	sxthle	r5, r5
 8013432:	f7fa fc9c 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013436:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801343a:	2800      	cmp	r0, #0
 801343c:	f47f af16 	bne.w	801326c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8013440:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 8013444:	fa1f f989 	uxth.w	r9, r9
 8013448:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801344c:	eba5 050c 	sub.w	r5, r5, ip
 8013450:	fa1f f28c 	uxth.w	r2, ip
 8013454:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8013458:	eb02 0009 	add.w	r0, r2, r9
 801345c:	2d14      	cmp	r5, #20
 801345e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 8013462:	bfa8      	it	ge
 8013464:	2514      	movge	r5, #20
 8013466:	b200      	sxth	r0, r0
 8013468:	f8ad 101c 	strh.w	r1, [sp, #28]
 801346c:	b289      	uxth	r1, r1
 801346e:	fa1f fe85 	uxth.w	lr, r5
 8013472:	eba0 000c 	sub.w	r0, r0, ip
 8013476:	f8ad c01e 	strh.w	ip, [sp, #30]
 801347a:	4586      	cmp	lr, r0
 801347c:	f8d8 0000 	ldr.w	r0, [r8]
 8013480:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013484:	b29b      	uxth	r3, r3
 8013486:	bfb8      	it	lt
 8013488:	46f1      	movlt	r9, lr
 801348a:	6805      	ldr	r5, [r0, #0]
 801348c:	f8cd 9000 	str.w	r9, [sp]
 8013490:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 8013494:	47a8      	blx	r5
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801349c:	a907      	add	r1, sp, #28
 801349e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134a0:	4620      	mov	r0, r4
 80134a2:	4798      	blx	r3
 80134a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80134a8:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80134ac:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80134b0:	1a5b      	subs	r3, r3, r1
 80134b2:	440a      	add	r2, r1
 80134b4:	b21b      	sxth	r3, r3
 80134b6:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80134ba:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80134be:	2b00      	cmp	r3, #0
 80134c0:	f47f aecf 	bne.w	8013262 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80134c4:	fa1f f18a 	uxth.w	r1, sl
 80134c8:	4658      	mov	r0, fp
 80134ca:	f7ff fa29 	bl	8012920 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80134ce:	e6c8      	b.n	8013262 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80134d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80134d4:	42ab      	cmp	r3, r5
 80134d6:	f67f aea0 	bls.w	801321a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80134da:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80134de:	ab07      	add	r3, sp, #28
 80134e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80134e4:	6851      	ldr	r1, [r2, #4]
 80134e6:	c303      	stmia	r3!, {r0, r1}
 80134e8:	a807      	add	r0, sp, #28
 80134ea:	f7fa fc40 	bl	800dd6e <_ZNK8touchgfx4Rect7isEmptyEv>
 80134ee:	b920      	cbnz	r0, 80134fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80134f0:	6823      	ldr	r3, [r4, #0]
 80134f2:	a907      	add	r1, sp, #28
 80134f4:	4620      	mov	r0, r4
 80134f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134f8:	4798      	blx	r3
 80134fa:	3501      	adds	r5, #1
 80134fc:	b2ad      	uxth	r5, r5
 80134fe:	e7e7      	b.n	80134d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08013500 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013500:	4b03      	ldr	r3, [pc, #12]	; (8013510 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013502:	2200      	movs	r2, #0
 8013504:	801a      	strh	r2, [r3, #0]
 8013506:	805a      	strh	r2, [r3, #2]
 8013508:	809a      	strh	r2, [r3, #4]
 801350a:	80da      	strh	r2, [r3, #6]
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	2400ea54 	.word	0x2400ea54

08013514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013518:	b09d      	sub	sp, #116	; 0x74
 801351a:	4606      	mov	r6, r0
 801351c:	4614      	mov	r4, r2
 801351e:	468a      	mov	sl, r1
 8013520:	a803      	add	r0, sp, #12
 8013522:	461d      	mov	r5, r3
 8013524:	f000 fe45 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 8013528:	6833      	ldr	r3, [r6, #0]
 801352a:	4630      	mov	r0, r6
 801352c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013532:	4798      	blx	r3
 8013534:	6833      	ldr	r3, [r6, #0]
 8013536:	4607      	mov	r7, r0
 8013538:	4630      	mov	r0, r6
 801353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801353c:	4798      	blx	r3
 801353e:	462a      	mov	r2, r5
 8013540:	2500      	movs	r5, #0
 8013542:	4621      	mov	r1, r4
 8013544:	9000      	str	r0, [sp, #0]
 8013546:	463b      	mov	r3, r7
 8013548:	462c      	mov	r4, r5
 801354a:	46a9      	mov	r9, r5
 801354c:	46a8      	mov	r8, r5
 801354e:	a803      	add	r0, sp, #12
 8013550:	f000 fe82 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013554:	2300      	movs	r3, #0
 8013556:	9302      	str	r3, [sp, #8]
 8013558:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801355c:	429c      	cmp	r4, r3
 801355e:	d002      	beq.n	8013566 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013560:	455c      	cmp	r4, fp
 8013562:	bf18      	it	ne
 8013564:	4625      	movne	r5, r4
 8013566:	ab02      	add	r3, sp, #8
 8013568:	4632      	mov	r2, r6
 801356a:	4651      	mov	r1, sl
 801356c:	a803      	add	r0, sp, #12
 801356e:	f001 f973 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013572:	4604      	mov	r4, r0
 8013574:	b108      	cbz	r0, 801357a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8013576:	280a      	cmp	r0, #10
 8013578:	d10a      	bne.n	8013590 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801357a:	45c1      	cmp	r9, r8
 801357c:	bf38      	it	cc
 801357e:	46c1      	movcc	r9, r8
 8013580:	f04f 0800 	mov.w	r8, #0
 8013584:	2c00      	cmp	r4, #0
 8013586:	d1e5      	bne.n	8013554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013588:	4648      	mov	r0, r9
 801358a:	b01d      	add	sp, #116	; 0x74
 801358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013590:	9a02      	ldr	r2, [sp, #8]
 8013592:	2a00      	cmp	r2, #0
 8013594:	d0de      	beq.n	8013554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013596:	7b57      	ldrb	r7, [r2, #13]
 8013598:	4629      	mov	r1, r5
 801359a:	6833      	ldr	r3, [r6, #0]
 801359c:	007f      	lsls	r7, r7, #1
 801359e:	8894      	ldrh	r4, [r2, #4]
 80135a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135a2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80135a6:	7a97      	ldrb	r7, [r2, #10]
 80135a8:	4307      	orrs	r7, r0
 80135aa:	4630      	mov	r0, r6
 80135ac:	4798      	blx	r3
 80135ae:	4438      	add	r0, r7
 80135b0:	4480      	add	r8, r0
 80135b2:	fa1f f888 	uxth.w	r8, r8
 80135b6:	e7e5      	b.n	8013584 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080135b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80135b8:	b508      	push	{r3, lr}
 80135ba:	6803      	ldr	r3, [r0, #0]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	4798      	blx	r3
 80135c0:	b128      	cbz	r0, 80135ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80135c2:	7b43      	ldrb	r3, [r0, #13]
 80135c4:	7a80      	ldrb	r0, [r0, #10]
 80135c6:	005b      	lsls	r3, r3, #1
 80135c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135cc:	4318      	orrs	r0, r3
 80135ce:	bd08      	pop	{r3, pc}

080135d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80135d0:	b40e      	push	{r1, r2, r3}
 80135d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135d4:	b09e      	sub	sp, #120	; 0x78
 80135d6:	4605      	mov	r5, r0
 80135d8:	ab23      	add	r3, sp, #140	; 0x8c
 80135da:	a805      	add	r0, sp, #20
 80135dc:	f853 4b04 	ldr.w	r4, [r3], #4
 80135e0:	9303      	str	r3, [sp, #12]
 80135e2:	f000 fde6 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 80135e6:	682b      	ldr	r3, [r5, #0]
 80135e8:	4628      	mov	r0, r5
 80135ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135ec:	4798      	blx	r3
 80135ee:	682b      	ldr	r3, [r5, #0]
 80135f0:	4606      	mov	r6, r0
 80135f2:	4628      	mov	r0, r5
 80135f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135f6:	4798      	blx	r3
 80135f8:	4633      	mov	r3, r6
 80135fa:	4621      	mov	r1, r4
 80135fc:	ae1e      	add	r6, sp, #120	; 0x78
 80135fe:	2400      	movs	r4, #0
 8013600:	9000      	str	r0, [sp, #0]
 8013602:	9a03      	ldr	r2, [sp, #12]
 8013604:	a805      	add	r0, sp, #20
 8013606:	f000 fe27 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801360a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801360e:	462a      	mov	r2, r5
 8013610:	4633      	mov	r3, r6
 8013612:	4621      	mov	r1, r4
 8013614:	a805      	add	r0, sp, #20
 8013616:	f001 f91f 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801361a:	b300      	cbz	r0, 801365e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801361c:	280a      	cmp	r0, #10
 801361e:	d01a      	beq.n	8013656 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013620:	9f04      	ldr	r7, [sp, #16]
 8013622:	b1c7      	cbz	r7, 8013656 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013624:	7b78      	ldrb	r0, [r7, #13]
 8013626:	7a3b      	ldrb	r3, [r7, #8]
 8013628:	00c1      	lsls	r1, r0, #3
 801362a:	88aa      	ldrh	r2, [r5, #4]
 801362c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013630:	4319      	orrs	r1, r3
 8013632:	0643      	lsls	r3, r0, #25
 8013634:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013638:	bf48      	it	mi
 801363a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801363e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013642:	bf48      	it	mi
 8013644:	b219      	sxthmi	r1, r3
 8013646:	79fb      	ldrb	r3, [r7, #7]
 8013648:	4303      	orrs	r3, r0
 801364a:	4413      	add	r3, r2
 801364c:	1a5b      	subs	r3, r3, r1
 801364e:	b29b      	uxth	r3, r3
 8013650:	42a3      	cmp	r3, r4
 8013652:	bfc8      	it	gt
 8013654:	b21c      	sxthgt	r4, r3
 8013656:	4633      	mov	r3, r6
 8013658:	462a      	mov	r2, r5
 801365a:	2100      	movs	r1, #0
 801365c:	e7da      	b.n	8013614 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801365e:	b2a0      	uxth	r0, r4
 8013660:	b01e      	add	sp, #120	; 0x78
 8013662:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013666:	b003      	add	sp, #12
 8013668:	4770      	bx	lr

0801366a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801366a:	b40e      	push	{r1, r2, r3}
 801366c:	b570      	push	{r4, r5, r6, lr}
 801366e:	b09d      	sub	sp, #116	; 0x74
 8013670:	4604      	mov	r4, r0
 8013672:	ab21      	add	r3, sp, #132	; 0x84
 8013674:	a803      	add	r0, sp, #12
 8013676:	f853 5b04 	ldr.w	r5, [r3], #4
 801367a:	9302      	str	r3, [sp, #8]
 801367c:	f000 fd99 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 8013680:	6823      	ldr	r3, [r4, #0]
 8013682:	4620      	mov	r0, r4
 8013684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013686:	4798      	blx	r3
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	4606      	mov	r6, r0
 801368c:	4620      	mov	r0, r4
 801368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013690:	2401      	movs	r4, #1
 8013692:	4798      	blx	r3
 8013694:	4633      	mov	r3, r6
 8013696:	9000      	str	r0, [sp, #0]
 8013698:	4629      	mov	r1, r5
 801369a:	9a02      	ldr	r2, [sp, #8]
 801369c:	a803      	add	r0, sp, #12
 801369e:	f000 fddb 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80136a2:	a803      	add	r0, sp, #12
 80136a4:	f001 f9d2 	bl	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80136a8:	b2a3      	uxth	r3, r4
 80136aa:	b138      	cbz	r0, 80136bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80136ac:	280a      	cmp	r0, #10
 80136ae:	a803      	add	r0, sp, #12
 80136b0:	bf04      	itt	eq
 80136b2:	3301      	addeq	r3, #1
 80136b4:	b21c      	sxtheq	r4, r3
 80136b6:	f001 f9c9 	bl	8014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80136ba:	e7f5      	b.n	80136a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80136bc:	4618      	mov	r0, r3
 80136be:	b01d      	add	sp, #116	; 0x74
 80136c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136c4:	b003      	add	sp, #12
 80136c6:	4770      	bx	lr

080136c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80136c8:	b40e      	push	{r1, r2, r3}
 80136ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136cc:	b09e      	sub	sp, #120	; 0x78
 80136ce:	4604      	mov	r4, r0
 80136d0:	ab23      	add	r3, sp, #140	; 0x8c
 80136d2:	a805      	add	r0, sp, #20
 80136d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80136d8:	9303      	str	r3, [sp, #12]
 80136da:	f000 fd6a 	bl	80141b2 <_ZN8touchgfx12TextProviderC1Ev>
 80136de:	6823      	ldr	r3, [r4, #0]
 80136e0:	4620      	mov	r0, r4
 80136e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136e4:	4798      	blx	r3
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	4606      	mov	r6, r0
 80136ea:	4620      	mov	r0, r4
 80136ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136ee:	4798      	blx	r3
 80136f0:	4633      	mov	r3, r6
 80136f2:	4629      	mov	r1, r5
 80136f4:	9000      	str	r0, [sp, #0]
 80136f6:	9a03      	ldr	r2, [sp, #12]
 80136f8:	a805      	add	r0, sp, #20
 80136fa:	f000 fdad 	bl	8014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80136fe:	ad1e      	add	r5, sp, #120	; 0x78
 8013700:	2100      	movs	r1, #0
 8013702:	26ff      	movs	r6, #255	; 0xff
 8013704:	4622      	mov	r2, r4
 8013706:	a805      	add	r0, sp, #20
 8013708:	f845 1d68 	str.w	r1, [r5, #-104]!
 801370c:	462b      	mov	r3, r5
 801370e:	f001 f8a3 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013712:	b1d8      	cbz	r0, 801374c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8013714:	280a      	cmp	r0, #10
 8013716:	d012      	beq.n	801373e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013718:	9804      	ldr	r0, [sp, #16]
 801371a:	b180      	cbz	r0, 801373e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801371c:	7b47      	ldrb	r7, [r0, #13]
 801371e:	7922      	ldrb	r2, [r4, #4]
 8013720:	00fb      	lsls	r3, r7, #3
 8013722:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013726:	7a03      	ldrb	r3, [r0, #8]
 8013728:	430b      	orrs	r3, r1
 801372a:	0679      	lsls	r1, r7, #25
 801372c:	bf44      	itt	mi
 801372e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013732:	b21b      	sxthmi	r3, r3
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	b2db      	uxtb	r3, r3
 8013738:	429e      	cmp	r6, r3
 801373a:	bf28      	it	cs
 801373c:	461e      	movcs	r6, r3
 801373e:	462b      	mov	r3, r5
 8013740:	4622      	mov	r2, r4
 8013742:	2100      	movs	r1, #0
 8013744:	a805      	add	r0, sp, #20
 8013746:	f001 f887 	bl	8014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801374a:	e7e2      	b.n	8013712 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801374c:	4630      	mov	r0, r6
 801374e:	b01e      	add	sp, #120	; 0x78
 8013750:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013754:	b003      	add	sp, #12
 8013756:	4770      	bx	lr

08013758 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013758:	b513      	push	{r0, r1, r4, lr}
 801375a:	6803      	ldr	r3, [r0, #0]
 801375c:	2400      	movs	r4, #0
 801375e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013762:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013766:	f8ad 1004 	strh.w	r1, [sp, #4]
 801376a:	4669      	mov	r1, sp
 801376c:	691b      	ldr	r3, [r3, #16]
 801376e:	9400      	str	r4, [sp, #0]
 8013770:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013774:	4798      	blx	r3
 8013776:	b002      	add	sp, #8
 8013778:	bd10      	pop	{r4, pc}

0801377a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801377a:	b538      	push	{r3, r4, r5, lr}
 801377c:	680b      	ldr	r3, [r1, #0]
 801377e:	460c      	mov	r4, r1
 8013780:	4605      	mov	r5, r0
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	4798      	blx	r3
 8013786:	6823      	ldr	r3, [r4, #0]
 8013788:	4620      	mov	r0, r4
 801378a:	4629      	mov	r1, r5
 801378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378e:	4798      	blx	r3
 8013790:	4628      	mov	r0, r5
 8013792:	bd38      	pop	{r3, r4, r5, pc}

08013794 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013794:	b410      	push	{r4}
 8013796:	880a      	ldrh	r2, [r1, #0]
 8013798:	8884      	ldrh	r4, [r0, #4]
 801379a:	4422      	add	r2, r4
 801379c:	800a      	strh	r2, [r1, #0]
 801379e:	884a      	ldrh	r2, [r1, #2]
 80137a0:	88c4      	ldrh	r4, [r0, #6]
 80137a2:	4422      	add	r2, r4
 80137a4:	804a      	strh	r2, [r1, #2]
 80137a6:	6940      	ldr	r0, [r0, #20]
 80137a8:	b120      	cbz	r0, 80137b4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80137aa:	6803      	ldr	r3, [r0, #0]
 80137ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137b2:	4718      	bx	r3
 80137b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80137ba:	b570      	push	{r4, r5, r6, lr}
 80137bc:	8882      	ldrh	r2, [r0, #4]
 80137be:	460c      	mov	r4, r1
 80137c0:	880b      	ldrh	r3, [r1, #0]
 80137c2:	4605      	mov	r5, r0
 80137c4:	4413      	add	r3, r2
 80137c6:	800b      	strh	r3, [r1, #0]
 80137c8:	884b      	ldrh	r3, [r1, #2]
 80137ca:	88c2      	ldrh	r2, [r0, #6]
 80137cc:	4413      	add	r3, r2
 80137ce:	804b      	strh	r3, [r1, #2]
 80137d0:	1d01      	adds	r1, r0, #4
 80137d2:	4620      	mov	r0, r4
 80137d4:	f7fa fa88 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 80137d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	dd0b      	ble.n	80137f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	dd07      	ble.n	80137f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137e8:	6968      	ldr	r0, [r5, #20]
 80137ea:	b128      	cbz	r0, 80137f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137ec:	6803      	ldr	r3, [r0, #0]
 80137ee:	4621      	mov	r1, r4
 80137f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137f6:	4718      	bx	r3
 80137f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080137fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	8882      	ldrh	r2, [r0, #4]
 8013800:	460c      	mov	r4, r1
 8013802:	880b      	ldrh	r3, [r1, #0]
 8013804:	4605      	mov	r5, r0
 8013806:	4413      	add	r3, r2
 8013808:	800b      	strh	r3, [r1, #0]
 801380a:	884b      	ldrh	r3, [r1, #2]
 801380c:	88c2      	ldrh	r2, [r0, #6]
 801380e:	4413      	add	r3, r2
 8013810:	804b      	strh	r3, [r1, #2]
 8013812:	1d01      	adds	r1, r0, #4
 8013814:	4620      	mov	r0, r4
 8013816:	f7fa fa67 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 801381a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd15      	ble.n	801384e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8013822:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013826:	2b00      	cmp	r3, #0
 8013828:	dd11      	ble.n	801384e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801382a:	6968      	ldr	r0, [r5, #20]
 801382c:	b128      	cbz	r0, 801383a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801382e:	6803      	ldr	r3, [r0, #0]
 8013830:	691b      	ldr	r3, [r3, #16]
 8013832:	4621      	mov	r1, r4
 8013834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013838:	4718      	bx	r3
 801383a:	4b05      	ldr	r3, [pc, #20]	; (8013850 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	3304      	adds	r3, #4
 8013840:	429d      	cmp	r5, r3
 8013842:	d104      	bne.n	801384e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8013844:	f7fe ffbe 	bl	80127c4 <_ZN8touchgfx11Application11getInstanceEv>
 8013848:	6803      	ldr	r3, [r0, #0]
 801384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801384c:	e7f1      	b.n	8013832 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801384e:	bd70      	pop	{r4, r5, r6, pc}
 8013850:	2400ea4c 	.word	0x2400ea4c

08013854 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	4604      	mov	r4, r0
 8013858:	4616      	mov	r6, r2
 801385a:	460d      	mov	r5, r1
 801385c:	b901      	cbnz	r1, 8013860 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801385e:	b192      	cbz	r2, 8013886 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013860:	6823      	ldr	r3, [r4, #0]
 8013862:	4620      	mov	r0, r4
 8013864:	695b      	ldr	r3, [r3, #20]
 8013866:	4798      	blx	r3
 8013868:	88e2      	ldrh	r2, [r4, #6]
 801386a:	88a1      	ldrh	r1, [r4, #4]
 801386c:	4620      	mov	r0, r4
 801386e:	4432      	add	r2, r6
 8013870:	4429      	add	r1, r5
 8013872:	b212      	sxth	r2, r2
 8013874:	b209      	sxth	r1, r1
 8013876:	f7ef f9e5 	bl	8002c44 <_ZN8touchgfx8Drawable5setXYEss>
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	4620      	mov	r0, r4
 801387e:	695b      	ldr	r3, [r3, #20]
 8013880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013884:	4718      	bx	r3
 8013886:	bd70      	pop	{r4, r5, r6, pc}

08013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013888:	b510      	push	{r4, lr}
 801388a:	2300      	movs	r3, #0
 801388c:	4604      	mov	r4, r0
 801388e:	4608      	mov	r0, r1
 8013890:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013894:	8023      	strh	r3, [r4, #0]
 8013896:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801389a:	8063      	strh	r3, [r4, #2]
 801389c:	6803      	ldr	r3, [r0, #0]
 801389e:	80a1      	strh	r1, [r4, #4]
 80138a0:	4621      	mov	r1, r4
 80138a2:	80e2      	strh	r2, [r4, #6]
 80138a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138a6:	4798      	blx	r3
 80138a8:	4620      	mov	r0, r4
 80138aa:	bd10      	pop	{r4, pc}

080138ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80138ac:	b530      	push	{r4, r5, lr}
 80138ae:	8083      	strh	r3, [r0, #4]
 80138b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80138b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80138b8:	7183      	strb	r3, [r0, #6]
 80138ba:	79c3      	ldrb	r3, [r0, #7]
 80138bc:	6101      	str	r1, [r0, #16]
 80138be:	f365 0306 	bfi	r3, r5, #0, #7
 80138c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80138c6:	8282      	strh	r2, [r0, #20]
 80138c8:	f365 13c7 	bfi	r3, r5, #7, #1
 80138cc:	71c3      	strb	r3, [r0, #7]
 80138ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80138d2:	7203      	strb	r3, [r0, #8]
 80138d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80138d8:	7243      	strb	r3, [r0, #9]
 80138da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80138de:	8143      	strh	r3, [r0, #10]
 80138e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80138e4:	8183      	strh	r3, [r0, #12]
 80138e6:	4b01      	ldr	r3, [pc, #4]	; (80138ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80138e8:	6003      	str	r3, [r0, #0]
 80138ea:	bd30      	pop	{r4, r5, pc}
 80138ec:	0802398c 	.word	0x0802398c

080138f0 <_ZNK8touchgfx9ConstFont4findEt>:
 80138f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138f2:	6904      	ldr	r4, [r0, #16]
 80138f4:	b3bc      	cbz	r4, 8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80138f6:	88a3      	ldrh	r3, [r4, #4]
 80138f8:	8a82      	ldrh	r2, [r0, #20]
 80138fa:	1acb      	subs	r3, r1, r3
 80138fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8013900:	d431      	bmi.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013902:	4293      	cmp	r3, r2
 8013904:	dd0c      	ble.n	8013920 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013906:	230e      	movs	r3, #14
 8013908:	fb03 4302 	mla	r3, r3, r2, r4
 801390c:	889b      	ldrh	r3, [r3, #4]
 801390e:	1a5b      	subs	r3, r3, r1
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	429a      	cmp	r2, r3
 8013914:	db27      	blt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013916:	2b00      	cmp	r3, #0
 8013918:	bfbc      	itt	lt
 801391a:	2302      	movlt	r3, #2
 801391c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013920:	2500      	movs	r5, #0
 8013922:	260e      	movs	r6, #14
 8013924:	4295      	cmp	r5, r2
 8013926:	dc1e      	bgt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013928:	fb06 4003 	mla	r0, r6, r3, r4
 801392c:	8887      	ldrh	r7, [r0, #4]
 801392e:	42b9      	cmp	r1, r7
 8013930:	d01a      	beq.n	8013968 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013932:	d20d      	bcs.n	8013950 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013934:	1e5a      	subs	r2, r3, #1
 8013936:	4295      	cmp	r5, r2
 8013938:	dc15      	bgt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801393a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801393e:	1a5b      	subs	r3, r3, r1
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	429a      	cmp	r2, r3
 8013944:	db0f      	blt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013946:	429d      	cmp	r5, r3
 8013948:	ddec      	ble.n	8013924 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801394a:	1953      	adds	r3, r2, r5
 801394c:	105b      	asrs	r3, r3, #1
 801394e:	e7e9      	b.n	8013924 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013950:	1c5d      	adds	r5, r3, #1
 8013952:	42aa      	cmp	r2, r5
 8013954:	db07      	blt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013956:	8a43      	ldrh	r3, [r0, #18]
 8013958:	1acb      	subs	r3, r1, r3
 801395a:	442b      	add	r3, r5
 801395c:	429d      	cmp	r5, r3
 801395e:	dc02      	bgt.n	8013966 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013960:	429a      	cmp	r2, r3
 8013962:	dadf      	bge.n	8013924 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013964:	e7f1      	b.n	801394a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013966:	2000      	movs	r0, #0
 8013968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801396a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801396a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396c:	4604      	mov	r4, r0
 801396e:	4617      	mov	r7, r2
 8013970:	461e      	mov	r6, r3
 8013972:	b911      	cbnz	r1, 801397a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013974:	2500      	movs	r5, #0
 8013976:	4628      	mov	r0, r5
 8013978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801397a:	290a      	cmp	r1, #10
 801397c:	d0fa      	beq.n	8013974 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801397e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013982:	4291      	cmp	r1, r2
 8013984:	d0f6      	beq.n	8013974 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013986:	f242 020b 	movw	r2, #8203	; 0x200b
 801398a:	4291      	cmp	r1, r2
 801398c:	d0f2      	beq.n	8013974 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801398e:	f7ff ffaf 	bl	80138f0 <_ZNK8touchgfx9ConstFont4findEt>
 8013992:	4605      	mov	r5, r0
 8013994:	b950      	cbnz	r0, 80139ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	4620      	mov	r0, r4
 801399a:	691b      	ldr	r3, [r3, #16]
 801399c:	4798      	blx	r3
 801399e:	4601      	mov	r1, r0
 80139a0:	4620      	mov	r0, r4
 80139a2:	f7ff ffa5 	bl	80138f0 <_ZNK8touchgfx9ConstFont4findEt>
 80139a6:	4605      	mov	r5, r0
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d0e3      	beq.n	8013974 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80139ac:	6823      	ldr	r3, [r4, #0]
 80139ae:	4629      	mov	r1, r5
 80139b0:	4620      	mov	r0, r4
 80139b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139b4:	4798      	blx	r3
 80139b6:	6038      	str	r0, [r7, #0]
 80139b8:	6823      	ldr	r3, [r4, #0]
 80139ba:	4620      	mov	r0, r4
 80139bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139be:	4798      	blx	r3
 80139c0:	7030      	strb	r0, [r6, #0]
 80139c2:	e7d8      	b.n	8013976 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080139c4 <_ZN8touchgfx6memsetEPvhm>:
 80139c4:	4402      	add	r2, r0
 80139c6:	4290      	cmp	r0, r2
 80139c8:	d002      	beq.n	80139d0 <_ZN8touchgfx6memsetEPvhm+0xc>
 80139ca:	f800 1b01 	strb.w	r1, [r0], #1
 80139ce:	e7fa      	b.n	80139c6 <_ZN8touchgfx6memsetEPvhm+0x2>
 80139d0:	4770      	bx	lr

080139d2 <_ZN8touchgfx4clzuEm>:
 80139d2:	4603      	mov	r3, r0
 80139d4:	b1c8      	cbz	r0, 8013a0a <_ZN8touchgfx4clzuEm+0x38>
 80139d6:	0c02      	lsrs	r2, r0, #16
 80139d8:	0412      	lsls	r2, r2, #16
 80139da:	b9a2      	cbnz	r2, 8013a06 <_ZN8touchgfx4clzuEm+0x34>
 80139dc:	0403      	lsls	r3, r0, #16
 80139de:	2010      	movs	r0, #16
 80139e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80139e4:	bf04      	itt	eq
 80139e6:	021b      	lsleq	r3, r3, #8
 80139e8:	3008      	addeq	r0, #8
 80139ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80139ee:	bf04      	itt	eq
 80139f0:	011b      	lsleq	r3, r3, #4
 80139f2:	3004      	addeq	r0, #4
 80139f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80139f8:	bf04      	itt	eq
 80139fa:	009b      	lsleq	r3, r3, #2
 80139fc:	3002      	addeq	r0, #2
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	db04      	blt.n	8013a0c <_ZN8touchgfx4clzuEm+0x3a>
 8013a02:	3001      	adds	r0, #1
 8013a04:	4770      	bx	lr
 8013a06:	2000      	movs	r0, #0
 8013a08:	e7ea      	b.n	80139e0 <_ZN8touchgfx4clzuEm+0xe>
 8013a0a:	2020      	movs	r0, #32
 8013a0c:	4770      	bx	lr

08013a0e <_ZN8touchgfx7muldivuEmmmRm>:
 8013a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a12:	4680      	mov	r8, r0
 8013a14:	460f      	mov	r7, r1
 8013a16:	4615      	mov	r5, r2
 8013a18:	461e      	mov	r6, r3
 8013a1a:	f7ff ffda 	bl	80139d2 <_ZN8touchgfx4clzuEm>
 8013a1e:	b998      	cbnz	r0, 8013a48 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8013a20:	4608      	mov	r0, r1
 8013a22:	f7ff ffd6 	bl	80139d2 <_ZN8touchgfx4clzuEm>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	dd08      	ble.n	8013a3c <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8013a2a:	4633      	mov	r3, r6
 8013a2c:	462a      	mov	r2, r5
 8013a2e:	4641      	mov	r1, r8
 8013a30:	4638      	mov	r0, r7
 8013a32:	f7ff ffec 	bl	8013a0e <_ZN8touchgfx7muldivuEmmmRm>
 8013a36:	b003      	add	sp, #12
 8013a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013a44:	6033      	str	r3, [r6, #0]
 8013a46:	e7f6      	b.n	8013a36 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8013a48:	fa31 f900 	lsrs.w	r9, r1, r0
 8013a4c:	fb01 f308 	mul.w	r3, r1, r8
 8013a50:	d105      	bne.n	8013a5e <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8013a52:	fbb3 f0f5 	udiv	r0, r3, r5
 8013a56:	fb05 3510 	mls	r5, r5, r0, r3
 8013a5a:	6035      	str	r5, [r6, #0]
 8013a5c:	e7eb      	b.n	8013a36 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	fa08 fb00 	lsl.w	fp, r8, r0
 8013a64:	462a      	mov	r2, r5
 8013a66:	4641      	mov	r1, r8
 8013a68:	fa03 f000 	lsl.w	r0, r3, r0
 8013a6c:	4633      	mov	r3, r6
 8013a6e:	fbbb faf5 	udiv	sl, fp, r5
 8013a72:	3801      	subs	r0, #1
 8013a74:	fb09 f40a 	mul.w	r4, r9, sl
 8013a78:	4038      	ands	r0, r7
 8013a7a:	f7ff ffc8 	bl	8013a0e <_ZN8touchgfx7muldivuEmmmRm>
 8013a7e:	462a      	mov	r2, r5
 8013a80:	4607      	mov	r7, r0
 8013a82:	ab01      	add	r3, sp, #4
 8013a84:	fb05 b11a 	mls	r1, r5, sl, fp
 8013a88:	4648      	mov	r0, r9
 8013a8a:	f7ff ffc0 	bl	8013a0e <_ZN8touchgfx7muldivuEmmmRm>
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	6832      	ldr	r2, [r6, #0]
 8013a92:	441a      	add	r2, r3
 8013a94:	fbb2 f3f5 	udiv	r3, r2, r5
 8013a98:	441c      	add	r4, r3
 8013a9a:	fb05 2513 	mls	r5, r5, r3, r2
 8013a9e:	443c      	add	r4, r7
 8013aa0:	4420      	add	r0, r4
 8013aa2:	e7da      	b.n	8013a5a <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08013aa4 <_ZN8touchgfx6muldivElllRl>:
 8013aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	461e      	mov	r6, r3
 8013aaa:	bfba      	itte	lt
 8013aac:	4240      	neglt	r0, r0
 8013aae:	f04f 34ff 	movlt.w	r4, #4294967295
 8013ab2:	2401      	movge	r4, #1
 8013ab4:	2900      	cmp	r1, #0
 8013ab6:	bfbc      	itt	lt
 8013ab8:	4249      	neglt	r1, r1
 8013aba:	4264      	neglt	r4, r4
 8013abc:	2a00      	cmp	r2, #0
 8013abe:	bfb6      	itet	lt
 8013ac0:	4265      	neglt	r5, r4
 8013ac2:	4625      	movge	r5, r4
 8013ac4:	4252      	neglt	r2, r2
 8013ac6:	4288      	cmp	r0, r1
 8013ac8:	bfc2      	ittt	gt
 8013aca:	4603      	movgt	r3, r0
 8013acc:	4608      	movgt	r0, r1
 8013ace:	4619      	movgt	r1, r3
 8013ad0:	ab01      	add	r3, sp, #4
 8013ad2:	f7ff ff9c 	bl	8013a0e <_ZN8touchgfx7muldivuEmmmRm>
 8013ad6:	9b01      	ldr	r3, [sp, #4]
 8013ad8:	4368      	muls	r0, r5
 8013ada:	435c      	muls	r4, r3
 8013adc:	6034      	str	r4, [r6, #0]
 8013ade:	b002      	add	sp, #8
 8013ae0:	bd70      	pop	{r4, r5, r6, pc}

08013ae2 <_ZN8touchgfx6muldivElll>:
 8013ae2:	b513      	push	{r0, r1, r4, lr}
 8013ae4:	4614      	mov	r4, r2
 8013ae6:	ab01      	add	r3, sp, #4
 8013ae8:	f7ff ffdc 	bl	8013aa4 <_ZN8touchgfx6muldivElllRl>
 8013aec:	2800      	cmp	r0, #0
 8013aee:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 8013af2:	9b01      	ldr	r3, [sp, #4]
 8013af4:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8013af8:	db0a      	blt.n	8013b10 <_ZN8touchgfx6muldivElll+0x2e>
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f102 0201 	add.w	r2, r2, #1
 8013b00:	bfb8      	it	lt
 8013b02:	425b      	neglt	r3, r3
 8013b04:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8013b08:	db00      	blt.n	8013b0c <_ZN8touchgfx6muldivElll+0x2a>
 8013b0a:	3001      	adds	r0, #1
 8013b0c:	b002      	add	sp, #8
 8013b0e:	bd10      	pop	{r4, pc}
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	bfb8      	it	lt
 8013b14:	425b      	neglt	r3, r3
 8013b16:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8013b1a:	bfc8      	it	gt
 8013b1c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8013b20:	e7f4      	b.n	8013b0c <_ZN8touchgfx6muldivElll+0x2a>

08013b22 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8013b22:	2000      	movs	r0, #0
 8013b24:	4770      	bx	lr

08013b26 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8013b26:	2001      	movs	r0, #1
 8013b28:	4770      	bx	lr

08013b2a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8013b2a:	2002      	movs	r0, #2
 8013b2c:	4770      	bx	lr

08013b2e <_ZN8touchgfx6ScreenD1Ev>:
 8013b2e:	4770      	bx	lr

08013b30 <_ZN8touchgfx12GestureEventD1Ev>:
 8013b30:	4770      	bx	lr

08013b32 <_ZN8touchgfx9DragEventD1Ev>:
 8013b32:	4770      	bx	lr

08013b34 <_ZN8touchgfx10ClickEventD1Ev>:
 8013b34:	4770      	bx	lr

08013b36 <_ZN8touchgfx10ClickEventD0Ev>:
 8013b36:	b510      	push	{r4, lr}
 8013b38:	4604      	mov	r4, r0
 8013b3a:	210c      	movs	r1, #12
 8013b3c:	f00b fe15 	bl	801f76a <_ZdlPvj>
 8013b40:	4620      	mov	r0, r4
 8013b42:	bd10      	pop	{r4, pc}

08013b44 <_ZN8touchgfx9DragEventD0Ev>:
 8013b44:	b510      	push	{r4, lr}
 8013b46:	4604      	mov	r4, r0
 8013b48:	2110      	movs	r1, #16
 8013b4a:	f00b fe0e 	bl	801f76a <_ZdlPvj>
 8013b4e:	4620      	mov	r0, r4
 8013b50:	bd10      	pop	{r4, pc}

08013b52 <_ZN8touchgfx12GestureEventD0Ev>:
 8013b52:	b510      	push	{r4, lr}
 8013b54:	4604      	mov	r4, r0
 8013b56:	210c      	movs	r1, #12
 8013b58:	f00b fe07 	bl	801f76a <_ZdlPvj>
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	bd10      	pop	{r4, pc}

08013b60 <_ZN8touchgfx6ScreenD0Ev>:
 8013b60:	b510      	push	{r4, lr}
 8013b62:	4604      	mov	r4, r0
 8013b64:	213c      	movs	r1, #60	; 0x3c
 8013b66:	f00b fe00 	bl	801f76a <_ZdlPvj>
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	bd10      	pop	{r4, pc}
	...

08013b70 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013b70:	b530      	push	{r4, r5, lr}
 8013b72:	460d      	mov	r5, r1
 8013b74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013b76:	b087      	sub	sp, #28
 8013b78:	4604      	mov	r4, r0
 8013b7a:	b301      	cbz	r1, 8013bbe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013b7c:	a801      	add	r0, sp, #4
 8013b7e:	f7ff fe83 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b82:	892a      	ldrh	r2, [r5, #8]
 8013b84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b88:	7928      	ldrb	r0, [r5, #4]
 8013b8a:	1ad2      	subs	r2, r2, r3
 8013b8c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013b8e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013b92:	441a      	add	r2, r3
 8013b94:	896b      	ldrh	r3, [r5, #10]
 8013b96:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013b9a:	f88d 0010 	strb.w	r0, [sp, #16]
 8013b9e:	1b5b      	subs	r3, r3, r5
 8013ba0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8013ba2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013ba4:	442b      	add	r3, r5
 8013ba6:	4d07      	ldr	r5, [pc, #28]	; (8013bc4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013ba8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013bac:	a903      	add	r1, sp, #12
 8013bae:	9503      	str	r5, [sp, #12]
 8013bb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013bb8:	6803      	ldr	r3, [r0, #0]
 8013bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bbc:	4798      	blx	r3
 8013bbe:	b007      	add	sp, #28
 8013bc0:	bd30      	pop	{r4, r5, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08023a0c 	.word	0x08023a0c

08013bc8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013bce:	b08a      	sub	sp, #40	; 0x28
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	460d      	mov	r5, r1
 8013bd4:	b113      	cbz	r3, 8013bdc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013bd6:	790b      	ldrb	r3, [r1, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d044      	beq.n	8013c66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013bdc:	f104 0804 	add.w	r8, r4, #4
 8013be0:	a803      	add	r0, sp, #12
 8013be2:	4641      	mov	r1, r8
 8013be4:	f7ff fe50 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013be8:	792b      	ldrb	r3, [r5, #4]
 8013bea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013bee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013bf2:	b983      	cbnz	r3, 8013c16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013bf4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8013bf8:	892a      	ldrh	r2, [r5, #8]
 8013bfa:	88e9      	ldrh	r1, [r5, #6]
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	1b92      	subs	r2, r2, r6
 8013c00:	9301      	str	r3, [sp, #4]
 8013c02:	1bc9      	subs	r1, r1, r7
 8013c04:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8013c08:	b212      	sxth	r2, r2
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	b209      	sxth	r1, r1
 8013c0e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013c12:	f7f9 ff87 	bl	800db24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013c16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013c18:	b329      	cbz	r1, 8013c66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013c1a:	a805      	add	r0, sp, #20
 8013c1c:	f7ff fe34 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c20:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013c24:	792b      	ldrb	r3, [r5, #4]
 8013c26:	a907      	add	r1, sp, #28
 8013c28:	1abf      	subs	r7, r7, r2
 8013c2a:	88ea      	ldrh	r2, [r5, #6]
 8013c2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013c2e:	4417      	add	r7, r2
 8013c30:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8013c32:	f88d 3020 	strb.w	r3, [sp, #32]
 8013c36:	4417      	add	r7, r2
 8013c38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013c3c:	1ab6      	subs	r6, r6, r2
 8013c3e:	892a      	ldrh	r2, [r5, #8]
 8013c40:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013c44:	4416      	add	r6, r2
 8013c46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013c48:	4416      	add	r6, r2
 8013c4a:	4a08      	ldr	r2, [pc, #32]	; (8013c6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013c4c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8013c50:	2600      	movs	r6, #0
 8013c52:	9207      	str	r2, [sp, #28]
 8013c54:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8013c58:	6803      	ldr	r3, [r0, #0]
 8013c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c5c:	4798      	blx	r3
 8013c5e:	792b      	ldrb	r3, [r5, #4]
 8013c60:	b10b      	cbz	r3, 8013c66 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013c62:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8013c66:	b00a      	add	sp, #40	; 0x28
 8013c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c6c:	080239e4 	.word	0x080239e4

08013c70 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	460c      	mov	r4, r1
 8013c76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013c78:	b088      	sub	sp, #32
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	2900      	cmp	r1, #0
 8013c7e:	d06d      	beq.n	8013d5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013c80:	4668      	mov	r0, sp
 8013c82:	f7ff fe01 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c86:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8013c88:	88e3      	ldrh	r3, [r4, #6]
 8013c8a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013c8e:	440b      	add	r3, r1
 8013c90:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013c94:	b21b      	sxth	r3, r3
 8013c96:	4543      	cmp	r3, r8
 8013c98:	db31      	blt.n	8013cfe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013c9a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013c9e:	44c4      	add	ip, r8
 8013ca0:	fa0f fc8c 	sxth.w	ip, ip
 8013ca4:	4563      	cmp	r3, ip
 8013ca6:	da2a      	bge.n	8013cfe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013ca8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8013caa:	8926      	ldrh	r6, [r4, #8]
 8013cac:	4416      	add	r6, r2
 8013cae:	b236      	sxth	r6, r6
 8013cb0:	42be      	cmp	r6, r7
 8013cb2:	db24      	blt.n	8013cfe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cb4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013cb8:	4438      	add	r0, r7
 8013cba:	b200      	sxth	r0, r0
 8013cbc:	4286      	cmp	r6, r0
 8013cbe:	da1e      	bge.n	8013cfe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cc0:	8963      	ldrh	r3, [r4, #10]
 8013cc2:	4419      	add	r1, r3
 8013cc4:	b209      	sxth	r1, r1
 8013cc6:	4541      	cmp	r1, r8
 8013cc8:	db08      	blt.n	8013cdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013cca:	4561      	cmp	r1, ip
 8013ccc:	da06      	bge.n	8013cdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013cce:	89a3      	ldrh	r3, [r4, #12]
 8013cd0:	441a      	add	r2, r3
 8013cd2:	b212      	sxth	r2, r2
 8013cd4:	42ba      	cmp	r2, r7
 8013cd6:	db01      	blt.n	8013cdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013cd8:	4282      	cmp	r2, r0
 8013cda:	db10      	blt.n	8013cfe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cdc:	4b21      	ldr	r3, [pc, #132]	; (8013d64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013cde:	a904      	add	r1, sp, #16
 8013ce0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013ce2:	9304      	str	r3, [sp, #16]
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	f88d 3014 	strb.w	r3, [sp, #20]
 8013cea:	2300      	movs	r3, #0
 8013cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013cf0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013cf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013cf8:	6803      	ldr	r3, [r0, #0]
 8013cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cfc:	4798      	blx	r3
 8013cfe:	1d29      	adds	r1, r5, #4
 8013d00:	a802      	add	r0, sp, #8
 8013d02:	f7ff fdc1 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d06:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013d0a:	88e0      	ldrh	r0, [r4, #6]
 8013d0c:	eba3 0808 	sub.w	r8, r3, r8
 8013d10:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013d14:	7921      	ldrb	r1, [r4, #4]
 8013d16:	fa1f f888 	uxth.w	r8, r8
 8013d1a:	1bdf      	subs	r7, r3, r7
 8013d1c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8013d20:	b2bb      	uxth	r3, r7
 8013d22:	4440      	add	r0, r8
 8013d24:	8922      	ldrh	r2, [r4, #8]
 8013d26:	8967      	ldrh	r7, [r4, #10]
 8013d28:	4460      	add	r0, ip
 8013d2a:	89a4      	ldrh	r4, [r4, #12]
 8013d2c:	441a      	add	r2, r3
 8013d2e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013d30:	44b8      	add	r8, r7
 8013d32:	4423      	add	r3, r4
 8013d34:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013d38:	4432      	add	r2, r6
 8013d3a:	44e0      	add	r8, ip
 8013d3c:	4433      	add	r3, r6
 8013d3e:	4c0a      	ldr	r4, [pc, #40]	; (8013d68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013d40:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013d42:	f88d 1014 	strb.w	r1, [sp, #20]
 8013d46:	a904      	add	r1, sp, #16
 8013d48:	9404      	str	r4, [sp, #16]
 8013d4a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013d4e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013d52:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013d56:	6803      	ldr	r3, [r0, #0]
 8013d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d5a:	4798      	blx	r3
 8013d5c:	b008      	add	sp, #32
 8013d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d62:	bf00      	nop
 8013d64:	080239e4 	.word	0x080239e4
 8013d68:	080239f8 	.word	0x080239f8

08013d6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d6e:	4604      	mov	r4, r0
 8013d70:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8013d74:	3201      	adds	r2, #1
 8013d76:	d112      	bne.n	8013d9e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013d78:	2500      	movs	r5, #0
 8013d7a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013d7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013d82:	6803      	ldr	r3, [r0, #0]
 8013d84:	9500      	str	r5, [sp, #0]
 8013d86:	466d      	mov	r5, sp
 8013d88:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013d8c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013d90:	4629      	mov	r1, r5
 8013d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d94:	4798      	blx	r3
 8013d96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013d9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8013d9e:	4620      	mov	r0, r4
 8013da0:	b003      	add	sp, #12
 8013da2:	bd30      	pop	{r4, r5, pc}

08013da4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8013da4:	b513      	push	{r0, r1, r4, lr}
 8013da6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013daa:	4604      	mov	r4, r0
 8013dac:	3301      	adds	r3, #1
 8013dae:	d109      	bne.n	8013dc4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013db0:	4601      	mov	r1, r0
 8013db2:	4668      	mov	r0, sp
 8013db4:	f7ff fd68 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013db8:	f8bd 3000 	ldrh.w	r3, [sp]
 8013dbc:	8423      	strh	r3, [r4, #32]
 8013dbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013dc2:	8463      	strh	r3, [r4, #34]	; 0x22
 8013dc4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013dc8:	b002      	add	sp, #8
 8013dca:	bd10      	pop	{r4, pc}

08013dcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013dcc:	b513      	push	{r0, r1, r4, lr}
 8013dce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	d109      	bne.n	8013dec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013dd8:	4601      	mov	r1, r0
 8013dda:	4668      	mov	r0, sp
 8013ddc:	f7ff fd54 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013de4:	8423      	strh	r3, [r4, #32]
 8013de6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013dea:	8463      	strh	r3, [r4, #34]	; 0x22
 8013dec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013df0:	b002      	add	sp, #8
 8013df2:	bd10      	pop	{r4, pc}

08013df4 <_ZN8touchgfx6ScreenC1Ev>:
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	4b17      	ldr	r3, [pc, #92]	; (8013e54 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013df8:	4605      	mov	r5, r0
 8013dfa:	4a17      	ldr	r2, [pc, #92]	; (8013e58 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013dfc:	2101      	movs	r1, #1
 8013dfe:	f845 3b04 	str.w	r3, [r5], #4
 8013e02:	2300      	movs	r3, #0
 8013e04:	6042      	str	r2, [r0, #4]
 8013e06:	4604      	mov	r4, r0
 8013e08:	8103      	strh	r3, [r0, #8]
 8013e0a:	8143      	strh	r3, [r0, #10]
 8013e0c:	8183      	strh	r3, [r0, #12]
 8013e0e:	81c3      	strh	r3, [r0, #14]
 8013e10:	8203      	strh	r3, [r0, #16]
 8013e12:	8243      	strh	r3, [r0, #18]
 8013e14:	8283      	strh	r3, [r0, #20]
 8013e16:	82c3      	strh	r3, [r0, #22]
 8013e18:	6203      	str	r3, [r0, #32]
 8013e1a:	8483      	strh	r3, [r0, #36]	; 0x24
 8013e1c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013e1e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8013e22:	6343      	str	r3, [r0, #52]	; 0x34
 8013e24:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8013e28:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013e2c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8013e30:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8013e34:	4b09      	ldr	r3, [pc, #36]	; (8013e5c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8013e36:	4628      	mov	r0, r5
 8013e38:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013e3c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013e3e:	4a08      	ldr	r2, [pc, #32]	; (8013e60 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013e40:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013e44:	4798      	blx	r3
 8013e46:	6863      	ldr	r3, [r4, #4]
 8013e48:	4628      	mov	r0, r5
 8013e4a:	4631      	mov	r1, r6
 8013e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e4e:	4798      	blx	r3
 8013e50:	4620      	mov	r0, r4
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	08023a20 	.word	0x08023a20
 8013e58:	08022448 	.word	0x08022448
 8013e5c:	2400e9e6 	.word	0x2400e9e6
 8013e60:	2400e9e4 	.word	0x2400e9e4

08013e64 <_ZN8touchgfx6Screen4drawEv>:
 8013e64:	4b09      	ldr	r3, [pc, #36]	; (8013e8c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8013e66:	b507      	push	{r0, r1, r2, lr}
 8013e68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	4b08      	ldr	r3, [pc, #32]	; (8013e90 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8013e70:	9100      	str	r1, [sp, #0]
 8013e72:	4669      	mov	r1, sp
 8013e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e78:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e80:	6803      	ldr	r3, [r0, #0]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	4798      	blx	r3
 8013e86:	b003      	add	sp, #12
 8013e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e8c:	2400e9e4 	.word	0x2400e9e4
 8013e90:	2400e9e6 	.word	0x2400e9e6

08013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8013e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e98:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013e9c:	b089      	sub	sp, #36	; 0x24
 8013e9e:	4680      	mov	r8, r0
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	4615      	mov	r5, r2
 8013ea6:	dd0e      	ble.n	8013ec6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013ea8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	dd0a      	ble.n	8013ec6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	f7ff ff5b 	bl	8013d6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013eb6:	4621      	mov	r1, r4
 8013eb8:	f7fb fd40 	bl	800f93c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ebc:	69eb      	ldr	r3, [r5, #28]
 8013ebe:	b928      	cbnz	r0, 8013ecc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013ec0:	461d      	mov	r5, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d1f4      	bne.n	8013eb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013ec6:	b009      	add	sp, #36	; 0x24
 8013ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ecc:	ae04      	add	r6, sp, #16
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	f000 80b5 	beq.w	801403e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013ed4:	682b      	ldr	r3, [r5, #0]
 8013ed6:	4629      	mov	r1, r5
 8013ed8:	a802      	add	r0, sp, #8
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	4798      	blx	r3
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f7ff ff60 	bl	8013da4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013ee4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013ee8:	4407      	add	r7, r0
 8013eea:	4628      	mov	r0, r5
 8013eec:	f7ff ff6e 	bl	8013dcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013ef0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013ef4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013ef8:	b23f      	sxth	r7, r7
 8013efa:	4418      	add	r0, r3
 8013efc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013f00:	4621      	mov	r1, r4
 8013f02:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f06:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f10:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013f14:	f7f9 fee8 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8013f18:	4628      	mov	r0, r5
 8013f1a:	f7ff ff27 	bl	8013d6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013f1e:	ab06      	add	r3, sp, #24
 8013f20:	4602      	mov	r2, r0
 8013f22:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f26:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7f9 fedb 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8013f32:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013f36:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013f3a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8013f3e:	4299      	cmp	r1, r3
 8013f40:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8013f44:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8013f48:	d10b      	bne.n	8013f62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013f4e:	4552      	cmp	r2, sl
 8013f50:	d107      	bne.n	8013f62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f52:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013f56:	455a      	cmp	r2, fp
 8013f58:	d103      	bne.n	8013f62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f5a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f5e:	454a      	cmp	r2, r9
 8013f60:	d06d      	beq.n	801403e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013f62:	f1bb 0f00 	cmp.w	fp, #0
 8013f66:	dd65      	ble.n	8014034 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013f68:	f1b9 0f00 	cmp.w	r9, #0
 8013f6c:	dd62      	ble.n	8014034 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013f6e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013f72:	fa1f f08a 	uxth.w	r0, sl
 8013f76:	4552      	cmp	r2, sl
 8013f78:	9000      	str	r0, [sp, #0]
 8013f7a:	da12      	bge.n	8013fa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8013f7c:	9301      	str	r3, [sp, #4]
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013f84:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013f88:	1a9a      	subs	r2, r3, r2
 8013f8a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013f8e:	4631      	mov	r1, r6
 8013f90:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013f94:	4640      	mov	r0, r8
 8013f96:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013f9a:	69ea      	ldr	r2, [r5, #28]
 8013f9c:	f7ff ff7a 	bl	8013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013fa0:	9b01      	ldr	r3, [sp, #4]
 8013fa2:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013fa6:	b29f      	uxth	r7, r3
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	da0d      	bge.n	8013fc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013fac:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013fb0:	1aba      	subs	r2, r7, r2
 8013fb2:	f8ad a012 	strh.w	sl, [sp, #18]
 8013fb6:	4631      	mov	r1, r6
 8013fb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013fbc:	4640      	mov	r0, r8
 8013fbe:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013fc2:	69ea      	ldr	r2, [r5, #28]
 8013fc4:	f7ff ff66 	bl	8013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013fc8:	8822      	ldrh	r2, [r4, #0]
 8013fca:	445f      	add	r7, fp
 8013fcc:	88a3      	ldrh	r3, [r4, #4]
 8013fce:	b2bf      	uxth	r7, r7
 8013fd0:	4413      	add	r3, r2
 8013fd2:	b23a      	sxth	r2, r7
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	b219      	sxth	r1, r3
 8013fd8:	4291      	cmp	r1, r2
 8013fda:	dd0d      	ble.n	8013ff8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013fdc:	1bdb      	subs	r3, r3, r7
 8013fde:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013fe2:	f8ad a012 	strh.w	sl, [sp, #18]
 8013fe6:	4631      	mov	r1, r6
 8013fe8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013fec:	4640      	mov	r0, r8
 8013fee:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013ff2:	69ea      	ldr	r2, [r5, #28]
 8013ff4:	f7ff ff4e 	bl	8013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013ff8:	88e2      	ldrh	r2, [r4, #6]
 8013ffa:	8863      	ldrh	r3, [r4, #2]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	9a00      	ldr	r2, [sp, #0]
 8014000:	444a      	add	r2, r9
 8014002:	b29b      	uxth	r3, r3
 8014004:	fa1f f982 	uxth.w	r9, r2
 8014008:	b219      	sxth	r1, r3
 801400a:	fa0f f289 	sxth.w	r2, r9
 801400e:	428a      	cmp	r2, r1
 8014010:	da15      	bge.n	801403e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014012:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014016:	eba3 0309 	sub.w	r3, r3, r9
 801401a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801401e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014022:	4631      	mov	r1, r6
 8014024:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014028:	f8ad 2012 	strh.w	r2, [sp, #18]
 801402c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014030:	69ea      	ldr	r2, [r5, #28]
 8014032:	e001      	b.n	8014038 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014034:	69ea      	ldr	r2, [r5, #28]
 8014036:	4621      	mov	r1, r4
 8014038:	4640      	mov	r0, r8
 801403a:	f7ff ff2b 	bl	8013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801403e:	4628      	mov	r0, r5
 8014040:	f7ff fe94 	bl	8013d6c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014044:	6861      	ldr	r1, [r4, #4]
 8014046:	4602      	mov	r2, r0
 8014048:	4633      	mov	r3, r6
 801404a:	6820      	ldr	r0, [r4, #0]
 801404c:	c303      	stmia	r3!, {r0, r1}
 801404e:	4611      	mov	r1, r2
 8014050:	4630      	mov	r0, r6
 8014052:	f7f9 fe49 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 8014056:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f77f af33 	ble.w	8013ec6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014060:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014064:	2b00      	cmp	r3, #0
 8014066:	f77f af2e 	ble.w	8013ec6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801406a:	4628      	mov	r0, r5
 801406c:	f7ff fe9a 	bl	8013da4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014070:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014074:	1a18      	subs	r0, r3, r0
 8014076:	f8ad 0010 	strh.w	r0, [sp, #16]
 801407a:	4628      	mov	r0, r5
 801407c:	f7ff fea6 	bl	8013dcc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014080:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014084:	4631      	mov	r1, r6
 8014086:	1a18      	subs	r0, r3, r0
 8014088:	f8ad 0012 	strh.w	r0, [sp, #18]
 801408c:	4628      	mov	r0, r5
 801408e:	682b      	ldr	r3, [r5, #0]
 8014090:	689b      	ldr	r3, [r3, #8]
 8014092:	4798      	blx	r3
 8014094:	e717      	b.n	8013ec6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014096 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014096:	b570      	push	{r4, r5, r6, lr}
 8014098:	1d06      	adds	r6, r0, #4
 801409a:	b086      	sub	sp, #24
 801409c:	460c      	mov	r4, r1
 801409e:	2300      	movs	r3, #0
 80140a0:	4631      	mov	r1, r6
 80140a2:	4605      	mov	r5, r0
 80140a4:	a802      	add	r0, sp, #8
 80140a6:	9301      	str	r3, [sp, #4]
 80140a8:	f7ff fbee 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80140b0:	8822      	ldrh	r2, [r4, #0]
 80140b2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80140b6:	1ad2      	subs	r2, r2, r3
 80140b8:	8863      	ldrh	r3, [r4, #2]
 80140ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80140be:	1a5b      	subs	r3, r3, r1
 80140c0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80140c4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80140c8:	aa01      	add	r2, sp, #4
 80140ca:	f8ad 0014 	strh.w	r0, [sp, #20]
 80140ce:	4630      	mov	r0, r6
 80140d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80140d4:	a904      	add	r1, sp, #16
 80140d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80140da:	f7f9 fedd 	bl	800de98 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80140de:	9a01      	ldr	r2, [sp, #4]
 80140e0:	b11a      	cbz	r2, 80140ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80140e2:	4621      	mov	r1, r4
 80140e4:	4628      	mov	r0, r5
 80140e6:	f7ff fed5 	bl	8013e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80140ea:	b006      	add	sp, #24
 80140ec:	bd70      	pop	{r4, r5, r6, pc}

080140ee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80140ee:	4602      	mov	r2, r0
 80140f0:	b530      	push	{r4, r5, lr}
 80140f2:	4604      	mov	r4, r0
 80140f4:	b085      	sub	sp, #20
 80140f6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80140fa:	460d      	mov	r5, r1
 80140fc:	466b      	mov	r3, sp
 80140fe:	6851      	ldr	r1, [r2, #4]
 8014100:	c303      	stmia	r3!, {r0, r1}
 8014102:	4629      	mov	r1, r5
 8014104:	4668      	mov	r0, sp
 8014106:	f7f9 fdef 	bl	800dce8 <_ZN8touchgfx4RectaNERKS0_>
 801410a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801410e:	b12b      	cbz	r3, 801411c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014110:	4669      	mov	r1, sp
 8014112:	4620      	mov	r0, r4
 8014114:	f7ff ffbf 	bl	8014096 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014118:	b005      	add	sp, #20
 801411a:	bd30      	pop	{r4, r5, pc}
 801411c:	3404      	adds	r4, #4
 801411e:	a802      	add	r0, sp, #8
 8014120:	4621      	mov	r1, r4
 8014122:	f7ff fbb1 	bl	8013888 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014126:	f8bd 3000 	ldrh.w	r3, [sp]
 801412a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801412e:	4669      	mov	r1, sp
 8014130:	4620      	mov	r0, r4
 8014132:	1a9b      	subs	r3, r3, r2
 8014134:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014138:	f8ad 3000 	strh.w	r3, [sp]
 801413c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014140:	1a9b      	subs	r3, r3, r2
 8014142:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014146:	f7f9 fe6e 	bl	800de26 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801414a:	e7e5      	b.n	8014118 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801414c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801414c:	460b      	mov	r3, r1
 801414e:	680a      	ldr	r2, [r1, #0]
 8014150:	1d01      	adds	r1, r0, #4
 8014152:	6992      	ldr	r2, [r2, #24]
 8014154:	4618      	mov	r0, r3
 8014156:	4710      	bx	r2

08014158 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8014158:	4298      	cmp	r0, r3
 801415a:	d200      	bcs.n	801415e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801415c:	b913      	cbnz	r3, 8014164 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801415e:	440a      	add	r2, r1
 8014160:	b210      	sxth	r0, r2
 8014162:	4770      	bx	lr
 8014164:	ee07 2a90 	vmov	s15, r2
 8014168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801416c:	ee07 0a90 	vmov	s15, r0
 8014170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014178:	ee07 3a10 	vmov	s14, r3
 801417c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014180:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014184:	ee07 1a90 	vmov	s15, r1
 8014188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801418c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014190:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419c:	bfcc      	ite	gt
 801419e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80141a2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80141a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141aa:	ee17 3a90 	vmov	r3, s15
 80141ae:	b218      	sxth	r0, r3
 80141b0:	4770      	bx	lr

080141b2 <_ZN8touchgfx12TextProviderC1Ev>:
 80141b2:	b538      	push	{r3, r4, r5, lr}
 80141b4:	2500      	movs	r5, #0
 80141b6:	2302      	movs	r3, #2
 80141b8:	4604      	mov	r4, r0
 80141ba:	220e      	movs	r2, #14
 80141bc:	7403      	strb	r3, [r0, #16]
 80141be:	4629      	mov	r1, r5
 80141c0:	6145      	str	r5, [r0, #20]
 80141c2:	7605      	strb	r5, [r0, #24]
 80141c4:	83c5      	strh	r5, [r0, #30]
 80141c6:	8405      	strh	r5, [r0, #32]
 80141c8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80141ca:	8705      	strh	r5, [r0, #56]	; 0x38
 80141cc:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80141ce:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80141d2:	e9c0 5500 	strd	r5, r5, [r0]
 80141d6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80141da:	304c      	adds	r0, #76	; 0x4c
 80141dc:	f00b fb84 	bl	801f8e8 <memset>
 80141e0:	2301      	movs	r3, #1
 80141e2:	4620      	mov	r0, r4
 80141e4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80141e8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80141ec:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80141f0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80141f4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80141f8:	f7ef fce0 	bl	8003bbc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80141fc:	4620      	mov	r0, r4
 80141fe:	bd38      	pop	{r3, r4, r5, pc}

08014200 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014200:	b530      	push	{r4, r5, lr}
 8014202:	2500      	movs	r5, #0
 8014204:	2401      	movs	r4, #1
 8014206:	6843      	ldr	r3, [r0, #4]
 8014208:	b913      	cbnz	r3, 8014210 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801420a:	6803      	ldr	r3, [r0, #0]
 801420c:	b313      	cbz	r3, 8014254 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801420e:	6043      	str	r3, [r0, #4]
 8014210:	7e03      	ldrb	r3, [r0, #24]
 8014212:	b143      	cbz	r3, 8014226 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014214:	6943      	ldr	r3, [r0, #20]
 8014216:	b12b      	cbz	r3, 8014224 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014218:	881a      	ldrh	r2, [r3, #0]
 801421a:	b11a      	cbz	r2, 8014224 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801421c:	1c9a      	adds	r2, r3, #2
 801421e:	6142      	str	r2, [r0, #20]
 8014220:	8818      	ldrh	r0, [r3, #0]
 8014222:	bd30      	pop	{r4, r5, pc}
 8014224:	7605      	strb	r5, [r0, #24]
 8014226:	6843      	ldr	r3, [r0, #4]
 8014228:	8819      	ldrh	r1, [r3, #0]
 801422a:	b199      	cbz	r1, 8014254 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801422c:	1c9a      	adds	r2, r3, #2
 801422e:	2902      	cmp	r1, #2
 8014230:	6042      	str	r2, [r0, #4]
 8014232:	d1f5      	bne.n	8014220 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014234:	7c03      	ldrb	r3, [r0, #16]
 8014236:	2b01      	cmp	r3, #1
 8014238:	d8e5      	bhi.n	8014206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	3302      	adds	r3, #2
 801423e:	7402      	strb	r2, [r0, #16]
 8014240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014244:	6143      	str	r3, [r0, #20]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0dd      	beq.n	8014206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801424a:	881b      	ldrh	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d0da      	beq.n	8014206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014250:	7604      	strb	r4, [r0, #24]
 8014252:	e7d8      	b.n	8014206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014254:	2000      	movs	r0, #0
 8014256:	e7e4      	b.n	8014222 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014258 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014258:	b430      	push	{r4, r5}
 801425a:	6815      	ldr	r5, [r2, #0]
 801425c:	6085      	str	r5, [r0, #8]
 801425e:	6852      	ldr	r2, [r2, #4]
 8014260:	6443      	str	r3, [r0, #68]	; 0x44
 8014262:	60c2      	str	r2, [r0, #12]
 8014264:	2200      	movs	r2, #0
 8014266:	9b02      	ldr	r3, [sp, #8]
 8014268:	7402      	strb	r2, [r0, #16]
 801426a:	6001      	str	r1, [r0, #0]
 801426c:	6483      	str	r3, [r0, #72]	; 0x48
 801426e:	6042      	str	r2, [r0, #4]
 8014270:	6142      	str	r2, [r0, #20]
 8014272:	7602      	strb	r2, [r0, #24]
 8014274:	8702      	strh	r2, [r0, #56]	; 0x38
 8014276:	8402      	strh	r2, [r0, #32]
 8014278:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801427c:	bc30      	pop	{r4, r5}
 801427e:	f7ef bc9d 	b.w	8003bbc <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014282 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014284:	4605      	mov	r5, r0
 8014286:	4608      	mov	r0, r1
 8014288:	b1f1      	cbz	r1, 80142c8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801428a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801428e:	460b      	mov	r3, r1
 8014290:	f101 0708 	add.w	r7, r1, #8
 8014294:	4622      	mov	r2, r4
 8014296:	6818      	ldr	r0, [r3, #0]
 8014298:	3308      	adds	r3, #8
 801429a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801429e:	4626      	mov	r6, r4
 80142a0:	42bb      	cmp	r3, r7
 80142a2:	c603      	stmia	r6!, {r0, r1}
 80142a4:	4634      	mov	r4, r6
 80142a6:	d1f6      	bne.n	8014296 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80142a8:	6818      	ldr	r0, [r3, #0]
 80142aa:	6030      	str	r0, [r6, #0]
 80142ac:	4610      	mov	r0, r2
 80142ae:	889b      	ldrh	r3, [r3, #4]
 80142b0:	80b3      	strh	r3, [r6, #4]
 80142b2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80142b6:	015b      	lsls	r3, r3, #5
 80142b8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80142bc:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80142c0:	430b      	orrs	r3, r1
 80142c2:	425b      	negs	r3, r3
 80142c4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80142c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80142ca:	b538      	push	{r3, r4, r5, lr}
 80142cc:	460c      	mov	r4, r1
 80142ce:	6811      	ldr	r1, [r2, #0]
 80142d0:	4610      	mov	r0, r2
 80142d2:	68cd      	ldr	r5, [r1, #12]
 80142d4:	4619      	mov	r1, r3
 80142d6:	47a8      	blx	r5
 80142d8:	2800      	cmp	r0, #0
 80142da:	bf08      	it	eq
 80142dc:	4620      	moveq	r0, r4
 80142de:	bd38      	pop	{r3, r4, r5, pc}

080142e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80142e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142e2:	4604      	mov	r4, r0
 80142e4:	4615      	mov	r5, r2
 80142e6:	4608      	mov	r0, r1
 80142e8:	b93a      	cbnz	r2, 80142fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80142ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80142ee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80142f2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80142f6:	4628      	mov	r0, r5
 80142f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142fa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80142fe:	8893      	ldrh	r3, [r2, #4]
 8014300:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014304:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014308:	79ee      	ldrb	r6, [r5, #7]
 801430a:	4316      	orrs	r6, r2
 801430c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8014310:	189a      	adds	r2, r3, r2
 8014312:	b2b7      	uxth	r7, r6
 8014314:	b291      	uxth	r1, r2
 8014316:	291d      	cmp	r1, #29
 8014318:	f200 8084 	bhi.w	8014424 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801431c:	2201      	movs	r2, #1
 801431e:	10f6      	asrs	r6, r6, #3
 8014320:	408a      	lsls	r2, r1
 8014322:	4978      	ldr	r1, [pc, #480]	; (8014504 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8014324:	420a      	tst	r2, r1
 8014326:	d12e      	bne.n	8014386 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8014328:	f412 7f60 	tst.w	r2, #896	; 0x380
 801432c:	d07a      	beq.n	8014424 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801432e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8014332:	462b      	mov	r3, r5
 8014334:	f105 0e08 	add.w	lr, r5, #8
 8014338:	4615      	mov	r5, r2
 801433a:	6818      	ldr	r0, [r3, #0]
 801433c:	3308      	adds	r3, #8
 801433e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014342:	4694      	mov	ip, r2
 8014344:	4573      	cmp	r3, lr
 8014346:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801434a:	4662      	mov	r2, ip
 801434c:	d1f5      	bne.n	801433a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801434e:	6818      	ldr	r0, [r3, #0]
 8014350:	f8cc 0000 	str.w	r0, [ip]
 8014354:	889b      	ldrh	r3, [r3, #4]
 8014356:	f8ac 3004 	strh.w	r3, [ip, #4]
 801435a:	b2b3      	uxth	r3, r6
 801435c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014360:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8014364:	1aca      	subs	r2, r1, r3
 8014366:	1bcf      	subs	r7, r1, r7
 8014368:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801436c:	b292      	uxth	r2, r2
 801436e:	1afb      	subs	r3, r7, r3
 8014370:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8014374:	10d2      	asrs	r2, r2, #3
 8014376:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801437a:	4302      	orrs	r2, r0
 801437c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8014380:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8014384:	e7b7      	b.n	80142f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014386:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014388:	b92b      	cbnz	r3, 8014396 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801438a:	4b5f      	ldr	r3, [pc, #380]	; (8014508 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801438c:	21c0      	movs	r1, #192	; 0xc0
 801438e:	4a5f      	ldr	r2, [pc, #380]	; (801450c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8014390:	485f      	ldr	r0, [pc, #380]	; (8014510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8014392:	f00b fa19 	bl	801f7c8 <__assert_func>
 8014396:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014398:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801439c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801439e:	f640 6333 	movw	r3, #3635	; 0xe33
 80143a2:	4299      	cmp	r1, r3
 80143a4:	d110      	bne.n	80143c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80143a6:	6803      	ldr	r3, [r0, #0]
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	4798      	blx	r3
 80143ac:	7b41      	ldrb	r1, [r0, #13]
 80143ae:	00cb      	lsls	r3, r1, #3
 80143b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80143b4:	7a03      	ldrb	r3, [r0, #8]
 80143b6:	0648      	lsls	r0, r1, #25
 80143b8:	ea43 0302 	orr.w	r3, r3, r2
 80143bc:	bf44      	itt	mi
 80143be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80143c2:	b21b      	sxthmi	r3, r3
 80143c4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80143c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80143cc:	462a      	mov	r2, r5
 80143ce:	f105 0c08 	add.w	ip, r5, #8
 80143d2:	443b      	add	r3, r7
 80143d4:	4433      	add	r3, r6
 80143d6:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80143da:	b29b      	uxth	r3, r3
 80143dc:	4635      	mov	r5, r6
 80143de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80143e2:	6810      	ldr	r0, [r2, #0]
 80143e4:	3208      	adds	r2, #8
 80143e6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80143ea:	4637      	mov	r7, r6
 80143ec:	4562      	cmp	r2, ip
 80143ee:	c703      	stmia	r7!, {r0, r1}
 80143f0:	463e      	mov	r6, r7
 80143f2:	d1f6      	bne.n	80143e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80143f4:	6810      	ldr	r0, [r2, #0]
 80143f6:	6038      	str	r0, [r7, #0]
 80143f8:	8892      	ldrh	r2, [r2, #4]
 80143fa:	80ba      	strh	r2, [r7, #4]
 80143fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014400:	10db      	asrs	r3, r3, #3
 8014402:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801440a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801440e:	4313      	orrs	r3, r2
 8014410:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8014414:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014418:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801441c:	1a9b      	subs	r3, r3, r2
 801441e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8014422:	e768      	b.n	80142f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014424:	f023 0204 	bic.w	r2, r3, #4
 8014428:	f640 611b 	movw	r1, #3611	; 0xe1b
 801442c:	428a      	cmp	r2, r1
 801442e:	d003      	beq.n	8014438 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8014430:	f640 621d 	movw	r2, #3613	; 0xe1d
 8014434:	4293      	cmp	r3, r2
 8014436:	d120      	bne.n	801447a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8014438:	3b01      	subs	r3, #1
 801443a:	4602      	mov	r2, r0
 801443c:	4629      	mov	r1, r5
 801443e:	4620      	mov	r0, r4
 8014440:	b29b      	uxth	r3, r3
 8014442:	f7ff ff42 	bl	80142ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014446:	7b41      	ldrb	r1, [r0, #13]
 8014448:	00cb      	lsls	r3, r1, #3
 801444a:	0649      	lsls	r1, r1, #25
 801444c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014450:	7a03      	ldrb	r3, [r0, #8]
 8014452:	ea43 0302 	orr.w	r3, r3, r2
 8014456:	bf44      	itt	mi
 8014458:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801445c:	b21b      	sxthmi	r3, r3
 801445e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014462:	7b6b      	ldrb	r3, [r5, #13]
 8014464:	7aaa      	ldrb	r2, [r5, #10]
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801446c:	4313      	orrs	r3, r2
 801446e:	115a      	asrs	r2, r3, #5
 8014470:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8014474:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8014478:	e035      	b.n	80144e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801447a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801447e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8014482:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8014486:	7a2a      	ldrb	r2, [r5, #8]
 8014488:	ea42 0201 	orr.w	r2, r2, r1
 801448c:	f640 6109 	movw	r1, #3593	; 0xe09
 8014490:	bf1c      	itt	ne
 8014492:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8014496:	b212      	sxthne	r2, r2
 8014498:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801449c:	f023 0210 	bic.w	r2, r3, #16
 80144a0:	428a      	cmp	r2, r1
 80144a2:	d003      	beq.n	80144ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 80144a4:	f640 6213 	movw	r2, #3603	; 0xe13
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d129      	bne.n	8014500 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 80144ac:	7b6e      	ldrb	r6, [r5, #13]
 80144ae:	4629      	mov	r1, r5
 80144b0:	0076      	lsls	r6, r6, #1
 80144b2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80144b6:	7aae      	ldrb	r6, [r5, #10]
 80144b8:	4316      	orrs	r6, r2
 80144ba:	f640 6213 	movw	r2, #3603	; 0xe13
 80144be:	4293      	cmp	r3, r2
 80144c0:	4602      	mov	r2, r0
 80144c2:	4620      	mov	r0, r4
 80144c4:	bf16      	itet	ne
 80144c6:	f103 33ff 	addne.w	r3, r3, #4294967295
 80144ca:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80144ce:	b29b      	uxthne	r3, r3
 80144d0:	f7ff fefb 	bl	80142ca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80144d4:	7b43      	ldrb	r3, [r0, #13]
 80144d6:	7a82      	ldrb	r2, [r0, #10]
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144de:	4313      	orrs	r3, r2
 80144e0:	1af6      	subs	r6, r6, r3
 80144e2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80144e6:	7b69      	ldrb	r1, [r5, #13]
 80144e8:	00cb      	lsls	r3, r1, #3
 80144ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80144ee:	7a2b      	ldrb	r3, [r5, #8]
 80144f0:	4313      	orrs	r3, r2
 80144f2:	064a      	lsls	r2, r1, #25
 80144f4:	bf44      	itt	mi
 80144f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80144fa:	b21b      	sxthmi	r3, r3
 80144fc:	1bdb      	subs	r3, r3, r7
 80144fe:	e73f      	b.n	8014380 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8014500:	2300      	movs	r3, #0
 8014502:	e7b7      	b.n	8014474 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8014504:	3fc00079 	.word	0x3fc00079
 8014508:	0802199c 	.word	0x0802199c
 801450c:	08023c7b 	.word	0x08023c7b
 8014510:	08021a7c 	.word	0x08021a7c

08014514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014518:	4604      	mov	r4, r0
 801451a:	b942      	cbnz	r2, 801452e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801451c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014520:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8014524:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014528:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801452c:	e046      	b.n	80145bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801452e:	7b51      	ldrb	r1, [r2, #13]
 8014530:	8893      	ldrh	r3, [r2, #4]
 8014532:	010f      	lsls	r7, r1, #4
 8014534:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014538:	79d7      	ldrb	r7, [r2, #7]
 801453a:	4307      	orrs	r7, r0
 801453c:	2f04      	cmp	r7, #4
 801453e:	b2bd      	uxth	r5, r7
 8014540:	bfcc      	ite	gt
 8014542:	08bf      	lsrgt	r7, r7, #2
 8014544:	2701      	movle	r7, #1
 8014546:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801454a:	f200 80ab 	bhi.w	80146a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801454e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014552:	4283      	cmp	r3, r0
 8014554:	d216      	bcs.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014556:	f240 605b 	movw	r0, #1627	; 0x65b
 801455a:	4283      	cmp	r3, r0
 801455c:	d859      	bhi.n	8014612 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801455e:	f240 6057 	movw	r0, #1623	; 0x657
 8014562:	4283      	cmp	r3, r0
 8014564:	d20e      	bcs.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014566:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801456a:	d24a      	bcs.n	8014602 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801456c:	f240 604e 	movw	r0, #1614	; 0x64e
 8014570:	4283      	cmp	r3, r0
 8014572:	d207      	bcs.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014574:	f240 601a 	movw	r0, #1562	; 0x61a
 8014578:	4283      	cmp	r3, r0
 801457a:	d02a      	beq.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801457c:	d821      	bhi.n	80145c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801457e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8014582:	d35b      	bcc.n	801463c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014584:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8014588:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801458c:	f040 80d0 	bne.w	8014730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8014590:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8014594:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014598:	f040 80ca 	bne.w	8014730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801459c:	00cb      	lsls	r3, r1, #3
 801459e:	0649      	lsls	r1, r1, #25
 80145a0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80145a4:	7a13      	ldrb	r3, [r2, #8]
 80145a6:	ea43 0300 	orr.w	r3, r3, r0
 80145aa:	bf44      	itt	mi
 80145ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80145b0:	b21b      	sxthmi	r3, r3
 80145b2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80145b6:	1b5d      	subs	r5, r3, r5
 80145b8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80145bc:	4610      	mov	r0, r2
 80145be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145c2:	f240 604b 	movw	r0, #1611	; 0x64b
 80145c6:	4283      	cmp	r3, r0
 80145c8:	d338      	bcc.n	801463c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80145ca:	f240 604c 	movw	r0, #1612	; 0x64c
 80145ce:	4283      	cmp	r3, r0
 80145d0:	d9d8      	bls.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80145d2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80145d6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80145da:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80145de:	f040 80f2 	bne.w	80147c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80145e2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80145e6:	f040 80ee 	bne.w	80147c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 80145ea:	00cb      	lsls	r3, r1, #3
 80145ec:	064e      	lsls	r6, r1, #25
 80145ee:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80145f2:	7a13      	ldrb	r3, [r2, #8]
 80145f4:	ea43 0300 	orr.w	r3, r3, r0
 80145f8:	bf44      	itt	mi
 80145fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80145fe:	b21b      	sxthmi	r3, r3
 8014600:	e7d9      	b.n	80145b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8014602:	f240 6054 	movw	r0, #1620	; 0x654
 8014606:	4283      	cmp	r3, r0
 8014608:	d8e3      	bhi.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801460a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801460e:	d9e0      	bls.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014610:	e7b8      	b.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014612:	f240 6074 	movw	r0, #1652	; 0x674
 8014616:	4283      	cmp	r3, r0
 8014618:	d0b4      	beq.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801461a:	d82d      	bhi.n	8014678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801461c:	f240 605e 	movw	r0, #1630	; 0x65e
 8014620:	4283      	cmp	r3, r0
 8014622:	d804      	bhi.n	801462e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8014624:	f240 605d 	movw	r0, #1629	; 0x65d
 8014628:	4283      	cmp	r3, r0
 801462a:	d3d2      	bcc.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801462c:	e7aa      	b.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801462e:	f240 605f 	movw	r0, #1631	; 0x65f
 8014632:	4283      	cmp	r3, r0
 8014634:	d0cd      	beq.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014636:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801463a:	d0a3      	beq.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801463c:	00cb      	lsls	r3, r1, #3
 801463e:	0649      	lsls	r1, r1, #25
 8014640:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014644:	7a13      	ldrb	r3, [r2, #8]
 8014646:	ea43 0300 	orr.w	r3, r3, r0
 801464a:	bf44      	itt	mi
 801464c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014650:	b21b      	sxthmi	r3, r3
 8014652:	1b5d      	subs	r5, r3, r5
 8014654:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014658:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801465c:	7b53      	ldrb	r3, [r2, #13]
 801465e:	015b      	lsls	r3, r3, #5
 8014660:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014664:	7993      	ldrb	r3, [r2, #6]
 8014666:	430b      	orrs	r3, r1
 8014668:	2105      	movs	r1, #5
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014670:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014674:	440b      	add	r3, r1
 8014676:	e757      	b.n	8014528 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014678:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801467c:	4283      	cmp	r3, r0
 801467e:	d809      	bhi.n	8014694 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8014680:	f240 60df 	movw	r0, #1759	; 0x6df
 8014684:	4283      	cmp	r3, r0
 8014686:	f4bf af7d 	bcs.w	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801468a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801468e:	2b05      	cmp	r3, #5
 8014690:	d8d4      	bhi.n	801463c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014692:	e777      	b.n	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014694:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8014698:	4283      	cmp	r3, r0
 801469a:	d09a      	beq.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801469c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80146a0:	4283      	cmp	r3, r0
 80146a2:	e7ca      	b.n	801463a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 80146a4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80146a8:	d22b      	bcs.n	8014702 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 80146aa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80146ae:	4283      	cmp	r3, r0
 80146b0:	d28f      	bcs.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80146b2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80146b6:	4283      	cmp	r3, r0
 80146b8:	d816      	bhi.n	80146e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 80146ba:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80146be:	4283      	cmp	r3, r0
 80146c0:	f4bf af60 	bcs.w	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80146c4:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80146c8:	4283      	cmp	r3, r0
 80146ca:	d80a      	bhi.n	80146e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 80146cc:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80146d0:	4283      	cmp	r3, r0
 80146d2:	f4bf af57 	bcs.w	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80146d6:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80146da:	4283      	cmp	r3, r0
 80146dc:	f43f af79 	beq.w	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80146e0:	e7ac      	b.n	801463c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80146e2:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80146e6:	e7f8      	b.n	80146da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 80146e8:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80146ec:	4283      	cmp	r3, r0
 80146ee:	d802      	bhi.n	80146f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 80146f0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80146f4:	e798      	b.n	8014628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 80146f6:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80146fa:	4283      	cmp	r3, r0
 80146fc:	f47f af42 	bne.w	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014700:	e767      	b.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014702:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014706:	4283      	cmp	r3, r0
 8014708:	f43f af63 	beq.w	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801470c:	d802      	bhi.n	8014714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801470e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014712:	e7f2      	b.n	80146fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8014714:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014718:	4283      	cmp	r3, r0
 801471a:	d805      	bhi.n	8014728 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801471c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014720:	4283      	cmp	r3, r0
 8014722:	f4ff af2f 	bcc.w	8014584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014726:	e754      	b.n	80145d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014728:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801472c:	4283      	cmp	r3, r0
 801472e:	e7af      	b.n	8014690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8014730:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014734:	4617      	mov	r7, r2
 8014736:	f102 0808 	add.w	r8, r2, #8
 801473a:	4666      	mov	r6, ip
 801473c:	6838      	ldr	r0, [r7, #0]
 801473e:	3708      	adds	r7, #8
 8014740:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014744:	46e6      	mov	lr, ip
 8014746:	4547      	cmp	r7, r8
 8014748:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801474c:	46f4      	mov	ip, lr
 801474e:	d1f5      	bne.n	801473c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8014750:	6838      	ldr	r0, [r7, #0]
 8014752:	f8ce 0000 	str.w	r0, [lr]
 8014756:	88b9      	ldrh	r1, [r7, #4]
 8014758:	f8ae 1004 	strh.w	r1, [lr, #4]
 801475c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014760:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014764:	d009      	beq.n	801477a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8014766:	7b51      	ldrb	r1, [r2, #13]
 8014768:	7992      	ldrb	r2, [r2, #6]
 801476a:	0149      	lsls	r1, r1, #5
 801476c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014770:	4311      	orrs	r1, r2
 8014772:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014776:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801477a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801477e:	d00d      	beq.n	801479c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8014780:	442b      	add	r3, r5
 8014782:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014786:	b29b      	uxth	r3, r3
 8014788:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801478c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014790:	10db      	asrs	r3, r3, #3
 8014792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014796:	4313      	orrs	r3, r2
 8014798:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801479c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80147a0:	00cb      	lsls	r3, r1, #3
 80147a2:	064f      	lsls	r7, r1, #25
 80147a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80147a8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80147ac:	ea43 0302 	orr.w	r3, r3, r2
 80147b0:	bf44      	itt	mi
 80147b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80147b6:	b21b      	sxthmi	r3, r3
 80147b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80147bc:	1b5d      	subs	r5, r3, r5
 80147be:	4632      	mov	r2, r6
 80147c0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80147c4:	e6fa      	b.n	80145bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80147c6:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80147ca:	4694      	mov	ip, r2
 80147cc:	f102 0908 	add.w	r9, r2, #8
 80147d0:	4676      	mov	r6, lr
 80147d2:	f8dc 0000 	ldr.w	r0, [ip]
 80147d6:	f10c 0c08 	add.w	ip, ip, #8
 80147da:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80147de:	46f0      	mov	r8, lr
 80147e0:	45cc      	cmp	ip, r9
 80147e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80147e6:	46c6      	mov	lr, r8
 80147e8:	d1f3      	bne.n	80147d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 80147ea:	f8dc 0000 	ldr.w	r0, [ip]
 80147ee:	f8c8 0000 	str.w	r0, [r8]
 80147f2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80147f6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80147fa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80147fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014802:	d009      	beq.n	8014818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8014804:	7b51      	ldrb	r1, [r2, #13]
 8014806:	7992      	ldrb	r2, [r2, #6]
 8014808:	0149      	lsls	r1, r1, #5
 801480a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801480e:	4311      	orrs	r1, r2
 8014810:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014814:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014818:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801481c:	d00d      	beq.n	801483a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801481e:	1bdb      	subs	r3, r3, r7
 8014820:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014824:	b29b      	uxth	r3, r3
 8014826:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801482a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801482e:	10db      	asrs	r3, r3, #3
 8014830:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014834:	4313      	orrs	r3, r2
 8014836:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801483a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801483e:	00cb      	lsls	r3, r1, #3
 8014840:	0648      	lsls	r0, r1, #25
 8014842:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014846:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801484a:	ea43 0302 	orr.w	r3, r3, r2
 801484e:	bf44      	itt	mi
 8014850:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014854:	b21b      	sxthmi	r3, r3
 8014856:	e7b1      	b.n	80147bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08014858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801485c:	461e      	mov	r6, r3
 801485e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8014860:	4604      	mov	r4, r0
 8014862:	4617      	mov	r7, r2
 8014864:	b92b      	cbnz	r3, 8014872 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8014866:	4b25      	ldr	r3, [pc, #148]	; (80148fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8014868:	21c0      	movs	r1, #192	; 0xc0
 801486a:	4a25      	ldr	r2, [pc, #148]	; (8014900 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801486c:	4825      	ldr	r0, [pc, #148]	; (8014904 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801486e:	f00a ffab 	bl	801f7c8 <__assert_func>
 8014872:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014874:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014878:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801487c:	f7ef f95c 	bl	8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014880:	4605      	mov	r5, r0
 8014882:	b918      	cbnz	r0, 801488c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8014884:	6030      	str	r0, [r6, #0]
 8014886:	4628      	mov	r0, r5
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	4601      	mov	r1, r0
 8014890:	4638      	mov	r0, r7
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	4798      	blx	r3
 8014896:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801489a:	4602      	mov	r2, r0
 801489c:	6030      	str	r0, [r6, #0]
 801489e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80148a2:	d213      	bcs.n	80148cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80148a4:	4643      	mov	r3, r8
 80148a6:	4639      	mov	r1, r7
 80148a8:	4620      	mov	r0, r4
 80148aa:	f7ff fe33 	bl	8014514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80148ae:	6030      	str	r0, [r6, #0]
 80148b0:	6833      	ldr	r3, [r6, #0]
 80148b2:	b143      	cbz	r3, 80148c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 80148b4:	7b5a      	ldrb	r2, [r3, #13]
 80148b6:	7a9b      	ldrb	r3, [r3, #10]
 80148b8:	0052      	lsls	r2, r2, #1
 80148ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80148be:	4313      	orrs	r3, r2
 80148c0:	bf0c      	ite	eq
 80148c2:	2301      	moveq	r3, #1
 80148c4:	2300      	movne	r3, #0
 80148c6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80148ca:	e7dc      	b.n	8014886 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 80148cc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	2b7f      	cmp	r3, #127	; 0x7f
 80148d4:	d804      	bhi.n	80148e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 80148d6:	4639      	mov	r1, r7
 80148d8:	4620      	mov	r0, r4
 80148da:	f7ff fd01 	bl	80142e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80148de:	e7e6      	b.n	80148ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80148e0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d0e3      	beq.n	80148b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80148e8:	f640 1302 	movw	r3, #2306	; 0x902
 80148ec:	429d      	cmp	r5, r3
 80148ee:	d1df      	bne.n	80148b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 80148f0:	4601      	mov	r1, r0
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7ff fcc5 	bl	8014282 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80148f8:	e7d9      	b.n	80148ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 80148fa:	bf00      	nop
 80148fc:	0802199c 	.word	0x0802199c
 8014900:	08023c7b 	.word	0x08023c7b
 8014904:	08021a7c 	.word	0x08021a7c

08014908 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801490c:	461e      	mov	r6, r3
 801490e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8014910:	4604      	mov	r4, r0
 8014912:	4617      	mov	r7, r2
 8014914:	b92b      	cbnz	r3, 8014922 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8014916:	4b26      	ldr	r3, [pc, #152]	; (80149b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8014918:	21c0      	movs	r1, #192	; 0xc0
 801491a:	4a26      	ldr	r2, [pc, #152]	; (80149b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801491c:	4826      	ldr	r0, [pc, #152]	; (80149b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801491e:	f00a ff53 	bl	801f7c8 <__assert_func>
 8014922:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014924:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014928:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801492c:	f7ef f904 	bl	8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014930:	4605      	mov	r5, r0
 8014932:	b918      	cbnz	r0, 801493c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8014934:	6030      	str	r0, [r6, #0]
 8014936:	4628      	mov	r0, r5
 8014938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	4601      	mov	r1, r0
 8014940:	4638      	mov	r0, r7
 8014942:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801494a:	47c8      	blx	r9
 801494c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014950:	4602      	mov	r2, r0
 8014952:	6030      	str	r0, [r6, #0]
 8014954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014958:	d213      	bcs.n	8014982 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801495a:	4643      	mov	r3, r8
 801495c:	4639      	mov	r1, r7
 801495e:	4620      	mov	r0, r4
 8014960:	f7ff fdd8 	bl	8014514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014964:	6030      	str	r0, [r6, #0]
 8014966:	6833      	ldr	r3, [r6, #0]
 8014968:	b143      	cbz	r3, 801497c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801496a:	7b5a      	ldrb	r2, [r3, #13]
 801496c:	7a9b      	ldrb	r3, [r3, #10]
 801496e:	0052      	lsls	r2, r2, #1
 8014970:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014974:	4313      	orrs	r3, r2
 8014976:	bf0c      	ite	eq
 8014978:	2301      	moveq	r3, #1
 801497a:	2300      	movne	r3, #0
 801497c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8014980:	e7d9      	b.n	8014936 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8014982:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014986:	b29b      	uxth	r3, r3
 8014988:	2b7f      	cmp	r3, #127	; 0x7f
 801498a:	d804      	bhi.n	8014996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801498c:	4639      	mov	r1, r7
 801498e:	4620      	mov	r0, r4
 8014990:	f7ff fca6 	bl	80142e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014994:	e7e6      	b.n	8014964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8014996:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801499a:	2b00      	cmp	r3, #0
 801499c:	d0e3      	beq.n	8014966 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801499e:	f640 1302 	movw	r3, #2306	; 0x902
 80149a2:	429d      	cmp	r5, r3
 80149a4:	d1df      	bne.n	8014966 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80149a6:	4601      	mov	r1, r0
 80149a8:	4620      	mov	r0, r4
 80149aa:	f7ff fc6a 	bl	8014282 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80149ae:	e7d9      	b.n	8014964 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80149b0:	0802199c 	.word	0x0802199c
 80149b4:	08023c7b 	.word	0x08023c7b
 80149b8:	08021a7c 	.word	0x08021a7c

080149bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80149bc:	b510      	push	{r4, lr}
 80149be:	4604      	mov	r4, r0
 80149c0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80149c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80149c6:	b9d9      	cbnz	r1, 8014a00 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 80149c8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80149ca:	2b0a      	cmp	r3, #10
 80149cc:	d037      	beq.n	8014a3e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7ff fc16 	bl	8014200 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80149d4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80149d6:	2b09      	cmp	r3, #9
 80149d8:	d906      	bls.n	80149e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80149da:	4b19      	ldr	r3, [pc, #100]	; (8014a40 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80149dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80149e0:	4a18      	ldr	r2, [pc, #96]	; (8014a44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80149e2:	4819      	ldr	r0, [pc, #100]	; (8014a48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80149e4:	f00a fef0 	bl	801f7c8 <__assert_func>
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	8722      	strh	r2, [r4, #56]	; 0x38
 80149ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80149ee:	4413      	add	r3, r2
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	2b09      	cmp	r3, #9
 80149f4:	bf88      	it	hi
 80149f6:	3b0a      	subhi	r3, #10
 80149f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80149fc:	8458      	strh	r0, [r3, #34]	; 0x22
 80149fe:	e7e3      	b.n	80149c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8014a00:	2b0a      	cmp	r3, #10
 8014a02:	d01c      	beq.n	8014a3e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8014a04:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8014a06:	3901      	subs	r1, #1
 8014a08:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014a0c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8014a0e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8014a12:	1c51      	adds	r1, r2, #1
 8014a14:	b289      	uxth	r1, r1
 8014a16:	2901      	cmp	r1, #1
 8014a18:	bf8a      	itet	hi
 8014a1a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014a1e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8014a20:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8014a22:	2b09      	cmp	r3, #9
 8014a24:	d8d9      	bhi.n	80149da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8014a26:	1c5a      	adds	r2, r3, #1
 8014a28:	8722      	strh	r2, [r4, #56]	; 0x38
 8014a2a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014a2c:	4413      	add	r3, r2
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	2b09      	cmp	r3, #9
 8014a32:	bf88      	it	hi
 8014a34:	3b0a      	subhi	r3, #10
 8014a36:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014a3a:	8458      	strh	r0, [r3, #34]	; 0x22
 8014a3c:	e7c0      	b.n	80149c0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014a3e:	bd10      	pop	{r4, pc}
 8014a40:	08023a4c 	.word	0x08023a4c
 8014a44:	08023dd1 	.word	0x08023dd1
 8014a48:	08021a7c 	.word	0x08021a7c

08014a4c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014a4c:	b538      	push	{r3, r4, r5, lr}
 8014a4e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8014a50:	4604      	mov	r4, r0
 8014a52:	b92a      	cbnz	r2, 8014a60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8014a54:	4b13      	ldr	r3, [pc, #76]	; (8014aa4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8014a56:	21d5      	movs	r1, #213	; 0xd5
 8014a58:	4a13      	ldr	r2, [pc, #76]	; (8014aa8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8014a5a:	4814      	ldr	r0, [pc, #80]	; (8014aac <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8014a5c:	f00a feb4 	bl	801f7c8 <__assert_func>
 8014a60:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014a62:	3a01      	subs	r2, #1
 8014a64:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8014a68:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8014a6a:	8702      	strh	r2, [r0, #56]	; 0x38
 8014a6c:	1c5a      	adds	r2, r3, #1
 8014a6e:	b292      	uxth	r2, r2
 8014a70:	2a09      	cmp	r2, #9
 8014a72:	bf8a      	itet	hi
 8014a74:	3b09      	subhi	r3, #9
 8014a76:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8014a78:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8014a7a:	f7ff ff9f 	bl	80149bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014a7e:	8c23      	ldrh	r3, [r4, #32]
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	bf9c      	itt	ls
 8014a84:	3301      	addls	r3, #1
 8014a86:	8423      	strhls	r3, [r4, #32]
 8014a88:	8be3      	ldrh	r3, [r4, #30]
 8014a8a:	b90b      	cbnz	r3, 8014a90 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8014a8c:	2302      	movs	r3, #2
 8014a8e:	83e3      	strh	r3, [r4, #30]
 8014a90:	8be3      	ldrh	r3, [r4, #30]
 8014a92:	4628      	mov	r0, r5
 8014a94:	3b01      	subs	r3, #1
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	83e3      	strh	r3, [r4, #30]
 8014a9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014a9e:	8365      	strh	r5, [r4, #26]
 8014aa0:	bd38      	pop	{r3, r4, r5, pc}
 8014aa2:	bf00      	nop
 8014aa4:	0802199c 	.word	0x0802199c
 8014aa8:	08023d26 	.word	0x08023d26
 8014aac:	08021a7c 	.word	0x08021a7c

08014ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014ab0:	428a      	cmp	r2, r1
 8014ab2:	b538      	push	{r3, r4, r5, lr}
 8014ab4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8014ab6:	d90c      	bls.n	8014ad2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8014ab8:	b92c      	cbnz	r4, 8014ac6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8014aba:	4b1c      	ldr	r3, [pc, #112]	; (8014b2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8014abc:	21e1      	movs	r1, #225	; 0xe1
 8014abe:	4a1c      	ldr	r2, [pc, #112]	; (8014b30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8014ac0:	481c      	ldr	r0, [pc, #112]	; (8014b34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8014ac2:	f00a fe81 	bl	801f7c8 <__assert_func>
 8014ac6:	3c01      	subs	r4, #1
 8014ac8:	4b1b      	ldr	r3, [pc, #108]	; (8014b38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8014aca:	4a1c      	ldr	r2, [pc, #112]	; (8014b3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8014acc:	21c5      	movs	r1, #197	; 0xc5
 8014ace:	8704      	strh	r4, [r0, #56]	; 0x38
 8014ad0:	e7f6      	b.n	8014ac0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014ad2:	428c      	cmp	r4, r1
 8014ad4:	d203      	bcs.n	8014ade <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8014ad6:	4b1a      	ldr	r3, [pc, #104]	; (8014b40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8014ad8:	21cb      	movs	r1, #203	; 0xcb
 8014ada:	4a1a      	ldr	r2, [pc, #104]	; (8014b44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8014adc:	e7f0      	b.n	8014ac0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014ade:	1a64      	subs	r4, r4, r1
 8014ae0:	250a      	movs	r5, #10
 8014ae2:	8704      	strh	r4, [r0, #56]	; 0x38
 8014ae4:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8014ae6:	4421      	add	r1, r4
 8014ae8:	b289      	uxth	r1, r1
 8014aea:	2909      	cmp	r1, #9
 8014aec:	bf88      	it	hi
 8014aee:	390a      	subhi	r1, #10
 8014af0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014af2:	b1ba      	cbz	r2, 8014b24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8014af4:	3a01      	subs	r2, #1
 8014af6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8014af8:	b292      	uxth	r2, r2
 8014afa:	2909      	cmp	r1, #9
 8014afc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014b00:	d903      	bls.n	8014b0a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8014b02:	4b11      	ldr	r3, [pc, #68]	; (8014b48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8014b04:	21e6      	movs	r1, #230	; 0xe6
 8014b06:	4a11      	ldr	r2, [pc, #68]	; (8014b4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8014b08:	e7da      	b.n	8014ac0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014b0a:	3101      	adds	r1, #1
 8014b0c:	8701      	strh	r1, [r0, #56]	; 0x38
 8014b0e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014b10:	b901      	cbnz	r1, 8014b14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8014b12:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014b14:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014b16:	3901      	subs	r1, #1
 8014b18:	b289      	uxth	r1, r1
 8014b1a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014b1c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014b20:	844c      	strh	r4, [r1, #34]	; 0x22
 8014b22:	e7e6      	b.n	8014af2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8014b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b28:	f7ff bf48 	b.w	80149bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014b2c:	0802199c 	.word	0x0802199c
 8014b30:	08023aff 	.word	0x08023aff
 8014b34:	08021a7c 	.word	0x08021a7c
 8014b38:	08021aa8 	.word	0x08021aa8
 8014b3c:	08023ba9 	.word	0x08023ba9
 8014b40:	08023a58 	.word	0x08023a58
 8014b44:	08023e80 	.word	0x08023e80
 8014b48:	08023a64 	.word	0x08023a64
 8014b4c:	08023a77 	.word	0x08023a77

08014b50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014b50:	3a01      	subs	r2, #1
 8014b52:	b570      	push	{r4, r5, r6, lr}
 8014b54:	b292      	uxth	r2, r2
 8014b56:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014b5a:	42b2      	cmp	r2, r6
 8014b5c:	d019      	beq.n	8014b92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8014b5e:	8c04      	ldrh	r4, [r0, #32]
 8014b60:	f831 5b02 	ldrh.w	r5, [r1], #2
 8014b64:	4294      	cmp	r4, r2
 8014b66:	d805      	bhi.n	8014b74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8014b68:	4b19      	ldr	r3, [pc, #100]	; (8014bd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014b6a:	4a1a      	ldr	r2, [pc, #104]	; (8014bd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8014b6c:	21c5      	movs	r1, #197	; 0xc5
 8014b6e:	481a      	ldr	r0, [pc, #104]	; (8014bd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8014b70:	f00a fe2a 	bl	801f7c8 <__assert_func>
 8014b74:	8bc4      	ldrh	r4, [r0, #30]
 8014b76:	4414      	add	r4, r2
 8014b78:	3a01      	subs	r2, #1
 8014b7a:	b2a4      	uxth	r4, r4
 8014b7c:	b292      	uxth	r2, r2
 8014b7e:	2c01      	cmp	r4, #1
 8014b80:	bf88      	it	hi
 8014b82:	3c02      	subhi	r4, #2
 8014b84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014b88:	8b64      	ldrh	r4, [r4, #26]
 8014b8a:	42ac      	cmp	r4, r5
 8014b8c:	d0e5      	beq.n	8014b5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8014b8e:	2000      	movs	r0, #0
 8014b90:	bd70      	pop	{r4, r5, r6, pc}
 8014b92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014b96:	2400      	movs	r4, #0
 8014b98:	4413      	add	r3, r2
 8014b9a:	b2a2      	uxth	r2, r4
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	da14      	bge.n	8014bca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8014ba0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8014ba2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014ba6:	4296      	cmp	r6, r2
 8014ba8:	d802      	bhi.n	8014bb0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8014baa:	4b09      	ldr	r3, [pc, #36]	; (8014bd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8014bac:	4a0b      	ldr	r2, [pc, #44]	; (8014bdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8014bae:	e7dd      	b.n	8014b6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8014bb0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8014bb2:	3401      	adds	r4, #1
 8014bb4:	4432      	add	r2, r6
 8014bb6:	b292      	uxth	r2, r2
 8014bb8:	2a09      	cmp	r2, #9
 8014bba:	bf88      	it	hi
 8014bbc:	3a0a      	subhi	r2, #10
 8014bbe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014bc2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014bc4:	42aa      	cmp	r2, r5
 8014bc6:	d0e8      	beq.n	8014b9a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8014bc8:	e7e1      	b.n	8014b8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8014bca:	2001      	movs	r0, #1
 8014bcc:	e7e0      	b.n	8014b90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8014bce:	bf00      	nop
 8014bd0:	08021aa8 	.word	0x08021aa8
 8014bd4:	08023f04 	.word	0x08023f04
 8014bd8:	08021a7c 	.word	0x08021a7c
 8014bdc:	08023ba9 	.word	0x08023ba9

08014be0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	4605      	mov	r5, r0
 8014be6:	4616      	mov	r6, r2
 8014be8:	1c8c      	adds	r4, r1, #2
 8014bea:	8809      	ldrh	r1, [r1, #0]
 8014bec:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014bf0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014bf4:	42b3      	cmp	r3, r6
 8014bf6:	d124      	bne.n	8014c42 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014bf8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014bfc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014c00:	f001 070f 	and.w	r7, r1, #15
 8014c04:	4652      	mov	r2, sl
 8014c06:	f8cd 8000 	str.w	r8, [sp]
 8014c0a:	464b      	mov	r3, r9
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f7ff ff9e 	bl	8014b50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014c14:	4683      	mov	fp, r0
 8014c16:	b168      	cbz	r0, 8014c34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014c18:	eb0a 0109 	add.w	r1, sl, r9
 8014c1c:	463a      	mov	r2, r7
 8014c1e:	4628      	mov	r0, r5
 8014c20:	4441      	add	r1, r8
 8014c22:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014c26:	4649      	mov	r1, r9
 8014c28:	f7ff ff42 	bl	8014ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014c2c:	4658      	mov	r0, fp
 8014c2e:	b003      	add	sp, #12
 8014c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c34:	eb07 010a 	add.w	r1, r7, sl
 8014c38:	4449      	add	r1, r9
 8014c3a:	4441      	add	r1, r8
 8014c3c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014c40:	e7d2      	b.n	8014be8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014c42:	f04f 0b00 	mov.w	fp, #0
 8014c46:	e7f1      	b.n	8014c2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014c48 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014c48:	b570      	push	{r4, r5, r6, lr}
 8014c4a:	8810      	ldrh	r0, [r2, #0]
 8014c4c:	4298      	cmp	r0, r3
 8014c4e:	d817      	bhi.n	8014c80 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014c50:	1e48      	subs	r0, r1, #1
 8014c52:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014c56:	4298      	cmp	r0, r3
 8014c58:	d312      	bcc.n	8014c80 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014c5a:	2400      	movs	r4, #0
 8014c5c:	428c      	cmp	r4, r1
 8014c5e:	d20f      	bcs.n	8014c80 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014c60:	1860      	adds	r0, r4, r1
 8014c62:	1040      	asrs	r0, r0, #1
 8014c64:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014c68:	0085      	lsls	r5, r0, #2
 8014c6a:	42b3      	cmp	r3, r6
 8014c6c:	d902      	bls.n	8014c74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014c6e:	3001      	adds	r0, #1
 8014c70:	b284      	uxth	r4, r0
 8014c72:	e7f3      	b.n	8014c5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014c74:	d201      	bcs.n	8014c7a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014c76:	b281      	uxth	r1, r0
 8014c78:	e7f0      	b.n	8014c5c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014c7a:	442a      	add	r2, r5
 8014c7c:	8850      	ldrh	r0, [r2, #2]
 8014c7e:	bd70      	pop	{r4, r5, r6, pc}
 8014c80:	2000      	movs	r0, #0
 8014c82:	e7fc      	b.n	8014c7e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014c84 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c88:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	260b      	movs	r6, #11
 8014c8e:	886f      	ldrh	r7, [r5, #2]
 8014c90:	087f      	lsrs	r7, r7, #1
 8014c92:	3e01      	subs	r6, #1
 8014c94:	d01b      	beq.n	8014cce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8014c96:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014c98:	b92b      	cbnz	r3, 8014ca6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8014c9a:	4b0e      	ldr	r3, [pc, #56]	; (8014cd4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8014c9c:	21c0      	movs	r1, #192	; 0xc0
 8014c9e:	4a0e      	ldr	r2, [pc, #56]	; (8014cd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8014ca0:	480e      	ldr	r0, [pc, #56]	; (8014cdc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8014ca2:	f00a fd91 	bl	801f7c8 <__assert_func>
 8014ca6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014ca8:	462a      	mov	r2, r5
 8014caa:	4639      	mov	r1, r7
 8014cac:	4620      	mov	r0, r4
 8014cae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014cb2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014cb6:	4643      	mov	r3, r8
 8014cb8:	f7ff ffc6 	bl	8014c48 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014cbc:	b138      	cbz	r0, 8014cce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8014cbe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014cc2:	4642      	mov	r2, r8
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f7ff ff8b 	bl	8014be0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d1e1      	bne.n	8014c92 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd2:	bf00      	nop
 8014cd4:	0802199c 	.word	0x0802199c
 8014cd8:	08023c7b 	.word	0x08023c7b
 8014cdc:	08021a7c 	.word	0x08021a7c

08014ce0 <_ZN8touchgfx8ceil28_4El>:
 8014ce0:	f110 030f 	adds.w	r3, r0, #15
 8014ce4:	d401      	bmi.n	8014cea <_ZN8touchgfx8ceil28_4El+0xa>
 8014ce6:	1118      	asrs	r0, r3, #4
 8014ce8:	4770      	bx	lr
 8014cea:	2210      	movs	r2, #16
 8014cec:	f1c0 0001 	rsb	r0, r0, #1
 8014cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014cf4:	f010 000f 	ands.w	r0, r0, #15
 8014cf8:	bf18      	it	ne
 8014cfa:	2001      	movne	r0, #1
 8014cfc:	1a18      	subs	r0, r3, r0
 8014cfe:	4770      	bx	lr

08014d00 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8014d00:	2900      	cmp	r1, #0
 8014d02:	b538      	push	{r3, r4, r5, lr}
 8014d04:	dc05      	bgt.n	8014d12 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8014d06:	4b0f      	ldr	r3, [pc, #60]	; (8014d44 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8014d08:	21f7      	movs	r1, #247	; 0xf7
 8014d0a:	4a0f      	ldr	r2, [pc, #60]	; (8014d48 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8014d0c:	480f      	ldr	r0, [pc, #60]	; (8014d4c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8014d0e:	f00a fd5b 	bl	801f7c8 <__assert_func>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	db06      	blt.n	8014d24 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8014d16:	fb90 f4f1 	sdiv	r4, r0, r1
 8014d1a:	fb01 0114 	mls	r1, r1, r4, r0
 8014d1e:	6014      	str	r4, [r2, #0]
 8014d20:	6019      	str	r1, [r3, #0]
 8014d22:	bd38      	pop	{r3, r4, r5, pc}
 8014d24:	4240      	negs	r0, r0
 8014d26:	fb90 f4f1 	sdiv	r4, r0, r1
 8014d2a:	4265      	negs	r5, r4
 8014d2c:	fb01 0014 	mls	r0, r1, r4, r0
 8014d30:	6015      	str	r5, [r2, #0]
 8014d32:	6018      	str	r0, [r3, #0]
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0f4      	beq.n	8014d22 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8014d38:	6810      	ldr	r0, [r2, #0]
 8014d3a:	3801      	subs	r0, #1
 8014d3c:	6010      	str	r0, [r2, #0]
 8014d3e:	6818      	ldr	r0, [r3, #0]
 8014d40:	1a09      	subs	r1, r1, r0
 8014d42:	e7ed      	b.n	8014d20 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8014d44:	08023fd5 	.word	0x08023fd5
 8014d48:	08024014 	.word	0x08024014
 8014d4c:	08023fe5 	.word	0x08023fe5

08014d50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014d50:	b570      	push	{r4, r5, r6, lr}
 8014d52:	694a      	ldr	r2, [r1, #20]
 8014d54:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014d56:	684b      	ldr	r3, [r1, #4]
 8014d58:	1b54      	subs	r4, r2, r5
 8014d5a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8014d5c:	f000 8106 	beq.w	8014f6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014d60:	1b9b      	subs	r3, r3, r6
 8014d62:	d003      	beq.n	8014d6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014d64:	4363      	muls	r3, r4
 8014d66:	2210      	movs	r2, #16
 8014d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d6c:	680c      	ldr	r4, [r1, #0]
 8014d6e:	698a      	ldr	r2, [r1, #24]
 8014d70:	1b65      	subs	r5, r4, r5
 8014d72:	f000 80fd 	beq.w	8014f70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014d76:	1b92      	subs	r2, r2, r6
 8014d78:	d003      	beq.n	8014d82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014d7a:	436a      	muls	r2, r5
 8014d7c:	2410      	movs	r4, #16
 8014d7e:	fb92 f2f4 	sdiv	r2, r2, r4
 8014d82:	1a9b      	subs	r3, r3, r2
 8014d84:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8014fac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d8c:	460a      	mov	r2, r1
 8014d8e:	ee07 3a90 	vmov	s15, r3
 8014d92:	f100 040c 	add.w	r4, r0, #12
 8014d96:	4603      	mov	r3, r0
 8014d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014da0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014da4:	eeb1 6a43 	vneg.f32	s12, s6
 8014da8:	edd2 7a02 	vldr	s15, [r2, #8]
 8014dac:	3214      	adds	r2, #20
 8014dae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014db2:	ece3 6a01 	vstmia	r3!, {s13}
 8014db6:	429c      	cmp	r4, r3
 8014db8:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014dbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014dc0:	edc3 7a02 	vstr	s15, [r3, #8]
 8014dc4:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014dc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014dcc:	edc3 7a05 	vstr	s15, [r3, #20]
 8014dd0:	d1ea      	bne.n	8014da8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014dd2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014dd4:	698b      	ldr	r3, [r1, #24]
 8014dd6:	edd0 4a02 	vldr	s9, [r0, #8]
 8014dda:	1a9b      	subs	r3, r3, r2
 8014ddc:	edd0 3a00 	vldr	s7, [r0]
 8014de0:	edd0 6a01 	vldr	s13, [r0, #4]
 8014de4:	ee07 3a90 	vmov	s15, r3
 8014de8:	684b      	ldr	r3, [r1, #4]
 8014dea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014dee:	ed90 5a05 	vldr	s10, [r0, #20]
 8014df2:	1a9b      	subs	r3, r3, r2
 8014df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014df8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014dfc:	ed90 2a03 	vldr	s4, [r0, #12]
 8014e00:	ee07 3a10 	vmov	s14, r3
 8014e04:	edd0 5a04 	vldr	s11, [r0, #16]
 8014e08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014e0c:	ed90 1a07 	vldr	s2, [r0, #28]
 8014e10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e14:	edd0 2a06 	vldr	s5, [r0, #24]
 8014e18:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014e1c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014e20:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014e24:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014e28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014e2c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014e30:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014e34:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014e36:	694a      	ldr	r2, [r1, #20]
 8014e38:	1b13      	subs	r3, r2, r4
 8014e3a:	ee07 3a10 	vmov	s14, r3
 8014e3e:	680b      	ldr	r3, [r1, #0]
 8014e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e44:	1b1b      	subs	r3, r3, r4
 8014e46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014e4a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014e4e:	ee07 3a10 	vmov	s14, r3
 8014e52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e56:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014e5a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014e5e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014e62:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8014e66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014e68:	698b      	ldr	r3, [r1, #24]
 8014e6a:	1a9b      	subs	r3, r3, r2
 8014e6c:	ee06 3a90 	vmov	s13, r3
 8014e70:	684b      	ldr	r3, [r1, #4]
 8014e72:	1a9b      	subs	r3, r3, r2
 8014e74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014e78:	ee07 3a10 	vmov	s14, r3
 8014e7c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e84:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014e88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014e8c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014e90:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014e94:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8014e98:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014e9a:	694a      	ldr	r2, [r1, #20]
 8014e9c:	1b13      	subs	r3, r2, r4
 8014e9e:	ee07 3a10 	vmov	s14, r3
 8014ea2:	680b      	ldr	r3, [r1, #0]
 8014ea4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ea8:	1b1b      	subs	r3, r3, r4
 8014eaa:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014eae:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014eb2:	ee07 3a10 	vmov	s14, r3
 8014eb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014eba:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ebe:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014ec2:	edd0 5a08 	vldr	s11, [r0, #32]
 8014ec6:	ee31 1a65 	vsub.f32	s2, s2, s11
 8014eca:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014ece:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014ed2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8014ed6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014ed8:	698b      	ldr	r3, [r1, #24]
 8014eda:	1a9b      	subs	r3, r3, r2
 8014edc:	ee07 3a10 	vmov	s14, r3
 8014ee0:	684b      	ldr	r3, [r1, #4]
 8014ee2:	1a9b      	subs	r3, r3, r2
 8014ee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ee8:	ee01 3a90 	vmov	s3, r3
 8014eec:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ef0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014ef4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8014ef8:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014efc:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014f00:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014f04:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014f08:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014f0a:	694a      	ldr	r2, [r1, #20]
 8014f0c:	1b13      	subs	r3, r2, r4
 8014f0e:	ee03 3a10 	vmov	s6, r3
 8014f12:	680b      	ldr	r3, [r1, #0]
 8014f14:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014f18:	1b1b      	subs	r3, r3, r4
 8014f1a:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014f1e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014f22:	ee03 3a10 	vmov	s6, r3
 8014f26:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014f2a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014f2e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014f32:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014f36:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014f3a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8014f3e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014f42:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4a:	dd13      	ble.n	8014f74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014f50:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014f54:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014f56:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f62:	dd15      	ble.n	8014f90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014f68:	6403      	str	r3, [r0, #64]	; 0x40
 8014f6a:	bd70      	pop	{r4, r5, r6, pc}
 8014f6c:	4623      	mov	r3, r4
 8014f6e:	e6fd      	b.n	8014d6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014f70:	462a      	mov	r2, r5
 8014f72:	e706      	b.n	8014d82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014f74:	d502      	bpl.n	8014f7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8014f76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014f7a:	e7e9      	b.n	8014f50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014f7c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014f80:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014f84:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8014f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8c:	dade      	bge.n	8014f4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014f8e:	e7f2      	b.n	8014f76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014f90:	d502      	bpl.n	8014f98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014f92:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014f96:	e7e7      	b.n	8014f68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8014f98:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014f9c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014fa0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa8:	dadc      	bge.n	8014f64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8014faa:	e7f2      	b.n	8014f92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014fac:	3d800000 	.word	0x3d800000

08014fb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	f04f 0814 	mov.w	r8, #20
 8014fb8:	4604      	mov	r4, r0
 8014fba:	4617      	mov	r7, r2
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	fb08 f903 	mul.w	r9, r8, r3
 8014fc2:	461e      	mov	r6, r3
 8014fc4:	eb02 0a09 	add.w	sl, r2, r9
 8014fc8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8014fcc:	f7ff fe88 	bl	8014ce0 <_ZN8touchgfx8ceil28_4El>
 8014fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd2:	6160      	str	r0, [r4, #20]
 8014fd4:	fb08 f803 	mul.w	r8, r8, r3
 8014fd8:	9001      	str	r0, [sp, #4]
 8014fda:	eb07 0b08 	add.w	fp, r7, r8
 8014fde:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014fe2:	f7ff fe7d 	bl	8014ce0 <_ZN8touchgfx8ceil28_4El>
 8014fe6:	9a01      	ldr	r2, [sp, #4]
 8014fe8:	1a80      	subs	r0, r0, r2
 8014fea:	61a0      	str	r0, [r4, #24]
 8014fec:	2800      	cmp	r0, #0
 8014fee:	f000 8088 	beq.w	8015102 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8014ff2:	f857 3009 	ldr.w	r3, [r7, r9]
 8014ff6:	f857 c008 	ldr.w	ip, [r7, r8]
 8014ffa:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014ffe:	ebac 0c03 	sub.w	ip, ip, r3
 8015002:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015006:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801500a:	1a40      	subs	r0, r0, r1
 801500c:	fb0b f202 	mul.w	r2, fp, r2
 8015010:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8015014:	fb0c 2211 	mls	r2, ip, r1, r2
 8015018:	4641      	mov	r1, r8
 801501a:	fb00 2003 	mla	r0, r0, r3, r2
 801501e:	f104 0310 	add.w	r3, r4, #16
 8015022:	4622      	mov	r2, r4
 8015024:	3801      	subs	r0, #1
 8015026:	4440      	add	r0, r8
 8015028:	f7ff fe6a 	bl	8014d00 <_ZN8touchgfx11floorDivModEllRlS0_>
 801502c:	f104 0308 	add.w	r3, r4, #8
 8015030:	1d22      	adds	r2, r4, #4
 8015032:	4641      	mov	r1, r8
 8015034:	4658      	mov	r0, fp
 8015036:	f7ff fe63 	bl	8014d00 <_ZN8touchgfx11floorDivModEllRlS0_>
 801503a:	f8c4 800c 	str.w	r8, [r4, #12]
 801503e:	6962      	ldr	r2, [r4, #20]
 8015040:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015044:	eddf 6a31 	vldr	s13, [pc, #196]	; 801510c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015048:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801504c:	6822      	ldr	r2, [r4, #0]
 801504e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8015052:	ee07 3a10 	vmov	s14, r3
 8015056:	f857 3009 	ldr.w	r3, [r7, r9]
 801505a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801505e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015062:	ee07 3a90 	vmov	s15, r3
 8015066:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801506a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801506e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015076:	edd3 6a00 	vldr	s13, [r3]
 801507a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801507e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015082:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015086:	edc4 6a07 	vstr	s13, [r4, #28]
 801508a:	edd4 6a01 	vldr	s13, [r4, #4]
 801508e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8015092:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015096:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801509a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801509e:	ed84 6a08 	vstr	s12, [r4, #32]
 80150a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80150a4:	6262      	str	r2, [r4, #36]	; 0x24
 80150a6:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80150aa:	ed93 6a03 	vldr	s12, [r3, #12]
 80150ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 80150b2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80150b6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80150ba:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80150be:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80150c2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80150c6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80150ca:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 80150ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80150d0:	6322      	str	r2, [r4, #48]	; 0x30
 80150d2:	ed93 6a06 	vldr	s12, [r3, #24]
 80150d6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 80150da:	eea5 6a87 	vfma.f32	s12, s11, s14
 80150de:	eeb0 7a46 	vmov.f32	s14, s12
 80150e2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80150e6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80150ea:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 80150ee:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80150f2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80150f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80150fa:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80150fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015100:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015102:	4620      	mov	r0, r4
 8015104:	b003      	add	sp, #12
 8015106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510a:	bf00      	nop
 801510c:	3d800000 	.word	0x3d800000

08015110 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8015110:	4602      	mov	r2, r0
 8015112:	b148      	cbz	r0, 8015128 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8015114:	2300      	movs	r3, #0
 8015116:	b298      	uxth	r0, r3
 8015118:	3301      	adds	r3, #1
 801511a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801511e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8015122:	2900      	cmp	r1, #0
 8015124:	d1f7      	bne.n	8015116 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8015126:	4770      	bx	lr
 8015128:	4770      	bx	lr

0801512a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801512a:	b530      	push	{r4, r5, lr}
 801512c:	4604      	mov	r4, r0
 801512e:	b159      	cbz	r1, 8015148 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8015130:	b148      	cbz	r0, 8015146 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8015132:	2300      	movs	r3, #0
 8015134:	b298      	uxth	r0, r3
 8015136:	4282      	cmp	r2, r0
 8015138:	d905      	bls.n	8015146 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801513a:	5ccd      	ldrb	r5, [r1, r3]
 801513c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8015140:	3301      	adds	r3, #1
 8015142:	2d00      	cmp	r5, #0
 8015144:	d1f6      	bne.n	8015134 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8015146:	bd30      	pop	{r4, r5, pc}
 8015148:	4608      	mov	r0, r1
 801514a:	e7fc      	b.n	8015146 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801514c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801514e:	468c      	mov	ip, r1
 8015150:	b08b      	sub	sp, #44	; 0x2c
 8015152:	2100      	movs	r1, #0
 8015154:	ae01      	add	r6, sp, #4
 8015156:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801515a:	211f      	movs	r1, #31
 801515c:	fbb0 f7f3 	udiv	r7, r0, r3
 8015160:	fb03 0517 	mls	r5, r3, r7, r0
 8015164:	4638      	mov	r0, r7
 8015166:	b2ec      	uxtb	r4, r5
 8015168:	2d09      	cmp	r5, #9
 801516a:	bfd4      	ite	le
 801516c:	3430      	addle	r4, #48	; 0x30
 801516e:	3457      	addgt	r4, #87	; 0x57
 8015170:	b2e4      	uxtb	r4, r4
 8015172:	558c      	strb	r4, [r1, r6]
 8015174:	1e4c      	subs	r4, r1, #1
 8015176:	b92f      	cbnz	r7, 8015184 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8015178:	4431      	add	r1, r6
 801517a:	4660      	mov	r0, ip
 801517c:	f7ff ffd5 	bl	801512a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8015180:	b00b      	add	sp, #44	; 0x2c
 8015182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015184:	4621      	mov	r1, r4
 8015186:	e7e9      	b.n	801515c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08015188 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8015188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801518a:	4607      	mov	r7, r0
 801518c:	b08b      	sub	sp, #44	; 0x2c
 801518e:	4608      	mov	r0, r1
 8015190:	b341      	cbz	r1, 80151e4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8015192:	1e99      	subs	r1, r3, #2
 8015194:	2922      	cmp	r1, #34	; 0x22
 8015196:	d825      	bhi.n	80151e4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8015198:	2100      	movs	r1, #0
 801519a:	463c      	mov	r4, r7
 801519c:	261f      	movs	r6, #31
 801519e:	f10d 0c04 	add.w	ip, sp, #4
 80151a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80151a6:	1e71      	subs	r1, r6, #1
 80151a8:	fb94 fef3 	sdiv	lr, r4, r3
 80151ac:	fb03 441e 	mls	r4, r3, lr, r4
 80151b0:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80151b4:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80151b8:	b2ec      	uxtb	r4, r5
 80151ba:	2d09      	cmp	r5, #9
 80151bc:	bfd4      	ite	le
 80151be:	3430      	addle	r4, #48	; 0x30
 80151c0:	3457      	addgt	r4, #87	; 0x57
 80151c2:	b2e4      	uxtb	r4, r4
 80151c4:	f80c 4006 	strb.w	r4, [ip, r6]
 80151c8:	4674      	mov	r4, lr
 80151ca:	b96c      	cbnz	r4, 80151e8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80151cc:	2f00      	cmp	r7, #0
 80151ce:	da05      	bge.n	80151dc <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80151d0:	ab0a      	add	r3, sp, #40	; 0x28
 80151d2:	4419      	add	r1, r3
 80151d4:	232d      	movs	r3, #45	; 0x2d
 80151d6:	f801 3c24 	strb.w	r3, [r1, #-36]
 80151da:	1eb1      	subs	r1, r6, #2
 80151dc:	3101      	adds	r1, #1
 80151de:	4461      	add	r1, ip
 80151e0:	f7ff ffa3 	bl	801512a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80151e4:	b00b      	add	sp, #44	; 0x2c
 80151e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151e8:	460e      	mov	r6, r1
 80151ea:	e7dc      	b.n	80151a6 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080151ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80151ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151f0:	b085      	sub	sp, #20
 80151f2:	4691      	mov	r9, r2
 80151f4:	6802      	ldr	r2, [r0, #0]
 80151f6:	4688      	mov	r8, r1
 80151f8:	461c      	mov	r4, r3
 80151fa:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80151fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015202:	4683      	mov	fp, r0
 8015204:	4610      	mov	r0, r2
 8015206:	9103      	str	r1, [sp, #12]
 8015208:	9302      	str	r3, [sp, #8]
 801520a:	9201      	str	r2, [sp, #4]
 801520c:	f7ff ff80 	bl	8015110 <_ZN8touchgfx7Unicode6strlenEPKt>
 8015210:	f1b8 0f00 	cmp.w	r8, #0
 8015214:	bf0c      	ite	eq
 8015216:	4684      	moveq	ip, r0
 8015218:	f100 0c01 	addne.w	ip, r0, #1
 801521c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8015220:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8015224:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015226:	fa1f fc8c 	uxth.w	ip, ip
 801522a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801522c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8015230:	9903      	ldr	r1, [sp, #12]
 8015232:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015236:	d041      	beq.n	80152bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8015238:	d834      	bhi.n	80152a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801523a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801523e:	d059      	beq.n	80152f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8015240:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8015244:	d03a      	beq.n	80152bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8015246:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801524a:	d034      	beq.n	80152b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801524c:	2400      	movs	r4, #0
 801524e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8015252:	3a01      	subs	r2, #1
 8015254:	b169      	cbz	r1, 8015272 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015256:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015258:	458c      	cmp	ip, r1
 801525a:	da09      	bge.n	8015270 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801525c:	eba1 010c 	sub.w	r1, r1, ip
 8015260:	b289      	uxth	r1, r1
 8015262:	b933      	cbnz	r3, 8015272 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015264:	2e00      	cmp	r6, #0
 8015266:	d051      	beq.n	801530c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8015268:	2800      	cmp	r0, #0
 801526a:	d04f      	beq.n	801530c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801526c:	440c      	add	r4, r1
 801526e:	b2a4      	uxth	r4, r4
 8015270:	2100      	movs	r1, #0
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	4293      	cmp	r3, r2
 8015276:	da07      	bge.n	8015288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8015278:	f1b8 0f00 	cmp.w	r8, #0
 801527c:	d004      	beq.n	8015288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801527e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8015282:	682b      	ldr	r3, [r5, #0]
 8015284:	3301      	adds	r3, #1
 8015286:	602b      	str	r3, [r5, #0]
 8015288:	2730      	movs	r7, #48	; 0x30
 801528a:	2c00      	cmp	r4, #0
 801528c:	d04e      	beq.n	801532c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801528e:	682e      	ldr	r6, [r5, #0]
 8015290:	3c01      	subs	r4, #1
 8015292:	42b2      	cmp	r2, r6
 8015294:	b2a4      	uxth	r4, r4
 8015296:	dd49      	ble.n	801532c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015298:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801529c:	682b      	ldr	r3, [r5, #0]
 801529e:	3301      	adds	r3, #1
 80152a0:	602b      	str	r3, [r5, #0]
 80152a2:	e7f2      	b.n	801528a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80152a4:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 80152a8:	d01d      	beq.n	80152e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80152aa:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80152ae:	d002      	beq.n	80152b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80152b0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80152b4:	e7c9      	b.n	801524a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80152b6:	4684      	mov	ip, r0
 80152b8:	f04f 0800 	mov.w	r8, #0
 80152bc:	2c00      	cmp	r4, #0
 80152be:	d0c6      	beq.n	801524e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80152c0:	b947      	cbnz	r7, 80152d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80152c2:	2801      	cmp	r0, #1
 80152c4:	d106      	bne.n	80152d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80152c6:	8814      	ldrh	r4, [r2, #0]
 80152c8:	2c30      	cmp	r4, #48	; 0x30
 80152ca:	bf02      	ittt	eq
 80152cc:	3202      	addeq	r2, #2
 80152ce:	4638      	moveq	r0, r7
 80152d0:	f8cb 2000 	streq.w	r2, [fp]
 80152d4:	45bc      	cmp	ip, r7
 80152d6:	da14      	bge.n	8015302 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80152d8:	b2bf      	uxth	r7, r7
 80152da:	eba7 040c 	sub.w	r4, r7, ip
 80152de:	46bc      	mov	ip, r7
 80152e0:	b2a4      	uxth	r4, r4
 80152e2:	2600      	movs	r6, #0
 80152e4:	e7b3      	b.n	801524e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80152e6:	4684      	mov	ip, r0
 80152e8:	b16c      	cbz	r4, 8015306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80152ea:	42b8      	cmp	r0, r7
 80152ec:	dd00      	ble.n	80152f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80152ee:	b2b8      	uxth	r0, r7
 80152f0:	2400      	movs	r4, #0
 80152f2:	e003      	b.n	80152fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80152f4:	f04f 0c01 	mov.w	ip, #1
 80152f8:	2400      	movs	r4, #0
 80152fa:	4660      	mov	r0, ip
 80152fc:	4626      	mov	r6, r4
 80152fe:	46a0      	mov	r8, r4
 8015300:	e7a5      	b.n	801524e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015302:	2400      	movs	r4, #0
 8015304:	e7ed      	b.n	80152e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8015306:	4626      	mov	r6, r4
 8015308:	46a0      	mov	r8, r4
 801530a:	e7a0      	b.n	801524e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801530c:	2900      	cmp	r1, #0
 801530e:	d0b0      	beq.n	8015272 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015310:	2720      	movs	r7, #32
 8015312:	682e      	ldr	r6, [r5, #0]
 8015314:	2900      	cmp	r1, #0
 8015316:	d0ac      	beq.n	8015272 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015318:	3901      	subs	r1, #1
 801531a:	4296      	cmp	r6, r2
 801531c:	b289      	uxth	r1, r1
 801531e:	daa7      	bge.n	8015270 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8015320:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8015324:	682b      	ldr	r3, [r5, #0]
 8015326:	3301      	adds	r3, #1
 8015328:	602b      	str	r3, [r5, #0]
 801532a:	e7f2      	b.n	8015312 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801532c:	b188      	cbz	r0, 8015352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801532e:	682b      	ldr	r3, [r5, #0]
 8015330:	3801      	subs	r0, #1
 8015332:	429a      	cmp	r2, r3
 8015334:	b280      	uxth	r0, r0
 8015336:	dd0c      	ble.n	8015352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8015338:	f8db 3000 	ldr.w	r3, [fp]
 801533c:	1c9c      	adds	r4, r3, #2
 801533e:	f8cb 4000 	str.w	r4, [fp]
 8015342:	881c      	ldrh	r4, [r3, #0]
 8015344:	682b      	ldr	r3, [r5, #0]
 8015346:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801534a:	682b      	ldr	r3, [r5, #0]
 801534c:	3301      	adds	r3, #1
 801534e:	602b      	str	r3, [r5, #0]
 8015350:	e7ec      	b.n	801532c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015352:	2620      	movs	r6, #32
 8015354:	b151      	cbz	r1, 801536c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8015356:	6828      	ldr	r0, [r5, #0]
 8015358:	3901      	subs	r1, #1
 801535a:	4282      	cmp	r2, r0
 801535c:	b289      	uxth	r1, r1
 801535e:	dd05      	ble.n	801536c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8015360:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8015364:	682b      	ldr	r3, [r5, #0]
 8015366:	3301      	adds	r3, #1
 8015368:	602b      	str	r3, [r5, #0]
 801536a:	e7f3      	b.n	8015354 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801536c:	b005      	add	sp, #20
 801536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8015372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015376:	2400      	movs	r4, #0
 8015378:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801537c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8015380:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8015384:	8014      	strh	r4, [r2, #0]
 8015386:	701c      	strb	r4, [r3, #0]
 8015388:	f888 4000 	strb.w	r4, [r8]
 801538c:	f88c 4000 	strb.w	r4, [ip]
 8015390:	f88e 4000 	strb.w	r4, [lr]
 8015394:	703c      	strb	r4, [r7, #0]
 8015396:	6804      	ldr	r4, [r0, #0]
 8015398:	b1a4      	cbz	r4, 80153c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801539a:	8824      	ldrh	r4, [r4, #0]
 801539c:	f04f 0901 	mov.w	r9, #1
 80153a0:	b314      	cbz	r4, 80153e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80153a2:	2c2b      	cmp	r4, #43	; 0x2b
 80153a4:	d001      	beq.n	80153aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80153a6:	2c20      	cmp	r4, #32
 80153a8:	d110      	bne.n	80153cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80153aa:	8014      	strh	r4, [r2, #0]
 80153ac:	6804      	ldr	r4, [r0, #0]
 80153ae:	b10c      	cbz	r4, 80153b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80153b0:	3402      	adds	r4, #2
 80153b2:	6004      	str	r4, [r0, #0]
 80153b4:	680c      	ldr	r4, [r1, #0]
 80153b6:	b10c      	cbz	r4, 80153bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80153b8:	3401      	adds	r4, #1
 80153ba:	600c      	str	r4, [r1, #0]
 80153bc:	6804      	ldr	r4, [r0, #0]
 80153be:	b17c      	cbz	r4, 80153e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80153c0:	8824      	ldrh	r4, [r4, #0]
 80153c2:	e7ed      	b.n	80153a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80153c4:	680c      	ldr	r4, [r1, #0]
 80153c6:	b17c      	cbz	r4, 80153e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80153c8:	7824      	ldrb	r4, [r4, #0]
 80153ca:	e7e7      	b.n	801539c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80153cc:	2c2d      	cmp	r4, #45	; 0x2d
 80153ce:	d102      	bne.n	80153d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80153d0:	f883 9000 	strb.w	r9, [r3]
 80153d4:	e7ea      	b.n	80153ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80153d6:	2c23      	cmp	r4, #35	; 0x23
 80153d8:	d107      	bne.n	80153ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80153da:	f888 9000 	strb.w	r9, [r8]
 80153de:	e7e5      	b.n	80153ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80153e0:	680c      	ldr	r4, [r1, #0]
 80153e2:	b10c      	cbz	r4, 80153e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80153e4:	7824      	ldrb	r4, [r4, #0]
 80153e6:	e7db      	b.n	80153a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80153e8:	2400      	movs	r4, #0
 80153ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80153ee:	2b09      	cmp	r3, #9
 80153f0:	d901      	bls.n	80153f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80153f2:	2c2a      	cmp	r4, #42	; 0x2a
 80153f4:	d122      	bne.n	801543c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80153f6:	2301      	movs	r3, #1
 80153f8:	2c30      	cmp	r4, #48	; 0x30
 80153fa:	f88e 3000 	strb.w	r3, [lr]
 80153fe:	d10d      	bne.n	801541c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8015400:	f88c 3000 	strb.w	r3, [ip]
 8015404:	6803      	ldr	r3, [r0, #0]
 8015406:	b10b      	cbz	r3, 801540c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8015408:	3302      	adds	r3, #2
 801540a:	6003      	str	r3, [r0, #0]
 801540c:	680b      	ldr	r3, [r1, #0]
 801540e:	b10b      	cbz	r3, 8015414 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8015410:	3301      	adds	r3, #1
 8015412:	600b      	str	r3, [r1, #0]
 8015414:	6803      	ldr	r3, [r0, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d02f      	beq.n	801547a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801541a:	881c      	ldrh	r4, [r3, #0]
 801541c:	2c2a      	cmp	r4, #42	; 0x2a
 801541e:	d135      	bne.n	801548c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8015420:	f04f 33ff 	mov.w	r3, #4294967295
 8015424:	6033      	str	r3, [r6, #0]
 8015426:	6803      	ldr	r3, [r0, #0]
 8015428:	b10b      	cbz	r3, 801542e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801542a:	3302      	adds	r3, #2
 801542c:	6003      	str	r3, [r0, #0]
 801542e:	680b      	ldr	r3, [r1, #0]
 8015430:	b10b      	cbz	r3, 8015436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8015432:	3301      	adds	r3, #1
 8015434:	600b      	str	r3, [r1, #0]
 8015436:	6803      	ldr	r3, [r0, #0]
 8015438:	b31b      	cbz	r3, 8015482 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801543a:	881c      	ldrh	r4, [r3, #0]
 801543c:	2c2e      	cmp	r4, #46	; 0x2e
 801543e:	d11a      	bne.n	8015476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015440:	2301      	movs	r3, #1
 8015442:	703b      	strb	r3, [r7, #0]
 8015444:	6803      	ldr	r3, [r0, #0]
 8015446:	b10b      	cbz	r3, 801544c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8015448:	3302      	adds	r3, #2
 801544a:	6003      	str	r3, [r0, #0]
 801544c:	680b      	ldr	r3, [r1, #0]
 801544e:	b10b      	cbz	r3, 8015454 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8015450:	3301      	adds	r3, #1
 8015452:	600b      	str	r3, [r1, #0]
 8015454:	6803      	ldr	r3, [r0, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d036      	beq.n	80154c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801545a:	881b      	ldrh	r3, [r3, #0]
 801545c:	2b2a      	cmp	r3, #42	; 0x2a
 801545e:	d137      	bne.n	80154d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8015460:	f04f 33ff 	mov.w	r3, #4294967295
 8015464:	602b      	str	r3, [r5, #0]
 8015466:	6803      	ldr	r3, [r0, #0]
 8015468:	b10b      	cbz	r3, 801546e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801546a:	3302      	adds	r3, #2
 801546c:	6003      	str	r3, [r0, #0]
 801546e:	680b      	ldr	r3, [r1, #0]
 8015470:	b10b      	cbz	r3, 8015476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015472:	3301      	adds	r3, #1
 8015474:	600b      	str	r3, [r1, #0]
 8015476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801547a:	680c      	ldr	r4, [r1, #0]
 801547c:	b134      	cbz	r4, 801548c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801547e:	7824      	ldrb	r4, [r4, #0]
 8015480:	e7cc      	b.n	801541c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8015482:	680b      	ldr	r3, [r1, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d0f6      	beq.n	8015476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015488:	781c      	ldrb	r4, [r3, #0]
 801548a:	e7d7      	b.n	801543c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801548c:	2300      	movs	r3, #0
 801548e:	220a      	movs	r2, #10
 8015490:	6033      	str	r3, [r6, #0]
 8015492:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015496:	fa1f f38c 	uxth.w	r3, ip
 801549a:	2b09      	cmp	r3, #9
 801549c:	d8ce      	bhi.n	801543c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801549e:	6833      	ldr	r3, [r6, #0]
 80154a0:	fb02 c303 	mla	r3, r2, r3, ip
 80154a4:	6033      	str	r3, [r6, #0]
 80154a6:	6803      	ldr	r3, [r0, #0]
 80154a8:	b10b      	cbz	r3, 80154ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80154aa:	3302      	adds	r3, #2
 80154ac:	6003      	str	r3, [r0, #0]
 80154ae:	680b      	ldr	r3, [r1, #0]
 80154b0:	b10b      	cbz	r3, 80154b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80154b2:	3301      	adds	r3, #1
 80154b4:	600b      	str	r3, [r1, #0]
 80154b6:	6803      	ldr	r3, [r0, #0]
 80154b8:	b10b      	cbz	r3, 80154be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80154ba:	881c      	ldrh	r4, [r3, #0]
 80154bc:	e7e9      	b.n	8015492 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80154be:	680c      	ldr	r4, [r1, #0]
 80154c0:	2c00      	cmp	r4, #0
 80154c2:	d0e6      	beq.n	8015492 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80154c4:	7824      	ldrb	r4, [r4, #0]
 80154c6:	e7e4      	b.n	8015492 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80154c8:	680b      	ldr	r3, [r1, #0]
 80154ca:	b10b      	cbz	r3, 80154d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	e7c5      	b.n	801545c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80154d0:	2200      	movs	r2, #0
 80154d2:	240a      	movs	r4, #10
 80154d4:	602a      	str	r2, [r5, #0]
 80154d6:	3b30      	subs	r3, #48	; 0x30
 80154d8:	682a      	ldr	r2, [r5, #0]
 80154da:	b29e      	uxth	r6, r3
 80154dc:	2e09      	cmp	r6, #9
 80154de:	d813      	bhi.n	8015508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80154e0:	fb04 3302 	mla	r3, r4, r2, r3
 80154e4:	602b      	str	r3, [r5, #0]
 80154e6:	6803      	ldr	r3, [r0, #0]
 80154e8:	b10b      	cbz	r3, 80154ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80154ea:	3302      	adds	r3, #2
 80154ec:	6003      	str	r3, [r0, #0]
 80154ee:	680b      	ldr	r3, [r1, #0]
 80154f0:	b10b      	cbz	r3, 80154f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80154f2:	3301      	adds	r3, #1
 80154f4:	600b      	str	r3, [r1, #0]
 80154f6:	6803      	ldr	r3, [r0, #0]
 80154f8:	b10b      	cbz	r3, 80154fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	e7eb      	b.n	80154d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80154fe:	680b      	ldr	r3, [r1, #0]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d0e8      	beq.n	80154d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	e7e6      	b.n	80154d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015508:	2a06      	cmp	r2, #6
 801550a:	bfa8      	it	ge
 801550c:	2206      	movge	r2, #6
 801550e:	602a      	str	r2, [r5, #0]
 8015510:	e7b1      	b.n	8015476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08015512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8015512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015516:	b0a3      	sub	sp, #140	; 0x8c
 8015518:	2600      	movs	r6, #0
 801551a:	4607      	mov	r7, r0
 801551c:	4688      	mov	r8, r1
 801551e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015522:	4631      	mov	r1, r6
 8015524:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8015526:	4648      	mov	r0, r9
 8015528:	960d      	str	r6, [sp, #52]	; 0x34
 801552a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801552e:	2242      	movs	r2, #66	; 0x42
 8015530:	f00a f9da 	bl	801f8e8 <memset>
 8015534:	b15f      	cbz	r7, 801554e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8015536:	f108 3aff 	add.w	sl, r8, #4294967295
 801553a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801553c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801553e:	b152      	cbz	r2, 8015556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8015540:	8812      	ldrh	r2, [r2, #0]
 8015542:	b10a      	cbz	r2, 8015548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8015544:	459a      	cmp	sl, r3
 8015546:	dc2e      	bgt.n	80155a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8015548:	2200      	movs	r2, #0
 801554a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801554e:	4638      	mov	r0, r7
 8015550:	b023      	add	sp, #140	; 0x8c
 8015552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015556:	9a08      	ldr	r2, [sp, #32]
 8015558:	2a00      	cmp	r2, #0
 801555a:	d0f5      	beq.n	8015548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801555c:	7812      	ldrb	r2, [r2, #0]
 801555e:	e7f0      	b.n	8015542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8015560:	2d00      	cmp	r5, #0
 8015562:	d0ea      	beq.n	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015564:	782a      	ldrb	r2, [r5, #0]
 8015566:	b142      	cbz	r2, 801557a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8015568:	2a25      	cmp	r2, #37	; 0x25
 801556a:	d001      	beq.n	8015570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801556c:	459a      	cmp	sl, r3
 801556e:	dc08      	bgt.n	8015582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8015570:	f1bb 0f00 	cmp.w	fp, #0
 8015574:	d121      	bne.n	80155ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8015576:	2d00      	cmp	r5, #0
 8015578:	d0df      	beq.n	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801557a:	782a      	ldrb	r2, [r5, #0]
 801557c:	f04f 0b00 	mov.w	fp, #0
 8015580:	e01d      	b.n	80155be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8015582:	f1bb 0f00 	cmp.w	fp, #0
 8015586:	d077      	beq.n	8015678 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8015588:	f8bb 2000 	ldrh.w	r2, [fp]
 801558c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8015590:	f1bb 0f00 	cmp.w	fp, #0
 8015594:	d002      	beq.n	801559c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8015596:	f10b 0202 	add.w	r2, fp, #2
 801559a:	9209      	str	r2, [sp, #36]	; 0x24
 801559c:	b10d      	cbz	r5, 80155a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801559e:	3501      	adds	r5, #1
 80155a0:	9508      	str	r5, [sp, #32]
 80155a2:	3301      	adds	r3, #1
 80155a4:	930d      	str	r3, [sp, #52]	; 0x34
 80155a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155a8:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80155ac:	f1bb 0f00 	cmp.w	fp, #0
 80155b0:	d0d6      	beq.n	8015560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80155b2:	f8bb 2000 	ldrh.w	r2, [fp]
 80155b6:	2a00      	cmp	r2, #0
 80155b8:	d1d6      	bne.n	8015568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80155ba:	f8bb 2000 	ldrh.w	r2, [fp]
 80155be:	2a00      	cmp	r2, #0
 80155c0:	d0bb      	beq.n	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80155c2:	459a      	cmp	sl, r3
 80155c4:	ddb9      	ble.n	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80155c6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80155ca:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80155ce:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80155d2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80155d6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80155da:	960e      	str	r6, [sp, #56]	; 0x38
 80155dc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80155e0:	960f      	str	r6, [sp, #60]	; 0x3c
 80155e2:	f1bb 0f00 	cmp.w	fp, #0
 80155e6:	d002      	beq.n	80155ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80155e8:	f10b 0302 	add.w	r3, fp, #2
 80155ec:	9309      	str	r3, [sp, #36]	; 0x24
 80155ee:	b10d      	cbz	r5, 80155f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80155f0:	1c6b      	adds	r3, r5, #1
 80155f2:	9308      	str	r3, [sp, #32]
 80155f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80155f6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80155fa:	a908      	add	r1, sp, #32
 80155fc:	a809      	add	r0, sp, #36	; 0x24
 80155fe:	9305      	str	r3, [sp, #20]
 8015600:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8015604:	9304      	str	r3, [sp, #16]
 8015606:	ab0e      	add	r3, sp, #56	; 0x38
 8015608:	9303      	str	r3, [sp, #12]
 801560a:	ab0c      	add	r3, sp, #48	; 0x30
 801560c:	9302      	str	r3, [sp, #8]
 801560e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8015612:	9301      	str	r3, [sp, #4]
 8015614:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8015618:	9300      	str	r3, [sp, #0]
 801561a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801561e:	f7ff fea8 	bl	8015372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8015622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015624:	2b00      	cmp	r3, #0
 8015626:	bfbf      	itttt	lt
 8015628:	6823      	ldrlt	r3, [r4, #0]
 801562a:	3404      	addlt	r4, #4
 801562c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8015630:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015634:	2b00      	cmp	r3, #0
 8015636:	bfbe      	ittt	lt
 8015638:	6823      	ldrlt	r3, [r4, #0]
 801563a:	3404      	addlt	r4, #4
 801563c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8015640:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8015644:	bfb8      	it	lt
 8015646:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8015648:	b1d9      	cbz	r1, 8015682 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801564a:	880b      	ldrh	r3, [r1, #0]
 801564c:	2b69      	cmp	r3, #105	; 0x69
 801564e:	d01f      	beq.n	8015690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015650:	d82f      	bhi.n	80156b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8015652:	2b58      	cmp	r3, #88	; 0x58
 8015654:	d01c      	beq.n	8015690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015656:	d818      	bhi.n	801568a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8015658:	2b25      	cmp	r3, #37	; 0x25
 801565a:	d034      	beq.n	80156c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801565c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801565e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8015662:	f1bb 0f00 	cmp.w	fp, #0
 8015666:	f000 80b7 	beq.w	80157d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801566a:	f8bb 5000 	ldrh.w	r5, [fp]
 801566e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8015672:	3301      	adds	r3, #1
 8015674:	930d      	str	r3, [sp, #52]	; 0x34
 8015676:	e029      	b.n	80156cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8015678:	b10d      	cbz	r5, 801567e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801567a:	782a      	ldrb	r2, [r5, #0]
 801567c:	e786      	b.n	801558c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801567e:	462a      	mov	r2, r5
 8015680:	e784      	b.n	801558c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8015682:	2a00      	cmp	r2, #0
 8015684:	d0ea      	beq.n	801565c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015686:	7813      	ldrb	r3, [r2, #0]
 8015688:	e7e0      	b.n	801564c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801568a:	3b63      	subs	r3, #99	; 0x63
 801568c:	2b01      	cmp	r3, #1
 801568e:	d8e5      	bhi.n	801565c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015690:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8015694:	b329      	cbz	r1, 80156e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8015696:	880b      	ldrh	r3, [r1, #0]
 8015698:	2b69      	cmp	r3, #105	; 0x69
 801569a:	d063      	beq.n	8015764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801569c:	d825      	bhi.n	80156ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801569e:	2b63      	cmp	r3, #99	; 0x63
 80156a0:	d038      	beq.n	8015714 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 80156a2:	2b64      	cmp	r3, #100	; 0x64
 80156a4:	d05e      	beq.n	8015764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 80156a6:	2b58      	cmp	r3, #88	; 0x58
 80156a8:	d07a      	beq.n	80157a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 80156aa:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80156ae:	4625      	mov	r5, r4
 80156b0:	e036      	b.n	8015720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80156b2:	2b73      	cmp	r3, #115	; 0x73
 80156b4:	d0ec      	beq.n	8015690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80156b6:	d802      	bhi.n	80156be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80156b8:	2b6f      	cmp	r3, #111	; 0x6f
 80156ba:	d1cf      	bne.n	801565c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80156bc:	e7e8      	b.n	8015690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80156be:	2b75      	cmp	r3, #117	; 0x75
 80156c0:	d0e6      	beq.n	8015690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80156c2:	2b78      	cmp	r3, #120	; 0x78
 80156c4:	e7f9      	b.n	80156ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80156c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156c8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80156cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ce:	b10b      	cbz	r3, 80156d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80156d0:	3302      	adds	r3, #2
 80156d2:	9309      	str	r3, [sp, #36]	; 0x24
 80156d4:	9b08      	ldr	r3, [sp, #32]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f43f af2f 	beq.w	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80156dc:	3301      	adds	r3, #1
 80156de:	9308      	str	r3, [sp, #32]
 80156e0:	e72b      	b.n	801553a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80156e2:	2a00      	cmp	r2, #0
 80156e4:	d0e1      	beq.n	80156aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80156e6:	7813      	ldrb	r3, [r2, #0]
 80156e8:	e7d6      	b.n	8015698 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80156ea:	2b73      	cmp	r3, #115	; 0x73
 80156ec:	d036      	beq.n	801575c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80156ee:	d807      	bhi.n	8015700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80156f0:	2b6f      	cmp	r3, #111	; 0x6f
 80156f2:	d1da      	bne.n	80156aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80156f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156f6:	1d25      	adds	r5, r4, #4
 80156f8:	2308      	movs	r3, #8
 80156fa:	eba8 0202 	sub.w	r2, r8, r2
 80156fe:	e049      	b.n	8015794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015700:	2b75      	cmp	r3, #117	; 0x75
 8015702:	d042      	beq.n	801578a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8015704:	2b78      	cmp	r3, #120	; 0x78
 8015706:	d1d0      	bne.n	80156aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801570a:	1d25      	adds	r5, r4, #4
 801570c:	2310      	movs	r3, #16
 801570e:	eba8 0202 	sub.w	r2, r8, r2
 8015712:	e03f      	b.n	8015794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015714:	7823      	ldrb	r3, [r4, #0]
 8015716:	1d25      	adds	r5, r4, #4
 8015718:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801571c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8015720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015722:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8015726:	2b00      	cmp	r3, #0
 8015728:	d051      	beq.n	80157ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801572a:	881a      	ldrh	r2, [r3, #0]
 801572c:	a80d      	add	r0, sp, #52	; 0x34
 801572e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8015732:	462c      	mov	r4, r5
 8015734:	9005      	str	r0, [sp, #20]
 8015736:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801573a:	9004      	str	r0, [sp, #16]
 801573c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801573e:	9003      	str	r0, [sp, #12]
 8015740:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8015744:	9002      	str	r0, [sp, #8]
 8015746:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015748:	9001      	str	r0, [sp, #4]
 801574a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801574e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8015752:	9000      	str	r0, [sp, #0]
 8015754:	a810      	add	r0, sp, #64	; 0x40
 8015756:	f7ff fd49 	bl	80151ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801575a:	e7b7      	b.n	80156cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801575c:	1d25      	adds	r5, r4, #4
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	9310      	str	r3, [sp, #64]	; 0x40
 8015762:	e7dd      	b.n	8015720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015766:	230a      	movs	r3, #10
 8015768:	4649      	mov	r1, r9
 801576a:	6820      	ldr	r0, [r4, #0]
 801576c:	eba8 0202 	sub.w	r2, r8, r2
 8015770:	1d25      	adds	r5, r4, #4
 8015772:	b292      	uxth	r2, r2
 8015774:	f7ff fd08 	bl	8015188 <_ZN8touchgfx7Unicode4itoaElPtti>
 8015778:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801577c:	2b2d      	cmp	r3, #45	; 0x2d
 801577e:	d1cf      	bne.n	8015720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015780:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015786:	3302      	adds	r3, #2
 8015788:	e7ea      	b.n	8015760 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801578a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801578c:	1d25      	adds	r5, r4, #4
 801578e:	230a      	movs	r3, #10
 8015790:	eba8 0202 	sub.w	r2, r8, r2
 8015794:	b292      	uxth	r2, r2
 8015796:	4649      	mov	r1, r9
 8015798:	6820      	ldr	r0, [r4, #0]
 801579a:	f7ff fcd7 	bl	801514c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801579e:	e7bf      	b.n	8015720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80157a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157a2:	2310      	movs	r3, #16
 80157a4:	4649      	mov	r1, r9
 80157a6:	6820      	ldr	r0, [r4, #0]
 80157a8:	eba8 0202 	sub.w	r2, r8, r2
 80157ac:	1d25      	adds	r5, r4, #4
 80157ae:	b292      	uxth	r2, r2
 80157b0:	f7ff fccc 	bl	801514c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80157b4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80157b8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d0af      	beq.n	8015720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80157c0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80157c4:	2919      	cmp	r1, #25
 80157c6:	d8f7      	bhi.n	80157b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80157c8:	3b20      	subs	r3, #32
 80157ca:	8013      	strh	r3, [r2, #0]
 80157cc:	e7f4      	b.n	80157b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80157ce:	9a08      	ldr	r2, [sp, #32]
 80157d0:	2a00      	cmp	r2, #0
 80157d2:	d0ab      	beq.n	801572c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80157d4:	7812      	ldrb	r2, [r2, #0]
 80157d6:	e7a9      	b.n	801572c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80157d8:	2d00      	cmp	r5, #0
 80157da:	f43f af48 	beq.w	801566e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80157de:	782d      	ldrb	r5, [r5, #0]
 80157e0:	e745      	b.n	801566e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080157e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80157e2:	b507      	push	{r0, r1, r2, lr}
 80157e4:	9300      	str	r3, [sp, #0]
 80157e6:	4613      	mov	r3, r2
 80157e8:	2200      	movs	r2, #0
 80157ea:	f7ff fe92 	bl	8015512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80157ee:	b003      	add	sp, #12
 80157f0:	f85d fb04 	ldr.w	pc, [sp], #4

080157f4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80157f4:	b40c      	push	{r2, r3}
 80157f6:	b507      	push	{r0, r1, r2, lr}
 80157f8:	ab04      	add	r3, sp, #16
 80157fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80157fe:	9301      	str	r3, [sp, #4]
 8015800:	f7ff ffef 	bl	80157e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8015804:	b003      	add	sp, #12
 8015806:	f85d eb04 	ldr.w	lr, [sp], #4
 801580a:	b002      	add	sp, #8
 801580c:	4770      	bx	lr
	...

08015810 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015810:	4b01      	ldr	r3, [pc, #4]	; (8015818 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015812:	6018      	str	r0, [r3, #0]
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop
 8015818:	2400ea70 	.word	0x2400ea70

0801581c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801581c:	4b06      	ldr	r3, [pc, #24]	; (8015838 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801581e:	881a      	ldrh	r2, [r3, #0]
 8015820:	4282      	cmp	r2, r0
 8015822:	d807      	bhi.n	8015834 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015824:	4b05      	ldr	r3, [pc, #20]	; (801583c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015826:	881b      	ldrh	r3, [r3, #0]
 8015828:	4413      	add	r3, r2
 801582a:	4298      	cmp	r0, r3
 801582c:	bfac      	ite	ge
 801582e:	2000      	movge	r0, #0
 8015830:	2001      	movlt	r0, #1
 8015832:	4770      	bx	lr
 8015834:	2000      	movs	r0, #0
 8015836:	4770      	bx	lr
 8015838:	2400ea90 	.word	0x2400ea90
 801583c:	2400ea94 	.word	0x2400ea94

08015840 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015840:	b508      	push	{r3, lr}
 8015842:	4601      	mov	r1, r0
 8015844:	f7ff ffea 	bl	801581c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015848:	b118      	cbz	r0, 8015852 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801584a:	4b02      	ldr	r3, [pc, #8]	; (8015854 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015852:	bd08      	pop	{r3, pc}
 8015854:	2400ea74 	.word	0x2400ea74

08015858 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801585c:	4d28      	ldr	r5, [pc, #160]	; (8015900 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801585e:	682b      	ldr	r3, [r5, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d04a      	beq.n	80158fa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8015864:	4a27      	ldr	r2, [pc, #156]	; (8015904 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015866:	4e28      	ldr	r6, [pc, #160]	; (8015908 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015868:	8810      	ldrh	r0, [r2, #0]
 801586a:	f8b6 8000 	ldrh.w	r8, [r6]
 801586e:	4c27      	ldr	r4, [pc, #156]	; (801590c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015870:	4440      	add	r0, r8
 8015872:	4f27      	ldr	r7, [pc, #156]	; (8015910 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015874:	1c41      	adds	r1, r0, #1
 8015876:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801587a:	f021 0101 	bic.w	r1, r1, #1
 801587e:	eb03 020e 	add.w	r2, r3, lr
 8015882:	0409      	lsls	r1, r1, #16
 8015884:	6022      	str	r2, [r4, #0]
 8015886:	0c09      	lsrs	r1, r1, #16
 8015888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801588c:	eb0e 010c 	add.w	r1, lr, ip
 8015890:	185a      	adds	r2, r3, r1
 8015892:	603a      	str	r2, [r7, #0]
 8015894:	220e      	movs	r2, #14
 8015896:	fb02 f208 	mul.w	r2, r2, r8
 801589a:	3203      	adds	r2, #3
 801589c:	f022 0203 	bic.w	r2, r2, #3
 80158a0:	4411      	add	r1, r2
 80158a2:	440b      	add	r3, r1
 80158a4:	491b      	ldr	r1, [pc, #108]	; (8015914 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80158a6:	600b      	str	r3, [r1, #0]
 80158a8:	2300      	movs	r3, #0
 80158aa:	491b      	ldr	r1, [pc, #108]	; (8015918 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80158ac:	800b      	strh	r3, [r1, #0]
 80158ae:	491b      	ldr	r1, [pc, #108]	; (801591c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80158b0:	6809      	ldr	r1, [r1, #0]
 80158b2:	eba1 010e 	sub.w	r1, r1, lr
 80158b6:	eba1 010c 	sub.w	r1, r1, ip
 80158ba:	469c      	mov	ip, r3
 80158bc:	1a8a      	subs	r2, r1, r2
 80158be:	4918      	ldr	r1, [pc, #96]	; (8015920 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80158c0:	600a      	str	r2, [r1, #0]
 80158c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80158c6:	4a17      	ldr	r2, [pc, #92]	; (8015924 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80158c8:	8013      	strh	r3, [r2, #0]
 80158ca:	4283      	cmp	r3, r0
 80158cc:	d10d      	bne.n	80158ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80158ce:	8835      	ldrh	r5, [r6, #0]
 80158d0:	2300      	movs	r3, #0
 80158d2:	6838      	ldr	r0, [r7, #0]
 80158d4:	240e      	movs	r4, #14
 80158d6:	429d      	cmp	r5, r3
 80158d8:	d90f      	bls.n	80158fa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80158da:	fb04 0203 	mla	r2, r4, r3, r0
 80158de:	3301      	adds	r3, #1
 80158e0:	7b11      	ldrb	r1, [r2, #12]
 80158e2:	f36f 1145 	bfc	r1, #5, #1
 80158e6:	7311      	strb	r1, [r2, #12]
 80158e8:	e7f5      	b.n	80158d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 80158ea:	682a      	ldr	r2, [r5, #0]
 80158ec:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80158f0:	6822      	ldr	r2, [r4, #0]
 80158f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80158f6:	3301      	adds	r3, #1
 80158f8:	e7e7      	b.n	80158ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80158fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158fe:	bf00      	nop
 8015900:	2400ea74 	.word	0x2400ea74
 8015904:	2400ea90 	.word	0x2400ea90
 8015908:	2400ea94 	.word	0x2400ea94
 801590c:	2400ea88 	.word	0x2400ea88
 8015910:	2400ea78 	.word	0x2400ea78
 8015914:	2400ea80 	.word	0x2400ea80
 8015918:	2400ea92 	.word	0x2400ea92
 801591c:	2400ea7c 	.word	0x2400ea7c
 8015920:	2400ea8c 	.word	0x2400ea8c
 8015924:	2400ea84 	.word	0x2400ea84

08015928 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015928:	4b10      	ldr	r3, [pc, #64]	; (801596c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801592a:	b510      	push	{r4, lr}
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	b9db      	cbnz	r3, 8015968 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8015930:	b1d1      	cbz	r1, 8015968 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8015932:	4b0f      	ldr	r3, [pc, #60]	; (8015970 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8015934:	240e      	movs	r4, #14
 8015936:	801a      	strh	r2, [r3, #0]
 8015938:	b292      	uxth	r2, r2
 801593a:	4b0e      	ldr	r3, [pc, #56]	; (8015974 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801593c:	881b      	ldrh	r3, [r3, #0]
 801593e:	4413      	add	r3, r2
 8015940:	4362      	muls	r2, r4
 8015942:	2406      	movs	r4, #6
 8015944:	fb04 2203 	mla	r2, r4, r3, r2
 8015948:	428a      	cmp	r2, r1
 801594a:	d305      	bcc.n	8015958 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801594c:	4b0a      	ldr	r3, [pc, #40]	; (8015978 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801594e:	2135      	movs	r1, #53	; 0x35
 8015950:	4a0a      	ldr	r2, [pc, #40]	; (801597c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8015952:	480b      	ldr	r0, [pc, #44]	; (8015980 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8015954:	f009 ff38 	bl	801f7c8 <__assert_func>
 8015958:	4b0a      	ldr	r3, [pc, #40]	; (8015984 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801595a:	6019      	str	r1, [r3, #0]
 801595c:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801595e:	6018      	str	r0, [r3, #0]
 8015960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015964:	f7ff bf78 	b.w	8015858 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015968:	bd10      	pop	{r4, pc}
 801596a:	bf00      	nop
 801596c:	2400ea80 	.word	0x2400ea80
 8015970:	2400ea94 	.word	0x2400ea94
 8015974:	2400ea90 	.word	0x2400ea90
 8015978:	080240b2 	.word	0x080240b2
 801597c:	0802410b 	.word	0x0802410b
 8015980:	0802408d 	.word	0x0802408d
 8015984:	2400ea7c 	.word	0x2400ea7c
 8015988:	2400ea74 	.word	0x2400ea74

0801598c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801598c:	b470      	push	{r4, r5, r6}
 801598e:	4c07      	ldr	r4, [pc, #28]	; (80159ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015990:	4605      	mov	r5, r0
 8015992:	4610      	mov	r0, r2
 8015994:	9a03      	ldr	r2, [sp, #12]
 8015996:	6826      	ldr	r6, [r4, #0]
 8015998:	b936      	cbnz	r6, 80159a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801599a:	6025      	str	r5, [r4, #0]
 801599c:	4c04      	ldr	r4, [pc, #16]	; (80159b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801599e:	8021      	strh	r1, [r4, #0]
 80159a0:	4619      	mov	r1, r3
 80159a2:	bc70      	pop	{r4, r5, r6}
 80159a4:	f7ff bfc0 	b.w	8015928 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80159a8:	bc70      	pop	{r4, r5, r6}
 80159aa:	4770      	bx	lr
 80159ac:	2400ea98 	.word	0x2400ea98
 80159b0:	2400ea90 	.word	0x2400ea90

080159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80159b4:	b508      	push	{r3, lr}
 80159b6:	4b14      	ldr	r3, [pc, #80]	; (8015a08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80159b8:	6819      	ldr	r1, [r3, #0]
 80159ba:	b931      	cbnz	r1, 80159ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80159bc:	4b13      	ldr	r3, [pc, #76]	; (8015a0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80159be:	f240 4185 	movw	r1, #1157	; 0x485
 80159c2:	4a13      	ldr	r2, [pc, #76]	; (8015a10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80159c4:	4813      	ldr	r0, [pc, #76]	; (8015a14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80159c6:	f009 feff 	bl	801f7c8 <__assert_func>
 80159ca:	4a13      	ldr	r2, [pc, #76]	; (8015a18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80159cc:	8803      	ldrh	r3, [r0, #0]
 80159ce:	8812      	ldrh	r2, [r2, #0]
 80159d0:	4293      	cmp	r3, r2
 80159d2:	d204      	bcs.n	80159de <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80159d4:	2214      	movs	r2, #20
 80159d6:	fb02 1303 	mla	r3, r2, r3, r1
 80159da:	8918      	ldrh	r0, [r3, #8]
 80159dc:	bd08      	pop	{r3, pc}
 80159de:	490f      	ldr	r1, [pc, #60]	; (8015a1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80159e0:	8809      	ldrh	r1, [r1, #0]
 80159e2:	4411      	add	r1, r2
 80159e4:	428b      	cmp	r3, r1
 80159e6:	da06      	bge.n	80159f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80159e8:	1a9b      	subs	r3, r3, r2
 80159ea:	4a0d      	ldr	r2, [pc, #52]	; (8015a20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80159ec:	210e      	movs	r1, #14
 80159ee:	6812      	ldr	r2, [r2, #0]
 80159f0:	fb01 2303 	mla	r3, r1, r3, r2
 80159f4:	e7f1      	b.n	80159da <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80159f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80159fa:	4293      	cmp	r3, r2
 80159fc:	bf0a      	itet	eq
 80159fe:	4b09      	ldreq	r3, [pc, #36]	; (8015a24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8015a00:	2000      	movne	r0, #0
 8015a02:	8818      	ldrheq	r0, [r3, #0]
 8015a04:	e7ea      	b.n	80159dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8015a06:	bf00      	nop
 8015a08:	2400ea98 	.word	0x2400ea98
 8015a0c:	080230eb 	.word	0x080230eb
 8015a10:	080241b8 	.word	0x080241b8
 8015a14:	0802408d 	.word	0x0802408d
 8015a18:	2400ea90 	.word	0x2400ea90
 8015a1c:	2400ea94 	.word	0x2400ea94
 8015a20:	2400ea78 	.word	0x2400ea78
 8015a24:	2400e9e4 	.word	0x2400e9e4

08015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015a28:	b508      	push	{r3, lr}
 8015a2a:	4b14      	ldr	r3, [pc, #80]	; (8015a7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015a2c:	6819      	ldr	r1, [r3, #0]
 8015a2e:	b931      	cbnz	r1, 8015a3e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8015a30:	4b13      	ldr	r3, [pc, #76]	; (8015a80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015a32:	f240 4199 	movw	r1, #1177	; 0x499
 8015a36:	4a13      	ldr	r2, [pc, #76]	; (8015a84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015a38:	4813      	ldr	r0, [pc, #76]	; (8015a88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015a3a:	f009 fec5 	bl	801f7c8 <__assert_func>
 8015a3e:	4a13      	ldr	r2, [pc, #76]	; (8015a8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015a40:	8803      	ldrh	r3, [r0, #0]
 8015a42:	8812      	ldrh	r2, [r2, #0]
 8015a44:	4293      	cmp	r3, r2
 8015a46:	d204      	bcs.n	8015a52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8015a48:	2214      	movs	r2, #20
 8015a4a:	fb02 1303 	mla	r3, r2, r3, r1
 8015a4e:	8958      	ldrh	r0, [r3, #10]
 8015a50:	bd08      	pop	{r3, pc}
 8015a52:	490f      	ldr	r1, [pc, #60]	; (8015a90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8015a54:	8809      	ldrh	r1, [r1, #0]
 8015a56:	4411      	add	r1, r2
 8015a58:	428b      	cmp	r3, r1
 8015a5a:	da06      	bge.n	8015a6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8015a5c:	1a9b      	subs	r3, r3, r2
 8015a5e:	4a0d      	ldr	r2, [pc, #52]	; (8015a94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8015a60:	210e      	movs	r1, #14
 8015a62:	6812      	ldr	r2, [r2, #0]
 8015a64:	fb01 2303 	mla	r3, r1, r3, r2
 8015a68:	e7f1      	b.n	8015a4e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8015a6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	bf0a      	itet	eq
 8015a72:	4b09      	ldreq	r3, [pc, #36]	; (8015a98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8015a74:	2000      	movne	r0, #0
 8015a76:	8818      	ldrheq	r0, [r3, #0]
 8015a78:	e7ea      	b.n	8015a50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8015a7a:	bf00      	nop
 8015a7c:	2400ea98 	.word	0x2400ea98
 8015a80:	080230eb 	.word	0x080230eb
 8015a84:	080241e4 	.word	0x080241e4
 8015a88:	0802408d 	.word	0x0802408d
 8015a8c:	2400ea90 	.word	0x2400ea90
 8015a90:	2400ea94 	.word	0x2400ea94
 8015a94:	2400ea78 	.word	0x2400ea78
 8015a98:	2400e9e6 	.word	0x2400e9e6

08015a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015a9c:	4b23      	ldr	r3, [pc, #140]	; (8015b2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015a9e:	b510      	push	{r4, lr}
 8015aa0:	681c      	ldr	r4, [r3, #0]
 8015aa2:	b934      	cbnz	r4, 8015ab2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8015aa4:	4b22      	ldr	r3, [pc, #136]	; (8015b30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015aa6:	f240 41ad 	movw	r1, #1197	; 0x4ad
 8015aaa:	4a22      	ldr	r2, [pc, #136]	; (8015b34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015aac:	4822      	ldr	r0, [pc, #136]	; (8015b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015aae:	f009 fe8b 	bl	801f7c8 <__assert_func>
 8015ab2:	4a22      	ldr	r2, [pc, #136]	; (8015b3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015ab4:	880b      	ldrh	r3, [r1, #0]
 8015ab6:	8812      	ldrh	r2, [r2, #0]
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	d211      	bcs.n	8015ae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8015abc:	2214      	movs	r2, #20
 8015abe:	fb02 4303 	mla	r3, r2, r3, r4
 8015ac2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015ac6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015aca:	8a1a      	ldrh	r2, [r3, #16]
 8015acc:	8a5b      	ldrh	r3, [r3, #18]
 8015ace:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8015ad2:	8004      	strh	r4, [r0, #0]
 8015ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ad8:	8041      	strh	r1, [r0, #2]
 8015ada:	8082      	strh	r2, [r0, #4]
 8015adc:	80c3      	strh	r3, [r0, #6]
 8015ade:	e00e      	b.n	8015afe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8015ae0:	4917      	ldr	r1, [pc, #92]	; (8015b40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8015ae2:	8809      	ldrh	r1, [r1, #0]
 8015ae4:	4411      	add	r1, r2
 8015ae6:	428b      	cmp	r3, r1
 8015ae8:	da0a      	bge.n	8015b00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8015aea:	1a9b      	subs	r3, r3, r2
 8015aec:	4a15      	ldr	r2, [pc, #84]	; (8015b44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8015aee:	210e      	movs	r1, #14
 8015af0:	6812      	ldr	r2, [r2, #0]
 8015af2:	fb01 2303 	mla	r3, r1, r3, r2
 8015af6:	681a      	ldr	r2, [r3, #0]
 8015af8:	6002      	str	r2, [r0, #0]
 8015afa:	685a      	ldr	r2, [r3, #4]
 8015afc:	6042      	str	r2, [r0, #4]
 8015afe:	bd10      	pop	{r4, pc}
 8015b00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d10b      	bne.n	8015b20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8015b08:	4b0f      	ldr	r3, [pc, #60]	; (8015b48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8015b0a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015b0e:	4b0f      	ldr	r3, [pc, #60]	; (8015b4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8015b10:	8081      	strh	r1, [r0, #4]
 8015b12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b16:	2300      	movs	r3, #0
 8015b18:	80c2      	strh	r2, [r0, #6]
 8015b1a:	8003      	strh	r3, [r0, #0]
 8015b1c:	8043      	strh	r3, [r0, #2]
 8015b1e:	e7ee      	b.n	8015afe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8015b20:	2300      	movs	r3, #0
 8015b22:	8003      	strh	r3, [r0, #0]
 8015b24:	8043      	strh	r3, [r0, #2]
 8015b26:	8083      	strh	r3, [r0, #4]
 8015b28:	e7d8      	b.n	8015adc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8015b2a:	bf00      	nop
 8015b2c:	2400ea98 	.word	0x2400ea98
 8015b30:	080230eb 	.word	0x080230eb
 8015b34:	08024151 	.word	0x08024151
 8015b38:	0802408d 	.word	0x0802408d
 8015b3c:	2400ea90 	.word	0x2400ea90
 8015b40:	2400ea94 	.word	0x2400ea94
 8015b44:	2400ea78 	.word	0x2400ea78
 8015b48:	2400e9e4 	.word	0x2400e9e4
 8015b4c:	2400e9e6 	.word	0x2400e9e6

08015b50 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015b50:	b508      	push	{r3, lr}
 8015b52:	4b12      	ldr	r3, [pc, #72]	; (8015b9c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015b54:	6819      	ldr	r1, [r3, #0]
 8015b56:	b931      	cbnz	r1, 8015b66 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015b58:	4b11      	ldr	r3, [pc, #68]	; (8015ba0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015b5a:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8015b5e:	4a11      	ldr	r2, [pc, #68]	; (8015ba4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015b60:	4811      	ldr	r0, [pc, #68]	; (8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015b62:	f009 fe31 	bl	801f7c8 <__assert_func>
 8015b66:	8803      	ldrh	r3, [r0, #0]
 8015b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	d012      	beq.n	8015b96 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015b70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015b74:	4293      	cmp	r3, r2
 8015b76:	d103      	bne.n	8015b80 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8015b78:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015b7e:	bd08      	pop	{r3, pc}
 8015b80:	4a0b      	ldr	r2, [pc, #44]	; (8015bb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8015b82:	6812      	ldr	r2, [r2, #0]
 8015b84:	b11a      	cbz	r2, 8015b8e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8015b86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d1f7      	bne.n	8015b7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8015b8e:	2214      	movs	r2, #20
 8015b90:	4353      	muls	r3, r2
 8015b92:	58c8      	ldr	r0, [r1, r3]
 8015b94:	e7f3      	b.n	8015b7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8015b96:	2000      	movs	r0, #0
 8015b98:	e7f1      	b.n	8015b7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8015b9a:	bf00      	nop
 8015b9c:	2400ea98 	.word	0x2400ea98
 8015ba0:	080230eb 	.word	0x080230eb
 8015ba4:	08024187 	.word	0x08024187
 8015ba8:	0802408d 	.word	0x0802408d
 8015bac:	2400e9f0 	.word	0x2400e9f0
 8015bb0:	2400ea74 	.word	0x2400ea74

08015bb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015bb4:	8802      	ldrh	r2, [r0, #0]
 8015bb6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d845      	bhi.n	8015c4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8015bbe:	4b24      	ldr	r3, [pc, #144]	; (8015c50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015bc0:	8818      	ldrh	r0, [r3, #0]
 8015bc2:	4282      	cmp	r2, r0
 8015bc4:	d221      	bcs.n	8015c0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8015bc6:	4b23      	ldr	r3, [pc, #140]	; (8015c54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015bc8:	6819      	ldr	r1, [r3, #0]
 8015bca:	2314      	movs	r3, #20
 8015bcc:	fb03 1302 	mla	r3, r3, r2, r1
 8015bd0:	6858      	ldr	r0, [r3, #4]
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	d03a      	beq.n	8015c4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8015bd6:	4920      	ldr	r1, [pc, #128]	; (8015c58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015bd8:	6809      	ldr	r1, [r1, #0]
 8015bda:	2900      	cmp	r1, #0
 8015bdc:	d036      	beq.n	8015c4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8015bde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015be2:	2900      	cmp	r1, #0
 8015be4:	d032      	beq.n	8015c4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8015be6:	891a      	ldrh	r2, [r3, #8]
 8015be8:	8958      	ldrh	r0, [r3, #10]
 8015bea:	4350      	muls	r0, r2
 8015bec:	7c5a      	ldrb	r2, [r3, #17]
 8015bee:	7cdb      	ldrb	r3, [r3, #19]
 8015bf0:	0952      	lsrs	r2, r2, #5
 8015bf2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015bf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8015bfa:	2b0b      	cmp	r3, #11
 8015bfc:	bf18      	it	ne
 8015bfe:	0040      	lslne	r0, r0, #1
 8015c00:	3003      	adds	r0, #3
 8015c02:	f020 0003 	bic.w	r0, r0, #3
 8015c06:	4408      	add	r0, r1
 8015c08:	4770      	bx	lr
 8015c0a:	4b14      	ldr	r3, [pc, #80]	; (8015c5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8015c0c:	881b      	ldrh	r3, [r3, #0]
 8015c0e:	4403      	add	r3, r0
 8015c10:	429a      	cmp	r2, r3
 8015c12:	da1a      	bge.n	8015c4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8015c14:	4b12      	ldr	r3, [pc, #72]	; (8015c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8015c16:	1a10      	subs	r0, r2, r0
 8015c18:	210e      	movs	r1, #14
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	fb01 3000 	mla	r0, r1, r0, r3
 8015c20:	7b03      	ldrb	r3, [r0, #12]
 8015c22:	f003 031f 	and.w	r3, r3, #31
 8015c26:	2b0b      	cmp	r3, #11
 8015c28:	d10b      	bne.n	8015c42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015c2a:	8903      	ldrh	r3, [r0, #8]
 8015c2c:	8940      	ldrh	r0, [r0, #10]
 8015c2e:	4358      	muls	r0, r3
 8015c30:	4b09      	ldr	r3, [pc, #36]	; (8015c58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015c32:	3003      	adds	r0, #3
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	f020 0303 	bic.w	r3, r0, #3
 8015c3a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015c3e:	4418      	add	r0, r3
 8015c40:	4770      	bx	lr
 8015c42:	2b0d      	cmp	r3, #13
 8015c44:	d101      	bne.n	8015c4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8015c46:	300d      	adds	r0, #13
 8015c48:	4770      	bx	lr
 8015c4a:	2000      	movs	r0, #0
 8015c4c:	4770      	bx	lr
 8015c4e:	bf00      	nop
 8015c50:	2400ea90 	.word	0x2400ea90
 8015c54:	2400ea98 	.word	0x2400ea98
 8015c58:	2400ea74 	.word	0x2400ea74
 8015c5c:	2400ea94 	.word	0x2400ea94
 8015c60:	2400ea78 	.word	0x2400ea78

08015c64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015c64:	4b17      	ldr	r3, [pc, #92]	; (8015cc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015c66:	b510      	push	{r4, lr}
 8015c68:	6819      	ldr	r1, [r3, #0]
 8015c6a:	8803      	ldrh	r3, [r0, #0]
 8015c6c:	b1e9      	cbz	r1, 8015caa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8015c6e:	4a16      	ldr	r2, [pc, #88]	; (8015cc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015c70:	8812      	ldrh	r2, [r2, #0]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d90a      	bls.n	8015c8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8015c76:	2214      	movs	r2, #20
 8015c78:	fb02 1303 	mla	r3, r2, r3, r1
 8015c7c:	7c58      	ldrb	r0, [r3, #17]
 8015c7e:	0942      	lsrs	r2, r0, #5
 8015c80:	7cd8      	ldrb	r0, [r3, #19]
 8015c82:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015c86:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8015c8a:	bd10      	pop	{r4, pc}
 8015c8c:	490f      	ldr	r1, [pc, #60]	; (8015ccc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015c8e:	8809      	ldrh	r1, [r1, #0]
 8015c90:	4411      	add	r1, r2
 8015c92:	428b      	cmp	r3, r1
 8015c94:	da09      	bge.n	8015caa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8015c96:	1a9b      	subs	r3, r3, r2
 8015c98:	4a0d      	ldr	r2, [pc, #52]	; (8015cd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015c9a:	210e      	movs	r1, #14
 8015c9c:	6812      	ldr	r2, [r2, #0]
 8015c9e:	fb01 2303 	mla	r3, r1, r3, r2
 8015ca2:	7b18      	ldrb	r0, [r3, #12]
 8015ca4:	f000 001f 	and.w	r0, r0, #31
 8015ca8:	e7ef      	b.n	8015c8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015caa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d106      	bne.n	8015cc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8015cb2:	f7f8 fae9 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 8015cb6:	6803      	ldr	r3, [r0, #0]
 8015cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbe:	4718      	bx	r3
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	e7e2      	b.n	8015c8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015cc4:	2400ea98 	.word	0x2400ea98
 8015cc8:	2400ea90 	.word	0x2400ea90
 8015ccc:	2400ea94 	.word	0x2400ea94
 8015cd0:	2400ea78 	.word	0x2400ea78

08015cd4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015cd4:	2018      	movs	r0, #24
 8015cd6:	4770      	bx	lr

08015cd8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015cd8:	2001      	movs	r0, #1
 8015cda:	4770      	bx	lr

08015cdc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce0:	b085      	sub	sp, #20
 8015ce2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015ce4:	9203      	str	r2, [sp, #12]
 8015ce6:	6870      	ldr	r0, [r6, #4]
 8015ce8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015cec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015cf0:	9101      	str	r1, [sp, #4]
 8015cf2:	fa1f f885 	uxth.w	r8, r5
 8015cf6:	43ed      	mvns	r5, r5
 8015cf8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015cfc:	b2ed      	uxtb	r5, r5
 8015cfe:	fb00 2404 	mla	r4, r0, r4, r2
 8015d02:	6832      	ldr	r2, [r6, #0]
 8015d04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015d08:	4414      	add	r4, r2
 8015d0a:	f8dc 2000 	ldr.w	r2, [ip]
 8015d0e:	9202      	str	r2, [sp, #8]
 8015d10:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015d14:	f102 0e04 	add.w	lr, r2, #4
 8015d18:	9a01      	ldr	r2, [sp, #4]
 8015d1a:	2a00      	cmp	r2, #0
 8015d1c:	dc03      	bgt.n	8015d26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015d1e:	9a03      	ldr	r2, [sp, #12]
 8015d20:	2a00      	cmp	r2, #0
 8015d22:	f340 8116 	ble.w	8015f52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d28:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015d2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015d30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015d32:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015d36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	dd0e      	ble.n	8015d5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015d3e:	1406      	asrs	r6, r0, #16
 8015d40:	d405      	bmi.n	8015d4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015d42:	4556      	cmp	r6, sl
 8015d44:	da03      	bge.n	8015d4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015d46:	1416      	asrs	r6, r2, #16
 8015d48:	d401      	bmi.n	8015d4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015d4a:	454e      	cmp	r6, r9
 8015d4c:	db07      	blt.n	8015d5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015d4e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015d50:	3b01      	subs	r3, #1
 8015d52:	3403      	adds	r4, #3
 8015d54:	4430      	add	r0, r6
 8015d56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015d58:	4432      	add	r2, r6
 8015d5a:	e7ee      	b.n	8015d3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015d5c:	d063      	beq.n	8015e26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015d5e:	1e5e      	subs	r6, r3, #1
 8015d60:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015d62:	fb07 0706 	mla	r7, r7, r6, r0
 8015d66:	143f      	asrs	r7, r7, #16
 8015d68:	d454      	bmi.n	8015e14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015d6a:	4557      	cmp	r7, sl
 8015d6c:	da52      	bge.n	8015e14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015d6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015d70:	fb07 2606 	mla	r6, r7, r6, r2
 8015d74:	1436      	asrs	r6, r6, #16
 8015d76:	d44d      	bmi.n	8015e14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015d78:	454e      	cmp	r6, r9
 8015d7a:	da4b      	bge.n	8015e14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015d7c:	1ce6      	adds	r6, r4, #3
 8015d7e:	4699      	mov	r9, r3
 8015d80:	f1b9 0f00 	cmp.w	r9, #0
 8015d84:	f106 0603 	add.w	r6, r6, #3
 8015d88:	dd48      	ble.n	8015e1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015d8a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015d8e:	1417      	asrs	r7, r2, #16
 8015d90:	9902      	ldr	r1, [sp, #8]
 8015d92:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015d96:	f109 39ff 	add.w	r9, r9, #4294967295
 8015d9a:	fb0b 1707 	mla	r7, fp, r7, r1
 8015d9e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015da2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015da4:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015da8:	fb1b fb05 	smulbb	fp, fp, r5
 8015dac:	4408      	add	r0, r1
 8015dae:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015db0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015db4:	440a      	add	r2, r1
 8015db6:	eb0e 0a07 	add.w	sl, lr, r7
 8015dba:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015dbe:	fb07 b708 	mla	r7, r7, r8, fp
 8015dc2:	b2bf      	uxth	r7, r7
 8015dc4:	f107 0b01 	add.w	fp, r7, #1
 8015dc8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015dcc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015dd0:	fb1b fb05 	smulbb	fp, fp, r5
 8015dd4:	123f      	asrs	r7, r7, #8
 8015dd6:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015dda:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015dde:	fb07 b708 	mla	r7, r7, r8, fp
 8015de2:	b2bf      	uxth	r7, r7
 8015de4:	f107 0b01 	add.w	fp, r7, #1
 8015de8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015dec:	123f      	asrs	r7, r7, #8
 8015dee:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015df2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015df6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015dfa:	fb1a fa05 	smulbb	sl, sl, r5
 8015dfe:	fb07 a708 	mla	r7, r7, r8, sl
 8015e02:	b2bf      	uxth	r7, r7
 8015e04:	f107 0a01 	add.w	sl, r7, #1
 8015e08:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015e0c:	123f      	asrs	r7, r7, #8
 8015e0e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015e12:	e7b5      	b.n	8015d80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015e14:	2700      	movs	r7, #0
 8015e16:	1bde      	subs	r6, r3, r7
 8015e18:	2e00      	cmp	r6, #0
 8015e1a:	dc42      	bgt.n	8015ea2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015e1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e24:	441c      	add	r4, r3
 8015e26:	9b01      	ldr	r3, [sp, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	f340 8092 	ble.w	8015f52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e34:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015e38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015e3c:	eef0 6a62 	vmov.f32	s13, s5
 8015e40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015e44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015e48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015e4c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015e50:	eef0 6a43 	vmov.f32	s13, s6
 8015e54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015e58:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015e5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015e60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015e64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015e68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015e6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015e70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015e74:	ee12 2a90 	vmov	r2, s5
 8015e78:	eef0 2a47 	vmov.f32	s5, s14
 8015e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e80:	ee13 2a10 	vmov	r2, s6
 8015e84:	9311      	str	r3, [sp, #68]	; 0x44
 8015e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e88:	eeb0 3a67 	vmov.f32	s6, s15
 8015e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015e90:	9312      	str	r3, [sp, #72]	; 0x48
 8015e92:	9b01      	ldr	r3, [sp, #4]
 8015e94:	9a03      	ldr	r2, [sp, #12]
 8015e96:	3b01      	subs	r3, #1
 8015e98:	9301      	str	r3, [sp, #4]
 8015e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e9c:	bf08      	it	eq
 8015e9e:	4613      	moveq	r3, r2
 8015ea0:	e73a      	b.n	8015d18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015ea2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015ea6:	d44e      	bmi.n	8015f46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015ea8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015eac:	4556      	cmp	r6, sl
 8015eae:	dd4a      	ble.n	8015f46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015eb0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015eb4:	d447      	bmi.n	8015f46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015eb6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015eba:	4559      	cmp	r1, fp
 8015ebc:	dd43      	ble.n	8015f46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015ebe:	fa0f f986 	sxth.w	r9, r6
 8015ec2:	9902      	ldr	r1, [sp, #8]
 8015ec4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015ec8:	fb0b 1909 	mla	r9, fp, r9, r1
 8015ecc:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015ed0:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015ed4:	fb1b fb05 	smulbb	fp, fp, r5
 8015ed8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015edc:	eb0e 0a09 	add.w	sl, lr, r9
 8015ee0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015ee4:	fb09 b908 	mla	r9, r9, r8, fp
 8015ee8:	fa1f f989 	uxth.w	r9, r9
 8015eec:	f109 0b01 	add.w	fp, r9, #1
 8015ef0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015ef4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015ef8:	f804 9006 	strb.w	r9, [r4, r6]
 8015efc:	4426      	add	r6, r4
 8015efe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015f02:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015f06:	fb1b fb05 	smulbb	fp, fp, r5
 8015f0a:	fb09 b908 	mla	r9, r9, r8, fp
 8015f0e:	fa1f f989 	uxth.w	r9, r9
 8015f12:	f109 0b01 	add.w	fp, r9, #1
 8015f16:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015f1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015f1e:	f886 9001 	strb.w	r9, [r6, #1]
 8015f22:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015f26:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015f2a:	fb1a fa05 	smulbb	sl, sl, r5
 8015f2e:	fb09 a908 	mla	r9, r9, r8, sl
 8015f32:	fa1f f989 	uxth.w	r9, r9
 8015f36:	f109 0a01 	add.w	sl, r9, #1
 8015f3a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015f3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015f42:	f886 9002 	strb.w	r9, [r6, #2]
 8015f46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f48:	3701      	adds	r7, #1
 8015f4a:	4408      	add	r0, r1
 8015f4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015f4e:	440a      	add	r2, r1
 8015f50:	e761      	b.n	8015e16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015f52:	b005      	add	sp, #20
 8015f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015f5e:	4693      	mov	fp, r2
 8015f60:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015f66:	6868      	ldr	r0, [r5, #4]
 8015f68:	6877      	ldr	r7, [r6, #4]
 8015f6a:	9100      	str	r1, [sp, #0]
 8015f6c:	3704      	adds	r7, #4
 8015f6e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015f72:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8015f76:	fb00 2404 	mla	r4, r0, r4, r2
 8015f7a:	682a      	ldr	r2, [r5, #0]
 8015f7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015f80:	4414      	add	r4, r2
 8015f82:	6832      	ldr	r2, [r6, #0]
 8015f84:	9201      	str	r2, [sp, #4]
 8015f86:	9a00      	ldr	r2, [sp, #0]
 8015f88:	2a00      	cmp	r2, #0
 8015f8a:	dc03      	bgt.n	8015f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015f8c:	f1bb 0f00 	cmp.w	fp, #0
 8015f90:	f340 80bc 	ble.w	801610c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f96:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015f9a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fa0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015fa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	dd0c      	ble.n	8015fc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015fac:	1405      	asrs	r5, r0, #16
 8015fae:	d405      	bmi.n	8015fbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015fb0:	4555      	cmp	r5, sl
 8015fb2:	da03      	bge.n	8015fbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015fb4:	1415      	asrs	r5, r2, #16
 8015fb6:	d401      	bmi.n	8015fbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015fb8:	454d      	cmp	r5, r9
 8015fba:	db05      	blt.n	8015fc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015fbc:	4440      	add	r0, r8
 8015fbe:	4472      	add	r2, lr
 8015fc0:	3b01      	subs	r3, #1
 8015fc2:	3403      	adds	r4, #3
 8015fc4:	e7f0      	b.n	8015fa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015fc6:	d03f      	beq.n	8016048 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015fc8:	1e5d      	subs	r5, r3, #1
 8015fca:	fb08 0c05 	mla	ip, r8, r5, r0
 8015fce:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015fd2:	d42e      	bmi.n	8016032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015fd4:	45d4      	cmp	ip, sl
 8015fd6:	da2c      	bge.n	8016032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015fd8:	fb0e 2505 	mla	r5, lr, r5, r2
 8015fdc:	142d      	asrs	r5, r5, #16
 8015fde:	d428      	bmi.n	8016032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015fe0:	454d      	cmp	r5, r9
 8015fe2:	da26      	bge.n	8016032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015fe4:	1ce5      	adds	r5, r4, #3
 8015fe6:	469c      	mov	ip, r3
 8015fe8:	f1bc 0f00 	cmp.w	ip, #0
 8015fec:	f105 0503 	add.w	r5, r5, #3
 8015ff0:	dd25      	ble.n	801603e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015ff2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015ff6:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015ffa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015ffe:	4472      	add	r2, lr
 8016000:	468a      	mov	sl, r1
 8016002:	9901      	ldr	r1, [sp, #4]
 8016004:	fb0a 1909 	mla	r9, sl, r9, r1
 8016008:	1401      	asrs	r1, r0, #16
 801600a:	4440      	add	r0, r8
 801600c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016010:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016014:	eb07 0a09 	add.w	sl, r7, r9
 8016018:	f817 9009 	ldrb.w	r9, [r7, r9]
 801601c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016020:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016024:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016028:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801602c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016030:	e7da      	b.n	8015fe8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016032:	2500      	movs	r5, #0
 8016034:	eba3 0c05 	sub.w	ip, r3, r5
 8016038:	f1bc 0f00 	cmp.w	ip, #0
 801603c:	dc3b      	bgt.n	80160b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801603e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016046:	441c      	add	r4, r3
 8016048:	9b00      	ldr	r3, [sp, #0]
 801604a:	2b00      	cmp	r3, #0
 801604c:	dd5e      	ble.n	801610c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801604e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016054:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016058:	eeb0 6a62 	vmov.f32	s12, s5
 801605c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016060:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016064:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016068:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801606c:	eeb0 6a43 	vmov.f32	s12, s6
 8016070:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016074:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016078:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801607c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016080:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016084:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016088:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801608c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016090:	ee12 2a90 	vmov	r2, s5
 8016094:	eef0 2a47 	vmov.f32	s5, s14
 8016098:	fb92 f8f3 	sdiv	r8, r2, r3
 801609c:	ee13 2a10 	vmov	r2, s6
 80160a0:	eeb0 3a67 	vmov.f32	s6, s15
 80160a4:	fb92 fef3 	sdiv	lr, r2, r3
 80160a8:	9b00      	ldr	r3, [sp, #0]
 80160aa:	3b01      	subs	r3, #1
 80160ac:	9300      	str	r3, [sp, #0]
 80160ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160b0:	bf08      	it	eq
 80160b2:	465b      	moveq	r3, fp
 80160b4:	e767      	b.n	8015f86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80160b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80160ba:	d423      	bmi.n	8016104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80160bc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80160c0:	45cc      	cmp	ip, r9
 80160c2:	dd1f      	ble.n	8016104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80160c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80160c8:	d41c      	bmi.n	8016104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80160ca:	68f1      	ldr	r1, [r6, #12]
 80160cc:	4551      	cmp	r1, sl
 80160ce:	dd19      	ble.n	8016104 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80160d0:	fa0f fc8c 	sxth.w	ip, ip
 80160d4:	9901      	ldr	r1, [sp, #4]
 80160d6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80160da:	f81c c009 	ldrb.w	ip, [ip, r9]
 80160de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80160e2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80160e6:	eb07 090c 	add.w	r9, r7, ip
 80160ea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80160ee:	f804 a00c 	strb.w	sl, [r4, ip]
 80160f2:	44a4      	add	ip, r4
 80160f4:	f899 a001 	ldrb.w	sl, [r9, #1]
 80160f8:	f88c a001 	strb.w	sl, [ip, #1]
 80160fc:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016100:	f88c 9002 	strb.w	r9, [ip, #2]
 8016104:	4440      	add	r0, r8
 8016106:	4472      	add	r2, lr
 8016108:	3501      	adds	r5, #1
 801610a:	e793      	b.n	8016034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801610c:	b003      	add	sp, #12
 801610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016116:	b085      	sub	sp, #20
 8016118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801611c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801611e:	9202      	str	r2, [sp, #8]
 8016120:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016124:	6860      	ldr	r0, [r4, #4]
 8016126:	9203      	str	r2, [sp, #12]
 8016128:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801612c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016130:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016134:	fb00 2505 	mla	r5, r0, r5, r2
 8016138:	6822      	ldr	r2, [r4, #0]
 801613a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801613e:	4415      	add	r5, r2
 8016140:	f8dc 2000 	ldr.w	r2, [ip]
 8016144:	9200      	str	r2, [sp, #0]
 8016146:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801614a:	3204      	adds	r2, #4
 801614c:	9201      	str	r2, [sp, #4]
 801614e:	2900      	cmp	r1, #0
 8016150:	dc03      	bgt.n	801615a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016152:	9a02      	ldr	r2, [sp, #8]
 8016154:	2a00      	cmp	r2, #0
 8016156:	f340 8127 	ble.w	80163a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801615a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801615c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016160:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016166:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801616a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801616e:	2b00      	cmp	r3, #0
 8016170:	dd0d      	ble.n	801618e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016172:	1422      	asrs	r2, r4, #16
 8016174:	d405      	bmi.n	8016182 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016176:	4542      	cmp	r2, r8
 8016178:	da03      	bge.n	8016182 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801617a:	1402      	asrs	r2, r0, #16
 801617c:	d401      	bmi.n	8016182 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801617e:	42ba      	cmp	r2, r7
 8016180:	db06      	blt.n	8016190 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016184:	4474      	add	r4, lr
 8016186:	3b01      	subs	r3, #1
 8016188:	3503      	adds	r5, #3
 801618a:	4410      	add	r0, r2
 801618c:	e7ef      	b.n	801616e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801618e:	d075      	beq.n	801627c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8016190:	1e5a      	subs	r2, r3, #1
 8016192:	fb0e 4602 	mla	r6, lr, r2, r4
 8016196:	1436      	asrs	r6, r6, #16
 8016198:	d465      	bmi.n	8016266 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801619a:	4546      	cmp	r6, r8
 801619c:	da63      	bge.n	8016266 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801619e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80161a0:	fb06 0202 	mla	r2, r6, r2, r0
 80161a4:	1412      	asrs	r2, r2, #16
 80161a6:	d45e      	bmi.n	8016266 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80161a8:	42ba      	cmp	r2, r7
 80161aa:	da5c      	bge.n	8016266 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80161ac:	1cef      	adds	r7, r5, #3
 80161ae:	4699      	mov	r9, r3
 80161b0:	f1b9 0f00 	cmp.w	r9, #0
 80161b4:	dd5d      	ble.n	8016272 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80161b6:	1402      	asrs	r2, r0, #16
 80161b8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80161bc:	1426      	asrs	r6, r4, #16
 80161be:	4692      	mov	sl, r2
 80161c0:	9a00      	ldr	r2, [sp, #0]
 80161c2:	fb08 220a 	mla	r2, r8, sl, r2
 80161c6:	5d92      	ldrb	r2, [r2, r6]
 80161c8:	9e01      	ldr	r6, [sp, #4]
 80161ca:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80161ce:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80161d2:	d041      	beq.n	8016258 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80161d4:	9a03      	ldr	r2, [sp, #12]
 80161d6:	fa5f fb86 	uxtb.w	fp, r6
 80161da:	fb02 f808 	mul.w	r8, r2, r8
 80161de:	f108 0201 	add.w	r2, r8, #1
 80161e2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80161e6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80161ea:	1212      	asrs	r2, r2, #8
 80161ec:	fa1f fa82 	uxth.w	sl, r2
 80161f0:	43d2      	mvns	r2, r2
 80161f2:	fb1b fb0a 	smulbb	fp, fp, sl
 80161f6:	b2d2      	uxtb	r2, r2
 80161f8:	fb08 b802 	mla	r8, r8, r2, fp
 80161fc:	fa1f f888 	uxth.w	r8, r8
 8016200:	f108 0b01 	add.w	fp, r8, #1
 8016204:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016208:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801620c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016210:	fb1b fb0a 	smulbb	fp, fp, sl
 8016214:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016218:	fb16 fa0a 	smulbb	sl, r6, sl
 801621c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016220:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016224:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016228:	fb06 aa02 	mla	sl, r6, r2, sl
 801622c:	fb08 b802 	mla	r8, r8, r2, fp
 8016230:	fa1f fa8a 	uxth.w	sl, sl
 8016234:	fa1f f888 	uxth.w	r8, r8
 8016238:	f10a 0601 	add.w	r6, sl, #1
 801623c:	f108 0b01 	add.w	fp, r8, #1
 8016240:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016244:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016248:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801624c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016250:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016254:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801625a:	4474      	add	r4, lr
 801625c:	3703      	adds	r7, #3
 801625e:	f109 39ff 	add.w	r9, r9, #4294967295
 8016262:	4410      	add	r0, r2
 8016264:	e7a4      	b.n	80161b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016266:	f04f 0800 	mov.w	r8, #0
 801626a:	eba3 0208 	sub.w	r2, r3, r8
 801626e:	2a00      	cmp	r2, #0
 8016270:	dc3b      	bgt.n	80162ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8016272:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801627a:	441d      	add	r5, r3
 801627c:	2900      	cmp	r1, #0
 801627e:	f340 8093 	ble.w	80163a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016282:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016288:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801628c:	3901      	subs	r1, #1
 801628e:	eeb0 6a62 	vmov.f32	s12, s5
 8016292:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016296:	ee31 1a05 	vadd.f32	s2, s2, s10
 801629a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801629e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80162a2:	eeb0 6a43 	vmov.f32	s12, s6
 80162a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80162ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80162b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80162b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80162ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80162be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80162c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80162c6:	ee12 2a90 	vmov	r2, s5
 80162ca:	eef0 2a47 	vmov.f32	s5, s14
 80162ce:	fb92 fef3 	sdiv	lr, r2, r3
 80162d2:	ee13 2a10 	vmov	r2, s6
 80162d6:	eeb0 3a67 	vmov.f32	s6, s15
 80162da:	fb92 f3f3 	sdiv	r3, r2, r3
 80162de:	9a02      	ldr	r2, [sp, #8]
 80162e0:	9312      	str	r3, [sp, #72]	; 0x48
 80162e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162e4:	bf08      	it	eq
 80162e6:	4613      	moveq	r3, r2
 80162e8:	e731      	b.n	801614e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80162ea:	1427      	asrs	r7, r4, #16
 80162ec:	d456      	bmi.n	801639c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80162ee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80162f2:	42be      	cmp	r6, r7
 80162f4:	dd52      	ble.n	801639c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80162f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80162fa:	d44f      	bmi.n	801639c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80162fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016300:	454a      	cmp	r2, r9
 8016302:	dd4b      	ble.n	801639c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016304:	9a00      	ldr	r2, [sp, #0]
 8016306:	b236      	sxth	r6, r6
 8016308:	fb09 2606 	mla	r6, r9, r6, r2
 801630c:	5df2      	ldrb	r2, [r6, r7]
 801630e:	9e01      	ldr	r6, [sp, #4]
 8016310:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016314:	0e3a      	lsrs	r2, r7, #24
 8016316:	d041      	beq.n	801639c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016318:	9e03      	ldr	r6, [sp, #12]
 801631a:	fa5f fb87 	uxtb.w	fp, r7
 801631e:	4372      	muls	r2, r6
 8016320:	1c56      	adds	r6, r2, #1
 8016322:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016326:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801632a:	1212      	asrs	r2, r2, #8
 801632c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016330:	fa1f fa82 	uxth.w	sl, r2
 8016334:	43d2      	mvns	r2, r2
 8016336:	fb1b fb0a 	smulbb	fp, fp, sl
 801633a:	b2d2      	uxtb	r2, r2
 801633c:	fb09 b902 	mla	r9, r9, r2, fp
 8016340:	fa1f f989 	uxth.w	r9, r9
 8016344:	f109 0b01 	add.w	fp, r9, #1
 8016348:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801634c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016350:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016354:	fb1b fb0a 	smulbb	fp, fp, sl
 8016358:	ea4f 2929 	mov.w	r9, r9, asr #8
 801635c:	fb17 fa0a 	smulbb	sl, r7, sl
 8016360:	f805 9006 	strb.w	r9, [r5, r6]
 8016364:	442e      	add	r6, r5
 8016366:	78b7      	ldrb	r7, [r6, #2]
 8016368:	f896 9001 	ldrb.w	r9, [r6, #1]
 801636c:	fb07 aa02 	mla	sl, r7, r2, sl
 8016370:	fb09 b902 	mla	r9, r9, r2, fp
 8016374:	fa1f fa8a 	uxth.w	sl, sl
 8016378:	fa1f f989 	uxth.w	r9, r9
 801637c:	f10a 0701 	add.w	r7, sl, #1
 8016380:	f109 0b01 	add.w	fp, r9, #1
 8016384:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016388:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801638c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016390:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016394:	f886 a002 	strb.w	sl, [r6, #2]
 8016398:	f886 9001 	strb.w	r9, [r6, #1]
 801639c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801639e:	4474      	add	r4, lr
 80163a0:	f108 0801 	add.w	r8, r8, #1
 80163a4:	4410      	add	r0, r2
 80163a6:	e760      	b.n	801626a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80163a8:	b005      	add	sp, #20
 80163aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80163ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b2:	b085      	sub	sp, #20
 80163b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80163b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80163ba:	9203      	str	r2, [sp, #12]
 80163bc:	6868      	ldr	r0, [r5, #4]
 80163be:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80163c2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80163c6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80163ca:	fb00 2404 	mla	r4, r0, r4, r2
 80163ce:	682a      	ldr	r2, [r5, #0]
 80163d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80163d4:	4414      	add	r4, r2
 80163d6:	f8dc 2000 	ldr.w	r2, [ip]
 80163da:	9201      	str	r2, [sp, #4]
 80163dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80163e0:	3204      	adds	r2, #4
 80163e2:	9202      	str	r2, [sp, #8]
 80163e4:	2900      	cmp	r1, #0
 80163e6:	dc03      	bgt.n	80163f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80163e8:	9a03      	ldr	r2, [sp, #12]
 80163ea:	2a00      	cmp	r2, #0
 80163ec:	f340 8137 	ble.w	801665e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80163f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80163f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80163f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80163fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016400:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016404:	2b00      	cmp	r3, #0
 8016406:	dd0d      	ble.n	8016424 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016408:	1405      	asrs	r5, r0, #16
 801640a:	d405      	bmi.n	8016418 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801640c:	4545      	cmp	r5, r8
 801640e:	da03      	bge.n	8016418 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016410:	1415      	asrs	r5, r2, #16
 8016412:	d401      	bmi.n	8016418 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016414:	42bd      	cmp	r5, r7
 8016416:	db06      	blt.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016418:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801641a:	4470      	add	r0, lr
 801641c:	3b01      	subs	r3, #1
 801641e:	3403      	adds	r4, #3
 8016420:	442a      	add	r2, r5
 8016422:	e7ef      	b.n	8016404 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016424:	d070      	beq.n	8016508 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016426:	1e5d      	subs	r5, r3, #1
 8016428:	fb0e 0605 	mla	r6, lr, r5, r0
 801642c:	1436      	asrs	r6, r6, #16
 801642e:	d462      	bmi.n	80164f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016430:	4546      	cmp	r6, r8
 8016432:	da60      	bge.n	80164f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016434:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016436:	fb06 2505 	mla	r5, r6, r5, r2
 801643a:	142d      	asrs	r5, r5, #16
 801643c:	d45b      	bmi.n	80164f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801643e:	42bd      	cmp	r5, r7
 8016440:	da59      	bge.n	80164f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016442:	1ce5      	adds	r5, r4, #3
 8016444:	469a      	mov	sl, r3
 8016446:	f1ba 0f00 	cmp.w	sl, #0
 801644a:	dd58      	ble.n	80164fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801644c:	1416      	asrs	r6, r2, #16
 801644e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016452:	1407      	asrs	r7, r0, #16
 8016454:	46b1      	mov	r9, r6
 8016456:	9e01      	ldr	r6, [sp, #4]
 8016458:	fb08 6609 	mla	r6, r8, r9, r6
 801645c:	5df6      	ldrb	r6, [r6, r7]
 801645e:	9f02      	ldr	r7, [sp, #8]
 8016460:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8016464:	0e37      	lsrs	r7, r6, #24
 8016466:	2fff      	cmp	r7, #255	; 0xff
 8016468:	f000 80f0 	beq.w	801664c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801646c:	fa5f f887 	uxtb.w	r8, r7
 8016470:	b3d7      	cbz	r7, 80164e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016472:	fa1f f788 	uxth.w	r7, r8
 8016476:	ea6f 0808 	mvn.w	r8, r8
 801647a:	fa5f fb86 	uxtb.w	fp, r6
 801647e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8016482:	fa5f f888 	uxtb.w	r8, r8
 8016486:	fb1b fb07 	smulbb	fp, fp, r7
 801648a:	fb09 b908 	mla	r9, r9, r8, fp
 801648e:	fa1f f989 	uxth.w	r9, r9
 8016492:	f109 0b01 	add.w	fp, r9, #1
 8016496:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801649a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801649e:	fb1b fb08 	smulbb	fp, fp, r8
 80164a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164a6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80164aa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80164ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80164b2:	fb09 b907 	mla	r9, r9, r7, fp
 80164b6:	fa1f f989 	uxth.w	r9, r9
 80164ba:	f109 0b01 	add.w	fp, r9, #1
 80164be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164c6:	f805 9c02 	strb.w	r9, [r5, #-2]
 80164ca:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80164ce:	fb19 f808 	smulbb	r8, r9, r8
 80164d2:	fb06 8607 	mla	r6, r6, r7, r8
 80164d6:	b2b6      	uxth	r6, r6
 80164d8:	f106 0801 	add.w	r8, r6, #1
 80164dc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80164e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80164e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80164e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80164ea:	4470      	add	r0, lr
 80164ec:	3503      	adds	r5, #3
 80164ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164f2:	4432      	add	r2, r6
 80164f4:	e7a7      	b.n	8016446 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80164f6:	2600      	movs	r6, #0
 80164f8:	1b9d      	subs	r5, r3, r6
 80164fa:	2d00      	cmp	r5, #0
 80164fc:	dc3b      	bgt.n	8016576 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80164fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016506:	441c      	add	r4, r3
 8016508:	2900      	cmp	r1, #0
 801650a:	f340 80a8 	ble.w	801665e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801650e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016514:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016518:	3901      	subs	r1, #1
 801651a:	eeb0 6a62 	vmov.f32	s12, s5
 801651e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016522:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016526:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801652a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801652e:	eeb0 6a43 	vmov.f32	s12, s6
 8016532:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016536:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801653a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801653e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016542:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016546:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801654a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801654e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016552:	ee12 2a90 	vmov	r2, s5
 8016556:	eef0 2a47 	vmov.f32	s5, s14
 801655a:	fb92 fef3 	sdiv	lr, r2, r3
 801655e:	ee13 2a10 	vmov	r2, s6
 8016562:	eeb0 3a67 	vmov.f32	s6, s15
 8016566:	fb92 f3f3 	sdiv	r3, r2, r3
 801656a:	9a03      	ldr	r2, [sp, #12]
 801656c:	9312      	str	r3, [sp, #72]	; 0x48
 801656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016570:	bf08      	it	eq
 8016572:	4613      	moveq	r3, r2
 8016574:	e736      	b.n	80163e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016576:	ea5f 4820 	movs.w	r8, r0, asr #16
 801657a:	d457      	bmi.n	801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801657c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016580:	4547      	cmp	r7, r8
 8016582:	dd53      	ble.n	801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016584:	ea5f 4922 	movs.w	r9, r2, asr #16
 8016588:	d450      	bmi.n	801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801658a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801658e:	454d      	cmp	r5, r9
 8016590:	dd4c      	ble.n	801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016592:	9d01      	ldr	r5, [sp, #4]
 8016594:	b23f      	sxth	r7, r7
 8016596:	fb09 5707 	mla	r7, r9, r7, r5
 801659a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801659e:	9f02      	ldr	r7, [sp, #8]
 80165a0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80165a4:	0e2f      	lsrs	r7, r5, #24
 80165a6:	2fff      	cmp	r7, #255	; 0xff
 80165a8:	d045      	beq.n	8016636 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80165aa:	fa5f f987 	uxtb.w	r9, r7
 80165ae:	b3ef      	cbz	r7, 801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80165b0:	fa1f f889 	uxth.w	r8, r9
 80165b4:	ea6f 0909 	mvn.w	r9, r9
 80165b8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80165bc:	fa5f fb85 	uxtb.w	fp, r5
 80165c0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80165c4:	fa5f f989 	uxtb.w	r9, r9
 80165c8:	fb1b fb08 	smulbb	fp, fp, r8
 80165cc:	fb0a ba09 	mla	sl, sl, r9, fp
 80165d0:	fa1f fa8a 	uxth.w	sl, sl
 80165d4:	f10a 0b01 	add.w	fp, sl, #1
 80165d8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80165dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80165e0:	f804 a007 	strb.w	sl, [r4, r7]
 80165e4:	4427      	add	r7, r4
 80165e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80165ea:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80165ee:	f897 b001 	ldrb.w	fp, [r7, #1]
 80165f2:	fb1b fb09 	smulbb	fp, fp, r9
 80165f6:	fb0a ba08 	mla	sl, sl, r8, fp
 80165fa:	fa1f fa8a 	uxth.w	sl, sl
 80165fe:	f10a 0b01 	add.w	fp, sl, #1
 8016602:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016606:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801660a:	f887 a001 	strb.w	sl, [r7, #1]
 801660e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016612:	fb1a f909 	smulbb	r9, sl, r9
 8016616:	fb05 9508 	mla	r5, r5, r8, r9
 801661a:	b2ad      	uxth	r5, r5
 801661c:	f105 0901 	add.w	r9, r5, #1
 8016620:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016624:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016628:	f887 9002 	strb.w	r9, [r7, #2]
 801662c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801662e:	4470      	add	r0, lr
 8016630:	3601      	adds	r6, #1
 8016632:	442a      	add	r2, r5
 8016634:	e760      	b.n	80164f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016636:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801663a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801663e:	55e5      	strb	r5, [r4, r7]
 8016640:	4427      	add	r7, r4
 8016642:	0c2d      	lsrs	r5, r5, #16
 8016644:	f887 8001 	strb.w	r8, [r7, #1]
 8016648:	70bd      	strb	r5, [r7, #2]
 801664a:	e7ef      	b.n	801662c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801664c:	0a37      	lsrs	r7, r6, #8
 801664e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8016652:	0c36      	lsrs	r6, r6, #16
 8016654:	f805 7c02 	strb.w	r7, [r5, #-2]
 8016658:	f805 6c01 	strb.w	r6, [r5, #-1]
 801665c:	e744      	b.n	80164e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801665e:	b005      	add	sp, #20
 8016660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016664 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016668:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801666a:	9201      	str	r2, [sp, #4]
 801666c:	6870      	ldr	r0, [r6, #4]
 801666e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016672:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016676:	fa1f fe85 	uxth.w	lr, r5
 801667a:	43ed      	mvns	r5, r5
 801667c:	f8dc 8000 	ldr.w	r8, [ip]
 8016680:	b2ed      	uxtb	r5, r5
 8016682:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016686:	fb00 2404 	mla	r4, r0, r4, r2
 801668a:	6832      	ldr	r2, [r6, #0]
 801668c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016690:	4414      	add	r4, r2
 8016692:	2900      	cmp	r1, #0
 8016694:	dc03      	bgt.n	801669e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016696:	9a01      	ldr	r2, [sp, #4]
 8016698:	2a00      	cmp	r2, #0
 801669a:	f340 810d 	ble.w	80168b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801669e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166a0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80166a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80166a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166aa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80166ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	dd0e      	ble.n	80166d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80166b6:	1406      	asrs	r6, r0, #16
 80166b8:	d405      	bmi.n	80166c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80166ba:	4556      	cmp	r6, sl
 80166bc:	da03      	bge.n	80166c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80166be:	1416      	asrs	r6, r2, #16
 80166c0:	d401      	bmi.n	80166c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80166c2:	454e      	cmp	r6, r9
 80166c4:	db07      	blt.n	80166d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80166c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80166c8:	3b01      	subs	r3, #1
 80166ca:	3403      	adds	r4, #3
 80166cc:	4430      	add	r0, r6
 80166ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80166d0:	4432      	add	r2, r6
 80166d2:	e7ee      	b.n	80166b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80166d4:	d060      	beq.n	8016798 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80166d6:	1e5e      	subs	r6, r3, #1
 80166d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80166da:	fb07 0706 	mla	r7, r7, r6, r0
 80166de:	143f      	asrs	r7, r7, #16
 80166e0:	d451      	bmi.n	8016786 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80166e2:	4557      	cmp	r7, sl
 80166e4:	da4f      	bge.n	8016786 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80166e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80166e8:	fb07 2606 	mla	r6, r7, r6, r2
 80166ec:	1436      	asrs	r6, r6, #16
 80166ee:	d44a      	bmi.n	8016786 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80166f0:	454e      	cmp	r6, r9
 80166f2:	da48      	bge.n	8016786 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80166f4:	1ce6      	adds	r6, r4, #3
 80166f6:	4699      	mov	r9, r3
 80166f8:	f1b9 0f00 	cmp.w	r9, #0
 80166fc:	f106 0603 	add.w	r6, r6, #3
 8016700:	dd45      	ble.n	801678e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016702:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016706:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801670a:	1417      	asrs	r7, r2, #16
 801670c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016710:	fb0b a707 	mla	r7, fp, r7, sl
 8016714:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016718:	fb1b fb05 	smulbb	fp, fp, r5
 801671c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016720:	eb08 0a07 	add.w	sl, r8, r7
 8016724:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016728:	fb07 b70e 	mla	r7, r7, lr, fp
 801672c:	b2bf      	uxth	r7, r7
 801672e:	f107 0b01 	add.w	fp, r7, #1
 8016732:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016736:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801673a:	fb1b fb05 	smulbb	fp, fp, r5
 801673e:	123f      	asrs	r7, r7, #8
 8016740:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016744:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016748:	fb07 b70e 	mla	r7, r7, lr, fp
 801674c:	b2bf      	uxth	r7, r7
 801674e:	f107 0b01 	add.w	fp, r7, #1
 8016752:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016756:	123f      	asrs	r7, r7, #8
 8016758:	f806 7c05 	strb.w	r7, [r6, #-5]
 801675c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016760:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016764:	fb1a fa05 	smulbb	sl, sl, r5
 8016768:	fb07 a70e 	mla	r7, r7, lr, sl
 801676c:	b2bf      	uxth	r7, r7
 801676e:	f107 0a01 	add.w	sl, r7, #1
 8016772:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016776:	123f      	asrs	r7, r7, #8
 8016778:	f806 7c04 	strb.w	r7, [r6, #-4]
 801677c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801677e:	4438      	add	r0, r7
 8016780:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016782:	443a      	add	r2, r7
 8016784:	e7b8      	b.n	80166f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016786:	2700      	movs	r7, #0
 8016788:	1bde      	subs	r6, r3, r7
 801678a:	2e00      	cmp	r6, #0
 801678c:	dc3f      	bgt.n	801680e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801678e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016796:	441c      	add	r4, r3
 8016798:	2900      	cmp	r1, #0
 801679a:	f340 808d 	ble.w	80168b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801679e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80167a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80167a8:	3901      	subs	r1, #1
 80167aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80167ae:	eef0 6a62 	vmov.f32	s13, s5
 80167b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80167b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80167ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80167be:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80167c2:	eef0 6a43 	vmov.f32	s13, s6
 80167c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80167ca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80167ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80167d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80167d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80167da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80167de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80167e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80167e6:	ee12 2a90 	vmov	r2, s5
 80167ea:	eef0 2a47 	vmov.f32	s5, s14
 80167ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80167f2:	ee13 2a10 	vmov	r2, s6
 80167f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80167f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167fa:	eeb0 3a67 	vmov.f32	s6, s15
 80167fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8016802:	9a01      	ldr	r2, [sp, #4]
 8016804:	9310      	str	r3, [sp, #64]	; 0x40
 8016806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016808:	bf08      	it	eq
 801680a:	4613      	moveq	r3, r2
 801680c:	e741      	b.n	8016692 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801680e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016812:	d44b      	bmi.n	80168ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016814:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016818:	45cb      	cmp	fp, r9
 801681a:	dd47      	ble.n	80168ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801681c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016820:	d444      	bmi.n	80168ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016822:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016826:	4556      	cmp	r6, sl
 8016828:	dd40      	ble.n	80168ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801682a:	fa0f f68b 	sxth.w	r6, fp
 801682e:	fb0a 9906 	mla	r9, sl, r6, r9
 8016832:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016836:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801683a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801683e:	fb1b fb05 	smulbb	fp, fp, r5
 8016842:	eb08 0a09 	add.w	sl, r8, r9
 8016846:	f818 9009 	ldrb.w	r9, [r8, r9]
 801684a:	fb09 b90e 	mla	r9, r9, lr, fp
 801684e:	fa1f f989 	uxth.w	r9, r9
 8016852:	f109 0b01 	add.w	fp, r9, #1
 8016856:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801685a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801685e:	f804 9006 	strb.w	r9, [r4, r6]
 8016862:	4426      	add	r6, r4
 8016864:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016868:	f896 b001 	ldrb.w	fp, [r6, #1]
 801686c:	fb1b fb05 	smulbb	fp, fp, r5
 8016870:	fb09 b90e 	mla	r9, r9, lr, fp
 8016874:	fa1f f989 	uxth.w	r9, r9
 8016878:	f109 0b01 	add.w	fp, r9, #1
 801687c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016880:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016884:	f886 9001 	strb.w	r9, [r6, #1]
 8016888:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801688c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016890:	fb1a fa05 	smulbb	sl, sl, r5
 8016894:	fb09 a90e 	mla	r9, r9, lr, sl
 8016898:	fa1f f989 	uxth.w	r9, r9
 801689c:	f109 0a01 	add.w	sl, r9, #1
 80168a0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80168a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80168a8:	f886 9002 	strb.w	r9, [r6, #2]
 80168ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80168ae:	3701      	adds	r7, #1
 80168b0:	4430      	add	r0, r6
 80168b2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80168b4:	4432      	add	r2, r6
 80168b6:	e767      	b.n	8016788 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80168b8:	b003      	add	sp, #12
 80168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80168be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80168c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80168c8:	9201      	str	r2, [sp, #4]
 80168ca:	6868      	ldr	r0, [r5, #4]
 80168cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80168ce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80168d2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80168d6:	fb00 2404 	mla	r4, r0, r4, r2
 80168da:	682a      	ldr	r2, [r5, #0]
 80168dc:	f8d7 8000 	ldr.w	r8, [r7]
 80168e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80168e4:	4414      	add	r4, r2
 80168e6:	2900      	cmp	r1, #0
 80168e8:	dc03      	bgt.n	80168f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80168ea:	9a01      	ldr	r2, [sp, #4]
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	f340 80af 	ble.w	8016a50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80168f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168f4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80168f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80168fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80168fe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016902:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016906:	2b00      	cmp	r3, #0
 8016908:	dd0c      	ble.n	8016924 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801690a:	1405      	asrs	r5, r0, #16
 801690c:	d405      	bmi.n	801691a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801690e:	4555      	cmp	r5, sl
 8016910:	da03      	bge.n	801691a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016912:	1415      	asrs	r5, r2, #16
 8016914:	d401      	bmi.n	801691a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016916:	454d      	cmp	r5, r9
 8016918:	db05      	blt.n	8016926 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801691a:	4470      	add	r0, lr
 801691c:	4462      	add	r2, ip
 801691e:	3b01      	subs	r3, #1
 8016920:	3403      	adds	r4, #3
 8016922:	e7f0      	b.n	8016906 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016924:	d038      	beq.n	8016998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016926:	1e5d      	subs	r5, r3, #1
 8016928:	fb0e 0605 	mla	r6, lr, r5, r0
 801692c:	1436      	asrs	r6, r6, #16
 801692e:	d42a      	bmi.n	8016986 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016930:	4556      	cmp	r6, sl
 8016932:	da28      	bge.n	8016986 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016934:	fb0c 2505 	mla	r5, ip, r5, r2
 8016938:	142d      	asrs	r5, r5, #16
 801693a:	d424      	bmi.n	8016986 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801693c:	454d      	cmp	r5, r9
 801693e:	da22      	bge.n	8016986 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016940:	1ce6      	adds	r6, r4, #3
 8016942:	4699      	mov	r9, r3
 8016944:	f1b9 0f00 	cmp.w	r9, #0
 8016948:	f106 0603 	add.w	r6, r6, #3
 801694c:	dd1f      	ble.n	801698e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801694e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016952:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016956:	1415      	asrs	r5, r2, #16
 8016958:	4470      	add	r0, lr
 801695a:	4462      	add	r2, ip
 801695c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016960:	fb0b a505 	mla	r5, fp, r5, sl
 8016964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016968:	eb08 0a05 	add.w	sl, r8, r5
 801696c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016970:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016974:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016978:	f806 5c05 	strb.w	r5, [r6, #-5]
 801697c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016980:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016984:	e7de      	b.n	8016944 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016986:	2600      	movs	r6, #0
 8016988:	1b9d      	subs	r5, r3, r6
 801698a:	2d00      	cmp	r5, #0
 801698c:	dc38      	bgt.n	8016a00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801698e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016992:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016996:	441c      	add	r4, r3
 8016998:	2900      	cmp	r1, #0
 801699a:	dd59      	ble.n	8016a50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801699c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80169a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80169a6:	3901      	subs	r1, #1
 80169a8:	eeb0 6a62 	vmov.f32	s12, s5
 80169ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80169b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80169b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80169b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80169bc:	eeb0 6a43 	vmov.f32	s12, s6
 80169c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80169c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80169c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80169cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80169d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80169d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80169d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80169dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80169e0:	ee12 2a90 	vmov	r2, s5
 80169e4:	eef0 2a47 	vmov.f32	s5, s14
 80169e8:	fb92 fef3 	sdiv	lr, r2, r3
 80169ec:	ee13 2a10 	vmov	r2, s6
 80169f0:	eeb0 3a67 	vmov.f32	s6, s15
 80169f4:	fb92 fcf3 	sdiv	ip, r2, r3
 80169f8:	9a01      	ldr	r2, [sp, #4]
 80169fa:	bf08      	it	eq
 80169fc:	4613      	moveq	r3, r2
 80169fe:	e772      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016a00:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016a04:	d420      	bmi.n	8016a48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016a06:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016a0a:	45cb      	cmp	fp, r9
 8016a0c:	dd1c      	ble.n	8016a48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016a0e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016a12:	d419      	bmi.n	8016a48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016a14:	68fd      	ldr	r5, [r7, #12]
 8016a16:	4555      	cmp	r5, sl
 8016a18:	dd16      	ble.n	8016a48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016a1a:	fa0f f58b 	sxth.w	r5, fp
 8016a1e:	fb0a 9505 	mla	r5, sl, r5, r9
 8016a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a26:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016a2a:	eb08 0b05 	add.w	fp, r8, r5
 8016a2e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016a32:	f804 9005 	strb.w	r9, [r4, r5]
 8016a36:	4425      	add	r5, r4
 8016a38:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016a3c:	f885 9001 	strb.w	r9, [r5, #1]
 8016a40:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016a44:	f885 9002 	strb.w	r9, [r5, #2]
 8016a48:	4470      	add	r0, lr
 8016a4a:	4462      	add	r2, ip
 8016a4c:	3601      	adds	r6, #1
 8016a4e:	e79b      	b.n	8016988 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016a50:	b003      	add	sp, #12
 8016a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016a62:	9202      	str	r2, [sp, #8]
 8016a64:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016a68:	6860      	ldr	r0, [r4, #4]
 8016a6a:	9203      	str	r2, [sp, #12]
 8016a6c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016a70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016a74:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016a78:	fb00 2505 	mla	r5, r0, r5, r2
 8016a7c:	6822      	ldr	r2, [r4, #0]
 8016a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a82:	4415      	add	r5, r2
 8016a84:	f8dc 2000 	ldr.w	r2, [ip]
 8016a88:	9201      	str	r2, [sp, #4]
 8016a8a:	2900      	cmp	r1, #0
 8016a8c:	dc03      	bgt.n	8016a96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016a8e:	9a02      	ldr	r2, [sp, #8]
 8016a90:	2a00      	cmp	r2, #0
 8016a92:	f340 8122 	ble.w	8016cda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016a96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a98:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016a9c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016aa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016aa2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016aa6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	dd0d      	ble.n	8016aca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016aae:	1422      	asrs	r2, r4, #16
 8016ab0:	d405      	bmi.n	8016abe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016ab2:	4542      	cmp	r2, r8
 8016ab4:	da03      	bge.n	8016abe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016ab6:	1402      	asrs	r2, r0, #16
 8016ab8:	d401      	bmi.n	8016abe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016aba:	42ba      	cmp	r2, r7
 8016abc:	db06      	blt.n	8016acc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ac0:	4474      	add	r4, lr
 8016ac2:	3b01      	subs	r3, #1
 8016ac4:	3503      	adds	r5, #3
 8016ac6:	4410      	add	r0, r2
 8016ac8:	e7ef      	b.n	8016aaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016aca:	d072      	beq.n	8016bb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016acc:	1e5a      	subs	r2, r3, #1
 8016ace:	fb0e 4602 	mla	r6, lr, r2, r4
 8016ad2:	1436      	asrs	r6, r6, #16
 8016ad4:	d462      	bmi.n	8016b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016ad6:	4546      	cmp	r6, r8
 8016ad8:	da60      	bge.n	8016b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016ada:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016adc:	fb06 0202 	mla	r2, r6, r2, r0
 8016ae0:	1412      	asrs	r2, r2, #16
 8016ae2:	d45b      	bmi.n	8016b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016ae4:	42ba      	cmp	r2, r7
 8016ae6:	da59      	bge.n	8016b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016ae8:	1cef      	adds	r7, r5, #3
 8016aea:	4699      	mov	r9, r3
 8016aec:	f1b9 0f00 	cmp.w	r9, #0
 8016af0:	dd5a      	ble.n	8016ba8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016af2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016af6:	1426      	asrs	r6, r4, #16
 8016af8:	1402      	asrs	r2, r0, #16
 8016afa:	fb08 6202 	mla	r2, r8, r2, r6
 8016afe:	9e01      	ldr	r6, [sp, #4]
 8016b00:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016b04:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016b08:	d041      	beq.n	8016b8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016b0a:	9a03      	ldr	r2, [sp, #12]
 8016b0c:	fa5f fb86 	uxtb.w	fp, r6
 8016b10:	fb02 f808 	mul.w	r8, r2, r8
 8016b14:	f108 0201 	add.w	r2, r8, #1
 8016b18:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016b1c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016b20:	1212      	asrs	r2, r2, #8
 8016b22:	fa1f fa82 	uxth.w	sl, r2
 8016b26:	43d2      	mvns	r2, r2
 8016b28:	fb1b fb0a 	smulbb	fp, fp, sl
 8016b2c:	b2d2      	uxtb	r2, r2
 8016b2e:	fb08 b802 	mla	r8, r8, r2, fp
 8016b32:	fa1f f888 	uxth.w	r8, r8
 8016b36:	f108 0b01 	add.w	fp, r8, #1
 8016b3a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016b3e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016b42:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016b46:	fb1b fb0a 	smulbb	fp, fp, sl
 8016b4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016b4e:	fb16 fa0a 	smulbb	sl, r6, sl
 8016b52:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016b56:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016b5a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016b5e:	fb06 aa02 	mla	sl, r6, r2, sl
 8016b62:	fb08 b802 	mla	r8, r8, r2, fp
 8016b66:	fa1f fa8a 	uxth.w	sl, sl
 8016b6a:	fa1f f888 	uxth.w	r8, r8
 8016b6e:	f10a 0601 	add.w	r6, sl, #1
 8016b72:	f108 0b01 	add.w	fp, r8, #1
 8016b76:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016b7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016b7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016b82:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016b86:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016b8a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b90:	4474      	add	r4, lr
 8016b92:	3703      	adds	r7, #3
 8016b94:	f109 39ff 	add.w	r9, r9, #4294967295
 8016b98:	4410      	add	r0, r2
 8016b9a:	e7a7      	b.n	8016aec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016b9c:	f04f 0800 	mov.w	r8, #0
 8016ba0:	eba3 0208 	sub.w	r2, r3, r8
 8016ba4:	2a00      	cmp	r2, #0
 8016ba6:	dc3b      	bgt.n	8016c20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016ba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016bac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016bb0:	441d      	add	r5, r3
 8016bb2:	2900      	cmp	r1, #0
 8016bb4:	f340 8091 	ble.w	8016cda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016bb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016bc2:	3901      	subs	r1, #1
 8016bc4:	eeb0 6a62 	vmov.f32	s12, s5
 8016bc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016bcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016bd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016bd4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016bd8:	eeb0 6a43 	vmov.f32	s12, s6
 8016bdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016be0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016be4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016be8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016bec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016bf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016bf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016bf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016bfc:	ee12 2a90 	vmov	r2, s5
 8016c00:	eef0 2a47 	vmov.f32	s5, s14
 8016c04:	fb92 fef3 	sdiv	lr, r2, r3
 8016c08:	ee13 2a10 	vmov	r2, s6
 8016c0c:	eeb0 3a67 	vmov.f32	s6, s15
 8016c10:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c14:	9a02      	ldr	r2, [sp, #8]
 8016c16:	9312      	str	r3, [sp, #72]	; 0x48
 8016c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c1a:	bf08      	it	eq
 8016c1c:	4613      	moveq	r3, r2
 8016c1e:	e734      	b.n	8016a8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016c20:	1427      	asrs	r7, r4, #16
 8016c22:	d454      	bmi.n	8016cce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016c24:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016c28:	42be      	cmp	r6, r7
 8016c2a:	dd50      	ble.n	8016cce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016c2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016c30:	d44d      	bmi.n	8016cce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016c32:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016c36:	454a      	cmp	r2, r9
 8016c38:	dd49      	ble.n	8016cce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016c3a:	b236      	sxth	r6, r6
 8016c3c:	9a01      	ldr	r2, [sp, #4]
 8016c3e:	fb09 7606 	mla	r6, r9, r6, r7
 8016c42:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016c46:	0e3a      	lsrs	r2, r7, #24
 8016c48:	d041      	beq.n	8016cce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016c4a:	9e03      	ldr	r6, [sp, #12]
 8016c4c:	fa5f fb87 	uxtb.w	fp, r7
 8016c50:	4372      	muls	r2, r6
 8016c52:	1c56      	adds	r6, r2, #1
 8016c54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016c58:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016c5c:	1212      	asrs	r2, r2, #8
 8016c5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016c62:	fa1f fa82 	uxth.w	sl, r2
 8016c66:	43d2      	mvns	r2, r2
 8016c68:	fb1b fb0a 	smulbb	fp, fp, sl
 8016c6c:	b2d2      	uxtb	r2, r2
 8016c6e:	fb09 b902 	mla	r9, r9, r2, fp
 8016c72:	fa1f f989 	uxth.w	r9, r9
 8016c76:	f109 0b01 	add.w	fp, r9, #1
 8016c7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016c7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016c82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016c86:	fb1b fb0a 	smulbb	fp, fp, sl
 8016c8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c8e:	fb17 fa0a 	smulbb	sl, r7, sl
 8016c92:	f805 9006 	strb.w	r9, [r5, r6]
 8016c96:	442e      	add	r6, r5
 8016c98:	78b7      	ldrb	r7, [r6, #2]
 8016c9a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016c9e:	fb07 aa02 	mla	sl, r7, r2, sl
 8016ca2:	fb09 b902 	mla	r9, r9, r2, fp
 8016ca6:	fa1f fa8a 	uxth.w	sl, sl
 8016caa:	fa1f f989 	uxth.w	r9, r9
 8016cae:	f10a 0701 	add.w	r7, sl, #1
 8016cb2:	f109 0b01 	add.w	fp, r9, #1
 8016cb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016cba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016cbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016cc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016cc6:	f886 a002 	strb.w	sl, [r6, #2]
 8016cca:	f886 9001 	strb.w	r9, [r6, #1]
 8016cce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cd0:	4474      	add	r4, lr
 8016cd2:	f108 0801 	add.w	r8, r8, #1
 8016cd6:	4410      	add	r0, r2
 8016cd8:	e762      	b.n	8016ba0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016cda:	b005      	add	sp, #20
 8016cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ce0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016cea:	9201      	str	r2, [sp, #4]
 8016cec:	6860      	ldr	r0, [r4, #4]
 8016cee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016cf2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8016cf6:	fb00 2505 	mla	r5, r0, r5, r2
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d00:	4415      	add	r5, r2
 8016d02:	f8dc 2000 	ldr.w	r2, [ip]
 8016d06:	9200      	str	r2, [sp, #0]
 8016d08:	2900      	cmp	r1, #0
 8016d0a:	dc03      	bgt.n	8016d14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016d0c:	9a01      	ldr	r2, [sp, #4]
 8016d0e:	2a00      	cmp	r2, #0
 8016d10:	f340 812b 	ble.w	8016f6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d16:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016d1a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d20:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016d24:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	dd0e      	ble.n	8016d4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016d2c:	1422      	asrs	r2, r4, #16
 8016d2e:	d405      	bmi.n	8016d3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016d30:	4572      	cmp	r2, lr
 8016d32:	da03      	bge.n	8016d3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016d34:	1402      	asrs	r2, r0, #16
 8016d36:	d401      	bmi.n	8016d3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016d38:	42ba      	cmp	r2, r7
 8016d3a:	db07      	blt.n	8016d4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d3e:	3b01      	subs	r3, #1
 8016d40:	3503      	adds	r5, #3
 8016d42:	4414      	add	r4, r2
 8016d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d46:	4410      	add	r0, r2
 8016d48:	e7ee      	b.n	8016d28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016d4a:	d06f      	beq.n	8016e2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016d4c:	1e5a      	subs	r2, r3, #1
 8016d4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016d50:	fb06 4602 	mla	r6, r6, r2, r4
 8016d54:	1436      	asrs	r6, r6, #16
 8016d56:	d45e      	bmi.n	8016e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016d58:	4576      	cmp	r6, lr
 8016d5a:	da5c      	bge.n	8016e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016d5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016d5e:	fb06 0202 	mla	r2, r6, r2, r0
 8016d62:	1412      	asrs	r2, r2, #16
 8016d64:	d457      	bmi.n	8016e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016d66:	42ba      	cmp	r2, r7
 8016d68:	da55      	bge.n	8016e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016d6a:	1cee      	adds	r6, r5, #3
 8016d6c:	469a      	mov	sl, r3
 8016d6e:	f1ba 0f00 	cmp.w	sl, #0
 8016d72:	dd56      	ble.n	8016e22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016d74:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016d78:	1427      	asrs	r7, r4, #16
 8016d7a:	1402      	asrs	r2, r0, #16
 8016d7c:	fb0e 7202 	mla	r2, lr, r2, r7
 8016d80:	9f00      	ldr	r7, [sp, #0]
 8016d82:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016d86:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016d8a:	d03c      	beq.n	8016e06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016d8c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016d90:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016d94:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016d98:	fa5f f28e 	uxtb.w	r2, lr
 8016d9c:	b2ff      	uxtb	r7, r7
 8016d9e:	f000 80dd 	beq.w	8016f5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016da2:	fa1f f882 	uxth.w	r8, r2
 8016da6:	43d2      	mvns	r2, r2
 8016da8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016dac:	fb17 f708 	smulbb	r7, r7, r8
 8016db0:	b2d2      	uxtb	r2, r2
 8016db2:	fb19 f908 	smulbb	r9, r9, r8
 8016db6:	fb0e 7702 	mla	r7, lr, r2, r7
 8016dba:	fb1b f808 	smulbb	r8, fp, r8
 8016dbe:	b2bf      	uxth	r7, r7
 8016dc0:	f107 0e01 	add.w	lr, r7, #1
 8016dc4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016dc8:	123f      	asrs	r7, r7, #8
 8016dca:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016dce:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016dd2:	fb07 9902 	mla	r9, r7, r2, r9
 8016dd6:	fa1f f989 	uxth.w	r9, r9
 8016dda:	f109 0701 	add.w	r7, r9, #1
 8016dde:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016de2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016de6:	fb07 8802 	mla	r8, r7, r2, r8
 8016dea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016dee:	fa1f f888 	uxth.w	r8, r8
 8016df2:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016df6:	f108 0201 	add.w	r2, r8, #1
 8016dfa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016dfe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016e02:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e08:	3603      	adds	r6, #3
 8016e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e0e:	4414      	add	r4, r2
 8016e10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e12:	4410      	add	r0, r2
 8016e14:	e7ab      	b.n	8016d6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016e16:	f04f 0e00 	mov.w	lr, #0
 8016e1a:	eba3 020e 	sub.w	r2, r3, lr
 8016e1e:	2a00      	cmp	r2, #0
 8016e20:	dc3d      	bgt.n	8016e9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016e22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e2a:	441d      	add	r5, r3
 8016e2c:	2900      	cmp	r1, #0
 8016e2e:	f340 809c 	ble.w	8016f6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016e32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e3c:	3901      	subs	r1, #1
 8016e3e:	eeb0 6a62 	vmov.f32	s12, s5
 8016e42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016e46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e4e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016e52:	eeb0 6a43 	vmov.f32	s12, s6
 8016e56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e5a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016e5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e76:	ee12 2a90 	vmov	r2, s5
 8016e7a:	eef0 2a47 	vmov.f32	s5, s14
 8016e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e82:	ee13 2a10 	vmov	r2, s6
 8016e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e8a:	eeb0 3a67 	vmov.f32	s6, s15
 8016e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e92:	9a01      	ldr	r2, [sp, #4]
 8016e94:	9310      	str	r3, [sp, #64]	; 0x40
 8016e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e98:	bf08      	it	eq
 8016e9a:	4613      	moveq	r3, r2
 8016e9c:	e734      	b.n	8016d08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016e9e:	1427      	asrs	r7, r4, #16
 8016ea0:	d44d      	bmi.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016ea2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016ea6:	42be      	cmp	r6, r7
 8016ea8:	dd49      	ble.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016eaa:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016eae:	d446      	bmi.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016eb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016eb4:	4542      	cmp	r2, r8
 8016eb6:	dd42      	ble.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016eb8:	b236      	sxth	r6, r6
 8016eba:	9a00      	ldr	r2, [sp, #0]
 8016ebc:	fb08 7606 	mla	r6, r8, r6, r7
 8016ec0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016ec4:	0e3a      	lsrs	r2, r7, #24
 8016ec6:	d03a      	beq.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016ec8:	2aff      	cmp	r2, #255	; 0xff
 8016eca:	b2d6      	uxtb	r6, r2
 8016ecc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016ed0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016ed4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016ed8:	b2ff      	uxtb	r7, r7
 8016eda:	d037      	beq.n	8016f4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016edc:	fa1f f986 	uxth.w	r9, r6
 8016ee0:	4472      	add	r2, lr
 8016ee2:	43f6      	mvns	r6, r6
 8016ee4:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016ee8:	fb17 f709 	smulbb	r7, r7, r9
 8016eec:	fb1a fa09 	smulbb	sl, sl, r9
 8016ef0:	b2f6      	uxtb	r6, r6
 8016ef2:	fb1b f909 	smulbb	r9, fp, r9
 8016ef6:	fb08 7706 	mla	r7, r8, r6, r7
 8016efa:	b2bf      	uxth	r7, r7
 8016efc:	f107 0801 	add.w	r8, r7, #1
 8016f00:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016f04:	123f      	asrs	r7, r7, #8
 8016f06:	54af      	strb	r7, [r5, r2]
 8016f08:	442a      	add	r2, r5
 8016f0a:	7857      	ldrb	r7, [r2, #1]
 8016f0c:	fb07 aa06 	mla	sl, r7, r6, sl
 8016f10:	fa1f fa8a 	uxth.w	sl, sl
 8016f14:	f10a 0701 	add.w	r7, sl, #1
 8016f18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016f1c:	7897      	ldrb	r7, [r2, #2]
 8016f1e:	fb07 9906 	mla	r9, r7, r6, r9
 8016f22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f26:	fa1f f989 	uxth.w	r9, r9
 8016f2a:	f882 a001 	strb.w	sl, [r2, #1]
 8016f2e:	f109 0601 	add.w	r6, r9, #1
 8016f32:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016f36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f3a:	f882 9002 	strb.w	r9, [r2, #2]
 8016f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f40:	f10e 0e01 	add.w	lr, lr, #1
 8016f44:	4414      	add	r4, r2
 8016f46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f48:	4410      	add	r0, r2
 8016f4a:	e766      	b.n	8016e1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016f4c:	4472      	add	r2, lr
 8016f4e:	54af      	strb	r7, [r5, r2]
 8016f50:	442a      	add	r2, r5
 8016f52:	f882 a001 	strb.w	sl, [r2, #1]
 8016f56:	f882 b002 	strb.w	fp, [r2, #2]
 8016f5a:	e7f0      	b.n	8016f3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016f5c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016f60:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016f64:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016f68:	e74d      	b.n	8016e06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016f6a:	b003      	add	sp, #12
 8016f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f74:	b087      	sub	sp, #28
 8016f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f7a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016f7c:	9204      	str	r2, [sp, #16]
 8016f7e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016f82:	6860      	ldr	r0, [r4, #4]
 8016f84:	9205      	str	r2, [sp, #20]
 8016f86:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016f8a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8016f8e:	9101      	str	r1, [sp, #4]
 8016f90:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016f94:	fb00 2505 	mla	r5, r0, r5, r2
 8016f98:	6822      	ldr	r2, [r4, #0]
 8016f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f9e:	4415      	add	r5, r2
 8016fa0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016fa4:	3201      	adds	r2, #1
 8016fa6:	f022 0201 	bic.w	r2, r2, #1
 8016faa:	9202      	str	r2, [sp, #8]
 8016fac:	f8dc 2000 	ldr.w	r2, [ip]
 8016fb0:	9203      	str	r2, [sp, #12]
 8016fb2:	9a01      	ldr	r2, [sp, #4]
 8016fb4:	2a00      	cmp	r2, #0
 8016fb6:	dc03      	bgt.n	8016fc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016fb8:	9a04      	ldr	r2, [sp, #16]
 8016fba:	2a00      	cmp	r2, #0
 8016fbc:	f340 8135 	ble.w	801722a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016fc2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016fc6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016fca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fcc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016fd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	dd0d      	ble.n	8016ff4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016fd8:	1422      	asrs	r2, r4, #16
 8016fda:	d405      	bmi.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016fdc:	4542      	cmp	r2, r8
 8016fde:	da03      	bge.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016fe0:	1402      	asrs	r2, r0, #16
 8016fe2:	d401      	bmi.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016fe4:	42ba      	cmp	r2, r7
 8016fe6:	db06      	blt.n	8016ff6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016fe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016fea:	4474      	add	r4, lr
 8016fec:	3b01      	subs	r3, #1
 8016fee:	3503      	adds	r5, #3
 8016ff0:	4410      	add	r0, r2
 8016ff2:	e7ef      	b.n	8016fd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016ff4:	d077      	beq.n	80170e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016ff6:	1e5a      	subs	r2, r3, #1
 8016ff8:	fb0e 4602 	mla	r6, lr, r2, r4
 8016ffc:	1436      	asrs	r6, r6, #16
 8016ffe:	d469      	bmi.n	80170d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017000:	4546      	cmp	r6, r8
 8017002:	da67      	bge.n	80170d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017004:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017006:	fb06 0202 	mla	r2, r6, r2, r0
 801700a:	1412      	asrs	r2, r2, #16
 801700c:	d462      	bmi.n	80170d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801700e:	42ba      	cmp	r2, r7
 8017010:	da60      	bge.n	80170d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017012:	1cee      	adds	r6, r5, #3
 8017014:	4699      	mov	r9, r3
 8017016:	f1b9 0f00 	cmp.w	r9, #0
 801701a:	dd5f      	ble.n	80170dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801701c:	1422      	asrs	r2, r4, #16
 801701e:	9902      	ldr	r1, [sp, #8]
 8017020:	1407      	asrs	r7, r0, #16
 8017022:	fb01 2707 	mla	r7, r1, r7, r2
 8017026:	9903      	ldr	r1, [sp, #12]
 8017028:	087a      	lsrs	r2, r7, #1
 801702a:	5c8a      	ldrb	r2, [r1, r2]
 801702c:	07f9      	lsls	r1, r7, #31
 801702e:	bf54      	ite	pl
 8017030:	f002 020f 	andpl.w	r2, r2, #15
 8017034:	1112      	asrmi	r2, r2, #4
 8017036:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801703a:	b2d2      	uxtb	r2, r2
 801703c:	2a00      	cmp	r2, #0
 801703e:	d042      	beq.n	80170c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017040:	497b      	ldr	r1, [pc, #492]	; (8017230 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017042:	680f      	ldr	r7, [r1, #0]
 8017044:	9905      	ldr	r1, [sp, #20]
 8017046:	fa5f fb87 	uxtb.w	fp, r7
 801704a:	434a      	muls	r2, r1
 801704c:	f102 0801 	add.w	r8, r2, #1
 8017050:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8017054:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8017058:	1212      	asrs	r2, r2, #8
 801705a:	fa1f fa82 	uxth.w	sl, r2
 801705e:	43d2      	mvns	r2, r2
 8017060:	fb1b fb0a 	smulbb	fp, fp, sl
 8017064:	b2d2      	uxtb	r2, r2
 8017066:	fb08 b802 	mla	r8, r8, r2, fp
 801706a:	fa1f f888 	uxth.w	r8, r8
 801706e:	f108 0b01 	add.w	fp, r8, #1
 8017072:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017076:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801707a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801707e:	fb1b fb0a 	smulbb	fp, fp, sl
 8017082:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017086:	fb17 fa0a 	smulbb	sl, r7, sl
 801708a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801708e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8017092:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8017096:	fb07 aa02 	mla	sl, r7, r2, sl
 801709a:	fb08 b802 	mla	r8, r8, r2, fp
 801709e:	fa1f fa8a 	uxth.w	sl, sl
 80170a2:	fa1f f888 	uxth.w	r8, r8
 80170a6:	f10a 0701 	add.w	r7, sl, #1
 80170aa:	f108 0b01 	add.w	fp, r8, #1
 80170ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80170b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80170b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80170ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80170be:	f806 ac01 	strb.w	sl, [r6, #-1]
 80170c2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80170c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170c8:	4474      	add	r4, lr
 80170ca:	3603      	adds	r6, #3
 80170cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80170d0:	4410      	add	r0, r2
 80170d2:	e7a0      	b.n	8017016 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80170d4:	2700      	movs	r7, #0
 80170d6:	1bda      	subs	r2, r3, r7
 80170d8:	2a00      	cmp	r2, #0
 80170da:	dc3e      	bgt.n	801715a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80170dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80170e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80170e4:	441d      	add	r5, r3
 80170e6:	9b01      	ldr	r3, [sp, #4]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	f340 809e 	ble.w	801722a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80170ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80170f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170f8:	eeb0 6a62 	vmov.f32	s12, s5
 80170fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017100:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017104:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017108:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801710c:	eeb0 6a43 	vmov.f32	s12, s6
 8017110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017114:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017118:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801711c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017120:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017124:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017128:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801712c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017130:	ee12 2a90 	vmov	r2, s5
 8017134:	eef0 2a47 	vmov.f32	s5, s14
 8017138:	fb92 fef3 	sdiv	lr, r2, r3
 801713c:	ee13 2a10 	vmov	r2, s6
 8017140:	eeb0 3a67 	vmov.f32	s6, s15
 8017144:	fb92 f3f3 	sdiv	r3, r2, r3
 8017148:	9314      	str	r3, [sp, #80]	; 0x50
 801714a:	9b01      	ldr	r3, [sp, #4]
 801714c:	9a04      	ldr	r2, [sp, #16]
 801714e:	3b01      	subs	r3, #1
 8017150:	9301      	str	r3, [sp, #4]
 8017152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017154:	bf08      	it	eq
 8017156:	4613      	moveq	r3, r2
 8017158:	e72b      	b.n	8016fb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801715a:	1426      	asrs	r6, r4, #16
 801715c:	d460      	bmi.n	8017220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801715e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017162:	42b2      	cmp	r2, r6
 8017164:	dd5c      	ble.n	8017220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017166:	ea5f 4820 	movs.w	r8, r0, asr #16
 801716a:	d459      	bmi.n	8017220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801716c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017170:	4542      	cmp	r2, r8
 8017172:	dd55      	ble.n	8017220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017174:	9a02      	ldr	r2, [sp, #8]
 8017176:	9903      	ldr	r1, [sp, #12]
 8017178:	fb08 6602 	mla	r6, r8, r2, r6
 801717c:	0872      	lsrs	r2, r6, #1
 801717e:	07f6      	lsls	r6, r6, #31
 8017180:	5c8a      	ldrb	r2, [r1, r2]
 8017182:	bf54      	ite	pl
 8017184:	f002 020f 	andpl.w	r2, r2, #15
 8017188:	1112      	asrmi	r2, r2, #4
 801718a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801718e:	b2d2      	uxtb	r2, r2
 8017190:	2a00      	cmp	r2, #0
 8017192:	d045      	beq.n	8017220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017194:	4926      	ldr	r1, [pc, #152]	; (8017230 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017196:	f8d1 8000 	ldr.w	r8, [r1]
 801719a:	9905      	ldr	r1, [sp, #20]
 801719c:	fa5f fb88 	uxtb.w	fp, r8
 80171a0:	434a      	muls	r2, r1
 80171a2:	1c56      	adds	r6, r2, #1
 80171a4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80171a8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80171ac:	1212      	asrs	r2, r2, #8
 80171ae:	f815 9006 	ldrb.w	r9, [r5, r6]
 80171b2:	fa1f fa82 	uxth.w	sl, r2
 80171b6:	43d2      	mvns	r2, r2
 80171b8:	fb1b fb0a 	smulbb	fp, fp, sl
 80171bc:	b2d2      	uxtb	r2, r2
 80171be:	fb09 b902 	mla	r9, r9, r2, fp
 80171c2:	fa1f f989 	uxth.w	r9, r9
 80171c6:	f109 0b01 	add.w	fp, r9, #1
 80171ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80171ce:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80171d2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80171d6:	fb1b fb0a 	smulbb	fp, fp, sl
 80171da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171de:	fb18 fa0a 	smulbb	sl, r8, sl
 80171e2:	f805 9006 	strb.w	r9, [r5, r6]
 80171e6:	442e      	add	r6, r5
 80171e8:	f896 8002 	ldrb.w	r8, [r6, #2]
 80171ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 80171f0:	fb08 aa02 	mla	sl, r8, r2, sl
 80171f4:	fb09 b902 	mla	r9, r9, r2, fp
 80171f8:	fa1f fa8a 	uxth.w	sl, sl
 80171fc:	fa1f f989 	uxth.w	r9, r9
 8017200:	f10a 0801 	add.w	r8, sl, #1
 8017204:	f109 0b01 	add.w	fp, r9, #1
 8017208:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801720c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017210:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017214:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017218:	f886 a002 	strb.w	sl, [r6, #2]
 801721c:	f886 9001 	strb.w	r9, [r6, #1]
 8017220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017222:	4474      	add	r4, lr
 8017224:	3701      	adds	r7, #1
 8017226:	4410      	add	r0, r2
 8017228:	e755      	b.n	80170d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801722a:	b007      	add	sp, #28
 801722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017230:	2400ea18 	.word	0x2400ea18

08017234 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017238:	b085      	sub	sp, #20
 801723a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801723e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017240:	9203      	str	r2, [sp, #12]
 8017242:	6860      	ldr	r0, [r4, #4]
 8017244:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8017248:	9100      	str	r1, [sp, #0]
 801724a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801724e:	fb00 2606 	mla	r6, r0, r6, r2
 8017252:	6822      	ldr	r2, [r4, #0]
 8017254:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017258:	4416      	add	r6, r2
 801725a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801725e:	3201      	adds	r2, #1
 8017260:	f022 0201 	bic.w	r2, r2, #1
 8017264:	9201      	str	r2, [sp, #4]
 8017266:	f8dc 2000 	ldr.w	r2, [ip]
 801726a:	9202      	str	r2, [sp, #8]
 801726c:	9a00      	ldr	r2, [sp, #0]
 801726e:	2a00      	cmp	r2, #0
 8017270:	dc03      	bgt.n	801727a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017272:	9a03      	ldr	r2, [sp, #12]
 8017274:	2a00      	cmp	r2, #0
 8017276:	f340 8140 	ble.w	80174fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801727a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801727c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017280:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8017284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017286:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801728a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801728e:	2b00      	cmp	r3, #0
 8017290:	dd0e      	ble.n	80172b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017292:	142a      	asrs	r2, r5, #16
 8017294:	d405      	bmi.n	80172a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017296:	4572      	cmp	r2, lr
 8017298:	da03      	bge.n	80172a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801729a:	1422      	asrs	r2, r4, #16
 801729c:	d401      	bmi.n	80172a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801729e:	42ba      	cmp	r2, r7
 80172a0:	db07      	blt.n	80172b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80172a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80172a4:	3b01      	subs	r3, #1
 80172a6:	3603      	adds	r6, #3
 80172a8:	4415      	add	r5, r2
 80172aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172ac:	4414      	add	r4, r2
 80172ae:	e7ee      	b.n	801728e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80172b0:	d072      	beq.n	8017398 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80172b2:	1e5a      	subs	r2, r3, #1
 80172b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80172b6:	fb00 5002 	mla	r0, r0, r2, r5
 80172ba:	1400      	asrs	r0, r0, #16
 80172bc:	d463      	bmi.n	8017386 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80172be:	4570      	cmp	r0, lr
 80172c0:	da61      	bge.n	8017386 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80172c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80172c4:	fb00 4202 	mla	r2, r0, r2, r4
 80172c8:	1412      	asrs	r2, r2, #16
 80172ca:	d45c      	bmi.n	8017386 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80172cc:	42ba      	cmp	r2, r7
 80172ce:	da5a      	bge.n	8017386 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80172d0:	1cf0      	adds	r0, r6, #3
 80172d2:	469a      	mov	sl, r3
 80172d4:	f1ba 0f00 	cmp.w	sl, #0
 80172d8:	dd59      	ble.n	801738e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80172da:	142a      	asrs	r2, r5, #16
 80172dc:	9901      	ldr	r1, [sp, #4]
 80172de:	1427      	asrs	r7, r4, #16
 80172e0:	fb01 2707 	mla	r7, r1, r7, r2
 80172e4:	9902      	ldr	r1, [sp, #8]
 80172e6:	087a      	lsrs	r2, r7, #1
 80172e8:	5c8a      	ldrb	r2, [r1, r2]
 80172ea:	07f9      	lsls	r1, r7, #31
 80172ec:	bf54      	ite	pl
 80172ee:	f002 020f 	andpl.w	r2, r2, #15
 80172f2:	1112      	asrmi	r2, r2, #4
 80172f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80172f8:	b2d2      	uxtb	r2, r2
 80172fa:	2a00      	cmp	r2, #0
 80172fc:	d03b      	beq.n	8017376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80172fe:	4980      	ldr	r1, [pc, #512]	; (8017500 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017300:	2aff      	cmp	r2, #255	; 0xff
 8017302:	680f      	ldr	r7, [r1, #0]
 8017304:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017308:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801730c:	b2ff      	uxtb	r7, r7
 801730e:	f000 80ed 	beq.w	80174ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017312:	fa1f f882 	uxth.w	r8, r2
 8017316:	43d2      	mvns	r2, r2
 8017318:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801731c:	fb17 f708 	smulbb	r7, r7, r8
 8017320:	b2d2      	uxtb	r2, r2
 8017322:	fb19 f908 	smulbb	r9, r9, r8
 8017326:	fb0e 7702 	mla	r7, lr, r2, r7
 801732a:	fb1b f808 	smulbb	r8, fp, r8
 801732e:	b2bf      	uxth	r7, r7
 8017330:	f107 0e01 	add.w	lr, r7, #1
 8017334:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017338:	123f      	asrs	r7, r7, #8
 801733a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801733e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017342:	fb07 9902 	mla	r9, r7, r2, r9
 8017346:	fa1f f989 	uxth.w	r9, r9
 801734a:	f109 0701 	add.w	r7, r9, #1
 801734e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017352:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017356:	fb07 8802 	mla	r8, r7, r2, r8
 801735a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801735e:	fa1f f888 	uxth.w	r8, r8
 8017362:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017366:	f108 0201 	add.w	r2, r8, #1
 801736a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801736e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017372:	f800 8c01 	strb.w	r8, [r0, #-1]
 8017376:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017378:	3003      	adds	r0, #3
 801737a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801737e:	4415      	add	r5, r2
 8017380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017382:	4414      	add	r4, r2
 8017384:	e7a6      	b.n	80172d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017386:	2700      	movs	r7, #0
 8017388:	1bda      	subs	r2, r3, r7
 801738a:	2a00      	cmp	r2, #0
 801738c:	dc40      	bgt.n	8017410 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801738e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017392:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017396:	441e      	add	r6, r3
 8017398:	9b00      	ldr	r3, [sp, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	f340 80ad 	ble.w	80174fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80173a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80173a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80173aa:	eeb0 6a62 	vmov.f32	s12, s5
 80173ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80173b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80173b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80173ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80173be:	eeb0 6a43 	vmov.f32	s12, s6
 80173c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80173c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80173ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80173ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80173d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80173d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80173da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80173de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80173e2:	ee12 2a90 	vmov	r2, s5
 80173e6:	eef0 2a47 	vmov.f32	s5, s14
 80173ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80173ee:	ee13 2a10 	vmov	r2, s6
 80173f2:	9311      	str	r3, [sp, #68]	; 0x44
 80173f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173f6:	eeb0 3a67 	vmov.f32	s6, s15
 80173fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80173fe:	9312      	str	r3, [sp, #72]	; 0x48
 8017400:	9b00      	ldr	r3, [sp, #0]
 8017402:	9a03      	ldr	r2, [sp, #12]
 8017404:	3b01      	subs	r3, #1
 8017406:	9300      	str	r3, [sp, #0]
 8017408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801740a:	bf08      	it	eq
 801740c:	4613      	moveq	r3, r2
 801740e:	e72d      	b.n	801726c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017410:	1428      	asrs	r0, r5, #16
 8017412:	d45c      	bmi.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017414:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017418:	4282      	cmp	r2, r0
 801741a:	dd58      	ble.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801741c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017420:	d455      	bmi.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017422:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017426:	4572      	cmp	r2, lr
 8017428:	dd51      	ble.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801742a:	9a01      	ldr	r2, [sp, #4]
 801742c:	9902      	ldr	r1, [sp, #8]
 801742e:	fb0e 0002 	mla	r0, lr, r2, r0
 8017432:	0842      	lsrs	r2, r0, #1
 8017434:	07c0      	lsls	r0, r0, #31
 8017436:	5c8a      	ldrb	r2, [r1, r2]
 8017438:	bf54      	ite	pl
 801743a:	f002 020f 	andpl.w	r2, r2, #15
 801743e:	1112      	asrmi	r2, r2, #4
 8017440:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017444:	b2d2      	uxtb	r2, r2
 8017446:	2a00      	cmp	r2, #0
 8017448:	d041      	beq.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801744a:	492d      	ldr	r1, [pc, #180]	; (8017500 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801744c:	2aff      	cmp	r2, #255	; 0xff
 801744e:	6808      	ldr	r0, [r1, #0]
 8017450:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017454:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017458:	fa5f fe80 	uxtb.w	lr, r0
 801745c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8017460:	d03b      	beq.n	80174da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017462:	fa1f f982 	uxth.w	r9, r2
 8017466:	4438      	add	r0, r7
 8017468:	43d2      	mvns	r2, r2
 801746a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801746e:	fb1e fe09 	smulbb	lr, lr, r9
 8017472:	fb1a fa09 	smulbb	sl, sl, r9
 8017476:	b2d2      	uxtb	r2, r2
 8017478:	fb1b f909 	smulbb	r9, fp, r9
 801747c:	fb08 ee02 	mla	lr, r8, r2, lr
 8017480:	fa1f fe8e 	uxth.w	lr, lr
 8017484:	f10e 0801 	add.w	r8, lr, #1
 8017488:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801748c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017490:	f806 e000 	strb.w	lr, [r6, r0]
 8017494:	4430      	add	r0, r6
 8017496:	f890 e001 	ldrb.w	lr, [r0, #1]
 801749a:	fb0e aa02 	mla	sl, lr, r2, sl
 801749e:	fa1f fa8a 	uxth.w	sl, sl
 80174a2:	f10a 0e01 	add.w	lr, sl, #1
 80174a6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80174aa:	f890 e002 	ldrb.w	lr, [r0, #2]
 80174ae:	fb0e 9902 	mla	r9, lr, r2, r9
 80174b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80174b6:	fa1f f989 	uxth.w	r9, r9
 80174ba:	f880 a001 	strb.w	sl, [r0, #1]
 80174be:	f109 0201 	add.w	r2, r9, #1
 80174c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80174c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80174ca:	f880 9002 	strb.w	r9, [r0, #2]
 80174ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80174d0:	3701      	adds	r7, #1
 80174d2:	4415      	add	r5, r2
 80174d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174d6:	4414      	add	r4, r2
 80174d8:	e756      	b.n	8017388 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80174da:	4438      	add	r0, r7
 80174dc:	f806 e000 	strb.w	lr, [r6, r0]
 80174e0:	4430      	add	r0, r6
 80174e2:	f880 a001 	strb.w	sl, [r0, #1]
 80174e6:	f880 b002 	strb.w	fp, [r0, #2]
 80174ea:	e7f0      	b.n	80174ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80174ec:	f800 7c03 	strb.w	r7, [r0, #-3]
 80174f0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80174f4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80174f8:	e73d      	b.n	8017376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80174fa:	b005      	add	sp, #20
 80174fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017500:	2400ea18 	.word	0x2400ea18

08017504 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017504:	4770      	bx	lr

08017506 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017506:	4770      	bx	lr

08017508 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017508:	4770      	bx	lr

0801750a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801750a:	4770      	bx	lr

0801750c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801750c:	4770      	bx	lr

0801750e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801750e:	4770      	bx	lr

08017510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017510:	4770      	bx	lr

08017512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017512:	4770      	bx	lr

08017514 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017514:	4770      	bx	lr

08017516 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017516:	4770      	bx	lr

08017518 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017518:	4770      	bx	lr

0801751a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801751a:	4770      	bx	lr

0801751c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801751c:	4770      	bx	lr

0801751e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801751e:	4770      	bx	lr

08017520 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017520:	4770      	bx	lr

08017522 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017522:	4770      	bx	lr

08017524 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017524:	4770      	bx	lr

08017526 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017526:	4770      	bx	lr

08017528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017528:	4770      	bx	lr

0801752a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801752a:	4770      	bx	lr

0801752c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801752c:	4770      	bx	lr
	...

08017530 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017530:	2bff      	cmp	r3, #255	; 0xff
 8017532:	b508      	push	{r3, lr}
 8017534:	d04f      	beq.n	80175d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017536:	2a2c      	cmp	r2, #44	; 0x2c
 8017538:	d032      	beq.n	80175a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801753a:	d80f      	bhi.n	801755c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801753c:	2a08      	cmp	r2, #8
 801753e:	d046      	beq.n	80175ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017540:	d805      	bhi.n	801754e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8017542:	2a04      	cmp	r2, #4
 8017544:	d041      	beq.n	80175ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017546:	2a05      	cmp	r2, #5
 8017548:	d03d      	beq.n	80175c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801754a:	2000      	movs	r0, #0
 801754c:	e027      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801754e:	2a0a      	cmp	r2, #10
 8017550:	d03d      	beq.n	80175ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017552:	d301      	bcc.n	8017558 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017554:	2a0b      	cmp	r2, #11
 8017556:	d1f8      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017558:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801755a:	e020      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801755c:	2a30      	cmp	r2, #48	; 0x30
 801755e:	d038      	beq.n	80175d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017560:	d808      	bhi.n	8017574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8017562:	2a2e      	cmp	r2, #46	; 0x2e
 8017564:	684b      	ldr	r3, [r1, #4]
 8017566:	d029      	beq.n	80175bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8017568:	d90b      	bls.n	8017582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801756a:	781b      	ldrb	r3, [r3, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d1ec      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017570:	6a00      	ldr	r0, [r0, #32]
 8017572:	e014      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017574:	2a32      	cmp	r2, #50	; 0x32
 8017576:	d02c      	beq.n	80175d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017578:	d301      	bcc.n	801757e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801757a:	2a33      	cmp	r2, #51	; 0x33
 801757c:	d1e5      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801757e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017580:	e00d      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	2b01      	cmp	r3, #1
 8017586:	d009      	beq.n	801759c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8017588:	d3f2      	bcc.n	8017570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801758a:	2b02      	cmp	r3, #2
 801758c:	d1dd      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801758e:	4b39      	ldr	r3, [pc, #228]	; (8017674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017590:	f240 4109 	movw	r1, #1033	; 0x409
 8017594:	4a38      	ldr	r2, [pc, #224]	; (8017678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017596:	4839      	ldr	r0, [pc, #228]	; (801767c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8017598:	f008 f916 	bl	801f7c8 <__assert_func>
 801759c:	6900      	ldr	r0, [r0, #16]
 801759e:	bd08      	pop	{r3, pc}
 80175a0:	684b      	ldr	r3, [r1, #4]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	2b01      	cmp	r3, #1
 80175a6:	d007      	beq.n	80175b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80175a8:	d30b      	bcc.n	80175c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80175aa:	2b02      	cmp	r3, #2
 80175ac:	d1cd      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80175ae:	4b31      	ldr	r3, [pc, #196]	; (8017674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80175b0:	f240 4115 	movw	r1, #1045	; 0x415
 80175b4:	4a30      	ldr	r2, [pc, #192]	; (8017678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80175b6:	e7ee      	b.n	8017596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80175b8:	6880      	ldr	r0, [r0, #8]
 80175ba:	e7f0      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d1c3      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80175c2:	6980      	ldr	r0, [r0, #24]
 80175c4:	e7eb      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80175c8:	e7e9      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80175cc:	e7e7      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80175d0:	e7e5      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80175d4:	e7e3      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175d6:	2a2c      	cmp	r2, #44	; 0x2c
 80175d8:	d030      	beq.n	801763c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80175da:	d80f      	bhi.n	80175fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80175dc:	2a08      	cmp	r2, #8
 80175de:	d044      	beq.n	801766a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80175e0:	d805      	bhi.n	80175ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80175e2:	2a04      	cmp	r2, #4
 80175e4:	d03f      	beq.n	8017666 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80175e6:	2a05      	cmp	r2, #5
 80175e8:	d1af      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80175ea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80175ec:	e7d7      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175ee:	2a0a      	cmp	r2, #10
 80175f0:	d03b      	beq.n	801766a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80175f2:	d301      	bcc.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80175f4:	2a0b      	cmp	r2, #11
 80175f6:	d1a8      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80175f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80175fa:	e7d0      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80175fc:	2a30      	cmp	r2, #48	; 0x30
 80175fe:	d036      	beq.n	801766e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017600:	d808      	bhi.n	8017614 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8017602:	2a2e      	cmp	r2, #46	; 0x2e
 8017604:	684b      	ldr	r3, [r1, #4]
 8017606:	d028      	beq.n	801765a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8017608:	d90b      	bls.n	8017622 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d19c      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017610:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017612:	e7c4      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017614:	2a32      	cmp	r2, #50	; 0x32
 8017616:	d02a      	beq.n	801766e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017618:	d301      	bcc.n	801761e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801761a:	2a33      	cmp	r2, #51	; 0x33
 801761c:	d195      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801761e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017620:	e7bd      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d007      	beq.n	8017638 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8017628:	d3f2      	bcc.n	8017610 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801762a:	2b02      	cmp	r3, #2
 801762c:	d18d      	bne.n	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801762e:	4b11      	ldr	r3, [pc, #68]	; (8017674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017630:	f240 4146 	movw	r1, #1094	; 0x446
 8017634:	4a10      	ldr	r2, [pc, #64]	; (8017678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017636:	e7ae      	b.n	8017596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017638:	6940      	ldr	r0, [r0, #20]
 801763a:	e7b0      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801763c:	684b      	ldr	r3, [r1, #4]
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	2b01      	cmp	r3, #1
 8017642:	d008      	beq.n	8017656 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8017644:	d30d      	bcc.n	8017662 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017646:	2b02      	cmp	r3, #2
 8017648:	f47f af7f 	bne.w	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801764c:	4b09      	ldr	r3, [pc, #36]	; (8017674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801764e:	f240 4152 	movw	r1, #1106	; 0x452
 8017652:	4a09      	ldr	r2, [pc, #36]	; (8017678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017654:	e79f      	b.n	8017596 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017656:	68c0      	ldr	r0, [r0, #12]
 8017658:	e7a1      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801765a:	781b      	ldrb	r3, [r3, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	f47f af74 	bne.w	801754a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017662:	69c0      	ldr	r0, [r0, #28]
 8017664:	e79b      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017666:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017668:	e799      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801766a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801766c:	e797      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801766e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017670:	e795      	b.n	801759e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017672:	bf00      	nop
 8017674:	0802432d 	.word	0x0802432d
 8017678:	08024a9f 	.word	0x08024a9f
 801767c:	08024379 	.word	0x08024379

08017680 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017680:	b508      	push	{r3, lr}
 8017682:	4b06      	ldr	r3, [pc, #24]	; (801769c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8017684:	8818      	ldrh	r0, [r3, #0]
 8017686:	b928      	cbnz	r0, 8017694 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8017688:	4b05      	ldr	r3, [pc, #20]	; (80176a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801768a:	214d      	movs	r1, #77	; 0x4d
 801768c:	4a05      	ldr	r2, [pc, #20]	; (80176a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801768e:	4806      	ldr	r0, [pc, #24]	; (80176a8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8017690:	f008 f89a 	bl	801f7c8 <__assert_func>
 8017694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017698:	b280      	uxth	r0, r0
 801769a:	bd08      	pop	{r3, pc}
 801769c:	2400e9ea 	.word	0x2400e9ea
 80176a0:	08024585 	.word	0x08024585
 80176a4:	08024a64 	.word	0x08024a64
 80176a8:	080245c7 	.word	0x080245c7

080176ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80176ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176b0:	b08b      	sub	sp, #44	; 0x2c
 80176b2:	460d      	mov	r5, r1
 80176b4:	4616      	mov	r6, r2
 80176b6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80176ba:	f1b8 0f00 	cmp.w	r8, #0
 80176be:	d047      	beq.n	8017750 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80176c0:	6810      	ldr	r0, [r2, #0]
 80176c2:	ac06      	add	r4, sp, #24
 80176c4:	6851      	ldr	r1, [r2, #4]
 80176c6:	4f51      	ldr	r7, [pc, #324]	; (801780c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80176c8:	c403      	stmia	r4!, {r0, r1}
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	ac08      	add	r4, sp, #32
 80176ce:	6859      	ldr	r1, [r3, #4]
 80176d0:	c403      	stmia	r4!, {r0, r1}
 80176d2:	a806      	add	r0, sp, #24
 80176d4:	f7fa fece 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176d8:	4631      	mov	r1, r6
 80176da:	a808      	add	r0, sp, #32
 80176dc:	f7fa fef2 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80176e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80176e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80176e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80176ec:	6838      	ldr	r0, [r7, #0]
 80176ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80176f2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80176f6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80176fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80176fe:	440d      	add	r5, r1
 8017700:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017704:	440a      	add	r2, r1
 8017706:	f8ad 2020 	strh.w	r2, [sp, #32]
 801770a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801770e:	4413      	add	r3, r2
 8017710:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017714:	6803      	ldr	r3, [r0, #0]
 8017716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017718:	4798      	blx	r3
 801771a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801771e:	d01a      	beq.n	8017756 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017720:	f010 0f04 	tst.w	r0, #4
 8017724:	6838      	ldr	r0, [r7, #0]
 8017726:	d019      	beq.n	801775c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017728:	2100      	movs	r1, #0
 801772a:	6807      	ldr	r7, [r0, #0]
 801772c:	b2a4      	uxth	r4, r4
 801772e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017732:	b2b6      	uxth	r6, r6
 8017734:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017738:	9401      	str	r4, [sp, #4]
 801773a:	9600      	str	r6, [sp, #0]
 801773c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017740:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8017744:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017748:	9102      	str	r1, [sp, #8]
 801774a:	4629      	mov	r1, r5
 801774c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801774e:	47a0      	blx	r4
 8017750:	b00b      	add	sp, #44	; 0x2c
 8017752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017756:	f010 0f01 	tst.w	r0, #1
 801775a:	e7e3      	b.n	8017724 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801775c:	6803      	ldr	r3, [r0, #0]
 801775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017760:	4798      	blx	r3
 8017762:	4a2b      	ldr	r2, [pc, #172]	; (8017810 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8017764:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8017768:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801776c:	8813      	ldrh	r3, [r2, #0]
 801776e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8017772:	fb03 f404 	mul.w	r4, r3, r4
 8017776:	fb03 c101 	mla	r1, r3, r1, ip
 801777a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801777e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017782:	4408      	add	r0, r1
 8017784:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017788:	4404      	add	r4, r0
 801778a:	d02e      	beq.n	80177ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801778c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017790:	1b9b      	subs	r3, r3, r6
 8017792:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8017796:	1b96      	subs	r6, r2, r6
 8017798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801779c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80177a0:	42a0      	cmp	r0, r4
 80177a2:	d22d      	bcs.n	8017800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80177a4:	eb00 0e01 	add.w	lr, r0, r1
 80177a8:	4570      	cmp	r0, lr
 80177aa:	d210      	bcs.n	80177ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80177ac:	f890 9000 	ldrb.w	r9, [r0]
 80177b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80177b4:	fb19 f90c 	smulbb	r9, r9, ip
 80177b8:	fb02 9208 	mla	r2, r2, r8, r9
 80177bc:	b292      	uxth	r2, r2
 80177be:	f102 0901 	add.w	r9, r2, #1
 80177c2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80177c6:	1212      	asrs	r2, r2, #8
 80177c8:	f800 2b01 	strb.w	r2, [r0], #1
 80177cc:	e7ec      	b.n	80177a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80177ce:	4418      	add	r0, r3
 80177d0:	4435      	add	r5, r6
 80177d2:	e7e5      	b.n	80177a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80177d4:	8813      	ldrh	r3, [r2, #0]
 80177d6:	1b9b      	subs	r3, r3, r6
 80177d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177dc:	4418      	add	r0, r3
 80177de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80177e2:	1b9b      	subs	r3, r3, r6
 80177e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177e8:	441d      	add	r5, r3
 80177ea:	42a0      	cmp	r0, r4
 80177ec:	d208      	bcs.n	8017800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80177ee:	eb00 0c01 	add.w	ip, r0, r1
 80177f2:	4560      	cmp	r0, ip
 80177f4:	d2ee      	bcs.n	80177d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80177f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177fa:	f800 3b01 	strb.w	r3, [r0], #1
 80177fe:	e7f8      	b.n	80177f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017800:	6838      	ldr	r0, [r7, #0]
 8017802:	6803      	ldr	r3, [r0, #0]
 8017804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017806:	4798      	blx	r3
 8017808:	e7a2      	b.n	8017750 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801780a:	bf00      	nop
 801780c:	2400e9f0 	.word	0x2400e9f0
 8017810:	2400e9ea 	.word	0x2400e9ea

08017814 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017814:	b510      	push	{r4, lr}
 8017816:	4604      	mov	r4, r0
 8017818:	2158      	movs	r1, #88	; 0x58
 801781a:	f007 ffa6 	bl	801f76a <_ZdlPvj>
 801781e:	4620      	mov	r0, r4
 8017820:	bd10      	pop	{r4, pc}

08017822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017822:	b510      	push	{r4, lr}
 8017824:	4604      	mov	r4, r0
 8017826:	2104      	movs	r1, #4
 8017828:	f007 ff9f 	bl	801f76a <_ZdlPvj>
 801782c:	4620      	mov	r0, r4
 801782e:	bd10      	pop	{r4, pc}

08017830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017830:	b510      	push	{r4, lr}
 8017832:	4604      	mov	r4, r0
 8017834:	2104      	movs	r1, #4
 8017836:	f007 ff98 	bl	801f76a <_ZdlPvj>
 801783a:	4620      	mov	r0, r4
 801783c:	bd10      	pop	{r4, pc}

0801783e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801783e:	b510      	push	{r4, lr}
 8017840:	4604      	mov	r4, r0
 8017842:	2104      	movs	r1, #4
 8017844:	f007 ff91 	bl	801f76a <_ZdlPvj>
 8017848:	4620      	mov	r0, r4
 801784a:	bd10      	pop	{r4, pc}

0801784c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801784c:	b510      	push	{r4, lr}
 801784e:	4604      	mov	r4, r0
 8017850:	2104      	movs	r1, #4
 8017852:	f007 ff8a 	bl	801f76a <_ZdlPvj>
 8017856:	4620      	mov	r0, r4
 8017858:	bd10      	pop	{r4, pc}

0801785a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801785a:	b510      	push	{r4, lr}
 801785c:	4604      	mov	r4, r0
 801785e:	2104      	movs	r1, #4
 8017860:	f007 ff83 	bl	801f76a <_ZdlPvj>
 8017864:	4620      	mov	r0, r4
 8017866:	bd10      	pop	{r4, pc}

08017868 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017868:	b510      	push	{r4, lr}
 801786a:	4604      	mov	r4, r0
 801786c:	2104      	movs	r1, #4
 801786e:	f007 ff7c 	bl	801f76a <_ZdlPvj>
 8017872:	4620      	mov	r0, r4
 8017874:	bd10      	pop	{r4, pc}

08017876 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017876:	b510      	push	{r4, lr}
 8017878:	4604      	mov	r4, r0
 801787a:	2104      	movs	r1, #4
 801787c:	f007 ff75 	bl	801f76a <_ZdlPvj>
 8017880:	4620      	mov	r0, r4
 8017882:	bd10      	pop	{r4, pc}

08017884 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017884:	b510      	push	{r4, lr}
 8017886:	4604      	mov	r4, r0
 8017888:	2104      	movs	r1, #4
 801788a:	f007 ff6e 	bl	801f76a <_ZdlPvj>
 801788e:	4620      	mov	r0, r4
 8017890:	bd10      	pop	{r4, pc}

08017892 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017892:	b510      	push	{r4, lr}
 8017894:	4604      	mov	r4, r0
 8017896:	2104      	movs	r1, #4
 8017898:	f007 ff67 	bl	801f76a <_ZdlPvj>
 801789c:	4620      	mov	r0, r4
 801789e:	bd10      	pop	{r4, pc}

080178a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80178a0:	b510      	push	{r4, lr}
 80178a2:	4604      	mov	r4, r0
 80178a4:	2104      	movs	r1, #4
 80178a6:	f007 ff60 	bl	801f76a <_ZdlPvj>
 80178aa:	4620      	mov	r0, r4
 80178ac:	bd10      	pop	{r4, pc}

080178ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80178ae:	b510      	push	{r4, lr}
 80178b0:	4604      	mov	r4, r0
 80178b2:	2104      	movs	r1, #4
 80178b4:	f007 ff59 	bl	801f76a <_ZdlPvj>
 80178b8:	4620      	mov	r0, r4
 80178ba:	bd10      	pop	{r4, pc}

080178bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80178bc:	b510      	push	{r4, lr}
 80178be:	4604      	mov	r4, r0
 80178c0:	2104      	movs	r1, #4
 80178c2:	f007 ff52 	bl	801f76a <_ZdlPvj>
 80178c6:	4620      	mov	r0, r4
 80178c8:	bd10      	pop	{r4, pc}

080178ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80178ca:	b510      	push	{r4, lr}
 80178cc:	4604      	mov	r4, r0
 80178ce:	2104      	movs	r1, #4
 80178d0:	f007 ff4b 	bl	801f76a <_ZdlPvj>
 80178d4:	4620      	mov	r0, r4
 80178d6:	bd10      	pop	{r4, pc}

080178d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80178d8:	b510      	push	{r4, lr}
 80178da:	4604      	mov	r4, r0
 80178dc:	2104      	movs	r1, #4
 80178de:	f007 ff44 	bl	801f76a <_ZdlPvj>
 80178e2:	4620      	mov	r0, r4
 80178e4:	bd10      	pop	{r4, pc}

080178e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80178e6:	b510      	push	{r4, lr}
 80178e8:	4604      	mov	r4, r0
 80178ea:	2104      	movs	r1, #4
 80178ec:	f007 ff3d 	bl	801f76a <_ZdlPvj>
 80178f0:	4620      	mov	r0, r4
 80178f2:	bd10      	pop	{r4, pc}

080178f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80178f4:	b510      	push	{r4, lr}
 80178f6:	4604      	mov	r4, r0
 80178f8:	2104      	movs	r1, #4
 80178fa:	f007 ff36 	bl	801f76a <_ZdlPvj>
 80178fe:	4620      	mov	r0, r4
 8017900:	bd10      	pop	{r4, pc}

08017902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8017902:	b510      	push	{r4, lr}
 8017904:	4604      	mov	r4, r0
 8017906:	2104      	movs	r1, #4
 8017908:	f007 ff2f 	bl	801f76a <_ZdlPvj>
 801790c:	4620      	mov	r0, r4
 801790e:	bd10      	pop	{r4, pc}

08017910 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017910:	b510      	push	{r4, lr}
 8017912:	4604      	mov	r4, r0
 8017914:	2104      	movs	r1, #4
 8017916:	f007 ff28 	bl	801f76a <_ZdlPvj>
 801791a:	4620      	mov	r0, r4
 801791c:	bd10      	pop	{r4, pc}

0801791e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801791e:	b510      	push	{r4, lr}
 8017920:	4604      	mov	r4, r0
 8017922:	2104      	movs	r1, #4
 8017924:	f007 ff21 	bl	801f76a <_ZdlPvj>
 8017928:	4620      	mov	r0, r4
 801792a:	bd10      	pop	{r4, pc}

0801792c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801792c:	b510      	push	{r4, lr}
 801792e:	4604      	mov	r4, r0
 8017930:	2104      	movs	r1, #4
 8017932:	f007 ff1a 	bl	801f76a <_ZdlPvj>
 8017936:	4620      	mov	r0, r4
 8017938:	bd10      	pop	{r4, pc}
	...

0801793c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	4db4      	ldr	r5, [pc, #720]	; (8017c14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 8017942:	4690      	mov	r8, r2
 8017944:	b08d      	sub	sp, #52	; 0x34
 8017946:	4604      	mov	r4, r0
 8017948:	682a      	ldr	r2, [r5, #0]
 801794a:	4689      	mov	r9, r1
 801794c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8017950:	2a02      	cmp	r2, #2
 8017952:	d106      	bne.n	8017962 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8017954:	4bb0      	ldr	r3, [pc, #704]	; (8017c18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 8017956:	f240 11ed 	movw	r1, #493	; 0x1ed
 801795a:	4ab0      	ldr	r2, [pc, #704]	; (8017c1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801795c:	48b0      	ldr	r0, [pc, #704]	; (8017c20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801795e:	f007 ff33 	bl	801f7c8 <__assert_func>
 8017962:	ae0c      	add	r6, sp, #48	; 0x30
 8017964:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 8017968:	4630      	mov	r0, r6
 801796a:	f7fe f97b 	bl	8015c64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801796e:	6823      	ldr	r3, [r4, #0]
 8017970:	4607      	mov	r7, r0
 8017972:	4620      	mov	r0, r4
 8017974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017976:	4798      	blx	r3
 8017978:	4287      	cmp	r7, r0
 801797a:	d004      	beq.n	8017986 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801797c:	4ba9      	ldr	r3, [pc, #676]	; (8017c24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801797e:	f240 11ef 	movw	r1, #495	; 0x1ef
 8017982:	4aa6      	ldr	r2, [pc, #664]	; (8017c1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017984:	e7ea      	b.n	801795c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017986:	4630      	mov	r0, r6
 8017988:	f7fe f8e2 	bl	8015b50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801798c:	4607      	mov	r7, r0
 801798e:	b920      	cbnz	r0, 801799a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8017990:	4ba5      	ldr	r3, [pc, #660]	; (8017c28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8017992:	f240 11f1 	movw	r1, #497	; 0x1f1
 8017996:	4aa1      	ldr	r2, [pc, #644]	; (8017c1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017998:	e7e0      	b.n	801795c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801799a:	f8d8 0000 	ldr.w	r0, [r8]
 801799e:	ab06      	add	r3, sp, #24
 80179a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179a4:	f9b8 a000 	ldrsh.w	sl, [r8]
 80179a8:	c303      	stmia	r3!, {r0, r1}
 80179aa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80179ae:	ab08      	add	r3, sp, #32
 80179b0:	f8d9 0000 	ldr.w	r0, [r9]
 80179b4:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80179b8:	c303      	stmia	r3!, {r0, r1}
 80179ba:	4630      	mov	r0, r6
 80179bc:	f7fd fffa 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80179c0:	4680      	mov	r8, r0
 80179c2:	4630      	mov	r0, r6
 80179c4:	f7fe f830 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80179c8:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80179cc:	f10d 0920 	add.w	r9, sp, #32
 80179d0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80179d4:	a806      	add	r0, sp, #24
 80179d6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80179da:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 80179de:	f7fa fd49 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179e2:	4648      	mov	r0, r9
 80179e4:	f7fa fd46 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179e8:	a80a      	add	r0, sp, #40	; 0x28
 80179ea:	f7fa fd43 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179ee:	4b8f      	ldr	r3, [pc, #572]	; (8017c2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 80179f0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80179f4:	881e      	ldrh	r6, [r3, #0]
 80179f6:	4b8e      	ldr	r3, [pc, #568]	; (8017c30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 80179f8:	fa0f fb86 	sxth.w	fp, r6
 80179fc:	8819      	ldrh	r1, [r3, #0]
 80179fe:	4593      	cmp	fp, r2
 8017a00:	dd75      	ble.n	8017aee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a02:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8017a06:	4494      	add	ip, r2
 8017a08:	fa1f fc8c 	uxth.w	ip, ip
 8017a0c:	fa0f fa8c 	sxth.w	sl, ip
 8017a10:	f1ba 0f00 	cmp.w	sl, #0
 8017a14:	dd6b      	ble.n	8017aee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a16:	fa0f f881 	sxth.w	r8, r1
 8017a1a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017a1e:	4598      	cmp	r8, r3
 8017a20:	dd65      	ble.n	8017aee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a22:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8017a26:	4418      	add	r0, r3
 8017a28:	b280      	uxth	r0, r0
 8017a2a:	fa0f fe80 	sxth.w	lr, r0
 8017a2e:	f1be 0f00 	cmp.w	lr, #0
 8017a32:	dd5c      	ble.n	8017aee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8017a34:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a3c:	45d3      	cmp	fp, sl
 8017a3e:	bfc8      	it	gt
 8017a40:	4666      	movgt	r6, ip
 8017a42:	45f0      	cmp	r8, lr
 8017a44:	bfc8      	it	gt
 8017a46:	4601      	movgt	r1, r0
 8017a48:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017a4c:	1ab6      	subs	r6, r6, r2
 8017a4e:	1ac9      	subs	r1, r1, r3
 8017a50:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017a54:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8017a58:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8017a5c:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8017a60:	f1bc 0f00 	cmp.w	ip, #0
 8017a64:	f340 80aa 	ble.w	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017a68:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8017a6c:	2e00      	cmp	r6, #0
 8017a6e:	f340 80a5 	ble.w	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017a72:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8017a76:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017a7a:	4288      	cmp	r0, r1
 8017a7c:	db3b      	blt.n	8017af6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a7e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8017a82:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	db35      	blt.n	8017af6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a8a:	4460      	add	r0, ip
 8017a8c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8017a90:	4461      	add	r1, ip
 8017a92:	b200      	sxth	r0, r0
 8017a94:	b209      	sxth	r1, r1
 8017a96:	4288      	cmp	r0, r1
 8017a98:	dc2d      	bgt.n	8017af6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017a9a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8017a9e:	4432      	add	r2, r6
 8017aa0:	440b      	add	r3, r1
 8017aa2:	b212      	sxth	r2, r2
 8017aa4:	b21b      	sxth	r3, r3
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	dc25      	bgt.n	8017af6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8017aaa:	6823      	ldr	r3, [r4, #0]
 8017aac:	4620      	mov	r0, r4
 8017aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ab0:	4798      	blx	r3
 8017ab2:	4682      	mov	sl, r0
 8017ab4:	6828      	ldr	r0, [r5, #0]
 8017ab6:	6803      	ldr	r3, [r0, #0]
 8017ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aba:	4798      	blx	r3
 8017abc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8017ac0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8017ac4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017ac8:	9303      	str	r3, [sp, #12]
 8017aca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017ace:	1a9b      	subs	r3, r3, r2
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	b21c      	sxth	r4, r3
 8017ad4:	2c00      	cmp	r4, #0
 8017ad6:	dc13      	bgt.n	8017b00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 8017ad8:	bf18      	it	ne
 8017ada:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8017ade:	463c      	mov	r4, r7
 8017ae0:	bf1e      	ittt	ne
 8017ae2:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8017ae6:	189b      	addne	r3, r3, r2
 8017ae8:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8017aec:	e00f      	b.n	8017b0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8017aee:	2300      	movs	r3, #0
 8017af0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017af4:	e7b2      	b.n	8017a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 8017af6:	4b4f      	ldr	r3, [pc, #316]	; (8017c34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 8017af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8017afc:	4a47      	ldr	r2, [pc, #284]	; (8017c1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8017afe:	e72d      	b.n	801795c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017b00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017b04:	ebab 0303 	sub.w	r3, fp, r3
 8017b08:	443c      	add	r4, r7
 8017b0a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8017b0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8017b12:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017b16:	1a9b      	subs	r3, r3, r2
 8017b18:	b29b      	uxth	r3, r3
 8017b1a:	b219      	sxth	r1, r3
 8017b1c:	2900      	cmp	r1, #0
 8017b1e:	dd51      	ble.n	8017bc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8017b20:	9a03      	ldr	r2, [sp, #12]
 8017b22:	fb02 4401 	mla	r4, r2, r1, r4
 8017b26:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8017b2a:	1ad3      	subs	r3, r2, r3
 8017b2c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017b30:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	dd41      	ble.n	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017b38:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8017b3c:	2e00      	cmp	r6, #0
 8017b3e:	dd3d      	ble.n	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017b40:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017b44:	f04f 0803 	mov.w	r8, #3
 8017b48:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017b4c:	fb0a f10c 	mul.w	r1, sl, ip
 8017b50:	fb12 1808 	smlabb	r8, r2, r8, r1
 8017b54:	4935      	ldr	r1, [pc, #212]	; (8017c2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8017b56:	4480      	add	r8, r0
 8017b58:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8017b5c:	8809      	ldrh	r1, [r1, #0]
 8017b5e:	4283      	cmp	r3, r0
 8017b60:	eba1 0202 	sub.w	r2, r1, r2
 8017b64:	bfa8      	it	ge
 8017b66:	4603      	movge	r3, r0
 8017b68:	4293      	cmp	r3, r2
 8017b6a:	bfa8      	it	ge
 8017b6c:	4613      	movge	r3, r2
 8017b6e:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8017b72:	4296      	cmp	r6, r2
 8017b74:	bfa8      	it	ge
 8017b76:	4616      	movge	r6, r2
 8017b78:	4a2d      	ldr	r2, [pc, #180]	; (8017c30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 8017b7a:	8812      	ldrh	r2, [r2, #0]
 8017b7c:	eba2 0c0c 	sub.w	ip, r2, ip
 8017b80:	4632      	mov	r2, r6
 8017b82:	4566      	cmp	r6, ip
 8017b84:	bfa8      	it	ge
 8017b86:	4662      	movge	r2, ip
 8017b88:	4299      	cmp	r1, r3
 8017b8a:	9202      	str	r2, [sp, #8]
 8017b8c:	d12d      	bne.n	8017bea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8017b8e:	4559      	cmp	r1, fp
 8017b90:	d12b      	bne.n	8017bea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8017b92:	6828      	ldr	r0, [r5, #0]
 8017b94:	6803      	ldr	r3, [r0, #0]
 8017b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b98:	4798      	blx	r3
 8017b9a:	07c3      	lsls	r3, r0, #31
 8017b9c:	d51b      	bpl.n	8017bd6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8017b9e:	6828      	ldr	r0, [r5, #0]
 8017ba0:	9b02      	ldr	r3, [sp, #8]
 8017ba2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8017ba6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017baa:	6803      	ldr	r3, [r0, #0]
 8017bac:	f8cd b000 	str.w	fp, [sp]
 8017bb0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8017bb2:	4623      	mov	r3, r4
 8017bb4:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017bb8:	47a8      	blx	r5
 8017bba:	4607      	mov	r7, r0
 8017bbc:	4638      	mov	r0, r7
 8017bbe:	b00d      	add	sp, #52	; 0x34
 8017bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc4:	bf1f      	itttt	ne
 8017bc6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8017bca:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8017bce:	189b      	addne	r3, r3, r2
 8017bd0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8017bd4:	e7ac      	b.n	8017b30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 8017bd6:	6828      	ldr	r0, [r5, #0]
 8017bd8:	4642      	mov	r2, r8
 8017bda:	4621      	mov	r1, r4
 8017bdc:	6803      	ldr	r3, [r0, #0]
 8017bde:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8017be0:	9b02      	ldr	r3, [sp, #8]
 8017be2:	fb03 f30a 	mul.w	r3, r3, sl
 8017be6:	47a8      	blx	r5
 8017be8:	e7e8      	b.n	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017bea:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8017bee:	f04f 0900 	mov.w	r9, #0
 8017bf2:	9b02      	ldr	r3, [sp, #8]
 8017bf4:	454b      	cmp	r3, r9
 8017bf6:	dde1      	ble.n	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8017bf8:	6828      	ldr	r0, [r5, #0]
 8017bfa:	4642      	mov	r2, r8
 8017bfc:	4621      	mov	r1, r4
 8017bfe:	44d0      	add	r8, sl
 8017c00:	6803      	ldr	r3, [r0, #0]
 8017c02:	f109 0901 	add.w	r9, r9, #1
 8017c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c08:	461e      	mov	r6, r3
 8017c0a:	465b      	mov	r3, fp
 8017c0c:	47b0      	blx	r6
 8017c0e:	9b03      	ldr	r3, [sp, #12]
 8017c10:	441c      	add	r4, r3
 8017c12:	e7ee      	b.n	8017bf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8017c14:	2400e9f0 	.word	0x2400e9f0
 8017c18:	080243ab 	.word	0x080243ab
 8017c1c:	08024b49 	.word	0x08024b49
 8017c20:	08024379 	.word	0x08024379
 8017c24:	0802445d 	.word	0x0802445d
 8017c28:	080244b2 	.word	0x080244b2
 8017c2c:	2400e9ea 	.word	0x2400e9ea
 8017c30:	2400e9ec 	.word	0x2400e9ec
 8017c34:	080244f0 	.word	0x080244f0

08017c38 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8017c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017c40:	9c06      	ldr	r4, [sp, #24]
 8017c42:	2800      	cmp	r0, #0
 8017c44:	d06e      	beq.n	8017d24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017c46:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8017c4a:	2d00      	cmp	r5, #0
 8017c4c:	dd6a      	ble.n	8017d24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017c4e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8017c52:	f1bc 0f00 	cmp.w	ip, #0
 8017c56:	dd65      	ble.n	8017d24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017c58:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8017c5c:	28ff      	cmp	r0, #255	; 0xff
 8017c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c62:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017c66:	fb02 3306 	mla	r3, r2, r6, r3
 8017c6a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8017c6e:	b2e4      	uxtb	r4, r4
 8017c70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c74:	4419      	add	r1, r3
 8017c76:	fb02 f30c 	mul.w	r3, r2, ip
 8017c7a:	eba2 0205 	sub.w	r2, r2, r5
 8017c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c8a:	440b      	add	r3, r1
 8017c8c:	d03e      	beq.n	8017d0c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8017c8e:	fa1f fc80 	uxth.w	ip, r0
 8017c92:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017c96:	fb06 f60c 	mul.w	r6, r6, ip
 8017c9a:	b280      	uxth	r0, r0
 8017c9c:	fb07 f70c 	mul.w	r7, r7, ip
 8017ca0:	fb04 f40c 	mul.w	r4, r4, ip
 8017ca4:	4299      	cmp	r1, r3
 8017ca6:	d23d      	bcs.n	8017d24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017ca8:	eb01 0c05 	add.w	ip, r1, r5
 8017cac:	458c      	cmp	ip, r1
 8017cae:	f101 0e03 	add.w	lr, r1, #3
 8017cb2:	d928      	bls.n	8017d06 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8017cb4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017cb8:	fb11 f100 	smulbb	r1, r1, r0
 8017cbc:	4421      	add	r1, r4
 8017cbe:	b289      	uxth	r1, r1
 8017cc0:	f101 0801 	add.w	r8, r1, #1
 8017cc4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017cc8:	1209      	asrs	r1, r1, #8
 8017cca:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8017cce:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8017cd2:	fb11 f100 	smulbb	r1, r1, r0
 8017cd6:	4439      	add	r1, r7
 8017cd8:	b289      	uxth	r1, r1
 8017cda:	f101 0801 	add.w	r8, r1, #1
 8017cde:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017ce2:	1209      	asrs	r1, r1, #8
 8017ce4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8017ce8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8017cec:	fb11 f100 	smulbb	r1, r1, r0
 8017cf0:	4431      	add	r1, r6
 8017cf2:	b289      	uxth	r1, r1
 8017cf4:	f101 0801 	add.w	r8, r1, #1
 8017cf8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017cfc:	1209      	asrs	r1, r1, #8
 8017cfe:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8017d02:	4671      	mov	r1, lr
 8017d04:	e7d2      	b.n	8017cac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8017d06:	4411      	add	r1, r2
 8017d08:	e7cc      	b.n	8017ca4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8017d0a:	4411      	add	r1, r2
 8017d0c:	4299      	cmp	r1, r3
 8017d0e:	d209      	bcs.n	8017d24 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017d10:	1948      	adds	r0, r1, r5
 8017d12:	4281      	cmp	r1, r0
 8017d14:	d2f9      	bcs.n	8017d0a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8017d16:	700c      	strb	r4, [r1, #0]
 8017d18:	3103      	adds	r1, #3
 8017d1a:	f801 7c02 	strb.w	r7, [r1, #-2]
 8017d1e:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017d22:	e7f6      	b.n	8017d12 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8017d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2a:	4606      	mov	r6, r0
 8017d2c:	b087      	sub	sp, #28
 8017d2e:	4615      	mov	r5, r2
 8017d30:	461f      	mov	r7, r3
 8017d32:	b353      	cbz	r3, 8017d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017d34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	dd26      	ble.n	8017d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017d3c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	dd22      	ble.n	8017d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017d44:	6808      	ldr	r0, [r1, #0]
 8017d46:	aa04      	add	r2, sp, #16
 8017d48:	6849      	ldr	r1, [r1, #4]
 8017d4a:	4c1b      	ldr	r4, [pc, #108]	; (8017db8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017d4c:	c203      	stmia	r2!, {r0, r1}
 8017d4e:	a804      	add	r0, sp, #16
 8017d50:	f7fa fb90 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d54:	6820      	ldr	r0, [r4, #0]
 8017d56:	6803      	ldr	r3, [r0, #0]
 8017d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d5a:	4798      	blx	r3
 8017d5c:	2fff      	cmp	r7, #255	; 0xff
 8017d5e:	d016      	beq.n	8017d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8017d60:	f010 0f08 	tst.w	r0, #8
 8017d64:	6820      	ldr	r0, [r4, #0]
 8017d66:	d015      	beq.n	8017d94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8017d68:	2400      	movs	r4, #0
 8017d6a:	6801      	ldr	r1, [r0, #0]
 8017d6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017d70:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017d74:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8017d78:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017d7c:	9401      	str	r4, [sp, #4]
 8017d7e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8017d82:	9400      	str	r4, [sp, #0]
 8017d84:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8017d86:	4629      	mov	r1, r5
 8017d88:	47a0      	blx	r4
 8017d8a:	b007      	add	sp, #28
 8017d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d8e:	f010 0f02 	tst.w	r0, #2
 8017d92:	e7e7      	b.n	8017d64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8017d94:	6803      	ldr	r3, [r0, #0]
 8017d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d98:	4798      	blx	r3
 8017d9a:	4b08      	ldr	r3, [pc, #32]	; (8017dbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017d9c:	4601      	mov	r1, r0
 8017d9e:	4630      	mov	r0, r6
 8017da0:	881a      	ldrh	r2, [r3, #0]
 8017da2:	6833      	ldr	r3, [r6, #0]
 8017da4:	e9cd 5700 	strd	r5, r7, [sp]
 8017da8:	69dd      	ldr	r5, [r3, #28]
 8017daa:	ab04      	add	r3, sp, #16
 8017dac:	47a8      	blx	r5
 8017dae:	6820      	ldr	r0, [r4, #0]
 8017db0:	6803      	ldr	r3, [r0, #0]
 8017db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db4:	4798      	blx	r3
 8017db6:	e7e8      	b.n	8017d8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017db8:	2400e9f0 	.word	0x2400e9f0
 8017dbc:	2400e9ea 	.word	0x2400e9ea

08017dc0 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	490c      	ldr	r1, [pc, #48]	; (8017df4 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017dc4:	6042      	str	r2, [r0, #4]
 8017dc6:	6001      	str	r1, [r0, #0]
 8017dc8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017dcc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017dd0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017dd4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017dd8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017ddc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017de0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017de4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017de8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017dec:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop
 8017df4:	08024794 	.word	0x08024794

08017df8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfc:	b091      	sub	sp, #68	; 0x44
 8017dfe:	880d      	ldrh	r5, [r1, #0]
 8017e00:	4607      	mov	r7, r0
 8017e02:	4688      	mov	r8, r1
 8017e04:	4616      	mov	r6, r2
 8017e06:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017e0a:	b12d      	cbz	r5, 8017e18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8017e0c:	4b69      	ldr	r3, [pc, #420]	; (8017fb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8017e0e:	2160      	movs	r1, #96	; 0x60
 8017e10:	4a69      	ldr	r2, [pc, #420]	; (8017fb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017e12:	486a      	ldr	r0, [pc, #424]	; (8017fbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8017e14:	f007 fcd8 	bl	801f7c8 <__assert_func>
 8017e18:	6810      	ldr	r0, [r2, #0]
 8017e1a:	ac0c      	add	r4, sp, #48	; 0x30
 8017e1c:	6851      	ldr	r1, [r2, #4]
 8017e1e:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8017fc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8017e22:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8017fc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8017e26:	c403      	stmia	r4!, {r0, r1}
 8017e28:	6818      	ldr	r0, [r3, #0]
 8017e2a:	ac0e      	add	r4, sp, #56	; 0x38
 8017e2c:	6859      	ldr	r1, [r3, #4]
 8017e2e:	c403      	stmia	r4!, {r0, r1}
 8017e30:	a80c      	add	r0, sp, #48	; 0x30
 8017e32:	f7fa fb1f 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e36:	4631      	mov	r1, r6
 8017e38:	a80e      	add	r0, sp, #56	; 0x38
 8017e3a:	f7fa fb43 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e3e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017e42:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e46:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017e4a:	f8da 0000 	ldr.w	r0, [sl]
 8017e4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017e52:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017e56:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017e5a:	440f      	add	r7, r1
 8017e5c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017e60:	440a      	add	r2, r1
 8017e62:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017e66:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017e6a:	4413      	add	r3, r2
 8017e6c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017e70:	6803      	ldr	r3, [r0, #0]
 8017e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e74:	4798      	blx	r3
 8017e76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017e7a:	f8da 0000 	ldr.w	r0, [sl]
 8017e7e:	d01e      	beq.n	8017ebe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8017e80:	6801      	ldr	r1, [r0, #0]
 8017e82:	2201      	movs	r2, #1
 8017e84:	9509      	str	r5, [sp, #36]	; 0x24
 8017e86:	250b      	movs	r5, #11
 8017e88:	b2a4      	uxth	r4, r4
 8017e8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017e8e:	b2b6      	uxth	r6, r6
 8017e90:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8017e94:	f8bb 5000 	ldrh.w	r5, [fp]
 8017e98:	f8cd 9010 	str.w	r9, [sp, #16]
 8017e9c:	9602      	str	r6, [sp, #8]
 8017e9e:	9401      	str	r4, [sp, #4]
 8017ea0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017ea4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017ea8:	9203      	str	r2, [sp, #12]
 8017eaa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017eae:	9200      	str	r2, [sp, #0]
 8017eb0:	4642      	mov	r2, r8
 8017eb2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017eb4:	4639      	mov	r1, r7
 8017eb6:	47a0      	blx	r4
 8017eb8:	b011      	add	sp, #68	; 0x44
 8017eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ebe:	6803      	ldr	r3, [r0, #0]
 8017ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ec2:	4798      	blx	r3
 8017ec4:	f8bb 5000 	ldrh.w	r5, [fp]
 8017ec8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017ecc:	f04f 0e04 	mov.w	lr, #4
 8017ed0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017ed4:	436e      	muls	r6, r5
 8017ed6:	fb05 2303 	mla	r3, r5, r3, r2
 8017eda:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017ede:	1b2d      	subs	r5, r5, r4
 8017ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ee8:	4418      	add	r0, r3
 8017eea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017eee:	1982      	adds	r2, r0, r6
 8017ef0:	1b1b      	subs	r3, r3, r4
 8017ef2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ef8:	4290      	cmp	r0, r2
 8017efa:	d254      	bcs.n	8017fa6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8017efc:	eb00 0a04 	add.w	sl, r0, r4
 8017f00:	4550      	cmp	r0, sl
 8017f02:	d24c      	bcs.n	8017f9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8017f04:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f08:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017f0c:	eb08 0c01 	add.w	ip, r8, r1
 8017f10:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017f14:	b173      	cbz	r3, 8017f34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8017f16:	2bff      	cmp	r3, #255	; 0xff
 8017f18:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017f1c:	d10c      	bne.n	8017f38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8017f1e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017f22:	d109      	bne.n	8017f38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8017f24:	f880 b000 	strb.w	fp, [r0]
 8017f28:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017f2c:	7043      	strb	r3, [r0, #1]
 8017f2e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017f32:	7083      	strb	r3, [r0, #2]
 8017f34:	3003      	adds	r0, #3
 8017f36:	e7e3      	b.n	8017f00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8017f38:	fb09 f103 	mul.w	r1, r9, r3
 8017f3c:	1c4b      	adds	r3, r1, #1
 8017f3e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017f42:	7801      	ldrb	r1, [r0, #0]
 8017f44:	121b      	asrs	r3, r3, #8
 8017f46:	b29e      	uxth	r6, r3
 8017f48:	43db      	mvns	r3, r3
 8017f4a:	fb1b fb06 	smulbb	fp, fp, r6
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	fb01 b103 	mla	r1, r1, r3, fp
 8017f54:	b289      	uxth	r1, r1
 8017f56:	f101 0b01 	add.w	fp, r1, #1
 8017f5a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017f5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017f62:	fb1b fb03 	smulbb	fp, fp, r3
 8017f66:	1209      	asrs	r1, r1, #8
 8017f68:	7001      	strb	r1, [r0, #0]
 8017f6a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017f6e:	fb01 b106 	mla	r1, r1, r6, fp
 8017f72:	b289      	uxth	r1, r1
 8017f74:	f101 0b01 	add.w	fp, r1, #1
 8017f78:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017f7c:	1209      	asrs	r1, r1, #8
 8017f7e:	7041      	strb	r1, [r0, #1]
 8017f80:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017f84:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017f88:	fb1c f303 	smulbb	r3, ip, r3
 8017f8c:	fb01 3606 	mla	r6, r1, r6, r3
 8017f90:	b2b6      	uxth	r6, r6
 8017f92:	1c73      	adds	r3, r6, #1
 8017f94:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017f98:	1236      	asrs	r6, r6, #8
 8017f9a:	7086      	strb	r6, [r0, #2]
 8017f9c:	e7ca      	b.n	8017f34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8017f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fa0:	4428      	add	r0, r5
 8017fa2:	441f      	add	r7, r3
 8017fa4:	e7a8      	b.n	8017ef8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8017fa6:	4b06      	ldr	r3, [pc, #24]	; (8017fc0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017fa8:	6818      	ldr	r0, [r3, #0]
 8017faa:	6803      	ldr	r3, [r0, #0]
 8017fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fae:	4798      	blx	r3
 8017fb0:	e782      	b.n	8017eb8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017fb2:	bf00      	nop
 8017fb4:	080242dd 	.word	0x080242dd
 8017fb8:	0802496b 	.word	0x0802496b
 8017fbc:	08024379 	.word	0x08024379
 8017fc0:	2400e9f0 	.word	0x2400e9f0
 8017fc4:	2400e9ea 	.word	0x2400e9ea

08017fc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	f8b1 9000 	ldrh.w	r9, [r1]
 8017fd0:	b091      	sub	sp, #68	; 0x44
 8017fd2:	4604      	mov	r4, r0
 8017fd4:	460e      	mov	r6, r1
 8017fd6:	f1b9 0f01 	cmp.w	r9, #1
 8017fda:	4690      	mov	r8, r2
 8017fdc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017fe0:	d005      	beq.n	8017fee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8017fe2:	4b69      	ldr	r3, [pc, #420]	; (8018188 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017fe4:	21ae      	movs	r1, #174	; 0xae
 8017fe6:	4a69      	ldr	r2, [pc, #420]	; (801818c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8017fe8:	4869      	ldr	r0, [pc, #420]	; (8018190 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017fea:	f007 fbed 	bl	801f7c8 <__assert_func>
 8017fee:	6810      	ldr	r0, [r2, #0]
 8017ff0:	ad0c      	add	r5, sp, #48	; 0x30
 8017ff2:	6851      	ldr	r1, [r2, #4]
 8017ff4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8018194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8017ff8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8018198 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8017ffc:	c503      	stmia	r5!, {r0, r1}
 8017ffe:	6818      	ldr	r0, [r3, #0]
 8018000:	ad0e      	add	r5, sp, #56	; 0x38
 8018002:	6859      	ldr	r1, [r3, #4]
 8018004:	c503      	stmia	r5!, {r0, r1}
 8018006:	a80c      	add	r0, sp, #48	; 0x30
 8018008:	f7fa fa34 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801800c:	4641      	mov	r1, r8
 801800e:	a80e      	add	r0, sp, #56	; 0x38
 8018010:	f7fa fa58 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018014:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018018:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801801c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018020:	f8da 0000 	ldr.w	r0, [sl]
 8018024:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018028:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801802c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8018030:	440c      	add	r4, r1
 8018032:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018036:	440a      	add	r2, r1
 8018038:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801803c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018040:	4413      	add	r3, r2
 8018042:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018046:	6803      	ldr	r3, [r0, #0]
 8018048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801804a:	4798      	blx	r3
 801804c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018050:	f8da 0000 	ldr.w	r0, [sl]
 8018054:	d020      	beq.n	8018098 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8018056:	2200      	movs	r2, #0
 8018058:	f04f 0c0b 	mov.w	ip, #11
 801805c:	6801      	ldr	r1, [r0, #0]
 801805e:	b2ad      	uxth	r5, r5
 8018060:	f8cd c01c 	str.w	ip, [sp, #28]
 8018064:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018068:	e9cd 9208 	strd	r9, r2, [sp, #32]
 801806c:	f8bb c000 	ldrh.w	ip, [fp]
 8018070:	9704      	str	r7, [sp, #16]
 8018072:	9502      	str	r5, [sp, #8]
 8018074:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8018078:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801807c:	9203      	str	r2, [sp, #12]
 801807e:	fa1f f288 	uxth.w	r2, r8
 8018082:	9201      	str	r2, [sp, #4]
 8018084:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018088:	9200      	str	r2, [sp, #0]
 801808a:	4632      	mov	r2, r6
 801808c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801808e:	4621      	mov	r1, r4
 8018090:	47a8      	blx	r5
 8018092:	b011      	add	sp, #68	; 0x44
 8018094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018098:	6803      	ldr	r3, [r0, #0]
 801809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801809c:	4798      	blx	r3
 801809e:	f8bb 2000 	ldrh.w	r2, [fp]
 80180a2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80180a6:	f04f 0e03 	mov.w	lr, #3
 80180aa:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80180ae:	4355      	muls	r5, r2
 80180b0:	fa1f fc87 	uxth.w	ip, r7
 80180b4:	fb02 1303 	mla	r3, r2, r3, r1
 80180b8:	eba2 0208 	sub.w	r2, r2, r8
 80180bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80180c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80180c8:	4418      	add	r0, r3
 80180ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80180cc:	1943      	adds	r3, r0, r5
 80180ce:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80180d2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80180d6:	eba2 0208 	sub.w	r2, r2, r8
 80180da:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80180de:	b2ad      	uxth	r5, r5
 80180e0:	4298      	cmp	r0, r3
 80180e2:	d24a      	bcs.n	801817a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80180e4:	eb00 0908 	add.w	r9, r0, r8
 80180e8:	4621      	mov	r1, r4
 80180ea:	4548      	cmp	r0, r9
 80180ec:	460c      	mov	r4, r1
 80180ee:	d240      	bcs.n	8018172 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80180f0:	f04f 0a04 	mov.w	sl, #4
 80180f4:	7824      	ldrb	r4, [r4, #0]
 80180f6:	2fff      	cmp	r7, #255	; 0xff
 80180f8:	f101 0101 	add.w	r1, r1, #1
 80180fc:	fb1e a404 	smlabb	r4, lr, r4, sl
 8018100:	eb06 0a04 	add.w	sl, r6, r4
 8018104:	f816 b004 	ldrb.w	fp, [r6, r4]
 8018108:	d02b      	beq.n	8018162 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801810a:	7804      	ldrb	r4, [r0, #0]
 801810c:	fb14 f405 	smulbb	r4, r4, r5
 8018110:	fb0b 440c 	mla	r4, fp, ip, r4
 8018114:	b2a4      	uxth	r4, r4
 8018116:	f104 0b01 	add.w	fp, r4, #1
 801811a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801811e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018122:	fb1b fb05 	smulbb	fp, fp, r5
 8018126:	1224      	asrs	r4, r4, #8
 8018128:	7004      	strb	r4, [r0, #0]
 801812a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801812e:	fb04 b40c 	mla	r4, r4, ip, fp
 8018132:	b2a4      	uxth	r4, r4
 8018134:	f104 0b01 	add.w	fp, r4, #1
 8018138:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801813c:	1224      	asrs	r4, r4, #8
 801813e:	7044      	strb	r4, [r0, #1]
 8018140:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018144:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018148:	fb1a fa05 	smulbb	sl, sl, r5
 801814c:	fb04 a40c 	mla	r4, r4, ip, sl
 8018150:	b2a4      	uxth	r4, r4
 8018152:	f104 0a01 	add.w	sl, r4, #1
 8018156:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801815a:	1224      	asrs	r4, r4, #8
 801815c:	7084      	strb	r4, [r0, #2]
 801815e:	3003      	adds	r0, #3
 8018160:	e7c3      	b.n	80180ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8018162:	f880 b000 	strb.w	fp, [r0]
 8018166:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801816a:	7044      	strb	r4, [r0, #1]
 801816c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018170:	e7f4      	b.n	801815c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8018172:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018174:	4420      	add	r0, r4
 8018176:	188c      	adds	r4, r1, r2
 8018178:	e7b2      	b.n	80180e0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801817a:	4b06      	ldr	r3, [pc, #24]	; (8018194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801817c:	6818      	ldr	r0, [r3, #0]
 801817e:	6803      	ldr	r3, [r0, #0]
 8018180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018182:	4798      	blx	r3
 8018184:	e785      	b.n	8018092 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8018186:	bf00      	nop
 8018188:	0802425c 	.word	0x0802425c
 801818c:	0802485e 	.word	0x0802485e
 8018190:	08024379 	.word	0x08024379
 8018194:	2400e9f0 	.word	0x2400e9f0
 8018198:	2400e9ea 	.word	0x2400e9ea

0801819c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801819c:	b570      	push	{r4, r5, r6, lr}
 801819e:	780d      	ldrb	r5, [r1, #0]
 80181a0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80181a4:	2d01      	cmp	r5, #1
 80181a6:	d00d      	beq.n	80181c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 80181a8:	d307      	bcc.n	80181ba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 80181aa:	2d02      	cmp	r5, #2
 80181ac:	d10f      	bne.n	80181ce <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 80181ae:	4b08      	ldr	r3, [pc, #32]	; (80181d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 80181b0:	2153      	movs	r1, #83	; 0x53
 80181b2:	4a08      	ldr	r2, [pc, #32]	; (80181d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80181b4:	4808      	ldr	r0, [pc, #32]	; (80181d8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80181b6:	f007 fb07 	bl	801f7c8 <__assert_func>
 80181ba:	9404      	str	r4, [sp, #16]
 80181bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181c0:	f7ff be1a 	b.w	8017df8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80181c4:	9404      	str	r4, [sp, #16]
 80181c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181ca:	f7ff befd 	b.w	8017fc8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80181ce:	bd70      	pop	{r4, r5, r6, pc}
 80181d0:	08024211 	.word	0x08024211
 80181d4:	080247dc 	.word	0x080247dc
 80181d8:	08024379 	.word	0x08024379

080181dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80181dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181e0:	4605      	mov	r5, r0
 80181e2:	b08f      	sub	sp, #60	; 0x3c
 80181e4:	460c      	mov	r4, r1
 80181e6:	461f      	mov	r7, r3
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d052      	beq.n	8018292 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80181ec:	6808      	ldr	r0, [r1, #0]
 80181ee:	ab0a      	add	r3, sp, #40	; 0x28
 80181f0:	6849      	ldr	r1, [r1, #4]
 80181f2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80183bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80181f6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80183c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80181fa:	c303      	stmia	r3!, {r0, r1}
 80181fc:	6810      	ldr	r0, [r2, #0]
 80181fe:	ab0c      	add	r3, sp, #48	; 0x30
 8018200:	6851      	ldr	r1, [r2, #4]
 8018202:	c303      	stmia	r3!, {r0, r1}
 8018204:	a80a      	add	r0, sp, #40	; 0x28
 8018206:	f7fa f935 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801820a:	4621      	mov	r1, r4
 801820c:	a80c      	add	r0, sp, #48	; 0x30
 801820e:	f7fa f959 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018212:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8018216:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801821a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801821e:	f8d8 0000 	ldr.w	r0, [r8]
 8018222:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018226:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801822a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801822e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8018232:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8018236:	440a      	add	r2, r1
 8018238:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801823c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8018240:	4413      	add	r3, r2
 8018242:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018246:	6803      	ldr	r3, [r0, #0]
 8018248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801824a:	4798      	blx	r3
 801824c:	2fff      	cmp	r7, #255	; 0xff
 801824e:	d023      	beq.n	8018298 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8018250:	f010 0f04 	tst.w	r0, #4
 8018254:	f8d8 0000 	ldr.w	r0, [r8]
 8018258:	d021      	beq.n	801829e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801825a:	2100      	movs	r1, #0
 801825c:	f04f 0e01 	mov.w	lr, #1
 8018260:	f8d0 c000 	ldr.w	ip, [r0]
 8018264:	b2a4      	uxth	r4, r4
 8018266:	9106      	str	r1, [sp, #24]
 8018268:	b2b6      	uxth	r6, r6
 801826a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801826e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018272:	e9cd e107 	strd	lr, r1, [sp, #28]
 8018276:	f8b9 e000 	ldrh.w	lr, [r9]
 801827a:	9703      	str	r7, [sp, #12]
 801827c:	9401      	str	r4, [sp, #4]
 801827e:	9600      	str	r6, [sp, #0]
 8018280:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8018284:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018288:	9102      	str	r1, [sp, #8]
 801828a:	4629      	mov	r1, r5
 801828c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8018290:	47a0      	blx	r4
 8018292:	b00f      	add	sp, #60	; 0x3c
 8018294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018298:	f010 0f01 	tst.w	r0, #1
 801829c:	e7da      	b.n	8018254 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801829e:	6803      	ldr	r3, [r0, #0]
 80182a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182a2:	4798      	blx	r3
 80182a4:	f8b9 1000 	ldrh.w	r1, [r9]
 80182a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80182ac:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80182b0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80182b4:	434c      	muls	r4, r1
 80182b6:	2fff      	cmp	r7, #255	; 0xff
 80182b8:	fb01 2303 	mla	r3, r1, r3, r2
 80182bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80182c0:	eba1 0106 	sub.w	r1, r1, r6
 80182c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80182cc:	4418      	add	r0, r3
 80182ce:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80182d2:	eba3 0606 	sub.w	r6, r3, r6
 80182d6:	4404      	add	r4, r0
 80182d8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80182dc:	d04a      	beq.n	8018374 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80182de:	43fa      	mvns	r2, r7
 80182e0:	b2bb      	uxth	r3, r7
 80182e2:	b2d7      	uxtb	r7, r2
 80182e4:	42a0      	cmp	r0, r4
 80182e6:	d263      	bcs.n	80183b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80182e8:	eb00 0e0c 	add.w	lr, r0, ip
 80182ec:	4586      	cmp	lr, r0
 80182ee:	f100 0803 	add.w	r8, r0, #3
 80182f2:	d93a      	bls.n	801836a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80182f4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80182f8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80182fc:	00d0      	lsls	r0, r2, #3
 80182fe:	fb19 f907 	smulbb	r9, r9, r7
 8018302:	b2c0      	uxtb	r0, r0
 8018304:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8018308:	fb00 9003 	mla	r0, r0, r3, r9
 801830c:	b280      	uxth	r0, r0
 801830e:	f100 0901 	add.w	r9, r0, #1
 8018312:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8018316:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801831a:	fb19 f907 	smulbb	r9, r9, r7
 801831e:	1200      	asrs	r0, r0, #8
 8018320:	f808 0c03 	strb.w	r0, [r8, #-3]
 8018324:	10d0      	asrs	r0, r2, #3
 8018326:	1212      	asrs	r2, r2, #8
 8018328:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801832c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8018330:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8018334:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018338:	fb00 9003 	mla	r0, r0, r3, r9
 801833c:	b280      	uxth	r0, r0
 801833e:	f100 0901 	add.w	r9, r0, #1
 8018342:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8018346:	1200      	asrs	r0, r0, #8
 8018348:	f808 0c02 	strb.w	r0, [r8, #-2]
 801834c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8018350:	fb10 f007 	smulbb	r0, r0, r7
 8018354:	fb02 0203 	mla	r2, r2, r3, r0
 8018358:	b292      	uxth	r2, r2
 801835a:	1c50      	adds	r0, r2, #1
 801835c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018360:	4640      	mov	r0, r8
 8018362:	1212      	asrs	r2, r2, #8
 8018364:	f808 2c01 	strb.w	r2, [r8, #-1]
 8018368:	e7c0      	b.n	80182ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801836a:	4408      	add	r0, r1
 801836c:	4435      	add	r5, r6
 801836e:	e7b9      	b.n	80182e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8018370:	4408      	add	r0, r1
 8018372:	4435      	add	r5, r6
 8018374:	42a0      	cmp	r0, r4
 8018376:	d21b      	bcs.n	80183b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8018378:	eb00 070c 	add.w	r7, r0, ip
 801837c:	42b8      	cmp	r0, r7
 801837e:	d2f7      	bcs.n	8018370 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8018380:	f835 3b02 	ldrh.w	r3, [r5], #2
 8018384:	3003      	adds	r0, #3
 8018386:	00da      	lsls	r2, r3, #3
 8018388:	b2d2      	uxtb	r2, r2
 801838a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801838e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8018392:	10da      	asrs	r2, r3, #3
 8018394:	121b      	asrs	r3, r3, #8
 8018396:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801839a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801839e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80183a2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80183a6:	f800 2c02 	strb.w	r2, [r0, #-2]
 80183aa:	f800 3c01 	strb.w	r3, [r0, #-1]
 80183ae:	e7e5      	b.n	801837c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80183b0:	4b02      	ldr	r3, [pc, #8]	; (80183bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80183b2:	6818      	ldr	r0, [r3, #0]
 80183b4:	6803      	ldr	r3, [r0, #0]
 80183b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b8:	4798      	blx	r3
 80183ba:	e76a      	b.n	8018292 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80183bc:	2400e9f0 	.word	0x2400e9f0
 80183c0:	2400e9ea 	.word	0x2400e9ea

080183c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80183c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183c8:	b08a      	sub	sp, #40	; 0x28
 80183ca:	460d      	mov	r5, r1
 80183cc:	4604      	mov	r4, r0
 80183ce:	461e      	mov	r6, r3
 80183d0:	6808      	ldr	r0, [r1, #0]
 80183d2:	ab06      	add	r3, sp, #24
 80183d4:	6849      	ldr	r1, [r1, #4]
 80183d6:	4f5d      	ldr	r7, [pc, #372]	; (801854c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80183d8:	c303      	stmia	r3!, {r0, r1}
 80183da:	6810      	ldr	r0, [r2, #0]
 80183dc:	ab08      	add	r3, sp, #32
 80183de:	6851      	ldr	r1, [r2, #4]
 80183e0:	c303      	stmia	r3!, {r0, r1}
 80183e2:	a806      	add	r0, sp, #24
 80183e4:	f7fa f846 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80183e8:	4629      	mov	r1, r5
 80183ea:	a808      	add	r0, sp, #32
 80183ec:	f7fa f86a 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183f0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80183f4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80183f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80183fc:	6838      	ldr	r0, [r7, #0]
 80183fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018402:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8018406:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801840a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801840e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018412:	440a      	add	r2, r1
 8018414:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018418:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801841c:	4413      	add	r3, r2
 801841e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018422:	6803      	ldr	r3, [r0, #0]
 8018424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018426:	4798      	blx	r3
 8018428:	2eff      	cmp	r6, #255	; 0xff
 801842a:	d119      	bne.n	8018460 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801842c:	f010 0f20 	tst.w	r0, #32
 8018430:	6838      	ldr	r0, [r7, #0]
 8018432:	d018      	beq.n	8018466 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8018434:	b2ad      	uxth	r5, r5
 8018436:	2700      	movs	r7, #0
 8018438:	6801      	ldr	r1, [r0, #0]
 801843a:	9501      	str	r5, [sp, #4]
 801843c:	fa1f f588 	uxth.w	r5, r8
 8018440:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018444:	9500      	str	r5, [sp, #0]
 8018446:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801844a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801844e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8018452:	9602      	str	r6, [sp, #8]
 8018454:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8018456:	4621      	mov	r1, r4
 8018458:	47a8      	blx	r5
 801845a:	b00a      	add	sp, #40	; 0x28
 801845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018464:	e7e4      	b.n	8018430 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8018466:	6803      	ldr	r3, [r0, #0]
 8018468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801846a:	4798      	blx	r3
 801846c:	4b38      	ldr	r3, [pc, #224]	; (8018550 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801846e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018472:	f8b3 c000 	ldrh.w	ip, [r3]
 8018476:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801847a:	fb0c f505 	mul.w	r5, ip, r5
 801847e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8018482:	fb0c 2303 	mla	r3, ip, r3, r2
 8018486:	ebac 0c08 	sub.w	ip, ip, r8
 801848a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801848e:	ebae 0e08 	sub.w	lr, lr, r8
 8018492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018496:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801849a:	4418      	add	r0, r3
 801849c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80184a0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80184a4:	4405      	add	r5, r0
 80184a6:	42a8      	cmp	r0, r5
 80184a8:	d24a      	bcs.n	8018540 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80184aa:	eb00 0803 	add.w	r8, r0, r3
 80184ae:	4540      	cmp	r0, r8
 80184b0:	d243      	bcs.n	801853a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80184b2:	78e2      	ldrb	r2, [r4, #3]
 80184b4:	b15a      	cbz	r2, 80184ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80184b6:	2aff      	cmp	r2, #255	; 0xff
 80184b8:	f894 9000 	ldrb.w	r9, [r4]
 80184bc:	d10a      	bne.n	80184d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80184be:	2eff      	cmp	r6, #255	; 0xff
 80184c0:	d108      	bne.n	80184d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80184c2:	f880 9000 	strb.w	r9, [r0]
 80184c6:	7862      	ldrb	r2, [r4, #1]
 80184c8:	7042      	strb	r2, [r0, #1]
 80184ca:	78a2      	ldrb	r2, [r4, #2]
 80184cc:	7082      	strb	r2, [r0, #2]
 80184ce:	3003      	adds	r0, #3
 80184d0:	3404      	adds	r4, #4
 80184d2:	e7ec      	b.n	80184ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80184d4:	4372      	muls	r2, r6
 80184d6:	1c51      	adds	r1, r2, #1
 80184d8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80184dc:	1209      	asrs	r1, r1, #8
 80184de:	fa1f fa81 	uxth.w	sl, r1
 80184e2:	43c9      	mvns	r1, r1
 80184e4:	fb19 f90a 	smulbb	r9, r9, sl
 80184e8:	b2ca      	uxtb	r2, r1
 80184ea:	7801      	ldrb	r1, [r0, #0]
 80184ec:	fb01 9902 	mla	r9, r1, r2, r9
 80184f0:	fa1f f989 	uxth.w	r9, r9
 80184f4:	f109 0101 	add.w	r1, r9, #1
 80184f8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80184fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018500:	f880 9000 	strb.w	r9, [r0]
 8018504:	f890 9001 	ldrb.w	r9, [r0, #1]
 8018508:	7861      	ldrb	r1, [r4, #1]
 801850a:	fb19 f902 	smulbb	r9, r9, r2
 801850e:	fb01 910a 	mla	r1, r1, sl, r9
 8018512:	b289      	uxth	r1, r1
 8018514:	f101 0901 	add.w	r9, r1, #1
 8018518:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801851c:	1209      	asrs	r1, r1, #8
 801851e:	7041      	strb	r1, [r0, #1]
 8018520:	7881      	ldrb	r1, [r0, #2]
 8018522:	f894 9002 	ldrb.w	r9, [r4, #2]
 8018526:	fb11 f202 	smulbb	r2, r1, r2
 801852a:	fb09 220a 	mla	r2, r9, sl, r2
 801852e:	b292      	uxth	r2, r2
 8018530:	1c51      	adds	r1, r2, #1
 8018532:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018536:	1212      	asrs	r2, r2, #8
 8018538:	e7c8      	b.n	80184cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801853a:	4460      	add	r0, ip
 801853c:	4474      	add	r4, lr
 801853e:	e7b2      	b.n	80184a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8018540:	6838      	ldr	r0, [r7, #0]
 8018542:	6803      	ldr	r3, [r0, #0]
 8018544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018546:	4798      	blx	r3
 8018548:	e787      	b.n	801845a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801854a:	bf00      	nop
 801854c:	2400e9f0 	.word	0x2400e9f0
 8018550:	2400e9ea 	.word	0x2400e9ea

08018554 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018558:	b085      	sub	sp, #20
 801855a:	4606      	mov	r6, r0
 801855c:	460c      	mov	r4, r1
 801855e:	4691      	mov	r9, r2
 8018560:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8018564:	4698      	mov	r8, r3
 8018566:	b31d      	cbz	r5, 80185b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018568:	4608      	mov	r0, r1
 801856a:	f7fd fa23 	bl	80159b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801856e:	4607      	mov	r7, r0
 8018570:	4620      	mov	r0, r4
 8018572:	f7fd fa59 	bl	8015a28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018576:	f8ad 000e 	strh.w	r0, [sp, #14]
 801857a:	4620      	mov	r0, r4
 801857c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8018580:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018584:	f8ad 700c 	strh.w	r7, [sp, #12]
 8018588:	f7fd fb6c 	bl	8015c64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801858c:	280b      	cmp	r0, #11
 801858e:	d838      	bhi.n	8018602 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8018590:	e8df f000 	tbb	[pc, r0]
 8018594:	37062920 	.word	0x37062920
 8018598:	37373737 	.word	0x37373737
 801859c:	11373737 	.word	0x11373737
 80185a0:	4620      	mov	r0, r4
 80185a2:	f7fd fad5 	bl	8015b50 <_ZNK8touchgfx6Bitmap7getDataEv>
 80185a6:	462b      	mov	r3, r5
 80185a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185aa:	a902      	add	r1, sp, #8
 80185ac:	f7ff ff0a 	bl	80183c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80185b0:	b005      	add	sp, #20
 80185b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185b6:	4620      	mov	r0, r4
 80185b8:	f7fd faca 	bl	8015b50 <_ZNK8touchgfx6Bitmap7getDataEv>
 80185bc:	4606      	mov	r6, r0
 80185be:	4620      	mov	r0, r4
 80185c0:	f7fd faf8 	bl	8015bb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80185c4:	9500      	str	r5, [sp, #0]
 80185c6:	4601      	mov	r1, r0
 80185c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185ca:	aa02      	add	r2, sp, #8
 80185cc:	4630      	mov	r0, r6
 80185ce:	f7ff fde5 	bl	801819c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80185d2:	e7ed      	b.n	80185b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80185d4:	4620      	mov	r0, r4
 80185d6:	f7fd fabb 	bl	8015b50 <_ZNK8touchgfx6Bitmap7getDataEv>
 80185da:	462b      	mov	r3, r5
 80185dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185de:	a902      	add	r1, sp, #8
 80185e0:	f7ff fdfc 	bl	80181dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80185e4:	e7e4      	b.n	80185b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80185e6:	6833      	ldr	r3, [r6, #0]
 80185e8:	4620      	mov	r0, r4
 80185ea:	68df      	ldr	r7, [r3, #12]
 80185ec:	f7fd fab0 	bl	8015b50 <_ZNK8touchgfx6Bitmap7getDataEv>
 80185f0:	2300      	movs	r3, #0
 80185f2:	4601      	mov	r1, r0
 80185f4:	aa02      	add	r2, sp, #8
 80185f6:	4630      	mov	r0, r6
 80185f8:	e9cd 5300 	strd	r5, r3, [sp]
 80185fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185fe:	47b8      	blx	r7
 8018600:	e7d6      	b.n	80185b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018602:	4b03      	ldr	r3, [pc, #12]	; (8018610 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8018604:	2147      	movs	r1, #71	; 0x47
 8018606:	4a03      	ldr	r2, [pc, #12]	; (8018614 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8018608:	4803      	ldr	r0, [pc, #12]	; (8018618 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801860a:	f007 f8dd 	bl	801f7c8 <__assert_func>
 801860e:	bf00      	nop
 8018610:	080242aa 	.word	0x080242aa
 8018614:	080248e7 	.word	0x080248e7
 8018618:	08024379 	.word	0x08024379

0801861c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801861c:	b570      	push	{r4, r5, r6, lr}
 801861e:	9c04      	ldr	r4, [sp, #16]
 8018620:	4605      	mov	r5, r0
 8018622:	4608      	mov	r0, r1
 8018624:	4619      	mov	r1, r3
 8018626:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801862a:	2a0d      	cmp	r2, #13
 801862c:	d826      	bhi.n	801867c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 801862e:	e8df f002 	tbb	[pc, r2]
 8018632:	1107      	.short	0x1107
 8018634:	1e1e1e0c 	.word	0x1e1e1e0c
 8018638:	1e1e1e1e 	.word	0x1e1e1e1e
 801863c:	1e1e1e1e 	.word	0x1e1e1e1e
 8018640:	4622      	mov	r2, r4
 8018642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018646:	f7ff bdc9 	b.w	80181dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801864a:	4622      	mov	r2, r4
 801864c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018650:	f7ff beb8 	b.w	80183c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018654:	682a      	ldr	r2, [r5, #0]
 8018656:	2600      	movs	r6, #0
 8018658:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801865c:	68d6      	ldr	r6, [r2, #12]
 801865e:	4623      	mov	r3, r4
 8018660:	460a      	mov	r2, r1
 8018662:	4601      	mov	r1, r0
 8018664:	46b4      	mov	ip, r6
 8018666:	4628      	mov	r0, r5
 8018668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801866c:	4760      	bx	ip
 801866e:	4b04      	ldr	r3, [pc, #16]	; (8018680 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8018670:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8018674:	4a03      	ldr	r2, [pc, #12]	; (8018684 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8018676:	4804      	ldr	r0, [pc, #16]	; (8018688 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8018678:	f007 f8a6 	bl	801f7c8 <__assert_func>
 801867c:	bd70      	pop	{r4, r5, r6, pc}
 801867e:	bf00      	nop
 8018680:	08024550 	.word	0x08024550
 8018684:	08024bcf 	.word	0x08024bcf
 8018688:	08024379 	.word	0x08024379

0801868c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801868c:	b158      	cbz	r0, 80186a6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801868e:	2902      	cmp	r1, #2
 8018690:	d00f      	beq.n	80186b2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8018692:	2903      	cmp	r1, #3
 8018694:	d010      	beq.n	80186b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8018696:	2901      	cmp	r1, #1
 8018698:	d101      	bne.n	801869e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801869a:	2001      	movs	r0, #1
 801869c:	4770      	bx	lr
 801869e:	4b08      	ldr	r3, [pc, #32]	; (80186c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80186a0:	8819      	ldrh	r1, [r3, #0]
 80186a2:	4248      	negs	r0, r1
 80186a4:	4770      	bx	lr
 80186a6:	2902      	cmp	r1, #2
 80186a8:	d006      	beq.n	80186b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80186aa:	2903      	cmp	r1, #3
 80186ac:	d0f7      	beq.n	801869e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80186ae:	2901      	cmp	r1, #1
 80186b0:	d1f3      	bne.n	801869a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80186b2:	4b03      	ldr	r3, [pc, #12]	; (80186c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80186b4:	8818      	ldrh	r0, [r3, #0]
 80186b6:	4770      	bx	lr
 80186b8:	f04f 30ff 	mov.w	r0, #4294967295
 80186bc:	4770      	bx	lr
 80186be:	bf00      	nop
 80186c0:	2400e9ea 	.word	0x2400e9ea

080186c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80186c4:	b170      	cbz	r0, 80186e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80186c6:	2902      	cmp	r1, #2
 80186c8:	d012      	beq.n	80186f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80186ca:	2903      	cmp	r1, #3
 80186cc:	d006      	beq.n	80186dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80186ce:	2901      	cmp	r1, #1
 80186d0:	d001      	beq.n	80186d6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80186d2:	2001      	movs	r0, #1
 80186d4:	4770      	bx	lr
 80186d6:	4b08      	ldr	r3, [pc, #32]	; (80186f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80186d8:	8818      	ldrh	r0, [r3, #0]
 80186da:	4770      	bx	lr
 80186dc:	4b06      	ldr	r3, [pc, #24]	; (80186f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80186de:	8818      	ldrh	r0, [r3, #0]
 80186e0:	4240      	negs	r0, r0
 80186e2:	4770      	bx	lr
 80186e4:	2902      	cmp	r1, #2
 80186e6:	d0f9      	beq.n	80186dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80186e8:	2903      	cmp	r1, #3
 80186ea:	d0f2      	beq.n	80186d2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80186ec:	2901      	cmp	r1, #1
 80186ee:	d1f2      	bne.n	80186d6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80186f0:	f04f 30ff 	mov.w	r0, #4294967295
 80186f4:	4770      	bx	lr
 80186f6:	bf00      	nop
 80186f8:	2400e9ea 	.word	0x2400e9ea

080186fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80186fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018700:	b097      	sub	sp, #92	; 0x5c
 8018702:	910b      	str	r1, [sp, #44]	; 0x2c
 8018704:	a912      	add	r1, sp, #72	; 0x48
 8018706:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801870a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801870e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8018712:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8018716:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801871a:	e881 000c 	stmia.w	r1, {r2, r3}
 801871e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8018722:	930a      	str	r3, [sp, #40]	; 0x28
 8018724:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8018728:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801872c:	9311      	str	r3, [sp, #68]	; 0x44
 801872e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8018732:	798d      	ldrb	r5, [r1, #6]
 8018734:	930c      	str	r3, [sp, #48]	; 0x30
 8018736:	7b4b      	ldrb	r3, [r1, #13]
 8018738:	0158      	lsls	r0, r3, #5
 801873a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801873e:	4328      	orrs	r0, r5
 8018740:	9009      	str	r0, [sp, #36]	; 0x24
 8018742:	f000 817d 	beq.w	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018746:	011b      	lsls	r3, r3, #4
 8018748:	79c8      	ldrb	r0, [r1, #7]
 801874a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801874e:	4303      	orrs	r3, r0
 8018750:	930e      	str	r3, [sp, #56]	; 0x38
 8018752:	f000 8175 	beq.w	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018756:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801875a:	b29b      	uxth	r3, r3
 801875c:	2f00      	cmp	r7, #0
 801875e:	f000 8117 	beq.w	8018990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 8018762:	1aff      	subs	r7, r7, r3
 8018764:	b2bf      	uxth	r7, r7
 8018766:	043b      	lsls	r3, r7, #16
 8018768:	d502      	bpl.n	8018770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801876a:	1bf6      	subs	r6, r6, r7
 801876c:	2700      	movs	r7, #0
 801876e:	b236      	sxth	r6, r6
 8018770:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018774:	a812      	add	r0, sp, #72	; 0x48
 8018776:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801877a:	428e      	cmp	r6, r1
 801877c:	b28b      	uxth	r3, r1
 801877e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8018782:	bfbf      	itttt	lt
 8018784:	18ff      	addlt	r7, r7, r3
 8018786:	1bbe      	sublt	r6, r7, r6
 8018788:	b2b7      	uxthlt	r7, r6
 801878a:	460e      	movlt	r6, r1
 801878c:	8891      	ldrh	r1, [r2, #4]
 801878e:	440b      	add	r3, r1
 8018790:	4631      	mov	r1, r6
 8018792:	b21b      	sxth	r3, r3
 8018794:	9310      	str	r3, [sp, #64]	; 0x40
 8018796:	88d3      	ldrh	r3, [r2, #6]
 8018798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801879a:	449a      	add	sl, r3
 801879c:	fa0f f38a 	sxth.w	r3, sl
 80187a0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80187a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80187a6:	4bb6      	ldr	r3, [pc, #728]	; (8018a80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80187a8:	f893 b000 	ldrb.w	fp, [r3]
 80187ac:	f10b 3cff 	add.w	ip, fp, #4294967295
 80187b0:	f1dc 0300 	rsbs	r3, ip, #0
 80187b4:	eb43 030c 	adc.w	r3, r3, ip
 80187b8:	930d      	str	r3, [sp, #52]	; 0x34
 80187ba:	464b      	mov	r3, r9
 80187bc:	f7f9 fcde 	bl	801217c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80187c0:	4631      	mov	r1, r6
 80187c2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80187c6:	464b      	mov	r3, r9
 80187c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187ca:	a812      	add	r0, sp, #72	; 0x48
 80187cc:	f7f9 fcee 	bl	80121ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80187d0:	a916      	add	r1, sp, #88	; 0x58
 80187d2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80187d6:	a815      	add	r0, sp, #84	; 0x54
 80187d8:	f7f9 fe0a 	bl	80123f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80187dc:	f1b9 0f00 	cmp.w	r9, #0
 80187e0:	f040 80d9 	bne.w	8018996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 80187e4:	f1bb 0f01 	cmp.w	fp, #1
 80187e8:	f040 80dd 	bne.w	80189a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80187ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80187ee:	b153      	cbz	r3, 8018806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80187f0:	2508      	movs	r5, #8
 80187f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187f4:	fb95 f3f8 	sdiv	r3, r5, r8
 80187f8:	1e5d      	subs	r5, r3, #1
 80187fa:	4415      	add	r5, r2
 80187fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8018800:	fb15 f503 	smulbb	r5, r5, r3
 8018804:	b2ad      	uxth	r5, r5
 8018806:	b907      	cbnz	r7, 801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8018808:	b16c      	cbz	r4, 8018826 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801880a:	fb04 7305 	mla	r3, r4, r5, r7
 801880e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018810:	ebaa 0a04 	sub.w	sl, sl, r4
 8018814:	fb08 f303 	mul.w	r3, r8, r3
 8018818:	fa1f fa8a 	uxth.w	sl, sl
 801881c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8018820:	f003 0407 	and.w	r4, r3, #7
 8018824:	9226      	str	r2, [sp, #152]	; 0x98
 8018826:	4649      	mov	r1, r9
 8018828:	980d      	ldr	r0, [sp, #52]	; 0x34
 801882a:	f7ff ff2f 	bl	801868c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801882e:	4649      	mov	r1, r9
 8018830:	4683      	mov	fp, r0
 8018832:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018834:	f7ff ff46 	bl	80186c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8018838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801883a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801883c:	4681      	mov	r9, r0
 801883e:	1a9b      	subs	r3, r3, r2
 8018840:	459a      	cmp	sl, r3
 8018842:	bfa8      	it	ge
 8018844:	469a      	movge	sl, r3
 8018846:	f1ba 0f00 	cmp.w	sl, #0
 801884a:	f340 80f9 	ble.w	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801884e:	1bf6      	subs	r6, r6, r7
 8018850:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018852:	1b9e      	subs	r6, r3, r6
 8018854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018856:	429e      	cmp	r6, r3
 8018858:	bfd4      	ite	le
 801885a:	ebc7 0706 	rsble	r7, r7, r6
 801885e:	ebc7 0703 	rsbgt	r7, r7, r3
 8018862:	2f00      	cmp	r7, #0
 8018864:	f340 80ec 	ble.w	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018868:	1bed      	subs	r5, r5, r7
 801886a:	fb08 f305 	mul.w	r3, r8, r5
 801886e:	930d      	str	r3, [sp, #52]	; 0x34
 8018870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018872:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8018876:	930e      	str	r3, [sp, #56]	; 0x38
 8018878:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801887a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018880:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018882:	b2db      	uxtb	r3, r3
 8018884:	9310      	str	r3, [sp, #64]	; 0x40
 8018886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018888:	2b00      	cmp	r3, #0
 801888a:	f040 80de 	bne.w	8018a4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 801888e:	4b7d      	ldr	r3, [pc, #500]	; (8018a84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8018890:	6818      	ldr	r0, [r3, #0]
 8018892:	6803      	ldr	r3, [r0, #0]
 8018894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018896:	4798      	blx	r3
 8018898:	2301      	movs	r3, #1
 801889a:	4a7b      	ldr	r2, [pc, #492]	; (8018a88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801889c:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80188a0:	fb07 9b1b 	mls	fp, r7, fp, r9
 80188a4:	fa03 f308 	lsl.w	r3, r3, r8
 80188a8:	8811      	ldrh	r1, [r2, #0]
 80188aa:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80188ae:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80188b2:	3b01      	subs	r3, #1
 80188b4:	fb06 bb07 	mla	fp, r6, r7, fp
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	930a      	str	r3, [sp, #40]	; 0x28
 80188bc:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80188c0:	fb01 2303 	mla	r3, r1, r3, r2
 80188c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188c8:	18c3      	adds	r3, r0, r3
 80188ca:	9309      	str	r3, [sp, #36]	; 0x24
 80188cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80188ce:	781a      	ldrb	r2, [r3, #0]
 80188d0:	4122      	asrs	r2, r4
 80188d2:	b2d2      	uxtb	r2, r2
 80188d4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80188d8:	f0c0 80d8 	bcc.w	8018a8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80188dc:	46be      	mov	lr, r7
 80188de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80188e0:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80188e4:	f0c0 80ba 	bcc.w	8018a5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 80188e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188ea:	4013      	ands	r3, r2
 80188ec:	d041      	beq.n	8018972 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 80188ee:	20ff      	movs	r0, #255	; 0xff
 80188f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80188f2:	fb90 f5f5 	sdiv	r5, r0, r5
 80188f6:	436b      	muls	r3, r5
 80188f8:	2bfe      	cmp	r3, #254	; 0xfe
 80188fa:	dd03      	ble.n	8018904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80188fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188fe:	4285      	cmp	r5, r0
 8018900:	f000 80a5 	beq.w	8018a4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8018904:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018906:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018908:	fb15 f303 	smulbb	r3, r5, r3
 801890c:	b29b      	uxth	r3, r3
 801890e:	1c5d      	adds	r5, r3, #1
 8018910:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8018914:	780d      	ldrb	r5, [r1, #0]
 8018916:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801891a:	fa1f fc83 	uxth.w	ip, r3
 801891e:	43db      	mvns	r3, r3
 8018920:	fb10 f90c 	smulbb	r9, r0, ip
 8018924:	b2db      	uxtb	r3, r3
 8018926:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018928:	fb05 9503 	mla	r5, r5, r3, r9
 801892c:	b2ad      	uxth	r5, r5
 801892e:	f105 0901 	add.w	r9, r5, #1
 8018932:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8018936:	fb10 f90c 	smulbb	r9, r0, ip
 801893a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801893c:	122d      	asrs	r5, r5, #8
 801893e:	fb10 fc0c 	smulbb	ip, r0, ip
 8018942:	700d      	strb	r5, [r1, #0]
 8018944:	784d      	ldrb	r5, [r1, #1]
 8018946:	fb05 9503 	mla	r5, r5, r3, r9
 801894a:	b2ad      	uxth	r5, r5
 801894c:	f105 0901 	add.w	r9, r5, #1
 8018950:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8018954:	122d      	asrs	r5, r5, #8
 8018956:	704d      	strb	r5, [r1, #1]
 8018958:	788d      	ldrb	r5, [r1, #2]
 801895a:	fb05 cc03 	mla	ip, r5, r3, ip
 801895e:	fa1f fc8c 	uxth.w	ip, ip
 8018962:	f10c 0301 	add.w	r3, ip, #1
 8018966:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801896a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801896e:	f881 c002 	strb.w	ip, [r1, #2]
 8018972:	4444      	add	r4, r8
 8018974:	4431      	add	r1, r6
 8018976:	b2a4      	uxth	r4, r4
 8018978:	2c07      	cmp	r4, #7
 801897a:	bf89      	itett	hi
 801897c:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801897e:	fa42 f208 	asrls.w	r2, r2, r8
 8018982:	2400      	movhi	r4, #0
 8018984:	785a      	ldrbhi	r2, [r3, #1]
 8018986:	bf8a      	itet	hi
 8018988:	3301      	addhi	r3, #1
 801898a:	b2d2      	uxtbls	r2, r2
 801898c:	9326      	strhi	r3, [sp, #152]	; 0x98
 801898e:	e7a7      	b.n	80188e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8018990:	441e      	add	r6, r3
 8018992:	b236      	sxth	r6, r6
 8018994:	e6ec      	b.n	8018770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018996:	f1b9 0f01 	cmp.w	r9, #1
 801899a:	f47f af27 	bne.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801899e:	f1bb 0f01 	cmp.w	fp, #1
 80189a2:	f47f af23 	bne.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80189a6:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8018a84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80189aa:	f8db 0000 	ldr.w	r0, [fp]
 80189ae:	6803      	ldr	r3, [r0, #0]
 80189b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189b2:	4798      	blx	r3
 80189b4:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80189b8:	465a      	mov	r2, fp
 80189ba:	d006      	beq.n	80189ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80189bc:	f1b8 0f04 	cmp.w	r8, #4
 80189c0:	d141      	bne.n	8018a46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80189c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80189c4:	3300      	adds	r3, #0
 80189c6:	bf18      	it	ne
 80189c8:	2301      	movne	r3, #1
 80189ca:	0580      	lsls	r0, r0, #22
 80189cc:	d567      	bpl.n	8018a9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80189ce:	f1b8 0f08 	cmp.w	r8, #8
 80189d2:	d164      	bne.n	8018a9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	bf0c      	ite	eq
 80189d8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80189dc:	f44f 7180 	movne.w	r1, #256	; 0x100
 80189e0:	2f00      	cmp	r7, #0
 80189e2:	f47f af03 	bne.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80189e6:	2c00      	cmp	r4, #0
 80189e8:	f47f af00 	bne.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80189ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80189f0:	18f3      	adds	r3, r6, r3
 80189f2:	4283      	cmp	r3, r0
 80189f4:	f73f aefa 	bgt.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80189f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80189fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189fc:	4403      	add	r3, r0
 80189fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018a00:	4283      	cmp	r3, r0
 8018a02:	f73f aef3 	bgt.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018a06:	f1b8 0f08 	cmp.w	r8, #8
 8018a0a:	6810      	ldr	r0, [r2, #0]
 8018a0c:	f04f 0600 	mov.w	r6, #0
 8018a10:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018a14:	bf18      	it	ne
 8018a16:	3501      	addne	r5, #1
 8018a18:	6804      	ldr	r4, [r0, #0]
 8018a1a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018a1e:	bf18      	it	ne
 8018a20:	f025 0501 	bicne.w	r5, r5, #1
 8018a24:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8018a28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018a2a:	bf18      	it	ne
 8018a2c:	b2ad      	uxthne	r5, r5
 8018a2e:	9104      	str	r1, [sp, #16]
 8018a30:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018a32:	e9cd 5a00 	strd	r5, sl, [sp]
 8018a36:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018a3a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018a3c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018a3e:	47a0      	blx	r4
 8018a40:	b017      	add	sp, #92	; 0x5c
 8018a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a46:	2300      	movs	r3, #0
 8018a48:	e7bf      	b.n	80189ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8018a4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018a4c:	e724      	b.n	8018898 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8018a4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a50:	700b      	strb	r3, [r1, #0]
 8018a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a54:	704b      	strb	r3, [r1, #1]
 8018a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a58:	708b      	strb	r3, [r1, #2]
 8018a5a:	e78a      	b.n	8018972 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8018a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a5e:	b153      	cbz	r3, 8018a76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8018a60:	441c      	add	r4, r3
 8018a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018a64:	b2a4      	uxth	r4, r4
 8018a66:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8018a6a:	f004 0407 	and.w	r4, r4, #7
 8018a6e:	781a      	ldrb	r2, [r3, #0]
 8018a70:	9326      	str	r3, [sp, #152]	; 0x98
 8018a72:	4122      	asrs	r2, r4
 8018a74:	b2d2      	uxtb	r2, r2
 8018a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a78:	445b      	add	r3, fp
 8018a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8018a7c:	e72a      	b.n	80188d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8018a7e:	bf00      	nop
 8018a80:	2400e9e8 	.word	0x2400e9e8
 8018a84:	2400e9f0 	.word	0x2400e9f0
 8018a88:	2400e9ea 	.word	0x2400e9ea
 8018a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d1d6      	bne.n	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018a92:	4b06      	ldr	r3, [pc, #24]	; (8018aac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8018a94:	6818      	ldr	r0, [r3, #0]
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a9a:	4798      	blx	r3
 8018a9c:	e7d0      	b.n	8018a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f43f aea4 	beq.w	80187ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018aa8:	e79a      	b.n	80189e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8018aaa:	bf00      	nop
 8018aac:	2400e9f0 	.word	0x2400e9f0

08018ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8018ab0:	b538      	push	{r3, r4, r5, lr}
 8018ab2:	4c15      	ldr	r4, [pc, #84]	; (8018b08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8018ab4:	4605      	mov	r5, r0
 8018ab6:	7823      	ldrb	r3, [r4, #0]
 8018ab8:	f3bf 8f5b 	dmb	ish
 8018abc:	07da      	lsls	r2, r3, #31
 8018abe:	d40b      	bmi.n	8018ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f006 fe54 	bl	801f76e <__cxa_guard_acquire>
 8018ac6:	b138      	cbz	r0, 8018ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f006 fe5c 	bl	801f786 <__cxa_guard_release>
 8018ace:	4a0f      	ldr	r2, [pc, #60]	; (8018b0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018ad0:	490f      	ldr	r1, [pc, #60]	; (8018b10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8018ad2:	4810      	ldr	r0, [pc, #64]	; (8018b14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018ad4:	f006 fe44 	bl	801f760 <__aeabi_atexit>
 8018ad8:	4c0f      	ldr	r4, [pc, #60]	; (8018b18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8018ada:	7823      	ldrb	r3, [r4, #0]
 8018adc:	f3bf 8f5b 	dmb	ish
 8018ae0:	07db      	lsls	r3, r3, #31
 8018ae2:	d40b      	bmi.n	8018afc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f006 fe42 	bl	801f76e <__cxa_guard_acquire>
 8018aea:	b138      	cbz	r0, 8018afc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018aec:	4620      	mov	r0, r4
 8018aee:	f006 fe4a 	bl	801f786 <__cxa_guard_release>
 8018af2:	4a06      	ldr	r2, [pc, #24]	; (8018b0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018af4:	4909      	ldr	r1, [pc, #36]	; (8018b1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8018af6:	480a      	ldr	r0, [pc, #40]	; (8018b20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018af8:	f006 fe32 	bl	801f760 <__aeabi_atexit>
 8018afc:	4b05      	ldr	r3, [pc, #20]	; (8018b14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018afe:	612b      	str	r3, [r5, #16]
 8018b00:	4b07      	ldr	r3, [pc, #28]	; (8018b20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018b02:	616b      	str	r3, [r5, #20]
 8018b04:	bd38      	pop	{r3, r4, r5, pc}
 8018b06:	bf00      	nop
 8018b08:	2400eadc 	.word	0x2400eadc
 8018b0c:	24000000 	.word	0x24000000
 8018b10:	08017529 	.word	0x08017529
 8018b14:	240000b8 	.word	0x240000b8
 8018b18:	2400eae0 	.word	0x2400eae0
 8018b1c:	08017527 	.word	0x08017527
 8018b20:	240000bc 	.word	0x240000bc

08018b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8018b24:	b538      	push	{r3, r4, r5, lr}
 8018b26:	4c15      	ldr	r4, [pc, #84]	; (8018b7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018b28:	4605      	mov	r5, r0
 8018b2a:	7823      	ldrb	r3, [r4, #0]
 8018b2c:	f3bf 8f5b 	dmb	ish
 8018b30:	07da      	lsls	r2, r3, #31
 8018b32:	d40b      	bmi.n	8018b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018b34:	4620      	mov	r0, r4
 8018b36:	f006 fe1a 	bl	801f76e <__cxa_guard_acquire>
 8018b3a:	b138      	cbz	r0, 8018b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f006 fe22 	bl	801f786 <__cxa_guard_release>
 8018b42:	4a0f      	ldr	r2, [pc, #60]	; (8018b80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018b44:	490f      	ldr	r1, [pc, #60]	; (8018b84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8018b46:	4810      	ldr	r0, [pc, #64]	; (8018b88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018b48:	f006 fe0a 	bl	801f760 <__aeabi_atexit>
 8018b4c:	4c0f      	ldr	r4, [pc, #60]	; (8018b8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018b4e:	7823      	ldrb	r3, [r4, #0]
 8018b50:	f3bf 8f5b 	dmb	ish
 8018b54:	07db      	lsls	r3, r3, #31
 8018b56:	d40b      	bmi.n	8018b70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018b58:	4620      	mov	r0, r4
 8018b5a:	f006 fe08 	bl	801f76e <__cxa_guard_acquire>
 8018b5e:	b138      	cbz	r0, 8018b70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018b60:	4620      	mov	r0, r4
 8018b62:	f006 fe10 	bl	801f786 <__cxa_guard_release>
 8018b66:	4a06      	ldr	r2, [pc, #24]	; (8018b80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018b68:	4909      	ldr	r1, [pc, #36]	; (8018b90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018b6a:	480a      	ldr	r0, [pc, #40]	; (8018b94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018b6c:	f006 fdf8 	bl	801f760 <__aeabi_atexit>
 8018b70:	4b05      	ldr	r3, [pc, #20]	; (8018b88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018b72:	60ab      	str	r3, [r5, #8]
 8018b74:	4b07      	ldr	r3, [pc, #28]	; (8018b94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018b76:	60eb      	str	r3, [r5, #12]
 8018b78:	bd38      	pop	{r3, r4, r5, pc}
 8018b7a:	bf00      	nop
 8018b7c:	2400eabc 	.word	0x2400eabc
 8018b80:	24000000 	.word	0x24000000
 8018b84:	0801752d 	.word	0x0801752d
 8018b88:	24000098 	.word	0x24000098
 8018b8c:	2400eac0 	.word	0x2400eac0
 8018b90:	0801752b 	.word	0x0801752b
 8018b94:	2400009c 	.word	0x2400009c

08018b98 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8018b98:	b510      	push	{r4, lr}
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	f7ff ff88 	bl	8018ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ba6:	f7ff bfbd 	b.w	8018b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08018bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8018bac:	b538      	push	{r3, r4, r5, lr}
 8018bae:	4c15      	ldr	r4, [pc, #84]	; (8018c04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8018bb0:	4605      	mov	r5, r0
 8018bb2:	7823      	ldrb	r3, [r4, #0]
 8018bb4:	f3bf 8f5b 	dmb	ish
 8018bb8:	07da      	lsls	r2, r3, #31
 8018bba:	d40b      	bmi.n	8018bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	f006 fdd6 	bl	801f76e <__cxa_guard_acquire>
 8018bc2:	b138      	cbz	r0, 8018bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	f006 fdde 	bl	801f786 <__cxa_guard_release>
 8018bca:	4a0f      	ldr	r2, [pc, #60]	; (8018c08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018bcc:	490f      	ldr	r1, [pc, #60]	; (8018c0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8018bce:	4810      	ldr	r0, [pc, #64]	; (8018c10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018bd0:	f006 fdc6 	bl	801f760 <__aeabi_atexit>
 8018bd4:	4c0f      	ldr	r4, [pc, #60]	; (8018c14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8018bd6:	7823      	ldrb	r3, [r4, #0]
 8018bd8:	f3bf 8f5b 	dmb	ish
 8018bdc:	07db      	lsls	r3, r3, #31
 8018bde:	d40b      	bmi.n	8018bf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018be0:	4620      	mov	r0, r4
 8018be2:	f006 fdc4 	bl	801f76e <__cxa_guard_acquire>
 8018be6:	b138      	cbz	r0, 8018bf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018be8:	4620      	mov	r0, r4
 8018bea:	f006 fdcc 	bl	801f786 <__cxa_guard_release>
 8018bee:	4a06      	ldr	r2, [pc, #24]	; (8018c08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018bf0:	4909      	ldr	r1, [pc, #36]	; (8018c18 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018bf2:	480a      	ldr	r0, [pc, #40]	; (8018c1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018bf4:	f006 fdb4 	bl	801f760 <__aeabi_atexit>
 8018bf8:	4b05      	ldr	r3, [pc, #20]	; (8018c10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018bfa:	622b      	str	r3, [r5, #32]
 8018bfc:	4b07      	ldr	r3, [pc, #28]	; (8018c1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018bfe:	626b      	str	r3, [r5, #36]	; 0x24
 8018c00:	bd38      	pop	{r3, r4, r5, pc}
 8018c02:	bf00      	nop
 8018c04:	2400eae4 	.word	0x2400eae4
 8018c08:	24000000 	.word	0x24000000
 8018c0c:	08017521 	.word	0x08017521
 8018c10:	240000c0 	.word	0x240000c0
 8018c14:	2400eae8 	.word	0x2400eae8
 8018c18:	0801751f 	.word	0x0801751f
 8018c1c:	240000c4 	.word	0x240000c4

08018c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018c20:	b538      	push	{r3, r4, r5, lr}
 8018c22:	4c15      	ldr	r4, [pc, #84]	; (8018c78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018c24:	4605      	mov	r5, r0
 8018c26:	7823      	ldrb	r3, [r4, #0]
 8018c28:	f3bf 8f5b 	dmb	ish
 8018c2c:	07da      	lsls	r2, r3, #31
 8018c2e:	d40b      	bmi.n	8018c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018c30:	4620      	mov	r0, r4
 8018c32:	f006 fd9c 	bl	801f76e <__cxa_guard_acquire>
 8018c36:	b138      	cbz	r0, 8018c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f006 fda4 	bl	801f786 <__cxa_guard_release>
 8018c3e:	4a0f      	ldr	r2, [pc, #60]	; (8018c7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018c40:	490f      	ldr	r1, [pc, #60]	; (8018c80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018c42:	4810      	ldr	r0, [pc, #64]	; (8018c84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018c44:	f006 fd8c 	bl	801f760 <__aeabi_atexit>
 8018c48:	4c0f      	ldr	r4, [pc, #60]	; (8018c88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018c4a:	7823      	ldrb	r3, [r4, #0]
 8018c4c:	f3bf 8f5b 	dmb	ish
 8018c50:	07db      	lsls	r3, r3, #31
 8018c52:	d40b      	bmi.n	8018c6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018c54:	4620      	mov	r0, r4
 8018c56:	f006 fd8a 	bl	801f76e <__cxa_guard_acquire>
 8018c5a:	b138      	cbz	r0, 8018c6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	f006 fd92 	bl	801f786 <__cxa_guard_release>
 8018c62:	4a06      	ldr	r2, [pc, #24]	; (8018c7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018c64:	4909      	ldr	r1, [pc, #36]	; (8018c8c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018c66:	480a      	ldr	r0, [pc, #40]	; (8018c90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018c68:	f006 fd7a 	bl	801f760 <__aeabi_atexit>
 8018c6c:	4b05      	ldr	r3, [pc, #20]	; (8018c84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018c6e:	61ab      	str	r3, [r5, #24]
 8018c70:	4b07      	ldr	r3, [pc, #28]	; (8018c90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018c72:	61eb      	str	r3, [r5, #28]
 8018c74:	bd38      	pop	{r3, r4, r5, pc}
 8018c76:	bf00      	nop
 8018c78:	2400eac4 	.word	0x2400eac4
 8018c7c:	24000000 	.word	0x24000000
 8018c80:	08017525 	.word	0x08017525
 8018c84:	240000a0 	.word	0x240000a0
 8018c88:	2400eac8 	.word	0x2400eac8
 8018c8c:	08017523 	.word	0x08017523
 8018c90:	240000a4 	.word	0x240000a4

08018c94 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018c94:	b510      	push	{r4, lr}
 8018c96:	4604      	mov	r4, r0
 8018c98:	f7ff ff88 	bl	8018bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ca2:	f7ff bfbd 	b.w	8018c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8018ca8:	b538      	push	{r3, r4, r5, lr}
 8018caa:	4c15      	ldr	r4, [pc, #84]	; (8018d00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8018cac:	4605      	mov	r5, r0
 8018cae:	7823      	ldrb	r3, [r4, #0]
 8018cb0:	f3bf 8f5b 	dmb	ish
 8018cb4:	07da      	lsls	r2, r3, #31
 8018cb6:	d40b      	bmi.n	8018cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	f006 fd58 	bl	801f76e <__cxa_guard_acquire>
 8018cbe:	b138      	cbz	r0, 8018cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f006 fd60 	bl	801f786 <__cxa_guard_release>
 8018cc6:	4a0f      	ldr	r2, [pc, #60]	; (8018d04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018cc8:	490f      	ldr	r1, [pc, #60]	; (8018d08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8018cca:	4810      	ldr	r0, [pc, #64]	; (8018d0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018ccc:	f006 fd48 	bl	801f760 <__aeabi_atexit>
 8018cd0:	4c0f      	ldr	r4, [pc, #60]	; (8018d10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018cd2:	7823      	ldrb	r3, [r4, #0]
 8018cd4:	f3bf 8f5b 	dmb	ish
 8018cd8:	07db      	lsls	r3, r3, #31
 8018cda:	d40b      	bmi.n	8018cf4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f006 fd46 	bl	801f76e <__cxa_guard_acquire>
 8018ce2:	b138      	cbz	r0, 8018cf4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f006 fd4e 	bl	801f786 <__cxa_guard_release>
 8018cea:	4a06      	ldr	r2, [pc, #24]	; (8018d04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018cec:	4909      	ldr	r1, [pc, #36]	; (8018d14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018cee:	480a      	ldr	r0, [pc, #40]	; (8018d18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018cf0:	f006 fd36 	bl	801f760 <__aeabi_atexit>
 8018cf4:	4b05      	ldr	r3, [pc, #20]	; (8018d0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018cf6:	632b      	str	r3, [r5, #48]	; 0x30
 8018cf8:	4b07      	ldr	r3, [pc, #28]	; (8018d18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018cfa:	636b      	str	r3, [r5, #52]	; 0x34
 8018cfc:	bd38      	pop	{r3, r4, r5, pc}
 8018cfe:	bf00      	nop
 8018d00:	2400eacc 	.word	0x2400eacc
 8018d04:	24000000 	.word	0x24000000
 8018d08:	08017519 	.word	0x08017519
 8018d0c:	240000a8 	.word	0x240000a8
 8018d10:	2400ead0 	.word	0x2400ead0
 8018d14:	08017517 	.word	0x08017517
 8018d18:	240000ac 	.word	0x240000ac

08018d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018d1c:	b538      	push	{r3, r4, r5, lr}
 8018d1e:	4c15      	ldr	r4, [pc, #84]	; (8018d74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018d20:	4605      	mov	r5, r0
 8018d22:	7823      	ldrb	r3, [r4, #0]
 8018d24:	f3bf 8f5b 	dmb	ish
 8018d28:	07da      	lsls	r2, r3, #31
 8018d2a:	d40b      	bmi.n	8018d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	f006 fd1e 	bl	801f76e <__cxa_guard_acquire>
 8018d32:	b138      	cbz	r0, 8018d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018d34:	4620      	mov	r0, r4
 8018d36:	f006 fd26 	bl	801f786 <__cxa_guard_release>
 8018d3a:	4a0f      	ldr	r2, [pc, #60]	; (8018d78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018d3c:	490f      	ldr	r1, [pc, #60]	; (8018d7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018d3e:	4810      	ldr	r0, [pc, #64]	; (8018d80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018d40:	f006 fd0e 	bl	801f760 <__aeabi_atexit>
 8018d44:	4c0f      	ldr	r4, [pc, #60]	; (8018d84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018d46:	7823      	ldrb	r3, [r4, #0]
 8018d48:	f3bf 8f5b 	dmb	ish
 8018d4c:	07db      	lsls	r3, r3, #31
 8018d4e:	d40b      	bmi.n	8018d68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018d50:	4620      	mov	r0, r4
 8018d52:	f006 fd0c 	bl	801f76e <__cxa_guard_acquire>
 8018d56:	b138      	cbz	r0, 8018d68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018d58:	4620      	mov	r0, r4
 8018d5a:	f006 fd14 	bl	801f786 <__cxa_guard_release>
 8018d5e:	4a06      	ldr	r2, [pc, #24]	; (8018d78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018d60:	4909      	ldr	r1, [pc, #36]	; (8018d88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018d62:	480a      	ldr	r0, [pc, #40]	; (8018d8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018d64:	f006 fcfc 	bl	801f760 <__aeabi_atexit>
 8018d68:	4b05      	ldr	r3, [pc, #20]	; (8018d80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018d6a:	62ab      	str	r3, [r5, #40]	; 0x28
 8018d6c:	4b07      	ldr	r3, [pc, #28]	; (8018d8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018d6e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018d70:	bd38      	pop	{r3, r4, r5, pc}
 8018d72:	bf00      	nop
 8018d74:	2400eaa4 	.word	0x2400eaa4
 8018d78:	24000000 	.word	0x24000000
 8018d7c:	0801751d 	.word	0x0801751d
 8018d80:	24000080 	.word	0x24000080
 8018d84:	2400eaa8 	.word	0x2400eaa8
 8018d88:	0801751b 	.word	0x0801751b
 8018d8c:	24000084 	.word	0x24000084

08018d90 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018d90:	b510      	push	{r4, lr}
 8018d92:	4604      	mov	r4, r0
 8018d94:	f7ff ff88 	bl	8018ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018d98:	4620      	mov	r0, r4
 8018d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d9e:	f7ff bfbd 	b.w	8018d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018da4:	b538      	push	{r3, r4, r5, lr}
 8018da6:	4c15      	ldr	r4, [pc, #84]	; (8018dfc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018da8:	4605      	mov	r5, r0
 8018daa:	7823      	ldrb	r3, [r4, #0]
 8018dac:	f3bf 8f5b 	dmb	ish
 8018db0:	07da      	lsls	r2, r3, #31
 8018db2:	d40b      	bmi.n	8018dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018db4:	4620      	mov	r0, r4
 8018db6:	f006 fcda 	bl	801f76e <__cxa_guard_acquire>
 8018dba:	b138      	cbz	r0, 8018dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	f006 fce2 	bl	801f786 <__cxa_guard_release>
 8018dc2:	4a0f      	ldr	r2, [pc, #60]	; (8018e00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018dc4:	490f      	ldr	r1, [pc, #60]	; (8018e04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018dc6:	4810      	ldr	r0, [pc, #64]	; (8018e08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018dc8:	f006 fcca 	bl	801f760 <__aeabi_atexit>
 8018dcc:	4c0f      	ldr	r4, [pc, #60]	; (8018e0c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018dce:	7823      	ldrb	r3, [r4, #0]
 8018dd0:	f3bf 8f5b 	dmb	ish
 8018dd4:	07db      	lsls	r3, r3, #31
 8018dd6:	d40b      	bmi.n	8018df0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018dd8:	4620      	mov	r0, r4
 8018dda:	f006 fcc8 	bl	801f76e <__cxa_guard_acquire>
 8018dde:	b138      	cbz	r0, 8018df0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018de0:	4620      	mov	r0, r4
 8018de2:	f006 fcd0 	bl	801f786 <__cxa_guard_release>
 8018de6:	4a06      	ldr	r2, [pc, #24]	; (8018e00 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018de8:	4909      	ldr	r1, [pc, #36]	; (8018e10 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018dea:	480a      	ldr	r0, [pc, #40]	; (8018e14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018dec:	f006 fcb8 	bl	801f760 <__aeabi_atexit>
 8018df0:	4b05      	ldr	r3, [pc, #20]	; (8018e08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018df2:	642b      	str	r3, [r5, #64]	; 0x40
 8018df4:	4b07      	ldr	r3, [pc, #28]	; (8018e14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018df6:	646b      	str	r3, [r5, #68]	; 0x44
 8018df8:	bd38      	pop	{r3, r4, r5, pc}
 8018dfa:	bf00      	nop
 8018dfc:	2400ead4 	.word	0x2400ead4
 8018e00:	24000000 	.word	0x24000000
 8018e04:	08017511 	.word	0x08017511
 8018e08:	240000b0 	.word	0x240000b0
 8018e0c:	2400ead8 	.word	0x2400ead8
 8018e10:	0801750f 	.word	0x0801750f
 8018e14:	240000b4 	.word	0x240000b4

08018e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018e18:	b538      	push	{r3, r4, r5, lr}
 8018e1a:	4c15      	ldr	r4, [pc, #84]	; (8018e70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018e1c:	4605      	mov	r5, r0
 8018e1e:	7823      	ldrb	r3, [r4, #0]
 8018e20:	f3bf 8f5b 	dmb	ish
 8018e24:	07da      	lsls	r2, r3, #31
 8018e26:	d40b      	bmi.n	8018e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f006 fca0 	bl	801f76e <__cxa_guard_acquire>
 8018e2e:	b138      	cbz	r0, 8018e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018e30:	4620      	mov	r0, r4
 8018e32:	f006 fca8 	bl	801f786 <__cxa_guard_release>
 8018e36:	4a0f      	ldr	r2, [pc, #60]	; (8018e74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018e38:	490f      	ldr	r1, [pc, #60]	; (8018e78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018e3a:	4810      	ldr	r0, [pc, #64]	; (8018e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018e3c:	f006 fc90 	bl	801f760 <__aeabi_atexit>
 8018e40:	4c0f      	ldr	r4, [pc, #60]	; (8018e80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018e42:	7823      	ldrb	r3, [r4, #0]
 8018e44:	f3bf 8f5b 	dmb	ish
 8018e48:	07db      	lsls	r3, r3, #31
 8018e4a:	d40b      	bmi.n	8018e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	f006 fc8e 	bl	801f76e <__cxa_guard_acquire>
 8018e52:	b138      	cbz	r0, 8018e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018e54:	4620      	mov	r0, r4
 8018e56:	f006 fc96 	bl	801f786 <__cxa_guard_release>
 8018e5a:	4a06      	ldr	r2, [pc, #24]	; (8018e74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018e5c:	4909      	ldr	r1, [pc, #36]	; (8018e84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018e5e:	480a      	ldr	r0, [pc, #40]	; (8018e88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018e60:	f006 fc7e 	bl	801f760 <__aeabi_atexit>
 8018e64:	4b05      	ldr	r3, [pc, #20]	; (8018e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018e66:	63ab      	str	r3, [r5, #56]	; 0x38
 8018e68:	4b07      	ldr	r3, [pc, #28]	; (8018e88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018e6a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018e6c:	bd38      	pop	{r3, r4, r5, pc}
 8018e6e:	bf00      	nop
 8018e70:	2400eab4 	.word	0x2400eab4
 8018e74:	24000000 	.word	0x24000000
 8018e78:	08017515 	.word	0x08017515
 8018e7c:	24000090 	.word	0x24000090
 8018e80:	2400eab8 	.word	0x2400eab8
 8018e84:	08017513 	.word	0x08017513
 8018e88:	24000094 	.word	0x24000094

08018e8c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018e8c:	b510      	push	{r4, lr}
 8018e8e:	4604      	mov	r4, r0
 8018e90:	f7ff ff88 	bl	8018da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018e94:	4620      	mov	r0, r4
 8018e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e9a:	f7ff bfbd 	b.w	8018e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018ea0:	b538      	push	{r3, r4, r5, lr}
 8018ea2:	4c15      	ldr	r4, [pc, #84]	; (8018ef8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018ea4:	4605      	mov	r5, r0
 8018ea6:	7823      	ldrb	r3, [r4, #0]
 8018ea8:	f3bf 8f5b 	dmb	ish
 8018eac:	07da      	lsls	r2, r3, #31
 8018eae:	d40b      	bmi.n	8018ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018eb0:	4620      	mov	r0, r4
 8018eb2:	f006 fc5c 	bl	801f76e <__cxa_guard_acquire>
 8018eb6:	b138      	cbz	r0, 8018ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018eb8:	4620      	mov	r0, r4
 8018eba:	f006 fc64 	bl	801f786 <__cxa_guard_release>
 8018ebe:	4a0f      	ldr	r2, [pc, #60]	; (8018efc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018ec0:	490f      	ldr	r1, [pc, #60]	; (8018f00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018ec2:	4810      	ldr	r0, [pc, #64]	; (8018f04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018ec4:	f006 fc4c 	bl	801f760 <__aeabi_atexit>
 8018ec8:	4c0f      	ldr	r4, [pc, #60]	; (8018f08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018eca:	7823      	ldrb	r3, [r4, #0]
 8018ecc:	f3bf 8f5b 	dmb	ish
 8018ed0:	07db      	lsls	r3, r3, #31
 8018ed2:	d40b      	bmi.n	8018eec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018ed4:	4620      	mov	r0, r4
 8018ed6:	f006 fc4a 	bl	801f76e <__cxa_guard_acquire>
 8018eda:	b138      	cbz	r0, 8018eec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018edc:	4620      	mov	r0, r4
 8018ede:	f006 fc52 	bl	801f786 <__cxa_guard_release>
 8018ee2:	4a06      	ldr	r2, [pc, #24]	; (8018efc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018ee4:	4909      	ldr	r1, [pc, #36]	; (8018f0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018ee6:	480a      	ldr	r0, [pc, #40]	; (8018f10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018ee8:	f006 fc3a 	bl	801f760 <__aeabi_atexit>
 8018eec:	4b05      	ldr	r3, [pc, #20]	; (8018f04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018eee:	652b      	str	r3, [r5, #80]	; 0x50
 8018ef0:	4b07      	ldr	r3, [pc, #28]	; (8018f10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018ef2:	656b      	str	r3, [r5, #84]	; 0x54
 8018ef4:	bd38      	pop	{r3, r4, r5, pc}
 8018ef6:	bf00      	nop
 8018ef8:	2400eaac 	.word	0x2400eaac
 8018efc:	24000000 	.word	0x24000000
 8018f00:	08017509 	.word	0x08017509
 8018f04:	24000088 	.word	0x24000088
 8018f08:	2400eab0 	.word	0x2400eab0
 8018f0c:	08017507 	.word	0x08017507
 8018f10:	2400008c 	.word	0x2400008c

08018f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018f14:	b538      	push	{r3, r4, r5, lr}
 8018f16:	4c15      	ldr	r4, [pc, #84]	; (8018f6c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018f18:	4605      	mov	r5, r0
 8018f1a:	7823      	ldrb	r3, [r4, #0]
 8018f1c:	f3bf 8f5b 	dmb	ish
 8018f20:	07da      	lsls	r2, r3, #31
 8018f22:	d40b      	bmi.n	8018f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018f24:	4620      	mov	r0, r4
 8018f26:	f006 fc22 	bl	801f76e <__cxa_guard_acquire>
 8018f2a:	b138      	cbz	r0, 8018f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	f006 fc2a 	bl	801f786 <__cxa_guard_release>
 8018f32:	4a0f      	ldr	r2, [pc, #60]	; (8018f70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018f34:	490f      	ldr	r1, [pc, #60]	; (8018f74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018f36:	4810      	ldr	r0, [pc, #64]	; (8018f78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018f38:	f006 fc12 	bl	801f760 <__aeabi_atexit>
 8018f3c:	4c0f      	ldr	r4, [pc, #60]	; (8018f7c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018f3e:	7823      	ldrb	r3, [r4, #0]
 8018f40:	f3bf 8f5b 	dmb	ish
 8018f44:	07db      	lsls	r3, r3, #31
 8018f46:	d40b      	bmi.n	8018f60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018f48:	4620      	mov	r0, r4
 8018f4a:	f006 fc10 	bl	801f76e <__cxa_guard_acquire>
 8018f4e:	b138      	cbz	r0, 8018f60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018f50:	4620      	mov	r0, r4
 8018f52:	f006 fc18 	bl	801f786 <__cxa_guard_release>
 8018f56:	4a06      	ldr	r2, [pc, #24]	; (8018f70 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018f58:	4909      	ldr	r1, [pc, #36]	; (8018f80 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018f5a:	480a      	ldr	r0, [pc, #40]	; (8018f84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018f5c:	f006 fc00 	bl	801f760 <__aeabi_atexit>
 8018f60:	4b05      	ldr	r3, [pc, #20]	; (8018f78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018f62:	64ab      	str	r3, [r5, #72]	; 0x48
 8018f64:	4b07      	ldr	r3, [pc, #28]	; (8018f84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018f66:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018f68:	bd38      	pop	{r3, r4, r5, pc}
 8018f6a:	bf00      	nop
 8018f6c:	2400ea9c 	.word	0x2400ea9c
 8018f70:	24000000 	.word	0x24000000
 8018f74:	0801750d 	.word	0x0801750d
 8018f78:	24000078 	.word	0x24000078
 8018f7c:	2400eaa0 	.word	0x2400eaa0
 8018f80:	0801750b 	.word	0x0801750b
 8018f84:	2400007c 	.word	0x2400007c

08018f88 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018f88:	b510      	push	{r4, lr}
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	f7ff ff88 	bl	8018ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018f90:	4620      	mov	r0, r4
 8018f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f96:	f7ff bfbd 	b.w	8018f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018f9a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018f9a:	b510      	push	{r4, lr}
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	f7ff fff3 	bl	8018f88 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	f7ff ff72 	bl	8018e8c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018fa8:	4620      	mov	r0, r4
 8018faa:	f7ff fe73 	bl	8018c94 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018fae:	4620      	mov	r0, r4
 8018fb0:	f7ff fdf2 	bl	8018b98 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fba:	f7ff bee9 	b.w	8018d90 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08018fc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc4:	b087      	sub	sp, #28
 8018fc6:	7888      	ldrb	r0, [r1, #2]
 8018fc8:	4616      	mov	r6, r2
 8018fca:	9001      	str	r0, [sp, #4]
 8018fcc:	7848      	ldrb	r0, [r1, #1]
 8018fce:	9100      	str	r1, [sp, #0]
 8018fd0:	9002      	str	r0, [sp, #8]
 8018fd2:	7808      	ldrb	r0, [r1, #0]
 8018fd4:	9901      	ldr	r1, [sp, #4]
 8018fd6:	9003      	str	r0, [sp, #12]
 8018fd8:	9802      	ldr	r0, [sp, #8]
 8018fda:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8018fde:	0200      	lsls	r0, r0, #8
 8018fe0:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8018fe4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018fe8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8018fec:	9903      	ldr	r1, [sp, #12]
 8018fee:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018ff2:	4308      	orrs	r0, r1
 8018ff4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018ff8:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8018ffc:	9005      	str	r0, [sp, #20]
 8018ffe:	fb05 ca0e 	mla	sl, r5, lr, ip
 8019002:	2d00      	cmp	r5, #0
 8019004:	eb06 080a 	add.w	r8, r6, sl
 8019008:	db4a      	blt.n	80190a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801900a:	45a9      	cmp	r9, r5
 801900c:	dd48      	ble.n	80190a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801900e:	f1bc 0f00 	cmp.w	ip, #0
 8019012:	db43      	blt.n	801909c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8019014:	45e6      	cmp	lr, ip
 8019016:	dd41      	ble.n	801909c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8019018:	f816 600a 	ldrb.w	r6, [r6, sl]
 801901c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019020:	441e      	add	r6, r3
 8019022:	f11c 0001 	adds.w	r0, ip, #1
 8019026:	d43e      	bmi.n	80190a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8019028:	4586      	cmp	lr, r0
 801902a:	dd3c      	ble.n	80190a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801902c:	2a00      	cmp	r2, #0
 801902e:	d03a      	beq.n	80190a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8019030:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019034:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019038:	4418      	add	r0, r3
 801903a:	3501      	adds	r5, #1
 801903c:	d437      	bmi.n	80190ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801903e:	45a9      	cmp	r9, r5
 8019040:	dd35      	ble.n	80190ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8019042:	b3a4      	cbz	r4, 80190ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8019044:	f1bc 0f00 	cmp.w	ip, #0
 8019048:	db2f      	blt.n	80190aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801904a:	45e6      	cmp	lr, ip
 801904c:	dd2d      	ble.n	80190aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801904e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8019052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019056:	441d      	add	r5, r3
 8019058:	f11c 0c01 	adds.w	ip, ip, #1
 801905c:	d42a      	bmi.n	80190b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801905e:	45e6      	cmp	lr, ip
 8019060:	dd28      	ble.n	80190b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8019062:	b33a      	cbz	r2, 80190b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8019064:	44c6      	add	lr, r8
 8019066:	f89e c001 	ldrb.w	ip, [lr, #1]
 801906a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801906e:	4463      	add	r3, ip
 8019070:	ea6f 0c07 	mvn.w	ip, r7
 8019074:	2a0f      	cmp	r2, #15
 8019076:	f896 a000 	ldrb.w	sl, [r6]
 801907a:	fa5f fc8c 	uxtb.w	ip, ip
 801907e:	f890 b000 	ldrb.w	fp, [r0]
 8019082:	f895 9000 	ldrb.w	r9, [r5]
 8019086:	7819      	ldrb	r1, [r3, #0]
 8019088:	d801      	bhi.n	801908e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801908a:	2c0f      	cmp	r4, #15
 801908c:	d914      	bls.n	80190b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801908e:	4b40      	ldr	r3, [pc, #256]	; (8019190 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8019090:	f240 1157 	movw	r1, #343	; 0x157
 8019094:	4a3f      	ldr	r2, [pc, #252]	; (8019194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8019096:	4840      	ldr	r0, [pc, #256]	; (8019198 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8019098:	f006 fb96 	bl	801f7c8 <__assert_func>
 801909c:	ae05      	add	r6, sp, #20
 801909e:	e7c0      	b.n	8019022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 80190a0:	a805      	add	r0, sp, #20
 80190a2:	4606      	mov	r6, r0
 80190a4:	e7c9      	b.n	801903a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80190a6:	a805      	add	r0, sp, #20
 80190a8:	e7c7      	b.n	801903a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80190aa:	ad05      	add	r5, sp, #20
 80190ac:	e7d4      	b.n	8019058 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 80190ae:	ab05      	add	r3, sp, #20
 80190b0:	461d      	mov	r5, r3
 80190b2:	e7dd      	b.n	8019070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80190b4:	ab05      	add	r3, sp, #20
 80190b6:	e7db      	b.n	8019070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80190b8:	b292      	uxth	r2, r2
 80190ba:	b2a4      	uxth	r4, r4
 80190bc:	fa1f fc8c 	uxth.w	ip, ip
 80190c0:	fb02 f804 	mul.w	r8, r2, r4
 80190c4:	0112      	lsls	r2, r2, #4
 80190c6:	b2bf      	uxth	r7, r7
 80190c8:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80190cc:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80190d0:	eba2 0208 	sub.w	r2, r2, r8
 80190d4:	b2a4      	uxth	r4, r4
 80190d6:	b292      	uxth	r2, r2
 80190d8:	ebae 0e04 	sub.w	lr, lr, r4
 80190dc:	fb02 fb0b 	mul.w	fp, r2, fp
 80190e0:	fa1f fe8e 	uxth.w	lr, lr
 80190e4:	fb0e ba0a 	mla	sl, lr, sl, fp
 80190e8:	fb04 aa09 	mla	sl, r4, r9, sl
 80190ec:	fb08 aa01 	mla	sl, r8, r1, sl
 80190f0:	9903      	ldr	r1, [sp, #12]
 80190f2:	fb11 f90c 	smulbb	r9, r1, ip
 80190f6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80190fa:	9900      	ldr	r1, [sp, #0]
 80190fc:	fb0a 9a07 	mla	sl, sl, r7, r9
 8019100:	fa1f fa8a 	uxth.w	sl, sl
 8019104:	f10a 0901 	add.w	r9, sl, #1
 8019108:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801910c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019110:	f881 a000 	strb.w	sl, [r1]
 8019114:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019118:	f896 9001 	ldrb.w	r9, [r6, #1]
 801911c:	fb02 fa0a 	mul.w	sl, r2, sl
 8019120:	9902      	ldr	r1, [sp, #8]
 8019122:	fb0e aa09 	mla	sl, lr, r9, sl
 8019126:	f895 9001 	ldrb.w	r9, [r5, #1]
 801912a:	fb04 aa09 	mla	sl, r4, r9, sl
 801912e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8019132:	fb08 a909 	mla	r9, r8, r9, sl
 8019136:	fb11 fa0c 	smulbb	sl, r1, ip
 801913a:	9900      	ldr	r1, [sp, #0]
 801913c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8019140:	fb09 a907 	mla	r9, r9, r7, sl
 8019144:	fa1f f989 	uxth.w	r9, r9
 8019148:	f109 0a01 	add.w	sl, r9, #1
 801914c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019150:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019154:	f881 9001 	strb.w	r9, [r1, #1]
 8019158:	7880      	ldrb	r0, [r0, #2]
 801915a:	78b6      	ldrb	r6, [r6, #2]
 801915c:	4342      	muls	r2, r0
 801915e:	78a8      	ldrb	r0, [r5, #2]
 8019160:	789b      	ldrb	r3, [r3, #2]
 8019162:	fb0e 2206 	mla	r2, lr, r6, r2
 8019166:	fb04 2400 	mla	r4, r4, r0, r2
 801916a:	fb08 4803 	mla	r8, r8, r3, r4
 801916e:	9b01      	ldr	r3, [sp, #4]
 8019170:	fb13 fc0c 	smulbb	ip, r3, ip
 8019174:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8019178:	fb08 c707 	mla	r7, r8, r7, ip
 801917c:	b2bf      	uxth	r7, r7
 801917e:	f107 0c01 	add.w	ip, r7, #1
 8019182:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8019186:	123f      	asrs	r7, r7, #8
 8019188:	708f      	strb	r7, [r1, #2]
 801918a:	b007      	add	sp, #28
 801918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019190:	0802453f 	.word	0x0802453f
 8019194:	080249f6 	.word	0x080249f6
 8019198:	080245c7 	.word	0x080245c7

0801919c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a0:	ed2d 8b08 	vpush	{d8-d11}
 80191a4:	b093      	sub	sp, #76	; 0x4c
 80191a6:	eeb0 aa40 	vmov.f32	s20, s0
 80191aa:	eef0 9a60 	vmov.f32	s19, s1
 80191ae:	9210      	str	r2, [sp, #64]	; 0x40
 80191b0:	eeb0 9a41 	vmov.f32	s18, s2
 80191b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80191b6:	eeb0 8a62 	vmov.f32	s16, s5
 80191ba:	9309      	str	r3, [sp, #36]	; 0x24
 80191bc:	eef0 8a43 	vmov.f32	s17, s6
 80191c0:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80191c4:	eef0 ba44 	vmov.f32	s23, s8
 80191c8:	9011      	str	r0, [sp, #68]	; 0x44
 80191ca:	eeb0 ba64 	vmov.f32	s22, s9
 80191ce:	930e      	str	r3, [sp, #56]	; 0x38
 80191d0:	eef0 aa45 	vmov.f32	s21, s10
 80191d4:	6850      	ldr	r0, [r2, #4]
 80191d6:	910d      	str	r1, [sp, #52]	; 0x34
 80191d8:	6812      	ldr	r2, [r2, #0]
 80191da:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80191de:	fb00 1303 	mla	r3, r0, r3, r1
 80191e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191e6:	18d3      	adds	r3, r2, r3
 80191e8:	930a      	str	r3, [sp, #40]	; 0x28
 80191ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	930c      	str	r3, [sp, #48]	; 0x30
 80191f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80191f2:	685c      	ldr	r4, [r3, #4]
 80191f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191f6:	3404      	adds	r4, #4
 80191f8:	43db      	mvns	r3, r3
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80191fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019200:	2b00      	cmp	r3, #0
 8019202:	dc03      	bgt.n	801920c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019206:	2b00      	cmp	r3, #0
 8019208:	f340 8250 	ble.w	80196ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801920c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801920e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019212:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019216:	1e48      	subs	r0, r1, #1
 8019218:	1e55      	subs	r5, r2, #1
 801921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801921c:	2b00      	cmp	r3, #0
 801921e:	f340 80ee 	ble.w	80193fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8019222:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8019224:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019226:	1436      	asrs	r6, r6, #16
 8019228:	ea4f 4323 	mov.w	r3, r3, asr #16
 801922c:	d406      	bmi.n	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801922e:	4286      	cmp	r6, r0
 8019230:	da04      	bge.n	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019232:	2b00      	cmp	r3, #0
 8019234:	db02      	blt.n	801923c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019236:	42ab      	cmp	r3, r5
 8019238:	f2c0 80e2 	blt.w	8019400 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801923c:	3601      	adds	r6, #1
 801923e:	f100 80cf 	bmi.w	80193e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019242:	42b1      	cmp	r1, r6
 8019244:	f2c0 80cc 	blt.w	80193e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019248:	3301      	adds	r3, #1
 801924a:	f100 80c9 	bmi.w	80193e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801924e:	429a      	cmp	r2, r3
 8019250:	f2c0 80c6 	blt.w	80193e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019254:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8019258:	f1bb 0f00 	cmp.w	fp, #0
 801925c:	f340 80f1 	ble.w	8019442 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019260:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019262:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019264:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019266:	141d      	asrs	r5, r3, #16
 8019268:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801926a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801926e:	68c7      	ldr	r7, [r0, #12]
 8019270:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019272:	1418      	asrs	r0, r3, #16
 8019274:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8019278:	6892      	ldr	r2, [r2, #8]
 801927a:	f100 8137 	bmi.w	80194ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801927e:	f102 3cff 	add.w	ip, r2, #4294967295
 8019282:	4560      	cmp	r0, ip
 8019284:	f280 8132 	bge.w	80194ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8019288:	2d00      	cmp	r5, #0
 801928a:	f2c0 812f 	blt.w	80194ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801928e:	f107 3cff 	add.w	ip, r7, #4294967295
 8019292:	4565      	cmp	r5, ip
 8019294:	f280 812a 	bge.w	80194ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8019298:	b212      	sxth	r2, r2
 801929a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801929c:	fb05 0002 	mla	r0, r5, r2, r0
 80192a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80192a2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80192a6:	4405      	add	r5, r0
 80192a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80192ac:	eb04 0e0c 	add.w	lr, r4, ip
 80192b0:	f1b8 0f00 	cmp.w	r8, #0
 80192b4:	f000 810c 	beq.w	80194d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80192b8:	786f      	ldrb	r7, [r5, #1]
 80192ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80192be:	4427      	add	r7, r4
 80192c0:	2900      	cmp	r1, #0
 80192c2:	f000 810d 	beq.w	80194e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80192c6:	18a8      	adds	r0, r5, r2
 80192c8:	5caa      	ldrb	r2, [r5, r2]
 80192ca:	7840      	ldrb	r0, [r0, #1]
 80192cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80192d4:	4422      	add	r2, r4
 80192d6:	4420      	add	r0, r4
 80192d8:	fa1f f388 	uxth.w	r3, r8
 80192dc:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80192e0:	b289      	uxth	r1, r1
 80192e2:	f897 c000 	ldrb.w	ip, [r7]
 80192e6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80192ea:	fb03 f901 	mul.w	r9, r3, r1
 80192ee:	011b      	lsls	r3, r3, #4
 80192f0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80192f4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80192f8:	eba3 0309 	sub.w	r3, r3, r9
 80192fc:	b289      	uxth	r1, r1
 80192fe:	b29b      	uxth	r3, r3
 8019300:	eba8 0801 	sub.w	r8, r8, r1
 8019304:	fb03 fc0c 	mul.w	ip, r3, ip
 8019308:	fa1f f888 	uxth.w	r8, r8
 801930c:	930f      	str	r3, [sp, #60]	; 0x3c
 801930e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019310:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019314:	f892 a000 	ldrb.w	sl, [r2]
 8019318:	fb01 cc0a 	mla	ip, r1, sl, ip
 801931c:	f890 a000 	ldrb.w	sl, [r0]
 8019320:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019324:	f896 a000 	ldrb.w	sl, [r6]
 8019328:	fb1a fa03 	smulbb	sl, sl, r3
 801932c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019332:	fb0c ac05 	mla	ip, ip, r5, sl
 8019336:	fa1f fc8c 	uxth.w	ip, ip
 801933a:	f10c 0a01 	add.w	sl, ip, #1
 801933e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019342:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019346:	f886 a000 	strb.w	sl, [r6]
 801934a:	f897 c001 	ldrb.w	ip, [r7, #1]
 801934e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8019352:	fb03 fc0c 	mul.w	ip, r3, ip
 8019356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019358:	fb08 cc0a 	mla	ip, r8, sl, ip
 801935c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8019360:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019364:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019368:	fb09 cc0a 	mla	ip, r9, sl, ip
 801936c:	f896 a001 	ldrb.w	sl, [r6, #1]
 8019370:	fb1a fa03 	smulbb	sl, sl, r3
 8019374:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801937a:	fb0c ac05 	mla	ip, ip, r5, sl
 801937e:	fa1f fc8c 	uxth.w	ip, ip
 8019382:	f10c 0a01 	add.w	sl, ip, #1
 8019386:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801938a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801938e:	f886 c001 	strb.w	ip, [r6, #1]
 8019392:	78bf      	ldrb	r7, [r7, #2]
 8019394:	f89e c002 	ldrb.w	ip, [lr, #2]
 8019398:	437b      	muls	r3, r7
 801939a:	fb08 330c 	mla	r3, r8, ip, r3
 801939e:	f892 c002 	ldrb.w	ip, [r2, #2]
 80193a2:	7882      	ldrb	r2, [r0, #2]
 80193a4:	fb01 310c 	mla	r1, r1, ip, r3
 80193a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193aa:	fb09 1902 	mla	r9, r9, r2, r1
 80193ae:	78b1      	ldrb	r1, [r6, #2]
 80193b0:	fb11 f103 	smulbb	r1, r1, r3
 80193b4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80193b8:	fb09 1505 	mla	r5, r9, r5, r1
 80193bc:	b2ad      	uxth	r5, r5
 80193be:	1c6b      	adds	r3, r5, #1
 80193c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80193c4:	122d      	asrs	r5, r5, #8
 80193c6:	70b5      	strb	r5, [r6, #2]
 80193c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80193ca:	3603      	adds	r6, #3
 80193cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80193ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80193d2:	4413      	add	r3, r2
 80193d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80193d6:	9325      	str	r3, [sp, #148]	; 0x94
 80193d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80193da:	4413      	add	r3, r2
 80193dc:	9326      	str	r3, [sp, #152]	; 0x98
 80193de:	e73b      	b.n	8019258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80193e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80193e2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80193e4:	4433      	add	r3, r6
 80193e6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80193e8:	9325      	str	r3, [sp, #148]	; 0x94
 80193ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80193ec:	4433      	add	r3, r6
 80193ee:	9326      	str	r3, [sp, #152]	; 0x98
 80193f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193f2:	3b01      	subs	r3, #1
 80193f4:	9309      	str	r3, [sp, #36]	; 0x24
 80193f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193f8:	3303      	adds	r3, #3
 80193fa:	930a      	str	r3, [sp, #40]	; 0x28
 80193fc:	e70d      	b.n	801921a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80193fe:	d028      	beq.n	8019452 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019402:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019404:	3b01      	subs	r3, #1
 8019406:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8019408:	fb00 5003 	mla	r0, r0, r3, r5
 801940c:	1400      	asrs	r0, r0, #16
 801940e:	f53f af21 	bmi.w	8019254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019412:	3901      	subs	r1, #1
 8019414:	4288      	cmp	r0, r1
 8019416:	f6bf af1d 	bge.w	8019254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801941a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801941c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801941e:	fb01 0303 	mla	r3, r1, r3, r0
 8019422:	141b      	asrs	r3, r3, #16
 8019424:	f53f af16 	bmi.w	8019254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019428:	3a01      	subs	r2, #1
 801942a:	4293      	cmp	r3, r2
 801942c:	f6bf af12 	bge.w	8019254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019432:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019436:	1cdf      	adds	r7, r3, #3
 8019438:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801943c:	f1b9 0f00 	cmp.w	r9, #0
 8019440:	dc73      	bgt.n	801952a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8019442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801944a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801944e:	441a      	add	r2, r3
 8019450:	920a      	str	r2, [sp, #40]	; 0x28
 8019452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019454:	2b00      	cmp	r3, #0
 8019456:	f340 8129 	ble.w	80196ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801945a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801945e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019460:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019464:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019468:	eef0 6a48 	vmov.f32	s13, s16
 801946c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019470:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019474:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019478:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801947c:	eef0 6a68 	vmov.f32	s13, s17
 8019480:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019484:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8019488:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801948c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019490:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019494:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019498:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801949c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80194a0:	ee18 2a10 	vmov	r2, s16
 80194a4:	eeb0 8a47 	vmov.f32	s16, s14
 80194a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80194ac:	ee18 2a90 	vmov	r2, s17
 80194b0:	9327      	str	r3, [sp, #156]	; 0x9c
 80194b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80194b4:	eef0 8a67 	vmov.f32	s17, s15
 80194b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80194bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80194be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80194c2:	3b01      	subs	r3, #1
 80194c4:	930d      	str	r3, [sp, #52]	; 0x34
 80194c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80194c8:	bf08      	it	eq
 80194ca:	4613      	moveq	r3, r2
 80194cc:	9309      	str	r3, [sp, #36]	; 0x24
 80194ce:	e696      	b.n	80191fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80194d0:	b149      	cbz	r1, 80194e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80194d2:	5caa      	ldrb	r2, [r5, r2]
 80194d4:	4670      	mov	r0, lr
 80194d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194da:	4422      	add	r2, r4
 80194dc:	4677      	mov	r7, lr
 80194de:	e6fb      	b.n	80192d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80194e0:	4670      	mov	r0, lr
 80194e2:	4672      	mov	r2, lr
 80194e4:	e6f8      	b.n	80192d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80194e6:	4670      	mov	r0, lr
 80194e8:	4672      	mov	r2, lr
 80194ea:	e7f7      	b.n	80194dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80194ec:	f110 0c01 	adds.w	ip, r0, #1
 80194f0:	f53f af6a 	bmi.w	80193c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80194f4:	4562      	cmp	r2, ip
 80194f6:	f6ff af67 	blt.w	80193c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80194fa:	f115 0c01 	adds.w	ip, r5, #1
 80194fe:	f53f af63 	bmi.w	80193c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019502:	4567      	cmp	r7, ip
 8019504:	f6ff af60 	blt.w	80193c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801950a:	b23f      	sxth	r7, r7
 801950c:	b212      	sxth	r2, r2
 801950e:	9002      	str	r0, [sp, #8]
 8019510:	9701      	str	r7, [sp, #4]
 8019512:	9200      	str	r2, [sp, #0]
 8019514:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019518:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801951c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8019520:	4623      	mov	r3, r4
 8019522:	4631      	mov	r1, r6
 8019524:	f7ff fd4c 	bl	8018fc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8019528:	e74e      	b.n	80193c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801952a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801952c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801952e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019532:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8019534:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019536:	1400      	asrs	r0, r0, #16
 8019538:	142d      	asrs	r5, r5, #16
 801953a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801953c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019540:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019544:	fb02 5000 	mla	r0, r2, r0, r5
 8019548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801954a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801954e:	eb05 0c00 	add.w	ip, r5, r0
 8019552:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019556:	eb04 060e 	add.w	r6, r4, lr
 801955a:	2b00      	cmp	r3, #0
 801955c:	f000 8097 	beq.w	801968e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8019560:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8019564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019568:	4425      	add	r5, r4
 801956a:	2900      	cmp	r1, #0
 801956c:	f000 8098 	beq.w	80196a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8019570:	eb0c 0002 	add.w	r0, ip, r2
 8019574:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019578:	7840      	ldrb	r0, [r0, #1]
 801957a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801957e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019582:	4422      	add	r2, r4
 8019584:	4420      	add	r0, r4
 8019586:	b29b      	uxth	r3, r3
 8019588:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801958c:	b289      	uxth	r1, r1
 801958e:	f895 e000 	ldrb.w	lr, [r5]
 8019592:	3703      	adds	r7, #3
 8019594:	f109 39ff 	add.w	r9, r9, #4294967295
 8019598:	fb03 f801 	mul.w	r8, r3, r1
 801959c:	011b      	lsls	r3, r3, #4
 801959e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80195a2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80195a6:	eba3 0308 	sub.w	r3, r3, r8
 80195aa:	b289      	uxth	r1, r1
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	ebac 0c01 	sub.w	ip, ip, r1
 80195b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80195b6:	fa1f fc8c 	uxth.w	ip, ip
 80195ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80195bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195be:	fb0c ee0b 	mla	lr, ip, fp, lr
 80195c2:	f892 b000 	ldrb.w	fp, [r2]
 80195c6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80195ca:	f890 b000 	ldrb.w	fp, [r0]
 80195ce:	fb08 ee0b 	mla	lr, r8, fp, lr
 80195d2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80195d6:	fb1b fb03 	smulbb	fp, fp, r3
 80195da:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80195de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80195e0:	fb0e be0a 	mla	lr, lr, sl, fp
 80195e4:	fa1f fe8e 	uxth.w	lr, lr
 80195e8:	f10e 0b01 	add.w	fp, lr, #1
 80195ec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80195f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80195f4:	f807 ec06 	strb.w	lr, [r7, #-6]
 80195f8:	f895 e001 	ldrb.w	lr, [r5, #1]
 80195fc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019600:	fb03 fe0e 	mul.w	lr, r3, lr
 8019604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019606:	fb0c ee0b 	mla	lr, ip, fp, lr
 801960a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801960e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019612:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019616:	fb08 ee0b 	mla	lr, r8, fp, lr
 801961a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801961e:	fb1b fb03 	smulbb	fp, fp, r3
 8019622:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019628:	fb0e be0a 	mla	lr, lr, sl, fp
 801962c:	fa1f fe8e 	uxth.w	lr, lr
 8019630:	f10e 0b01 	add.w	fp, lr, #1
 8019634:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019638:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801963c:	f807 ec05 	strb.w	lr, [r7, #-5]
 8019640:	78ad      	ldrb	r5, [r5, #2]
 8019642:	78b6      	ldrb	r6, [r6, #2]
 8019644:	436b      	muls	r3, r5
 8019646:	7895      	ldrb	r5, [r2, #2]
 8019648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801964a:	fb0c 3306 	mla	r3, ip, r6, r3
 801964e:	fb01 3305 	mla	r3, r1, r5, r3
 8019652:	7885      	ldrb	r5, [r0, #2]
 8019654:	fb08 3805 	mla	r8, r8, r5, r3
 8019658:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801965c:	fb13 f302 	smulbb	r3, r3, r2
 8019660:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8019664:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019666:	fb08 380a 	mla	r8, r8, sl, r3
 801966a:	fa1f f888 	uxth.w	r8, r8
 801966e:	f108 0301 	add.w	r3, r8, #1
 8019672:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8019676:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019678:	4413      	add	r3, r2
 801967a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801967c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019680:	9325      	str	r3, [sp, #148]	; 0x94
 8019682:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019684:	f807 8c04 	strb.w	r8, [r7, #-4]
 8019688:	4413      	add	r3, r2
 801968a:	9326      	str	r3, [sp, #152]	; 0x98
 801968c:	e6d6      	b.n	801943c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801968e:	b151      	cbz	r1, 80196a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8019690:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019694:	4630      	mov	r0, r6
 8019696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801969a:	4422      	add	r2, r4
 801969c:	4635      	mov	r5, r6
 801969e:	e772      	b.n	8019586 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80196a0:	4630      	mov	r0, r6
 80196a2:	4632      	mov	r2, r6
 80196a4:	e76f      	b.n	8019586 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80196a6:	4630      	mov	r0, r6
 80196a8:	4632      	mov	r2, r6
 80196aa:	e7f7      	b.n	801969c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80196ac:	b013      	add	sp, #76	; 0x4c
 80196ae:	ecbd 8b08 	vpop	{d8-d11}
 80196b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080196b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80196b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196bc:	784d      	ldrb	r5, [r1, #1]
 80196be:	f891 9002 	ldrb.w	r9, [r1, #2]
 80196c2:	022d      	lsls	r5, r5, #8
 80196c4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80196c8:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80196cc:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80196d0:	f891 9000 	ldrb.w	r9, [r1]
 80196d4:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80196d8:	ea45 0509 	orr.w	r5, r5, r9
 80196dc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80196e0:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80196e4:	9501      	str	r5, [sp, #4]
 80196e6:	fb06 470c 	mla	r7, r6, ip, r4
 80196ea:	2e00      	cmp	r6, #0
 80196ec:	eb02 0e07 	add.w	lr, r2, r7
 80196f0:	db46      	blt.n	8019780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80196f2:	45b0      	cmp	r8, r6
 80196f4:	dd44      	ble.n	8019780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80196f6:	2c00      	cmp	r4, #0
 80196f8:	db40      	blt.n	801977c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80196fa:	45a4      	cmp	ip, r4
 80196fc:	dd3e      	ble.n	801977c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80196fe:	5dd7      	ldrb	r7, [r2, r7]
 8019700:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019704:	441f      	add	r7, r3
 8019706:	1c62      	adds	r2, r4, #1
 8019708:	d43d      	bmi.n	8019786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801970a:	4594      	cmp	ip, r2
 801970c:	dd3b      	ble.n	8019786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801970e:	f1ba 0f00 	cmp.w	sl, #0
 8019712:	d038      	beq.n	8019786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8019714:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8019718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801971c:	441d      	add	r5, r3
 801971e:	3601      	adds	r6, #1
 8019720:	d435      	bmi.n	801978e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019722:	45b0      	cmp	r8, r6
 8019724:	dd33      	ble.n	801978e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019726:	b390      	cbz	r0, 801978e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019728:	2c00      	cmp	r4, #0
 801972a:	db2e      	blt.n	801978a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801972c:	45a4      	cmp	ip, r4
 801972e:	dd2c      	ble.n	801978a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8019730:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8019734:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019738:	441e      	add	r6, r3
 801973a:	1c62      	adds	r2, r4, #1
 801973c:	d42a      	bmi.n	8019794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801973e:	4594      	cmp	ip, r2
 8019740:	dd28      	ble.n	8019794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8019742:	f1ba 0f00 	cmp.w	sl, #0
 8019746:	d025      	beq.n	8019794 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8019748:	44f4      	add	ip, lr
 801974a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801974e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019752:	4413      	add	r3, r2
 8019754:	f1ba 0f0f 	cmp.w	sl, #15
 8019758:	f897 8000 	ldrb.w	r8, [r7]
 801975c:	f895 9000 	ldrb.w	r9, [r5]
 8019760:	f896 e000 	ldrb.w	lr, [r6]
 8019764:	f893 c000 	ldrb.w	ip, [r3]
 8019768:	d801      	bhi.n	801976e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801976a:	280f      	cmp	r0, #15
 801976c:	d914      	bls.n	8019798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801976e:	4b29      	ldr	r3, [pc, #164]	; (8019814 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8019770:	f240 1157 	movw	r1, #343	; 0x157
 8019774:	4a28      	ldr	r2, [pc, #160]	; (8019818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8019776:	4829      	ldr	r0, [pc, #164]	; (801981c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8019778:	f006 f826 	bl	801f7c8 <__assert_func>
 801977c:	af01      	add	r7, sp, #4
 801977e:	e7c2      	b.n	8019706 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8019780:	ad01      	add	r5, sp, #4
 8019782:	462f      	mov	r7, r5
 8019784:	e7cb      	b.n	801971e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8019786:	ad01      	add	r5, sp, #4
 8019788:	e7c9      	b.n	801971e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801978a:	ae01      	add	r6, sp, #4
 801978c:	e7d5      	b.n	801973a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801978e:	ab01      	add	r3, sp, #4
 8019790:	461e      	mov	r6, r3
 8019792:	e7df      	b.n	8019754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8019794:	ab01      	add	r3, sp, #4
 8019796:	e7dd      	b.n	8019754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8019798:	fa1f f48a 	uxth.w	r4, sl
 801979c:	b280      	uxth	r0, r0
 801979e:	fb04 fa00 	mul.w	sl, r4, r0
 80197a2:	0124      	lsls	r4, r4, #4
 80197a4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80197a8:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80197ac:	b282      	uxth	r2, r0
 80197ae:	eba4 000a 	sub.w	r0, r4, sl
 80197b2:	ebab 0b02 	sub.w	fp, fp, r2
 80197b6:	b280      	uxth	r0, r0
 80197b8:	fa1f fb8b 	uxth.w	fp, fp
 80197bc:	fb00 f909 	mul.w	r9, r0, r9
 80197c0:	fb0b 9808 	mla	r8, fp, r8, r9
 80197c4:	fb02 8e0e 	mla	lr, r2, lr, r8
 80197c8:	fb0a ec0c 	mla	ip, sl, ip, lr
 80197cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80197d0:	f881 c000 	strb.w	ip, [r1]
 80197d4:	786c      	ldrb	r4, [r5, #1]
 80197d6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80197da:	4344      	muls	r4, r0
 80197dc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80197e0:	7874      	ldrb	r4, [r6, #1]
 80197e2:	fb02 cc04 	mla	ip, r2, r4, ip
 80197e6:	785c      	ldrb	r4, [r3, #1]
 80197e8:	fb0a c404 	mla	r4, sl, r4, ip
 80197ec:	1224      	asrs	r4, r4, #8
 80197ee:	704c      	strb	r4, [r1, #1]
 80197f0:	78ad      	ldrb	r5, [r5, #2]
 80197f2:	78bc      	ldrb	r4, [r7, #2]
 80197f4:	4368      	muls	r0, r5
 80197f6:	fb0b 0b04 	mla	fp, fp, r4, r0
 80197fa:	78b0      	ldrb	r0, [r6, #2]
 80197fc:	fb02 b000 	mla	r0, r2, r0, fp
 8019800:	789a      	ldrb	r2, [r3, #2]
 8019802:	fb0a 0a02 	mla	sl, sl, r2, r0
 8019806:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801980a:	f881 a002 	strb.w	sl, [r1, #2]
 801980e:	b003      	add	sp, #12
 8019810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019814:	0802453f 	.word	0x0802453f
 8019818:	080249f6 	.word	0x080249f6
 801981c:	080245c7 	.word	0x080245c7

08019820 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	ed2d 8b0a 	vpush	{d8-d12}
 8019828:	b08d      	sub	sp, #52	; 0x34
 801982a:	eeb0 aa40 	vmov.f32	s20, s0
 801982e:	eef0 9a60 	vmov.f32	s19, s1
 8019832:	900b      	str	r0, [sp, #44]	; 0x2c
 8019834:	eeb0 9a41 	vmov.f32	s18, s2
 8019838:	9306      	str	r3, [sp, #24]
 801983a:	eeb0 8a62 	vmov.f32	s16, s5
 801983e:	eef0 8a43 	vmov.f32	s17, s6
 8019842:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8019844:	eeb0 ca44 	vmov.f32	s24, s8
 8019848:	eef0 ba64 	vmov.f32	s23, s9
 801984c:	eeb0 ba45 	vmov.f32	s22, s10
 8019850:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8019854:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8019858:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801985a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801985e:	6850      	ldr	r0, [r2, #4]
 8019860:	6812      	ldr	r2, [r2, #0]
 8019862:	fb00 1303 	mla	r3, r0, r3, r1
 8019866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	9307      	str	r3, [sp, #28]
 801986e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	9308      	str	r3, [sp, #32]
 8019874:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019876:	685d      	ldr	r5, [r3, #4]
 8019878:	3504      	adds	r5, #4
 801987a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987c:	2b00      	cmp	r3, #0
 801987e:	dc03      	bgt.n	8019888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019882:	2b00      	cmp	r3, #0
 8019884:	f340 81e6 	ble.w	8019c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8019888:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801988a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801988e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019892:	1e48      	subs	r0, r1, #1
 8019894:	1e56      	subs	r6, r2, #1
 8019896:	9b06      	ldr	r3, [sp, #24]
 8019898:	2b00      	cmp	r3, #0
 801989a:	f340 80bd 	ble.w	8019a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801989e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80198a0:	1427      	asrs	r7, r4, #16
 80198a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80198a6:	d406      	bmi.n	80198b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80198a8:	4287      	cmp	r7, r0
 80198aa:	da04      	bge.n	80198b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	db02      	blt.n	80198b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80198b0:	42b3      	cmp	r3, r6
 80198b2:	f2c0 80b2 	blt.w	8019a1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80198b6:	3701      	adds	r7, #1
 80198b8:	f100 80a1 	bmi.w	80199fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80198bc:	42b9      	cmp	r1, r7
 80198be:	f2c0 809e 	blt.w	80199fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80198c2:	3301      	adds	r3, #1
 80198c4:	f100 809b 	bmi.w	80199fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80198c8:	429a      	cmp	r2, r3
 80198ca:	f2c0 8098 	blt.w	80199fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80198ce:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80198d2:	f1bb 0f00 	cmp.w	fp, #0
 80198d6:	f340 80bf 	ble.w	8019a58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80198da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80198dc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80198de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80198e0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80198e4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80198e8:	1420      	asrs	r0, r4, #16
 80198ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80198ec:	ea4f 4723 	mov.w	r7, r3, asr #16
 80198f0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80198f4:	6892      	ldr	r2, [r2, #8]
 80198f6:	f100 8103 	bmi.w	8019b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80198fa:	f102 3eff 	add.w	lr, r2, #4294967295
 80198fe:	4570      	cmp	r0, lr
 8019900:	f280 80fe 	bge.w	8019b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019904:	2f00      	cmp	r7, #0
 8019906:	f2c0 80fb 	blt.w	8019b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801990a:	f10c 3eff 	add.w	lr, ip, #4294967295
 801990e:	4577      	cmp	r7, lr
 8019910:	f280 80f6 	bge.w	8019b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019914:	b212      	sxth	r2, r2
 8019916:	fb07 0002 	mla	r0, r7, r2, r0
 801991a:	9f08      	ldr	r7, [sp, #32]
 801991c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8019920:	eb07 0e00 	add.w	lr, r7, r0
 8019924:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019928:	eb05 0c08 	add.w	ip, r5, r8
 801992c:	2b00      	cmp	r3, #0
 801992e:	f000 80d8 	beq.w	8019ae2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8019932:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8019936:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801993a:	442f      	add	r7, r5
 801993c:	2900      	cmp	r1, #0
 801993e:	f000 80d9 	beq.w	8019af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8019942:	eb0e 0002 	add.w	r0, lr, r2
 8019946:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801994a:	7840      	ldrb	r0, [r0, #1]
 801994c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019950:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019954:	442a      	add	r2, r5
 8019956:	4428      	add	r0, r5
 8019958:	b29b      	uxth	r3, r3
 801995a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801995e:	b289      	uxth	r1, r1
 8019960:	f897 8000 	ldrb.w	r8, [r7]
 8019964:	fb03 f901 	mul.w	r9, r3, r1
 8019968:	011b      	lsls	r3, r3, #4
 801996a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801996e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019972:	eba3 0309 	sub.w	r3, r3, r9
 8019976:	b289      	uxth	r1, r1
 8019978:	b29b      	uxth	r3, r3
 801997a:	ebae 0e01 	sub.w	lr, lr, r1
 801997e:	fb03 f808 	mul.w	r8, r3, r8
 8019982:	fa1f fe8e 	uxth.w	lr, lr
 8019986:	fb0e 880a 	mla	r8, lr, sl, r8
 801998a:	f892 a000 	ldrb.w	sl, [r2]
 801998e:	fb01 880a 	mla	r8, r1, sl, r8
 8019992:	f890 a000 	ldrb.w	sl, [r0]
 8019996:	fb09 880a 	mla	r8, r9, sl, r8
 801999a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801999e:	f886 8000 	strb.w	r8, [r6]
 80199a2:	f897 8001 	ldrb.w	r8, [r7, #1]
 80199a6:	f89c a001 	ldrb.w	sl, [ip, #1]
 80199aa:	fb03 f808 	mul.w	r8, r3, r8
 80199ae:	fb0e 880a 	mla	r8, lr, sl, r8
 80199b2:	f892 a001 	ldrb.w	sl, [r2, #1]
 80199b6:	fb01 880a 	mla	r8, r1, sl, r8
 80199ba:	f890 a001 	ldrb.w	sl, [r0, #1]
 80199be:	fb09 880a 	mla	r8, r9, sl, r8
 80199c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80199c6:	f886 8001 	strb.w	r8, [r6, #1]
 80199ca:	78bf      	ldrb	r7, [r7, #2]
 80199cc:	f89c c002 	ldrb.w	ip, [ip, #2]
 80199d0:	437b      	muls	r3, r7
 80199d2:	7892      	ldrb	r2, [r2, #2]
 80199d4:	fb0e 330c 	mla	r3, lr, ip, r3
 80199d8:	fb01 3102 	mla	r1, r1, r2, r3
 80199dc:	7882      	ldrb	r2, [r0, #2]
 80199de:	fb09 1902 	mla	r9, r9, r2, r1
 80199e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80199e6:	f886 9002 	strb.w	r9, [r6, #2]
 80199ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80199ec:	3603      	adds	r6, #3
 80199ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80199f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80199f4:	441c      	add	r4, r3
 80199f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80199f8:	4413      	add	r3, r2
 80199fa:	9322      	str	r3, [sp, #136]	; 0x88
 80199fc:	e769      	b.n	80198d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80199fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019a00:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8019a02:	441c      	add	r4, r3
 8019a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019a06:	443b      	add	r3, r7
 8019a08:	9322      	str	r3, [sp, #136]	; 0x88
 8019a0a:	9b06      	ldr	r3, [sp, #24]
 8019a0c:	3b01      	subs	r3, #1
 8019a0e:	9306      	str	r3, [sp, #24]
 8019a10:	9b07      	ldr	r3, [sp, #28]
 8019a12:	3303      	adds	r3, #3
 8019a14:	9307      	str	r3, [sp, #28]
 8019a16:	e73e      	b.n	8019896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019a18:	d026      	beq.n	8019a68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8019a1a:	9b06      	ldr	r3, [sp, #24]
 8019a1c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8019a1e:	3b01      	subs	r3, #1
 8019a20:	fb00 4003 	mla	r0, r0, r3, r4
 8019a24:	1400      	asrs	r0, r0, #16
 8019a26:	f53f af52 	bmi.w	80198ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019a2a:	3901      	subs	r1, #1
 8019a2c:	4288      	cmp	r0, r1
 8019a2e:	f6bf af4e 	bge.w	80198ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019a32:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019a34:	9822      	ldr	r0, [sp, #136]	; 0x88
 8019a36:	fb01 0303 	mla	r3, r1, r3, r0
 8019a3a:	141b      	asrs	r3, r3, #16
 8019a3c:	f53f af47 	bmi.w	80198ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019a40:	3a01      	subs	r2, #1
 8019a42:	4293      	cmp	r3, r2
 8019a44:	f6bf af43 	bge.w	80198ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019a48:	9b07      	ldr	r3, [sp, #28]
 8019a4a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019a4e:	f103 0803 	add.w	r8, r3, #3
 8019a52:	f1ba 0f00 	cmp.w	sl, #0
 8019a56:	dc71      	bgt.n	8019b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8019a58:	9b06      	ldr	r3, [sp, #24]
 8019a5a:	9a07      	ldr	r2, [sp, #28]
 8019a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a64:	441a      	add	r2, r3
 8019a66:	9207      	str	r2, [sp, #28]
 8019a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	f340 80f2 	ble.w	8019c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8019a70:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8019a74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019a76:	ee79 9aab 	vadd.f32	s19, s19, s23
 8019a7a:	eef0 6a48 	vmov.f32	s13, s16
 8019a7e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8019a82:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8019a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a8a:	ee16 4a90 	vmov	r4, s13
 8019a8e:	eef0 6a68 	vmov.f32	s13, s17
 8019a92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a96:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8019a9a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019a9e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019aa2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019aa6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019aaa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019aae:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019ab2:	ee18 2a10 	vmov	r2, s16
 8019ab6:	eeb0 8a47 	vmov.f32	s16, s14
 8019aba:	fb92 f3f3 	sdiv	r3, r2, r3
 8019abe:	ee18 2a90 	vmov	r2, s17
 8019ac2:	9323      	str	r3, [sp, #140]	; 0x8c
 8019ac4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019ac6:	eef0 8a67 	vmov.f32	s17, s15
 8019aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ace:	9324      	str	r3, [sp, #144]	; 0x90
 8019ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ad4:	3b01      	subs	r3, #1
 8019ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ad8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019ada:	bf08      	it	eq
 8019adc:	4613      	moveq	r3, r2
 8019ade:	9306      	str	r3, [sp, #24]
 8019ae0:	e6cb      	b.n	801987a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019ae2:	b151      	cbz	r1, 8019afa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019ae4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8019ae8:	4660      	mov	r0, ip
 8019aea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019aee:	442a      	add	r2, r5
 8019af0:	4667      	mov	r7, ip
 8019af2:	e731      	b.n	8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019af4:	4660      	mov	r0, ip
 8019af6:	4662      	mov	r2, ip
 8019af8:	e72e      	b.n	8019958 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019afa:	4660      	mov	r0, ip
 8019afc:	4662      	mov	r2, ip
 8019afe:	e7f7      	b.n	8019af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8019b00:	f110 0e01 	adds.w	lr, r0, #1
 8019b04:	f53f af71 	bmi.w	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019b08:	4572      	cmp	r2, lr
 8019b0a:	f6ff af6e 	blt.w	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019b0e:	f117 0e01 	adds.w	lr, r7, #1
 8019b12:	f53f af6a 	bmi.w	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019b16:	45f4      	cmp	ip, lr
 8019b18:	f6ff af67 	blt.w	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019b1c:	b212      	sxth	r2, r2
 8019b1e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019b22:	fa0f f38c 	sxth.w	r3, ip
 8019b26:	9200      	str	r2, [sp, #0]
 8019b28:	4631      	mov	r1, r6
 8019b2a:	9a08      	ldr	r2, [sp, #32]
 8019b2c:	9301      	str	r3, [sp, #4]
 8019b2e:	462b      	mov	r3, r5
 8019b30:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8019b34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019b36:	f7ff fdbf 	bl	80196b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8019b3a:	e756      	b.n	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019b3e:	1426      	asrs	r6, r4, #16
 8019b40:	9822      	ldr	r0, [sp, #136]	; 0x88
 8019b42:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019b46:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019b4a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019b4c:	1400      	asrs	r0, r0, #16
 8019b4e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019b52:	fb02 6000 	mla	r0, r2, r0, r6
 8019b56:	9e08      	ldr	r6, [sp, #32]
 8019b58:	f816 e000 	ldrb.w	lr, [r6, r0]
 8019b5c:	eb06 0c00 	add.w	ip, r6, r0
 8019b60:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019b64:	eb05 070e 	add.w	r7, r5, lr
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d064      	beq.n	8019c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8019b6c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8019b70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019b74:	442e      	add	r6, r5
 8019b76:	2900      	cmp	r1, #0
 8019b78:	d066      	beq.n	8019c48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8019b7a:	eb0c 0002 	add.w	r0, ip, r2
 8019b7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019b82:	7840      	ldrb	r0, [r0, #1]
 8019b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019b88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b8c:	442a      	add	r2, r5
 8019b8e:	4428      	add	r0, r5
 8019b90:	b29b      	uxth	r3, r3
 8019b92:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8019b96:	b289      	uxth	r1, r1
 8019b98:	f896 e000 	ldrb.w	lr, [r6]
 8019b9c:	f108 0803 	add.w	r8, r8, #3
 8019ba0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ba4:	fb03 f901 	mul.w	r9, r3, r1
 8019ba8:	011b      	lsls	r3, r3, #4
 8019baa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019bae:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019bb2:	eba3 0309 	sub.w	r3, r3, r9
 8019bb6:	b289      	uxth	r1, r1
 8019bb8:	b29b      	uxth	r3, r3
 8019bba:	ebac 0c01 	sub.w	ip, ip, r1
 8019bbe:	fb03 fe0e 	mul.w	lr, r3, lr
 8019bc2:	fa1f fc8c 	uxth.w	ip, ip
 8019bc6:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019bca:	f892 b000 	ldrb.w	fp, [r2]
 8019bce:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019bd2:	f890 b000 	ldrb.w	fp, [r0]
 8019bd6:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019bda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019bde:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019be2:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019be6:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019bea:	fb03 fe0e 	mul.w	lr, r3, lr
 8019bee:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019bf2:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019bf6:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019bfa:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019bfe:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019c02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019c06:	f808 ec05 	strb.w	lr, [r8, #-5]
 8019c0a:	78b6      	ldrb	r6, [r6, #2]
 8019c0c:	78bf      	ldrb	r7, [r7, #2]
 8019c0e:	4373      	muls	r3, r6
 8019c10:	7896      	ldrb	r6, [r2, #2]
 8019c12:	7882      	ldrb	r2, [r0, #2]
 8019c14:	fb0c 3307 	mla	r3, ip, r7, r3
 8019c18:	fb01 3306 	mla	r3, r1, r6, r3
 8019c1c:	fb09 3902 	mla	r9, r9, r2, r3
 8019c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019c22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019c24:	441c      	add	r4, r3
 8019c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019c28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c2c:	4413      	add	r3, r2
 8019c2e:	f808 9c04 	strb.w	r9, [r8, #-4]
 8019c32:	9322      	str	r3, [sp, #136]	; 0x88
 8019c34:	e70d      	b.n	8019a52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019c36:	b151      	cbz	r1, 8019c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8019c38:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019c3c:	4638      	mov	r0, r7
 8019c3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019c42:	442a      	add	r2, r5
 8019c44:	463e      	mov	r6, r7
 8019c46:	e7a3      	b.n	8019b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019c48:	4638      	mov	r0, r7
 8019c4a:	463a      	mov	r2, r7
 8019c4c:	e7a0      	b.n	8019b90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019c4e:	4638      	mov	r0, r7
 8019c50:	463a      	mov	r2, r7
 8019c52:	e7f7      	b.n	8019c44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8019c54:	b00d      	add	sp, #52	; 0x34
 8019c56:	ecbd 8b0a 	vpop	{d8-d12}
 8019c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019c60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8019c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c64:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8019c68:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019c6c:	2d00      	cmp	r5, #0
 8019c6e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019c72:	fb05 040e 	mla	r4, r5, lr, r0
 8019c76:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019c7a:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8019c7e:	eb02 0804 	add.w	r8, r2, r4
 8019c82:	db40      	blt.n	8019d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019c84:	45a9      	cmp	r9, r5
 8019c86:	dd3e      	ble.n	8019d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	db3a      	blt.n	8019d02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019c8c:	4586      	cmp	lr, r0
 8019c8e:	dd38      	ble.n	8019d02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019c90:	5d12      	ldrb	r2, [r2, r4]
 8019c92:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019c96:	1c42      	adds	r2, r0, #1
 8019c98:	d438      	bmi.n	8019d0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019c9a:	4596      	cmp	lr, r2
 8019c9c:	dd36      	ble.n	8019d0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019c9e:	b3bf      	cbz	r7, 8019d10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8019ca0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019ca4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8019ca8:	3501      	adds	r5, #1
 8019caa:	d435      	bmi.n	8019d18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019cac:	45a9      	cmp	r9, r5
 8019cae:	dd33      	ble.n	8019d18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019cb0:	f1bc 0f00 	cmp.w	ip, #0
 8019cb4:	d033      	beq.n	8019d1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8019cb6:	2800      	cmp	r0, #0
 8019cb8:	db2c      	blt.n	8019d14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019cba:	4586      	cmp	lr, r0
 8019cbc:	dd2a      	ble.n	8019d14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019cbe:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019cc2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019cc6:	3001      	adds	r0, #1
 8019cc8:	d42c      	bmi.n	8019d24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019cca:	4586      	cmp	lr, r0
 8019ccc:	dd2a      	ble.n	8019d24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019cce:	b35f      	cbz	r7, 8019d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8019cd0:	44c6      	add	lr, r8
 8019cd2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019cda:	2f0f      	cmp	r7, #15
 8019cdc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019ce0:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8019ce4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019ce8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019cec:	d802      	bhi.n	8019cf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8019cee:	f1bc 0f0f 	cmp.w	ip, #15
 8019cf2:	d91b      	bls.n	8019d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8019cf4:	4b77      	ldr	r3, [pc, #476]	; (8019ed4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8019cf6:	f240 1157 	movw	r1, #343	; 0x157
 8019cfa:	4a77      	ldr	r2, [pc, #476]	; (8019ed8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8019cfc:	4877      	ldr	r0, [pc, #476]	; (8019edc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8019cfe:	f005 fd63 	bl	801f7c8 <__assert_func>
 8019d02:	2600      	movs	r6, #0
 8019d04:	e7c7      	b.n	8019c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8019d06:	2400      	movs	r4, #0
 8019d08:	4626      	mov	r6, r4
 8019d0a:	e7cd      	b.n	8019ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019d0c:	2400      	movs	r4, #0
 8019d0e:	e7cb      	b.n	8019ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019d10:	463c      	mov	r4, r7
 8019d12:	e7c9      	b.n	8019ca8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019d14:	2500      	movs	r5, #0
 8019d16:	e7d6      	b.n	8019cc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8019d18:	2200      	movs	r2, #0
 8019d1a:	4615      	mov	r5, r2
 8019d1c:	e7dd      	b.n	8019cda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019d1e:	4662      	mov	r2, ip
 8019d20:	4665      	mov	r5, ip
 8019d22:	e7da      	b.n	8019cda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019d24:	2200      	movs	r2, #0
 8019d26:	e7d8      	b.n	8019cda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019d28:	463a      	mov	r2, r7
 8019d2a:	e7d6      	b.n	8019cda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019d2c:	b2bf      	uxth	r7, r7
 8019d2e:	fa1f f08c 	uxth.w	r0, ip
 8019d32:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8019d36:	fb00 fe07 	mul.w	lr, r0, r7
 8019d3a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019d3e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8019d42:	ebac 070e 	sub.w	r7, ip, lr
 8019d46:	b280      	uxth	r0, r0
 8019d48:	b2bf      	uxth	r7, r7
 8019d4a:	1a1b      	subs	r3, r3, r0
 8019d4c:	fb07 fc0a 	mul.w	ip, r7, sl
 8019d50:	b29b      	uxth	r3, r3
 8019d52:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019d56:	9300      	str	r3, [sp, #0]
 8019d58:	fb00 cc09 	mla	ip, r0, r9, ip
 8019d5c:	fb0e cc08 	mla	ip, lr, r8, ip
 8019d60:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019d64:	9301      	str	r3, [sp, #4]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	f000 80b0 	beq.w	8019ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8019d6c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019d70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019d74:	fb0b fc0c 	mul.w	ip, fp, ip
 8019d78:	fb0b f606 	mul.w	r6, fp, r6
 8019d7c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019d80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d84:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019d88:	44dc      	add	ip, fp
 8019d8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d8e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019d92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d96:	fb0a fb0b 	mul.w	fp, sl, fp
 8019d9a:	fb0a fa04 	mul.w	sl, sl, r4
 8019d9e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019da2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019da6:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8019daa:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019dae:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019db2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019db6:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8019dba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019dbe:	0a36      	lsrs	r6, r6, #8
 8019dc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019dc4:	44dc      	add	ip, fp
 8019dc6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019dca:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019dce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019dd2:	fb09 fb0b 	mul.w	fp, r9, fp
 8019dd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019dda:	fb09 f905 	mul.w	r9, r9, r5
 8019dde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019de2:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8019de6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019dea:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019dee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019df2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019df6:	fb0c fc07 	mul.w	ip, ip, r7
 8019dfa:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019dfe:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019e02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019e06:	445c      	add	r4, fp
 8019e08:	fb08 f505 	mul.w	r5, r8, r5
 8019e0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019e10:	fb08 f802 	mul.w	r8, r8, r2
 8019e14:	0a24      	lsrs	r4, r4, #8
 8019e16:	0a2a      	lsrs	r2, r5, #8
 8019e18:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019e1c:	fb07 f70a 	mul.w	r7, r7, sl
 8019e20:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019e24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e28:	4415      	add	r5, r2
 8019e2a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019e2e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019e32:	9a00      	ldr	r2, [sp, #0]
 8019e34:	0a2d      	lsrs	r5, r5, #8
 8019e36:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019e3a:	fb03 cc02 	mla	ip, r3, r2, ip
 8019e3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019e42:	fb02 7306 	mla	r3, r2, r6, r7
 8019e46:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019e4a:	9a01      	ldr	r2, [sp, #4]
 8019e4c:	fb05 c50e 	mla	r5, r5, lr, ip
 8019e50:	fb0e 3e08 	mla	lr, lr, r8, r3
 8019e54:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8019e58:	fb04 5400 	mla	r4, r4, r0, r5
 8019e5c:	fb00 e303 	mla	r3, r0, r3, lr
 8019e60:	0a24      	lsrs	r4, r4, #8
 8019e62:	0a1b      	lsrs	r3, r3, #8
 8019e64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e6c:	431c      	orrs	r4, r3
 8019e6e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	b2e0      	uxtb	r0, r4
 8019e76:	435a      	muls	r2, r3
 8019e78:	fb10 f003 	smulbb	r0, r0, r3
 8019e7c:	1c55      	adds	r5, r2, #1
 8019e7e:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8019e82:	780a      	ldrb	r2, [r1, #0]
 8019e84:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8019e88:	b2ed      	uxtb	r5, r5
 8019e8a:	fb02 0205 	mla	r2, r2, r5, r0
 8019e8e:	b292      	uxth	r2, r2
 8019e90:	1c50      	adds	r0, r2, #1
 8019e92:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019e96:	7848      	ldrb	r0, [r1, #1]
 8019e98:	fb10 f005 	smulbb	r0, r0, r5
 8019e9c:	1212      	asrs	r2, r2, #8
 8019e9e:	700a      	strb	r2, [r1, #0]
 8019ea0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8019ea4:	0c24      	lsrs	r4, r4, #16
 8019ea6:	fb02 0203 	mla	r2, r2, r3, r0
 8019eaa:	b292      	uxth	r2, r2
 8019eac:	1c50      	adds	r0, r2, #1
 8019eae:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019eb2:	1212      	asrs	r2, r2, #8
 8019eb4:	704a      	strb	r2, [r1, #1]
 8019eb6:	788a      	ldrb	r2, [r1, #2]
 8019eb8:	fb12 f505 	smulbb	r5, r2, r5
 8019ebc:	fb04 5303 	mla	r3, r4, r3, r5
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	1c5a      	adds	r2, r3, #1
 8019ec4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019ec8:	121b      	asrs	r3, r3, #8
 8019eca:	708b      	strb	r3, [r1, #2]
 8019ecc:	b003      	add	sp, #12
 8019ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed2:	bf00      	nop
 8019ed4:	0802453f 	.word	0x0802453f
 8019ed8:	080249f6 	.word	0x080249f6
 8019edc:	080245c7 	.word	0x080245c7

08019ee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee4:	ed2d 8b08 	vpush	{d8-d11}
 8019ee8:	b09f      	sub	sp, #124	; 0x7c
 8019eea:	eeb0 aa40 	vmov.f32	s20, s0
 8019eee:	eef0 9a60 	vmov.f32	s19, s1
 8019ef2:	921b      	str	r2, [sp, #108]	; 0x6c
 8019ef4:	eeb0 9a41 	vmov.f32	s18, s2
 8019ef8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019efa:	eeb0 8a62 	vmov.f32	s16, s5
 8019efe:	9309      	str	r3, [sp, #36]	; 0x24
 8019f00:	eef0 8a43 	vmov.f32	s17, s6
 8019f04:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8019f08:	eef0 ba44 	vmov.f32	s23, s8
 8019f0c:	901d      	str	r0, [sp, #116]	; 0x74
 8019f0e:	eeb0 ba64 	vmov.f32	s22, s9
 8019f12:	931c      	str	r3, [sp, #112]	; 0x70
 8019f14:	eef0 aa45 	vmov.f32	s21, s10
 8019f18:	6850      	ldr	r0, [r2, #4]
 8019f1a:	9119      	str	r1, [sp, #100]	; 0x64
 8019f1c:	6812      	ldr	r2, [r2, #0]
 8019f1e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8019f20:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8019f24:	fb00 1303 	mla	r3, r0, r3, r1
 8019f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f2c:	18d3      	adds	r3, r2, r3
 8019f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8019f30:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	9312      	str	r3, [sp, #72]	; 0x48
 8019f36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019f38:	685e      	ldr	r6, [r3, #4]
 8019f3a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019f3e:	3604      	adds	r6, #4
 8019f40:	930d      	str	r3, [sp, #52]	; 0x34
 8019f42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	dc03      	bgt.n	8019f50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019f48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	f340 8378 	ble.w	801a640 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8019f50:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019f52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019f56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019f5a:	1e48      	subs	r0, r1, #1
 8019f5c:	1e57      	subs	r7, r2, #1
 8019f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	f340 818c 	ble.w	801a27e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8019f66:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019f68:	142b      	asrs	r3, r5, #16
 8019f6a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019f6e:	d406      	bmi.n	8019f7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019f70:	4584      	cmp	ip, r0
 8019f72:	da04      	bge.n	8019f7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	db02      	blt.n	8019f7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019f78:	42bb      	cmp	r3, r7
 8019f7a:	f2c0 8181 	blt.w	801a280 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8019f7e:	f11c 0c01 	adds.w	ip, ip, #1
 8019f82:	f100 816f 	bmi.w	801a264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019f86:	4561      	cmp	r1, ip
 8019f88:	f2c0 816c 	blt.w	801a264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	f100 8169 	bmi.w	801a264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019f92:	429a      	cmp	r2, r3
 8019f94:	f2c0 8166 	blt.w	801a264 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8019f9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	f340 818c 	ble.w	801a2be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019fa6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019fa8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019fac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019fb0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019fb4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019fb6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019fba:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019fbc:	141b      	asrs	r3, r3, #16
 8019fbe:	f100 81d0 	bmi.w	801a362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019fc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8019fc6:	4543      	cmp	r3, r8
 8019fc8:	f280 81cb 	bge.w	801a362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019fcc:	f1bc 0f00 	cmp.w	ip, #0
 8019fd0:	f2c0 81c7 	blt.w	801a362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019fd4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019fd8:	45c4      	cmp	ip, r8
 8019fda:	f280 81c2 	bge.w	801a362 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019fde:	b200      	sxth	r0, r0
 8019fe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019fe2:	fb0c 3300 	mla	r3, ip, r0, r3
 8019fe6:	eb04 0803 	add.w	r8, r4, r3
 8019fea:	5ce3      	ldrb	r3, [r4, r3]
 8019fec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019ff0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019ff4:	2a00      	cmp	r2, #0
 8019ff6:	f000 81a9 	beq.w	801a34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8019ffa:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019ffe:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a002:	940e      	str	r4, [sp, #56]	; 0x38
 801a004:	0e24      	lsrs	r4, r4, #24
 801a006:	9415      	str	r4, [sp, #84]	; 0x54
 801a008:	b179      	cbz	r1, 801a02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a00a:	eb08 0c00 	add.w	ip, r8, r0
 801a00e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a012:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a016:	900a      	str	r0, [sp, #40]	; 0x28
 801a018:	0e00      	lsrs	r0, r0, #24
 801a01a:	9013      	str	r0, [sp, #76]	; 0x4c
 801a01c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a020:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a024:	900f      	str	r0, [sp, #60]	; 0x3c
 801a026:	0e00      	lsrs	r0, r0, #24
 801a028:	9016      	str	r0, [sp, #88]	; 0x58
 801a02a:	b292      	uxth	r2, r2
 801a02c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a02e:	b289      	uxth	r1, r1
 801a030:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a032:	fb02 f901 	mul.w	r9, r2, r1
 801a036:	0112      	lsls	r2, r2, #4
 801a038:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a03c:	eba2 0809 	sub.w	r8, r2, r9
 801a040:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a044:	b289      	uxth	r1, r1
 801a046:	fa1f f888 	uxth.w	r8, r8
 801a04a:	1a52      	subs	r2, r2, r1
 801a04c:	fb08 f000 	mul.w	r0, r8, r0
 801a050:	b292      	uxth	r2, r2
 801a052:	fb02 000e 	mla	r0, r2, lr, r0
 801a056:	fb01 0004 	mla	r0, r1, r4, r0
 801a05a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a05c:	fb09 0004 	mla	r0, r9, r4, r0
 801a060:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a064:	2800      	cmp	r0, #0
 801a066:	f000 80f2 	beq.w	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a06a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a06e:	d01b      	beq.n	801a0a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a070:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a078:	fb0e fa0a 	mul.w	sl, lr, sl
 801a07c:	fb0e fe03 	mul.w	lr, lr, r3
 801a080:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a084:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a088:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a08c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a090:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a094:	4453      	add	r3, sl
 801a096:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a09a:	0a1b      	lsrs	r3, r3, #8
 801a09c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a0a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a0a4:	ea43 030c 	orr.w	r3, r3, ip
 801a0a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a0aa:	2cff      	cmp	r4, #255	; 0xff
 801a0ac:	d021      	beq.n	801a0f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801a0ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a0b0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a0b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a0b6:	fb04 fb0b 	mul.w	fp, r4, fp
 801a0ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a0bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a0c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a0c2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a0c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a0ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0d2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a0d6:	44de      	add	lr, fp
 801a0d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a0dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a0e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a0e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a0ec:	ea4e 040a 	orr.w	r4, lr, sl
 801a0f0:	940e      	str	r4, [sp, #56]	; 0x38
 801a0f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a0f4:	2cff      	cmp	r4, #255	; 0xff
 801a0f6:	d021      	beq.n	801a13c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801a0f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a0fa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a0fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a100:	fb04 fb0b 	mul.w	fp, r4, fp
 801a104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a106:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a10a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a10c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a110:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a114:	fb04 fa0a 	mul.w	sl, r4, sl
 801a118:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a11c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a120:	44de      	add	lr, fp
 801a122:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a126:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a12a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a12e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a132:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a136:	ea4e 040a 	orr.w	r4, lr, sl
 801a13a:	940a      	str	r4, [sp, #40]	; 0x28
 801a13c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a13e:	2cff      	cmp	r4, #255	; 0xff
 801a140:	d021      	beq.n	801a186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801a142:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a144:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a148:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a14a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a14e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a150:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a154:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a156:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a15a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a15e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a162:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a166:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a16a:	44de      	add	lr, fp
 801a16c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a170:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a174:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a178:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a17c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a180:	ea4e 040a 	orr.w	r4, lr, sl
 801a184:	940f      	str	r4, [sp, #60]	; 0x3c
 801a186:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a188:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a18c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a190:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a194:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a196:	fb08 fc0c 	mul.w	ip, r8, ip
 801a19a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a19e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a1a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a1a4:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a1a8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a1ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a1ae:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a1b2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a1b6:	fb08 f80e 	mul.w	r8, r8, lr
 801a1ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1be:	fb02 8303 	mla	r3, r2, r3, r8
 801a1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1c8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a1cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a1ce:	fb01 330a 	mla	r3, r1, sl, r3
 801a1d2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801a1d6:	fb09 3901 	mla	r9, r9, r1, r3
 801a1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a1de:	4343      	muls	r3, r0
 801a1e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a1e4:	1c58      	adds	r0, r3, #1
 801a1e6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a1ea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a1ee:	ea4c 0c09 	orr.w	ip, ip, r9
 801a1f2:	783b      	ldrb	r3, [r7, #0]
 801a1f4:	fa5f f28c 	uxtb.w	r2, ip
 801a1f8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a1fc:	fb12 f201 	smulbb	r2, r2, r1
 801a200:	b2c0      	uxtb	r0, r0
 801a202:	fb03 2300 	mla	r3, r3, r0, r2
 801a206:	b29b      	uxth	r3, r3
 801a208:	1c5a      	adds	r2, r3, #1
 801a20a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a20e:	787a      	ldrb	r2, [r7, #1]
 801a210:	fb12 f200 	smulbb	r2, r2, r0
 801a214:	121b      	asrs	r3, r3, #8
 801a216:	703b      	strb	r3, [r7, #0]
 801a218:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a21c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a220:	fb03 2301 	mla	r3, r3, r1, r2
 801a224:	b29b      	uxth	r3, r3
 801a226:	1c5a      	adds	r2, r3, #1
 801a228:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a22c:	121b      	asrs	r3, r3, #8
 801a22e:	707b      	strb	r3, [r7, #1]
 801a230:	78bb      	ldrb	r3, [r7, #2]
 801a232:	fb13 f000 	smulbb	r0, r3, r0
 801a236:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a23a:	fa1f fc8c 	uxth.w	ip, ip
 801a23e:	f10c 0301 	add.w	r3, ip, #1
 801a242:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a246:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a24a:	f887 c002 	strb.w	ip, [r7, #2]
 801a24e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a250:	3703      	adds	r7, #3
 801a252:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a254:	441a      	add	r2, r3
 801a256:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a258:	441d      	add	r5, r3
 801a25a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a25c:	9231      	str	r2, [sp, #196]	; 0xc4
 801a25e:	3b01      	subs	r3, #1
 801a260:	931a      	str	r3, [sp, #104]	; 0x68
 801a262:	e69c      	b.n	8019f9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801a264:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a266:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a268:	441c      	add	r4, r3
 801a26a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a26c:	441d      	add	r5, r3
 801a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a270:	9431      	str	r4, [sp, #196]	; 0xc4
 801a272:	3b01      	subs	r3, #1
 801a274:	9309      	str	r3, [sp, #36]	; 0x24
 801a276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a278:	3303      	adds	r3, #3
 801a27a:	930c      	str	r3, [sp, #48]	; 0x30
 801a27c:	e66f      	b.n	8019f5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a27e:	d026      	beq.n	801a2ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a282:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801a284:	3b01      	subs	r3, #1
 801a286:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a288:	fb00 4003 	mla	r0, r0, r3, r4
 801a28c:	1400      	asrs	r0, r0, #16
 801a28e:	f53f ae83 	bmi.w	8019f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a292:	3901      	subs	r1, #1
 801a294:	4288      	cmp	r0, r1
 801a296:	f6bf ae7f 	bge.w	8019f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a29a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801a29c:	fb01 5303 	mla	r3, r1, r3, r5
 801a2a0:	141b      	asrs	r3, r3, #16
 801a2a2:	f53f ae79 	bmi.w	8019f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a2a6:	3a01      	subs	r2, #1
 801a2a8:	4293      	cmp	r3, r2
 801a2aa:	f6bf ae75 	bge.w	8019f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a2ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a2b4:	f103 0e03 	add.w	lr, r3, #3
 801a2b8:	f1bb 0f00 	cmp.w	fp, #0
 801a2bc:	dc71      	bgt.n	801a3a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a2c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a2ca:	4423      	add	r3, r4
 801a2cc:	930c      	str	r3, [sp, #48]	; 0x30
 801a2ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f340 81b5 	ble.w	801a640 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801a2d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a2da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a2dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a2e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a2e4:	eef0 6a48 	vmov.f32	s13, s16
 801a2e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a2ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a2f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a2f4:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801a2f8:	eef0 6a68 	vmov.f32	s13, s17
 801a2fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a300:	ee16 5a90 	vmov	r5, s13
 801a304:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a308:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a30c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a310:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a314:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a318:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a31c:	ee18 2a10 	vmov	r2, s16
 801a320:	eeb0 8a47 	vmov.f32	s16, s14
 801a324:	fb92 f3f3 	sdiv	r3, r2, r3
 801a328:	ee18 2a90 	vmov	r2, s17
 801a32c:	9333      	str	r3, [sp, #204]	; 0xcc
 801a32e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a330:	eef0 8a67 	vmov.f32	s17, s15
 801a334:	fb92 f3f3 	sdiv	r3, r2, r3
 801a338:	9334      	str	r3, [sp, #208]	; 0xd0
 801a33a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a33c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a33e:	3b01      	subs	r3, #1
 801a340:	9319      	str	r3, [sp, #100]	; 0x64
 801a342:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a344:	bf08      	it	eq
 801a346:	4613      	moveq	r3, r2
 801a348:	9309      	str	r3, [sp, #36]	; 0x24
 801a34a:	e5fa      	b.n	8019f42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a34c:	2900      	cmp	r1, #0
 801a34e:	f43f ae6c 	beq.w	801a02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a352:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a356:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a35a:	900a      	str	r0, [sp, #40]	; 0x28
 801a35c:	0e00      	lsrs	r0, r0, #24
 801a35e:	9013      	str	r0, [sp, #76]	; 0x4c
 801a360:	e663      	b.n	801a02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a362:	f113 0801 	adds.w	r8, r3, #1
 801a366:	f53f af72 	bmi.w	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a36a:	4540      	cmp	r0, r8
 801a36c:	f6ff af6f 	blt.w	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a370:	f11c 0801 	adds.w	r8, ip, #1
 801a374:	f53f af6b 	bmi.w	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a378:	45c6      	cmp	lr, r8
 801a37a:	f6ff af68 	blt.w	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a37e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a380:	b200      	sxth	r0, r0
 801a382:	9302      	str	r3, [sp, #8]
 801a384:	fa0f f38e 	sxth.w	r3, lr
 801a388:	9000      	str	r0, [sp, #0]
 801a38a:	9301      	str	r3, [sp, #4]
 801a38c:	4633      	mov	r3, r6
 801a38e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a390:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a394:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a398:	4639      	mov	r1, r7
 801a39a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a39c:	f7ff fc60 	bl	8019c60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801a3a0:	e755      	b.n	801a24e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a3a2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a3a4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a3a8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a3aa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a3ae:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801a3b0:	1427      	asrs	r7, r4, #16
 801a3b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a3b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a3b8:	142b      	asrs	r3, r5, #16
 801a3ba:	fb01 7303 	mla	r3, r1, r3, r7
 801a3be:	18e7      	adds	r7, r4, r3
 801a3c0:	5ce3      	ldrb	r3, [r4, r3]
 801a3c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a3c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a3ca:	2a00      	cmp	r2, #0
 801a3cc:	f000 812e 	beq.w	801a62c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801a3d0:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a3d4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a3d8:	9410      	str	r4, [sp, #64]	; 0x40
 801a3da:	0e24      	lsrs	r4, r4, #24
 801a3dc:	9417      	str	r4, [sp, #92]	; 0x5c
 801a3de:	b170      	cbz	r0, 801a3fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a3e0:	eb07 0801 	add.w	r8, r7, r1
 801a3e4:	5c79      	ldrb	r1, [r7, r1]
 801a3e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a3ea:	910b      	str	r1, [sp, #44]	; 0x2c
 801a3ec:	0e09      	lsrs	r1, r1, #24
 801a3ee:	9114      	str	r1, [sp, #80]	; 0x50
 801a3f0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a3f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a3f8:	9111      	str	r1, [sp, #68]	; 0x44
 801a3fa:	0e09      	lsrs	r1, r1, #24
 801a3fc:	9118      	str	r1, [sp, #96]	; 0x60
 801a3fe:	b292      	uxth	r2, r2
 801a400:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a402:	b280      	uxth	r0, r0
 801a404:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a406:	fb02 f900 	mul.w	r9, r2, r0
 801a40a:	0112      	lsls	r2, r2, #4
 801a40c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a410:	eba2 0809 	sub.w	r8, r2, r9
 801a414:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a418:	b280      	uxth	r0, r0
 801a41a:	fa1f f888 	uxth.w	r8, r8
 801a41e:	1a12      	subs	r2, r2, r0
 801a420:	fb08 f101 	mul.w	r1, r8, r1
 801a424:	b292      	uxth	r2, r2
 801a426:	fb02 110c 	mla	r1, r2, ip, r1
 801a42a:	fb00 1104 	mla	r1, r0, r4, r1
 801a42e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a430:	fb09 1104 	mla	r1, r9, r4, r1
 801a434:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a438:	2900      	cmp	r1, #0
 801a43a:	f000 80ec 	beq.w	801a616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801a43e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a442:	d019      	beq.n	801a478 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801a444:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a44c:	fb0c fa0a 	mul.w	sl, ip, sl
 801a450:	fb0c fc03 	mul.w	ip, ip, r3
 801a454:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a458:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a45c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a460:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a464:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a468:	4453      	add	r3, sl
 801a46a:	0a3f      	lsrs	r7, r7, #8
 801a46c:	0a1b      	lsrs	r3, r3, #8
 801a46e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a472:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a476:	433b      	orrs	r3, r7
 801a478:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a47a:	2cff      	cmp	r4, #255	; 0xff
 801a47c:	d020      	beq.n	801a4c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801a47e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a480:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a484:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a486:	4367      	muls	r7, r4
 801a488:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a48a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a48e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a492:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a494:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a498:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a49c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a4a0:	44bc      	add	ip, r7
 801a4a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a4a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a4ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a4ba:	ea4c 040a 	orr.w	r4, ip, sl
 801a4be:	9410      	str	r4, [sp, #64]	; 0x40
 801a4c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a4c2:	2cff      	cmp	r4, #255	; 0xff
 801a4c4:	d020      	beq.n	801a508 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801a4c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a4c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a4cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a4ce:	4367      	muls	r7, r4
 801a4d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a4d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a4d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a4da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a4dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a4e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801a4e8:	44bc      	add	ip, r7
 801a4ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a4ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a4f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a502:	ea4c 040a 	orr.w	r4, ip, sl
 801a506:	940b      	str	r4, [sp, #44]	; 0x2c
 801a508:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a50a:	2cff      	cmp	r4, #255	; 0xff
 801a50c:	d020      	beq.n	801a550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801a50e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a510:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a514:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a516:	4367      	muls	r7, r4
 801a518:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a51a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a51e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a522:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a524:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a528:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a52c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a530:	44bc      	add	ip, r7
 801a532:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a53a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a53e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a542:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a546:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a54a:	ea4c 040a 	orr.w	r4, ip, sl
 801a54e:	9411      	str	r4, [sp, #68]	; 0x44
 801a550:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a552:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a55a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a55e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a560:	fb08 f707 	mul.w	r7, r8, r7
 801a564:	fb02 770c 	mla	r7, r2, ip, r7
 801a568:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a56c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a56e:	fb00 770c 	mla	r7, r0, ip, r7
 801a572:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a576:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a578:	fb09 770c 	mla	r7, r9, ip, r7
 801a57c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a580:	fb08 f80c 	mul.w	r8, r8, ip
 801a584:	0a3f      	lsrs	r7, r7, #8
 801a586:	fb02 8303 	mla	r3, r2, r3, r8
 801a58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a58c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a590:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a594:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a596:	fb00 330a 	mla	r3, r0, sl, r3
 801a59a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a59e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a5a0:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5aa:	434b      	muls	r3, r1
 801a5ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a5b0:	1c59      	adds	r1, r3, #1
 801a5b2:	ea47 070c 	orr.w	r7, r7, ip
 801a5b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a5ba:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a5be:	b2fa      	uxtb	r2, r7
 801a5c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a5c4:	fb12 f200 	smulbb	r2, r2, r0
 801a5c8:	b2c9      	uxtb	r1, r1
 801a5ca:	fb03 2301 	mla	r3, r3, r1, r2
 801a5ce:	b29b      	uxth	r3, r3
 801a5d0:	1c5a      	adds	r2, r3, #1
 801a5d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a5d6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a5da:	fb12 f201 	smulbb	r2, r2, r1
 801a5de:	121b      	asrs	r3, r3, #8
 801a5e0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a5e4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a5e8:	0c3f      	lsrs	r7, r7, #16
 801a5ea:	fb03 2300 	mla	r3, r3, r0, r2
 801a5ee:	b29b      	uxth	r3, r3
 801a5f0:	1c5a      	adds	r2, r3, #1
 801a5f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a5f6:	121b      	asrs	r3, r3, #8
 801a5f8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a5fc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a600:	fb13 f101 	smulbb	r1, r3, r1
 801a604:	fb07 1700 	mla	r7, r7, r0, r1
 801a608:	b2bf      	uxth	r7, r7
 801a60a:	1c7b      	adds	r3, r7, #1
 801a60c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a610:	123f      	asrs	r7, r7, #8
 801a612:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a616:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a618:	f10e 0e03 	add.w	lr, lr, #3
 801a61c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a61e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a622:	441a      	add	r2, r3
 801a624:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a626:	9231      	str	r2, [sp, #196]	; 0xc4
 801a628:	441d      	add	r5, r3
 801a62a:	e645      	b.n	801a2b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801a62c:	2800      	cmp	r0, #0
 801a62e:	f43f aee6 	beq.w	801a3fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a632:	5c79      	ldrb	r1, [r7, r1]
 801a634:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a638:	910b      	str	r1, [sp, #44]	; 0x2c
 801a63a:	0e09      	lsrs	r1, r1, #24
 801a63c:	9114      	str	r1, [sp, #80]	; 0x50
 801a63e:	e6de      	b.n	801a3fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a640:	b01f      	add	sp, #124	; 0x7c
 801a642:	ecbd 8b08 	vpop	{d8-d11}
 801a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a64c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a650:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801a654:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801a658:	2c00      	cmp	r4, #0
 801a65a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801a65e:	fb04 060c 	mla	r6, r4, ip, r0
 801a662:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801a666:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801a66a:	eb02 0e06 	add.w	lr, r2, r6
 801a66e:	db3d      	blt.n	801a6ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a670:	45a0      	cmp	r8, r4
 801a672:	dd3b      	ble.n	801a6ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a674:	2800      	cmp	r0, #0
 801a676:	db37      	blt.n	801a6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a678:	4584      	cmp	ip, r0
 801a67a:	dd35      	ble.n	801a6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a67c:	5d92      	ldrb	r2, [r2, r6]
 801a67e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a682:	1c46      	adds	r6, r0, #1
 801a684:	d435      	bmi.n	801a6f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a686:	45b4      	cmp	ip, r6
 801a688:	dd33      	ble.n	801a6f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a68a:	b3a5      	cbz	r5, 801a6f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 801a68c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801a690:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801a694:	3401      	adds	r4, #1
 801a696:	d432      	bmi.n	801a6fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a698:	45a0      	cmp	r8, r4
 801a69a:	dd30      	ble.n	801a6fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a69c:	b397      	cbz	r7, 801a704 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801a69e:	2800      	cmp	r0, #0
 801a6a0:	db2b      	blt.n	801a6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a6a2:	4584      	cmp	ip, r0
 801a6a4:	dd29      	ble.n	801a6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a6a6:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801a6aa:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801a6ae:	3001      	adds	r0, #1
 801a6b0:	d42b      	bmi.n	801a70a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a6b2:	4584      	cmp	ip, r0
 801a6b4:	dd29      	ble.n	801a70a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a6b6:	b355      	cbz	r5, 801a70e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 801a6b8:	44f4      	add	ip, lr
 801a6ba:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a6be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a6c2:	2d0f      	cmp	r5, #15
 801a6c4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a6c8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a6cc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a6d0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a6d4:	d801      	bhi.n	801a6da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801a6d6:	2f0f      	cmp	r7, #15
 801a6d8:	d91b      	bls.n	801a712 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 801a6da:	4b7f      	ldr	r3, [pc, #508]	; (801a8d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801a6dc:	f240 1157 	movw	r1, #343	; 0x157
 801a6e0:	4a7e      	ldr	r2, [pc, #504]	; (801a8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801a6e2:	487f      	ldr	r0, [pc, #508]	; (801a8e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801a6e4:	f005 f870 	bl	801f7c8 <__assert_func>
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	e7ca      	b.n	801a682 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 801a6ec:	2600      	movs	r6, #0
 801a6ee:	4632      	mov	r2, r6
 801a6f0:	e7d0      	b.n	801a694 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a6f2:	2600      	movs	r6, #0
 801a6f4:	e7ce      	b.n	801a694 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a6f6:	462e      	mov	r6, r5
 801a6f8:	e7cc      	b.n	801a694 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a6fa:	2400      	movs	r4, #0
 801a6fc:	e7d7      	b.n	801a6ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801a6fe:	2300      	movs	r3, #0
 801a700:	461c      	mov	r4, r3
 801a702:	e7de      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a704:	463b      	mov	r3, r7
 801a706:	463c      	mov	r4, r7
 801a708:	e7db      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a70a:	2300      	movs	r3, #0
 801a70c:	e7d9      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a70e:	462b      	mov	r3, r5
 801a710:	e7d7      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a712:	b2a8      	uxth	r0, r5
 801a714:	b2bf      	uxth	r7, r7
 801a716:	fb07 fe00 	mul.w	lr, r7, r0
 801a71a:	0100      	lsls	r0, r0, #4
 801a71c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a720:	eba0 0c0e 	sub.w	ip, r0, lr
 801a724:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a728:	b2bf      	uxth	r7, r7
 801a72a:	fa1f fc8c 	uxth.w	ip, ip
 801a72e:	1bc5      	subs	r5, r0, r7
 801a730:	fb0c f00a 	mul.w	r0, ip, sl
 801a734:	b2ad      	uxth	r5, r5
 801a736:	fb05 000b 	mla	r0, r5, fp, r0
 801a73a:	fb07 0009 	mla	r0, r7, r9, r0
 801a73e:	fb0e 0008 	mla	r0, lr, r8, r0
 801a742:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a746:	9001      	str	r0, [sp, #4]
 801a748:	2800      	cmp	r0, #0
 801a74a:	f000 80c2 	beq.w	801a8d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801a74e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a752:	d018      	beq.n	801a786 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801a754:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a758:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a75c:	fb0b f000 	mul.w	r0, fp, r0
 801a760:	fb0b fb02 	mul.w	fp, fp, r2
 801a764:	0a02      	lsrs	r2, r0, #8
 801a766:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a76a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a76e:	4402      	add	r2, r0
 801a770:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a774:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a778:	0a12      	lsrs	r2, r2, #8
 801a77a:	0a00      	lsrs	r0, r0, #8
 801a77c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a780:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a784:	4302      	orrs	r2, r0
 801a786:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a78a:	d01a      	beq.n	801a7c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 801a78c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a790:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a794:	fb0a f000 	mul.w	r0, sl, r0
 801a798:	fb0a fa06 	mul.w	sl, sl, r6
 801a79c:	0a06      	lsrs	r6, r0, #8
 801a79e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a7a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a7a6:	4406      	add	r6, r0
 801a7a8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a7ac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a7b0:	0a36      	lsrs	r6, r6, #8
 801a7b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a7b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a7ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a7be:	ea46 060a 	orr.w	r6, r6, sl
 801a7c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a7c6:	d01b      	beq.n	801a800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 801a7c8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a7cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a7d0:	fb09 fa0a 	mul.w	sl, r9, sl
 801a7d4:	fb09 f004 	mul.w	r0, r9, r4
 801a7d8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a7dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a7e0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a7e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a7e8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a7ec:	4454      	add	r4, sl
 801a7ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a7f2:	0a24      	lsrs	r4, r4, #8
 801a7f4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a7f8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a7fc:	ea44 0409 	orr.w	r4, r4, r9
 801a800:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a804:	d01b      	beq.n	801a83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801a806:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a80a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a80e:	fb08 f909 	mul.w	r9, r8, r9
 801a812:	fb08 f003 	mul.w	r0, r8, r3
 801a816:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a81a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a81e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a822:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a826:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a82a:	444b      	add	r3, r9
 801a82c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a830:	0a1b      	lsrs	r3, r3, #8
 801a832:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a836:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a83a:	ea43 0308 	orr.w	r3, r3, r8
 801a83e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a842:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a846:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a84a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a84e:	fb0c f000 	mul.w	r0, ip, r0
 801a852:	fb0c f606 	mul.w	r6, ip, r6
 801a856:	fb05 0808 	mla	r8, r5, r8, r0
 801a85a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a85e:	fb05 6502 	mla	r5, r5, r2, r6
 801a862:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a866:	fb07 8800 	mla	r8, r7, r0, r8
 801a86a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a86e:	fb07 5704 	mla	r7, r7, r4, r5
 801a872:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a876:	fb0e 8000 	mla	r0, lr, r0, r8
 801a87a:	780a      	ldrb	r2, [r1, #0]
 801a87c:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a880:	9b01      	ldr	r3, [sp, #4]
 801a882:	0a00      	lsrs	r0, r0, #8
 801a884:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a888:	43db      	mvns	r3, r3
 801a88a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a88e:	b2db      	uxtb	r3, r3
 801a890:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a894:	ea40 0e0e 	orr.w	lr, r0, lr
 801a898:	fb02 f003 	mul.w	r0, r2, r3
 801a89c:	1c42      	adds	r2, r0, #1
 801a89e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a8a2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a8a6:	700a      	strb	r2, [r1, #0]
 801a8a8:	784a      	ldrb	r2, [r1, #1]
 801a8aa:	435a      	muls	r2, r3
 801a8ac:	1c50      	adds	r0, r2, #1
 801a8ae:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a8b2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a8b6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a8ba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a8be:	704a      	strb	r2, [r1, #1]
 801a8c0:	788a      	ldrb	r2, [r1, #2]
 801a8c2:	4353      	muls	r3, r2
 801a8c4:	1c5a      	adds	r2, r3, #1
 801a8c6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a8ca:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a8ce:	f881 e002 	strb.w	lr, [r1, #2]
 801a8d2:	b003      	add	sp, #12
 801a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d8:	0802453f 	.word	0x0802453f
 801a8dc:	080249f6 	.word	0x080249f6
 801a8e0:	080245c7 	.word	0x080245c7

0801a8e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e8:	ed2d 8b0a 	vpush	{d8-d12}
 801a8ec:	b09b      	sub	sp, #108	; 0x6c
 801a8ee:	eeb0 aa40 	vmov.f32	s20, s0
 801a8f2:	eef0 9a60 	vmov.f32	s19, s1
 801a8f6:	9218      	str	r2, [sp, #96]	; 0x60
 801a8f8:	eeb0 9a41 	vmov.f32	s18, s2
 801a8fc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801a8fe:	eeb0 8a62 	vmov.f32	s16, s5
 801a902:	9019      	str	r0, [sp, #100]	; 0x64
 801a904:	eef0 8a43 	vmov.f32	s17, s6
 801a908:	6850      	ldr	r0, [r2, #4]
 801a90a:	eeb0 ca44 	vmov.f32	s24, s8
 801a90e:	9116      	str	r1, [sp, #88]	; 0x58
 801a910:	eef0 ba64 	vmov.f32	s23, s9
 801a914:	9307      	str	r3, [sp, #28]
 801a916:	eeb0 ba45 	vmov.f32	s22, s10
 801a91a:	6812      	ldr	r2, [r2, #0]
 801a91c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801a920:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801a922:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a926:	fb00 1303 	mla	r3, r0, r3, r1
 801a92a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a92e:	18d3      	adds	r3, r2, r3
 801a930:	930a      	str	r3, [sp, #40]	; 0x28
 801a932:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	930f      	str	r3, [sp, #60]	; 0x3c
 801a938:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a93a:	685e      	ldr	r6, [r3, #4]
 801a93c:	3604      	adds	r6, #4
 801a93e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a940:	2b00      	cmp	r3, #0
 801a942:	dc03      	bgt.n	801a94c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a944:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a946:	2b00      	cmp	r3, #0
 801a948:	f340 834f 	ble.w	801afea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a94c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a94e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a952:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a956:	1e48      	subs	r0, r1, #1
 801a958:	1e57      	subs	r7, r2, #1
 801a95a:	9b07      	ldr	r3, [sp, #28]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	f340 8178 	ble.w	801ac52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a962:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801a964:	142b      	asrs	r3, r5, #16
 801a966:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a96a:	d406      	bmi.n	801a97a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a96c:	4584      	cmp	ip, r0
 801a96e:	da04      	bge.n	801a97a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a970:	2b00      	cmp	r3, #0
 801a972:	db02      	blt.n	801a97a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a974:	42bb      	cmp	r3, r7
 801a976:	f2c0 816d 	blt.w	801ac54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801a97a:	f11c 0c01 	adds.w	ip, ip, #1
 801a97e:	f100 815b 	bmi.w	801ac38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a982:	4561      	cmp	r1, ip
 801a984:	f2c0 8158 	blt.w	801ac38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a988:	3301      	adds	r3, #1
 801a98a:	f100 8155 	bmi.w	801ac38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a98e:	429a      	cmp	r2, r3
 801a990:	f2c0 8152 	blt.w	801ac38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a994:	9b07      	ldr	r3, [sp, #28]
 801a996:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a998:	9317      	str	r3, [sp, #92]	; 0x5c
 801a99a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	f340 8178 	ble.w	801ac92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801a9a2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a9a4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a9a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a9ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a9b0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a9b2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a9b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a9b8:	141b      	asrs	r3, r3, #16
 801a9ba:	f100 81ba 	bmi.w	801ad32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a9be:	f101 38ff 	add.w	r8, r1, #4294967295
 801a9c2:	4543      	cmp	r3, r8
 801a9c4:	f280 81b5 	bge.w	801ad32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a9c8:	f1bc 0f00 	cmp.w	ip, #0
 801a9cc:	f2c0 81b1 	blt.w	801ad32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a9d0:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a9d4:	45c4      	cmp	ip, r8
 801a9d6:	f280 81ac 	bge.w	801ad32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a9da:	b209      	sxth	r1, r1
 801a9dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a9de:	fb0c 3301 	mla	r3, ip, r1, r3
 801a9e2:	eb04 0803 	add.w	r8, r4, r3
 801a9e6:	5ce3      	ldrb	r3, [r4, r3]
 801a9e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a9ec:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a9f0:	2a00      	cmp	r2, #0
 801a9f2:	f000 8193 	beq.w	801ad1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801a9f6:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a9fa:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a9fe:	940b      	str	r4, [sp, #44]	; 0x2c
 801aa00:	0e24      	lsrs	r4, r4, #24
 801aa02:	9412      	str	r4, [sp, #72]	; 0x48
 801aa04:	b178      	cbz	r0, 801aa26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801aa06:	eb08 0c01 	add.w	ip, r8, r1
 801aa0a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801aa0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aa12:	9108      	str	r1, [sp, #32]
 801aa14:	0e09      	lsrs	r1, r1, #24
 801aa16:	9110      	str	r1, [sp, #64]	; 0x40
 801aa18:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801aa1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aa20:	910c      	str	r1, [sp, #48]	; 0x30
 801aa22:	0e09      	lsrs	r1, r1, #24
 801aa24:	9113      	str	r1, [sp, #76]	; 0x4c
 801aa26:	b292      	uxth	r2, r2
 801aa28:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aa2a:	b280      	uxth	r0, r0
 801aa2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aa2e:	fb02 f900 	mul.w	r9, r2, r0
 801aa32:	0112      	lsls	r2, r2, #4
 801aa34:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801aa38:	eba2 0809 	sub.w	r8, r2, r9
 801aa3c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801aa40:	b280      	uxth	r0, r0
 801aa42:	fa1f f888 	uxth.w	r8, r8
 801aa46:	1a12      	subs	r2, r2, r0
 801aa48:	fb08 f101 	mul.w	r1, r8, r1
 801aa4c:	b292      	uxth	r2, r2
 801aa4e:	fb02 110e 	mla	r1, r2, lr, r1
 801aa52:	fb00 1104 	mla	r1, r0, r4, r1
 801aa56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aa58:	fb09 1104 	mla	r1, r9, r4, r1
 801aa5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801aa60:	2900      	cmp	r1, #0
 801aa62:	f000 80de 	beq.w	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801aa66:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801aa6a:	d01b      	beq.n	801aaa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801aa6c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801aa70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aa74:	fb0e fa0a 	mul.w	sl, lr, sl
 801aa78:	fb0e fe03 	mul.w	lr, lr, r3
 801aa7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aa80:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801aa84:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801aa88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aa8c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801aa90:	4453      	add	r3, sl
 801aa92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa96:	0a1b      	lsrs	r3, r3, #8
 801aa98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801aa9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aaa0:	ea43 030c 	orr.w	r3, r3, ip
 801aaa4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aaa6:	2cff      	cmp	r4, #255	; 0xff
 801aaa8:	d021      	beq.n	801aaee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801aaaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aaac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801aab0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aab2:	fb04 fb0b 	mul.w	fp, r4, fp
 801aab6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aab8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aabc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aabe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801aac2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801aac6:	fb04 fa0a 	mul.w	sl, r4, sl
 801aaca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aace:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801aad2:	44de      	add	lr, fp
 801aad4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801aad8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aadc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aae0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aae4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aae8:	ea4e 040a 	orr.w	r4, lr, sl
 801aaec:	940b      	str	r4, [sp, #44]	; 0x2c
 801aaee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aaf0:	2cff      	cmp	r4, #255	; 0xff
 801aaf2:	d021      	beq.n	801ab38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801aaf4:	9c08      	ldr	r4, [sp, #32]
 801aaf6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801aafa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801aafc:	fb04 fb0b 	mul.w	fp, r4, fp
 801ab00:	9c08      	ldr	r4, [sp, #32]
 801ab02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ab06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ab08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ab0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab10:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ab1c:	44de      	add	lr, fp
 801ab1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ab22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ab32:	ea4e 040a 	orr.w	r4, lr, sl
 801ab36:	9408      	str	r4, [sp, #32]
 801ab38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab3a:	2cff      	cmp	r4, #255	; 0xff
 801ab3c:	d021      	beq.n	801ab82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ab3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ab40:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ab44:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab46:	fb04 fb0b 	mul.w	fp, r4, fp
 801ab4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ab4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ab50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ab52:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ab56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab5a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ab66:	44de      	add	lr, fp
 801ab68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ab6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ab7c:	ea4e 040a 	orr.w	r4, lr, sl
 801ab80:	940c      	str	r4, [sp, #48]	; 0x30
 801ab82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ab84:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ab88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ab8c:	43c9      	mvns	r1, r1
 801ab8e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab92:	9c08      	ldr	r4, [sp, #32]
 801ab94:	b2c9      	uxtb	r1, r1
 801ab96:	fb08 fc0c 	mul.w	ip, r8, ip
 801ab9a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ab9e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801aba2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801aba4:	fb00 cc0e 	mla	ip, r0, lr, ip
 801aba8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801abac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801abae:	fb09 cc0e 	mla	ip, r9, lr, ip
 801abb2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801abb6:	fb08 f80e 	mul.w	r8, r8, lr
 801abba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801abbe:	fb02 8303 	mla	r3, r2, r3, r8
 801abc2:	9a08      	ldr	r2, [sp, #32]
 801abc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801abc8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801abcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abce:	fb00 330a 	mla	r3, r0, sl, r3
 801abd2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801abd6:	fb09 3900 	mla	r9, r9, r0, r3
 801abda:	783b      	ldrb	r3, [r7, #0]
 801abdc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801abe0:	fb03 f201 	mul.w	r2, r3, r1
 801abe4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801abe8:	1c53      	adds	r3, r2, #1
 801abea:	ea4c 0c09 	orr.w	ip, ip, r9
 801abee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801abf2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801abf6:	703b      	strb	r3, [r7, #0]
 801abf8:	787b      	ldrb	r3, [r7, #1]
 801abfa:	434b      	muls	r3, r1
 801abfc:	1c5a      	adds	r2, r3, #1
 801abfe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ac02:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ac06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ac0a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ac0e:	707b      	strb	r3, [r7, #1]
 801ac10:	78bb      	ldrb	r3, [r7, #2]
 801ac12:	4359      	muls	r1, r3
 801ac14:	1c4b      	adds	r3, r1, #1
 801ac16:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ac1a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ac1e:	f887 c002 	strb.w	ip, [r7, #2]
 801ac22:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ac24:	3703      	adds	r7, #3
 801ac26:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ac28:	441a      	add	r2, r3
 801ac2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ac2c:	441d      	add	r5, r3
 801ac2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac30:	922f      	str	r2, [sp, #188]	; 0xbc
 801ac32:	3b01      	subs	r3, #1
 801ac34:	9317      	str	r3, [sp, #92]	; 0x5c
 801ac36:	e6b0      	b.n	801a99a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ac38:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ac3a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801ac3c:	441c      	add	r4, r3
 801ac3e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ac40:	441d      	add	r5, r3
 801ac42:	9b07      	ldr	r3, [sp, #28]
 801ac44:	942f      	str	r4, [sp, #188]	; 0xbc
 801ac46:	3b01      	subs	r3, #1
 801ac48:	9307      	str	r3, [sp, #28]
 801ac4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac4c:	3303      	adds	r3, #3
 801ac4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ac50:	e683      	b.n	801a95a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ac52:	d026      	beq.n	801aca2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801ac54:	9b07      	ldr	r3, [sp, #28]
 801ac56:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801ac58:	3b01      	subs	r3, #1
 801ac5a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801ac5c:	fb00 4003 	mla	r0, r0, r3, r4
 801ac60:	1400      	asrs	r0, r0, #16
 801ac62:	f53f ae97 	bmi.w	801a994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ac66:	3901      	subs	r1, #1
 801ac68:	4288      	cmp	r0, r1
 801ac6a:	f6bf ae93 	bge.w	801a994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ac6e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801ac70:	fb01 5303 	mla	r3, r1, r3, r5
 801ac74:	141b      	asrs	r3, r3, #16
 801ac76:	f53f ae8d 	bmi.w	801a994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ac7a:	3a01      	subs	r2, #1
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	f6bf ae89 	bge.w	801a994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ac82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac84:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ac88:	f103 0e03 	add.w	lr, r3, #3
 801ac8c:	f1bb 0f00 	cmp.w	fp, #0
 801ac90:	dc6d      	bgt.n	801ad6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 801ac92:	9b07      	ldr	r3, [sp, #28]
 801ac94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ac98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ac9e:	4423      	add	r3, r4
 801aca0:	930a      	str	r3, [sp, #40]	; 0x28
 801aca2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	f340 81a0 	ble.w	801afea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801acaa:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801acae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801acb0:	ee79 9aab 	vadd.f32	s19, s19, s23
 801acb4:	eef0 6a48 	vmov.f32	s13, s16
 801acb8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801acbc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801acc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801acc4:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 801acc8:	eef0 6a68 	vmov.f32	s13, s17
 801accc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801acd0:	ee16 5a90 	vmov	r5, s13
 801acd4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801acd8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801acdc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ace0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ace4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ace8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801acec:	ee18 2a10 	vmov	r2, s16
 801acf0:	eeb0 8a47 	vmov.f32	s16, s14
 801acf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801acf8:	ee18 2a90 	vmov	r2, s17
 801acfc:	9331      	str	r3, [sp, #196]	; 0xc4
 801acfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad00:	eef0 8a67 	vmov.f32	s17, s15
 801ad04:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad08:	9332      	str	r3, [sp, #200]	; 0xc8
 801ad0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad0e:	3b01      	subs	r3, #1
 801ad10:	9316      	str	r3, [sp, #88]	; 0x58
 801ad12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad14:	bf08      	it	eq
 801ad16:	4613      	moveq	r3, r2
 801ad18:	9307      	str	r3, [sp, #28]
 801ad1a:	e610      	b.n	801a93e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	f43f ae82 	beq.w	801aa26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ad22:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ad26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ad2a:	9108      	str	r1, [sp, #32]
 801ad2c:	0e09      	lsrs	r1, r1, #24
 801ad2e:	9110      	str	r1, [sp, #64]	; 0x40
 801ad30:	e679      	b.n	801aa26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ad32:	f113 0801 	adds.w	r8, r3, #1
 801ad36:	f53f af74 	bmi.w	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ad3a:	4541      	cmp	r1, r8
 801ad3c:	f6ff af71 	blt.w	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ad40:	f11c 0801 	adds.w	r8, ip, #1
 801ad44:	f53f af6d 	bmi.w	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ad48:	45c6      	cmp	lr, r8
 801ad4a:	f6ff af6a 	blt.w	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ad4e:	b209      	sxth	r1, r1
 801ad50:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ad54:	fa0f f38e 	sxth.w	r3, lr
 801ad58:	9100      	str	r1, [sp, #0]
 801ad5a:	4639      	mov	r1, r7
 801ad5c:	9301      	str	r3, [sp, #4]
 801ad5e:	4633      	mov	r3, r6
 801ad60:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ad64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad66:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ad68:	f7ff fc70 	bl	801a64c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801ad6c:	e759      	b.n	801ac22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ad6e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ad70:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ad74:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801ad76:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ad7a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801ad7c:	1427      	asrs	r7, r4, #16
 801ad7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ad80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ad84:	142b      	asrs	r3, r5, #16
 801ad86:	fb01 7303 	mla	r3, r1, r3, r7
 801ad8a:	18e7      	adds	r7, r4, r3
 801ad8c:	5ce3      	ldrb	r3, [r4, r3]
 801ad8e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ad92:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ad96:	2a00      	cmp	r2, #0
 801ad98:	f000 811d 	beq.w	801afd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801ad9c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ada0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ada4:	940d      	str	r4, [sp, #52]	; 0x34
 801ada6:	0e24      	lsrs	r4, r4, #24
 801ada8:	9414      	str	r4, [sp, #80]	; 0x50
 801adaa:	b170      	cbz	r0, 801adca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801adac:	eb07 0801 	add.w	r8, r7, r1
 801adb0:	5c79      	ldrb	r1, [r7, r1]
 801adb2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801adb6:	9109      	str	r1, [sp, #36]	; 0x24
 801adb8:	0e09      	lsrs	r1, r1, #24
 801adba:	9111      	str	r1, [sp, #68]	; 0x44
 801adbc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801adc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801adc4:	910e      	str	r1, [sp, #56]	; 0x38
 801adc6:	0e09      	lsrs	r1, r1, #24
 801adc8:	9115      	str	r1, [sp, #84]	; 0x54
 801adca:	b292      	uxth	r2, r2
 801adcc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801adce:	b280      	uxth	r0, r0
 801add0:	fb02 f900 	mul.w	r9, r2, r0
 801add4:	0112      	lsls	r2, r2, #4
 801add6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801adda:	eba2 0809 	sub.w	r8, r2, r9
 801adde:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ade2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ade4:	b280      	uxth	r0, r0
 801ade6:	fa1f f888 	uxth.w	r8, r8
 801adea:	1a09      	subs	r1, r1, r0
 801adec:	fb08 f202 	mul.w	r2, r8, r2
 801adf0:	b289      	uxth	r1, r1
 801adf2:	fb01 220c 	mla	r2, r1, ip, r2
 801adf6:	fb00 2204 	mla	r2, r0, r4, r2
 801adfa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801adfc:	fb09 2204 	mla	r2, r9, r4, r2
 801ae00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ae04:	2a00      	cmp	r2, #0
 801ae06:	f000 80db 	beq.w	801afc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801ae0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ae0e:	d019      	beq.n	801ae44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 801ae10:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ae14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ae18:	fb0c fa0a 	mul.w	sl, ip, sl
 801ae1c:	fb0c fc03 	mul.w	ip, ip, r3
 801ae20:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ae24:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ae28:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ae2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ae30:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ae34:	4453      	add	r3, sl
 801ae36:	0a3f      	lsrs	r7, r7, #8
 801ae38:	0a1b      	lsrs	r3, r3, #8
 801ae3a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ae3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ae42:	433b      	orrs	r3, r7
 801ae44:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ae46:	2cff      	cmp	r4, #255	; 0xff
 801ae48:	d020      	beq.n	801ae8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 801ae4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ae4c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ae50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ae52:	4367      	muls	r7, r4
 801ae54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ae56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ae5a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ae5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ae60:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ae64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ae68:	fb04 fa0a 	mul.w	sl, r4, sl
 801ae6c:	44bc      	add	ip, r7
 801ae6e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ae72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ae7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ae7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ae82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ae86:	ea4c 040a 	orr.w	r4, ip, sl
 801ae8a:	940d      	str	r4, [sp, #52]	; 0x34
 801ae8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae8e:	2cff      	cmp	r4, #255	; 0xff
 801ae90:	d020      	beq.n	801aed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801ae92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ae94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ae98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae9a:	4367      	muls	r7, r4
 801ae9c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ae9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aea2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aea6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aea8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aeac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aeb0:	fb04 fa0a 	mul.w	sl, r4, sl
 801aeb4:	44bc      	add	ip, r7
 801aeb6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801aeba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aebe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aec2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aec6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aeca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aece:	ea4c 040a 	orr.w	r4, ip, sl
 801aed2:	9409      	str	r4, [sp, #36]	; 0x24
 801aed4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aed6:	2cff      	cmp	r4, #255	; 0xff
 801aed8:	d020      	beq.n	801af1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 801aeda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aedc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801aee0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aee2:	4367      	muls	r7, r4
 801aee4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aee6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aeea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aeee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aef0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aef4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aef8:	fb04 fa0a 	mul.w	sl, r4, sl
 801aefc:	44bc      	add	ip, r7
 801aefe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801af02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801af0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af16:	ea4c 040a 	orr.w	r4, ip, sl
 801af1a:	940e      	str	r4, [sp, #56]	; 0x38
 801af1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af1e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801af22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801af26:	43d2      	mvns	r2, r2
 801af28:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801af2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801af2e:	b2d2      	uxtb	r2, r2
 801af30:	fb08 f707 	mul.w	r7, r8, r7
 801af34:	fb01 770c 	mla	r7, r1, ip, r7
 801af38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801af3e:	fb00 770c 	mla	r7, r0, ip, r7
 801af42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801af48:	fb09 770c 	mla	r7, r9, ip, r7
 801af4c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801af50:	fb08 f80c 	mul.w	r8, r8, ip
 801af54:	0a3f      	lsrs	r7, r7, #8
 801af56:	fb01 8303 	mla	r3, r1, r3, r8
 801af5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af5c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af60:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801af64:	990e      	ldr	r1, [sp, #56]	; 0x38
 801af66:	fb00 330a 	mla	r3, r0, sl, r3
 801af6a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801af6e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801af72:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801af76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af7a:	fb03 f102 	mul.w	r1, r3, r2
 801af7e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801af82:	1c4b      	adds	r3, r1, #1
 801af84:	ea47 070c 	orr.w	r7, r7, ip
 801af88:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801af8c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801af90:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801af94:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801af98:	4353      	muls	r3, r2
 801af9a:	1c59      	adds	r1, r3, #1
 801af9c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801afa0:	0a3b      	lsrs	r3, r7, #8
 801afa2:	0c3f      	lsrs	r7, r7, #16
 801afa4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801afa8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801afac:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801afb0:	435a      	muls	r2, r3
 801afb2:	1c53      	adds	r3, r2, #1
 801afb4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801afb8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801afbc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801afc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801afc2:	f10e 0e03 	add.w	lr, lr, #3
 801afc6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801afc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801afcc:	441a      	add	r2, r3
 801afce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801afd0:	922f      	str	r2, [sp, #188]	; 0xbc
 801afd2:	441d      	add	r5, r3
 801afd4:	e65a      	b.n	801ac8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801afd6:	2800      	cmp	r0, #0
 801afd8:	f43f aef7 	beq.w	801adca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801afdc:	5c79      	ldrb	r1, [r7, r1]
 801afde:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801afe2:	9109      	str	r1, [sp, #36]	; 0x24
 801afe4:	0e09      	lsrs	r1, r1, #24
 801afe6:	9111      	str	r1, [sp, #68]	; 0x44
 801afe8:	e6ef      	b.n	801adca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801afea:	b01b      	add	sp, #108	; 0x6c
 801afec:	ecbd 8b0a 	vpop	{d8-d12}
 801aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aff8:	b08d      	sub	sp, #52	; 0x34
 801affa:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801affe:	9103      	str	r1, [sp, #12]
 801b000:	fb07 5803 	mla	r8, r7, r3, r5
 801b004:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801b008:	9803      	ldr	r0, [sp, #12]
 801b00a:	2f00      	cmp	r7, #0
 801b00c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b00e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b012:	9903      	ldr	r1, [sp, #12]
 801b014:	9c03      	ldr	r4, [sp, #12]
 801b016:	eb02 0608 	add.w	r6, r2, r8
 801b01a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b01e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801b022:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801b026:	7809      	ldrb	r1, [r1, #0]
 801b028:	7840      	ldrb	r0, [r0, #1]
 801b02a:	78a4      	ldrb	r4, [r4, #2]
 801b02c:	db51      	blt.n	801b0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801b02e:	45be      	cmp	lr, r7
 801b030:	dd4f      	ble.n	801b0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801b032:	2d00      	cmp	r5, #0
 801b034:	db49      	blt.n	801b0ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801b036:	42ab      	cmp	r3, r5
 801b038:	dd47      	ble.n	801b0ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801b03a:	f812 2008 	ldrb.w	r2, [r2, r8]
 801b03e:	9204      	str	r2, [sp, #16]
 801b040:	7872      	ldrb	r2, [r6, #1]
 801b042:	9205      	str	r2, [sp, #20]
 801b044:	78b2      	ldrb	r2, [r6, #2]
 801b046:	9206      	str	r2, [sp, #24]
 801b048:	1c6a      	adds	r2, r5, #1
 801b04a:	d449      	bmi.n	801b0e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801b04c:	4293      	cmp	r3, r2
 801b04e:	dd47      	ble.n	801b0e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801b050:	f1bc 0f00 	cmp.w	ip, #0
 801b054:	d044      	beq.n	801b0e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801b056:	7972      	ldrb	r2, [r6, #5]
 801b058:	f896 b003 	ldrb.w	fp, [r6, #3]
 801b05c:	f896 a004 	ldrb.w	sl, [r6, #4]
 801b060:	9201      	str	r2, [sp, #4]
 801b062:	3701      	adds	r7, #1
 801b064:	d444      	bmi.n	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801b066:	45be      	cmp	lr, r7
 801b068:	dd42      	ble.n	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801b06a:	f1b9 0f00 	cmp.w	r9, #0
 801b06e:	f000 80c1 	beq.w	801b1f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801b072:	2d00      	cmp	r5, #0
 801b074:	db38      	blt.n	801b0e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801b076:	42ab      	cmp	r3, r5
 801b078:	dd36      	ble.n	801b0e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801b07a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b07e:	f816 8002 	ldrb.w	r8, [r6, r2]
 801b082:	2203      	movs	r2, #3
 801b084:	fb03 6702 	mla	r7, r3, r2, r6
 801b088:	fb03 6202 	mla	r2, r3, r2, r6
 801b08c:	787f      	ldrb	r7, [r7, #1]
 801b08e:	f892 e002 	ldrb.w	lr, [r2, #2]
 801b092:	9702      	str	r7, [sp, #8]
 801b094:	3501      	adds	r5, #1
 801b096:	d432      	bmi.n	801b0fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801b098:	42ab      	cmp	r3, r5
 801b09a:	dd30      	ble.n	801b0fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801b09c:	f1bc 0f00 	cmp.w	ip, #0
 801b0a0:	d031      	beq.n	801b106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801b0a2:	2703      	movs	r7, #3
 801b0a4:	fb13 7207 	smlabb	r2, r3, r7, r7
 801b0a8:	5cb5      	ldrb	r5, [r6, r2]
 801b0aa:	fb03 6207 	mla	r2, r3, r7, r6
 801b0ae:	fb03 6307 	mla	r3, r3, r7, r6
 801b0b2:	7912      	ldrb	r2, [r2, #4]
 801b0b4:	795e      	ldrb	r6, [r3, #5]
 801b0b6:	f1bc 0f0f 	cmp.w	ip, #15
 801b0ba:	d927      	bls.n	801b10c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801b0bc:	4b53      	ldr	r3, [pc, #332]	; (801b20c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801b0be:	f240 1157 	movw	r1, #343	; 0x157
 801b0c2:	4a53      	ldr	r2, [pc, #332]	; (801b210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801b0c4:	4853      	ldr	r0, [pc, #332]	; (801b214 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801b0c6:	f004 fb7f 	bl	801f7c8 <__assert_func>
 801b0ca:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801b0ce:	9104      	str	r1, [sp, #16]
 801b0d0:	e7ba      	b.n	801b048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801b0d2:	9401      	str	r4, [sp, #4]
 801b0d4:	4682      	mov	sl, r0
 801b0d6:	468b      	mov	fp, r1
 801b0d8:	9104      	str	r1, [sp, #16]
 801b0da:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801b0de:	e7c0      	b.n	801b062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801b0e0:	9401      	str	r4, [sp, #4]
 801b0e2:	4682      	mov	sl, r0
 801b0e4:	468b      	mov	fp, r1
 801b0e6:	e7bc      	b.n	801b062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801b0e8:	46a6      	mov	lr, r4
 801b0ea:	9002      	str	r0, [sp, #8]
 801b0ec:	4688      	mov	r8, r1
 801b0ee:	e7d1      	b.n	801b094 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801b0f0:	4626      	mov	r6, r4
 801b0f2:	4602      	mov	r2, r0
 801b0f4:	460d      	mov	r5, r1
 801b0f6:	46a6      	mov	lr, r4
 801b0f8:	9002      	str	r0, [sp, #8]
 801b0fa:	4688      	mov	r8, r1
 801b0fc:	e7db      	b.n	801b0b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801b0fe:	4626      	mov	r6, r4
 801b100:	4602      	mov	r2, r0
 801b102:	460d      	mov	r5, r1
 801b104:	e7d7      	b.n	801b0b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801b106:	4626      	mov	r6, r4
 801b108:	4602      	mov	r2, r0
 801b10a:	460d      	mov	r5, r1
 801b10c:	f1b9 0f0f 	cmp.w	r9, #15
 801b110:	d8d4      	bhi.n	801b0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801b112:	fa1f f38c 	uxth.w	r3, ip
 801b116:	fa1f fc89 	uxth.w	ip, r9
 801b11a:	fb03 f70c 	mul.w	r7, r3, ip
 801b11e:	011b      	lsls	r3, r3, #4
 801b120:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801b124:	9707      	str	r7, [sp, #28]
 801b126:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b12a:	fa1f fc8c 	uxth.w	ip, ip
 801b12e:	eba7 070c 	sub.w	r7, r7, ip
 801b132:	b2bf      	uxth	r7, r7
 801b134:	9709      	str	r7, [sp, #36]	; 0x24
 801b136:	9f07      	ldr	r7, [sp, #28]
 801b138:	1bdb      	subs	r3, r3, r7
 801b13a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801b13e:	b29b      	uxth	r3, r3
 801b140:	9708      	str	r7, [sp, #32]
 801b142:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b144:	930a      	str	r3, [sp, #40]	; 0x28
 801b146:	ea6f 0907 	mvn.w	r9, r7
 801b14a:	fb03 fb0b 	mul.w	fp, r3, fp
 801b14e:	9f04      	ldr	r7, [sp, #16]
 801b150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b152:	fa5f f989 	uxtb.w	r9, r9
 801b156:	fb03 bb07 	mla	fp, r3, r7, fp
 801b15a:	9f07      	ldr	r7, [sp, #28]
 801b15c:	fb11 f109 	smulbb	r1, r1, r9
 801b160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b162:	fb0c b808 	mla	r8, ip, r8, fp
 801b166:	fb10 f009 	smulbb	r0, r0, r9
 801b16a:	fb14 f409 	smulbb	r4, r4, r9
 801b16e:	fb07 8805 	mla	r8, r7, r5, r8
 801b172:	9d08      	ldr	r5, [sp, #32]
 801b174:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b176:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801b17a:	fb08 1805 	mla	r8, r8, r5, r1
 801b17e:	9d05      	ldr	r5, [sp, #20]
 801b180:	fa1f f888 	uxth.w	r8, r8
 801b184:	f108 0101 	add.w	r1, r8, #1
 801b188:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801b18c:	9903      	ldr	r1, [sp, #12]
 801b18e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b192:	f881 8000 	strb.w	r8, [r1]
 801b196:	fb03 f10a 	mul.w	r1, r3, sl
 801b19a:	fb07 1105 	mla	r1, r7, r5, r1
 801b19e:	9d02      	ldr	r5, [sp, #8]
 801b1a0:	fb0c 1105 	mla	r1, ip, r5, r1
 801b1a4:	9d07      	ldr	r5, [sp, #28]
 801b1a6:	fb05 1102 	mla	r1, r5, r2, r1
 801b1aa:	9a08      	ldr	r2, [sp, #32]
 801b1ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b1b0:	fb01 0102 	mla	r1, r1, r2, r0
 801b1b4:	9a03      	ldr	r2, [sp, #12]
 801b1b6:	b289      	uxth	r1, r1
 801b1b8:	1c48      	adds	r0, r1, #1
 801b1ba:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b1be:	1209      	asrs	r1, r1, #8
 801b1c0:	7051      	strb	r1, [r2, #1]
 801b1c2:	9a01      	ldr	r2, [sp, #4]
 801b1c4:	4353      	muls	r3, r2
 801b1c6:	9a06      	ldr	r2, [sp, #24]
 801b1c8:	fb07 3702 	mla	r7, r7, r2, r3
 801b1cc:	9b08      	ldr	r3, [sp, #32]
 801b1ce:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801b1d2:	fb05 c606 	mla	r6, r5, r6, ip
 801b1d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b1da:	fb06 4603 	mla	r6, r6, r3, r4
 801b1de:	9b03      	ldr	r3, [sp, #12]
 801b1e0:	b2b6      	uxth	r6, r6
 801b1e2:	f106 0e01 	add.w	lr, r6, #1
 801b1e6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801b1ea:	1236      	asrs	r6, r6, #8
 801b1ec:	709e      	strb	r6, [r3, #2]
 801b1ee:	b00d      	add	sp, #52	; 0x34
 801b1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1f4:	f1bc 0f0f 	cmp.w	ip, #15
 801b1f8:	f63f af60 	bhi.w	801b0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801b1fc:	4626      	mov	r6, r4
 801b1fe:	4602      	mov	r2, r0
 801b200:	460d      	mov	r5, r1
 801b202:	46a6      	mov	lr, r4
 801b204:	9002      	str	r0, [sp, #8]
 801b206:	4688      	mov	r8, r1
 801b208:	e783      	b.n	801b112 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801b20a:	bf00      	nop
 801b20c:	0802453f 	.word	0x0802453f
 801b210:	080249f6 	.word	0x080249f6
 801b214:	080245c7 	.word	0x080245c7

0801b218 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b21c:	ed2d 8b08 	vpush	{d8-d11}
 801b220:	b09f      	sub	sp, #124	; 0x7c
 801b222:	eeb0 aa40 	vmov.f32	s20, s0
 801b226:	eef0 9a60 	vmov.f32	s19, s1
 801b22a:	920e      	str	r2, [sp, #56]	; 0x38
 801b22c:	eeb0 9a41 	vmov.f32	s18, s2
 801b230:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801b232:	eeb0 8a62 	vmov.f32	s16, s5
 801b236:	9307      	str	r3, [sp, #28]
 801b238:	eef0 8a43 	vmov.f32	s17, s6
 801b23c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801b240:	eef0 ba44 	vmov.f32	s23, s8
 801b244:	901d      	str	r0, [sp, #116]	; 0x74
 801b246:	eeb0 ba64 	vmov.f32	s22, s9
 801b24a:	930c      	str	r3, [sp, #48]	; 0x30
 801b24c:	eef0 aa45 	vmov.f32	s21, s10
 801b250:	6850      	ldr	r0, [r2, #4]
 801b252:	910b      	str	r1, [sp, #44]	; 0x2c
 801b254:	6812      	ldr	r2, [r2, #0]
 801b256:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801b25a:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801b25e:	fb00 1303 	mla	r3, r0, r3, r1
 801b262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b266:	18d3      	adds	r3, r2, r3
 801b268:	9308      	str	r3, [sp, #32]
 801b26a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	930a      	str	r3, [sp, #40]	; 0x28
 801b270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b272:	43db      	mvns	r3, r3
 801b274:	b2db      	uxtb	r3, r3
 801b276:	9309      	str	r3, [sp, #36]	; 0x24
 801b278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	dc03      	bgt.n	801b286 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b280:	2b00      	cmp	r3, #0
 801b282:	f340 81f5 	ble.w	801b670 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b286:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b288:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b28c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b290:	1e48      	subs	r0, r1, #1
 801b292:	1e54      	subs	r4, r2, #1
 801b294:	9b07      	ldr	r3, [sp, #28]
 801b296:	2b00      	cmp	r3, #0
 801b298:	f340 80d5 	ble.w	801b446 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b29c:	ea5f 452a 	movs.w	r5, sl, asr #16
 801b2a0:	ea4f 4328 	mov.w	r3, r8, asr #16
 801b2a4:	d406      	bmi.n	801b2b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b2a6:	4285      	cmp	r5, r0
 801b2a8:	da04      	bge.n	801b2b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	db02      	blt.n	801b2b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b2ae:	42a3      	cmp	r3, r4
 801b2b0:	f2c0 80ca 	blt.w	801b448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b2b4:	3501      	adds	r5, #1
 801b2b6:	f100 80bb 	bmi.w	801b430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b2ba:	42a9      	cmp	r1, r5
 801b2bc:	f2c0 80b8 	blt.w	801b430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b2c0:	3301      	adds	r3, #1
 801b2c2:	f100 80b5 	bmi.w	801b430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	f2c0 80b2 	blt.w	801b430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b2cc:	9b07      	ldr	r3, [sp, #28]
 801b2ce:	9d08      	ldr	r5, [sp, #32]
 801b2d0:	930d      	str	r3, [sp, #52]	; 0x34
 801b2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	f340 80d6 	ble.w	801b486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801b2da:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801b2dc:	ea4f 4428 	mov.w	r4, r8, asr #16
 801b2e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b2e2:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801b2e6:	68c6      	ldr	r6, [r0, #12]
 801b2e8:	ea5f 402a 	movs.w	r0, sl, asr #16
 801b2ec:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801b2f0:	689b      	ldr	r3, [r3, #8]
 801b2f2:	f100 810f 	bmi.w	801b514 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b2f6:	1e5f      	subs	r7, r3, #1
 801b2f8:	42b8      	cmp	r0, r7
 801b2fa:	f280 810b 	bge.w	801b514 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b2fe:	2c00      	cmp	r4, #0
 801b300:	f2c0 8108 	blt.w	801b514 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b304:	1e77      	subs	r7, r6, #1
 801b306:	42bc      	cmp	r4, r7
 801b308:	f280 8104 	bge.w	801b514 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b30c:	b21b      	sxth	r3, r3
 801b30e:	fb04 0003 	mla	r0, r4, r3, r0
 801b312:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b318:	1826      	adds	r6, r4, r0
 801b31a:	5c24      	ldrb	r4, [r4, r0]
 801b31c:	78b7      	ldrb	r7, [r6, #2]
 801b31e:	7870      	ldrb	r0, [r6, #1]
 801b320:	970f      	str	r7, [sp, #60]	; 0x3c
 801b322:	7977      	ldrb	r7, [r6, #5]
 801b324:	f896 e003 	ldrb.w	lr, [r6, #3]
 801b328:	f896 c004 	ldrb.w	ip, [r6, #4]
 801b32c:	9710      	str	r7, [sp, #64]	; 0x40
 801b32e:	b1c9      	cbz	r1, 801b364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b330:	f04f 0b03 	mov.w	fp, #3
 801b334:	f06f 0904 	mvn.w	r9, #4
 801b338:	3605      	adds	r6, #5
 801b33a:	fb13 930b 	smlabb	r3, r3, fp, r9
 801b33e:	eb06 0b03 	add.w	fp, r6, r3
 801b342:	5cf3      	ldrb	r3, [r6, r3]
 801b344:	9311      	str	r3, [sp, #68]	; 0x44
 801b346:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b34a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b34c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b350:	9315      	str	r3, [sp, #84]	; 0x54
 801b352:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801b356:	9312      	str	r3, [sp, #72]	; 0x48
 801b358:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801b35c:	9314      	str	r3, [sp, #80]	; 0x50
 801b35e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801b362:	9316      	str	r3, [sp, #88]	; 0x58
 801b364:	b292      	uxth	r2, r2
 801b366:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b368:	b289      	uxth	r1, r1
 801b36a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b36e:	fb02 f601 	mul.w	r6, r2, r1
 801b372:	0112      	lsls	r2, r2, #4
 801b374:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801b378:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801b37c:	1b92      	subs	r2, r2, r6
 801b37e:	b289      	uxth	r1, r1
 801b380:	b292      	uxth	r2, r2
 801b382:	eba9 0901 	sub.w	r9, r9, r1
 801b386:	fb02 fe0e 	mul.w	lr, r2, lr
 801b38a:	fa1f f989 	uxth.w	r9, r9
 801b38e:	fb02 fc0c 	mul.w	ip, r2, ip
 801b392:	fb09 e404 	mla	r4, r9, r4, lr
 801b396:	f895 e000 	ldrb.w	lr, [r5]
 801b39a:	fb09 c000 	mla	r0, r9, r0, ip
 801b39e:	fb01 4407 	mla	r4, r1, r7, r4
 801b3a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b3a4:	fb06 4407 	mla	r4, r6, r7, r4
 801b3a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b3aa:	fb1e fe07 	smulbb	lr, lr, r7
 801b3ae:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b3b2:	fb04 e403 	mla	r4, r4, r3, lr
 801b3b6:	b2a4      	uxth	r4, r4
 801b3b8:	f104 0e01 	add.w	lr, r4, #1
 801b3bc:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801b3c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b3c2:	fb01 0004 	mla	r0, r1, r4, r0
 801b3c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3c8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b3cc:	fb06 0004 	mla	r0, r6, r4, r0
 801b3d0:	786c      	ldrb	r4, [r5, #1]
 801b3d2:	f885 e000 	strb.w	lr, [r5]
 801b3d6:	fb14 f407 	smulbb	r4, r4, r7
 801b3da:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b3de:	fb00 4003 	mla	r0, r0, r3, r4
 801b3e2:	b280      	uxth	r0, r0
 801b3e4:	1c44      	adds	r4, r0, #1
 801b3e6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b3ea:	1200      	asrs	r0, r0, #8
 801b3ec:	7068      	strb	r0, [r5, #1]
 801b3ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b3f0:	4342      	muls	r2, r0
 801b3f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b3f4:	fb09 2200 	mla	r2, r9, r0, r2
 801b3f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b3fa:	fb01 2100 	mla	r1, r1, r0, r2
 801b3fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b400:	fb06 1602 	mla	r6, r6, r2, r1
 801b404:	78a9      	ldrb	r1, [r5, #2]
 801b406:	fb11 f107 	smulbb	r1, r1, r7
 801b40a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b40e:	fb06 1303 	mla	r3, r6, r3, r1
 801b412:	b29b      	uxth	r3, r3
 801b414:	1c5e      	adds	r6, r3, #1
 801b416:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b41a:	121b      	asrs	r3, r3, #8
 801b41c:	70ab      	strb	r3, [r5, #2]
 801b41e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b420:	3503      	adds	r5, #3
 801b422:	449a      	add	sl, r3
 801b424:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b426:	4498      	add	r8, r3
 801b428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b42a:	3b01      	subs	r3, #1
 801b42c:	930d      	str	r3, [sp, #52]	; 0x34
 801b42e:	e750      	b.n	801b2d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b430:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b432:	449a      	add	sl, r3
 801b434:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b436:	4498      	add	r8, r3
 801b438:	9b07      	ldr	r3, [sp, #28]
 801b43a:	3b01      	subs	r3, #1
 801b43c:	9307      	str	r3, [sp, #28]
 801b43e:	9b08      	ldr	r3, [sp, #32]
 801b440:	3303      	adds	r3, #3
 801b442:	9308      	str	r3, [sp, #32]
 801b444:	e726      	b.n	801b294 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b446:	d026      	beq.n	801b496 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b448:	9b07      	ldr	r3, [sp, #28]
 801b44a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801b44c:	3b01      	subs	r3, #1
 801b44e:	fb00 a003 	mla	r0, r0, r3, sl
 801b452:	1400      	asrs	r0, r0, #16
 801b454:	f53f af3a 	bmi.w	801b2cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b458:	3901      	subs	r1, #1
 801b45a:	4288      	cmp	r0, r1
 801b45c:	f6bf af36 	bge.w	801b2cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b460:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801b462:	fb01 8303 	mla	r3, r1, r3, r8
 801b466:	141b      	asrs	r3, r3, #16
 801b468:	f53f af30 	bmi.w	801b2cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b46c:	3a01      	subs	r2, #1
 801b46e:	4293      	cmp	r3, r2
 801b470:	f6bf af2c 	bge.w	801b2cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b474:	9b08      	ldr	r3, [sp, #32]
 801b476:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b47a:	1cdd      	adds	r5, r3, #3
 801b47c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b480:	f1bc 0f00 	cmp.w	ip, #0
 801b484:	dc5f      	bgt.n	801b546 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801b486:	9b07      	ldr	r3, [sp, #28]
 801b488:	9a08      	ldr	r2, [sp, #32]
 801b48a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b48e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b492:	441a      	add	r2, r3
 801b494:	9208      	str	r2, [sp, #32]
 801b496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b498:	2b00      	cmp	r3, #0
 801b49a:	f340 80e9 	ble.w	801b670 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b49e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b4a4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b4a8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b4ac:	eef0 6a48 	vmov.f32	s13, s16
 801b4b0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b4b4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b4b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4bc:	ee16 aa90 	vmov	sl, s13
 801b4c0:	eef0 6a68 	vmov.f32	s13, s17
 801b4c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4c8:	ee16 8a90 	vmov	r8, s13
 801b4cc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b4d0:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b4d4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b4d8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b4dc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b4e0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b4e4:	ee18 2a10 	vmov	r2, s16
 801b4e8:	eeb0 8a47 	vmov.f32	s16, s14
 801b4ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4f0:	ee18 2a90 	vmov	r2, s17
 801b4f4:	9333      	str	r3, [sp, #204]	; 0xcc
 801b4f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b4f8:	eef0 8a67 	vmov.f32	s17, s15
 801b4fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b500:	9334      	str	r3, [sp, #208]	; 0xd0
 801b502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b506:	3b01      	subs	r3, #1
 801b508:	930b      	str	r3, [sp, #44]	; 0x2c
 801b50a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b50c:	bf08      	it	eq
 801b50e:	4613      	moveq	r3, r2
 801b510:	9307      	str	r3, [sp, #28]
 801b512:	e6b1      	b.n	801b278 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b514:	1c47      	adds	r7, r0, #1
 801b516:	d482      	bmi.n	801b41e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b518:	42bb      	cmp	r3, r7
 801b51a:	db80      	blt.n	801b41e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b51c:	1c67      	adds	r7, r4, #1
 801b51e:	f53f af7e 	bmi.w	801b41e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b522:	42be      	cmp	r6, r7
 801b524:	f6ff af7b 	blt.w	801b41e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b528:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b52a:	b236      	sxth	r6, r6
 801b52c:	9001      	str	r0, [sp, #4]
 801b52e:	b21b      	sxth	r3, r3
 801b530:	9600      	str	r6, [sp, #0]
 801b532:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b534:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b538:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b53c:	4629      	mov	r1, r5
 801b53e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b540:	f7ff fd58 	bl	801aff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b544:	e76b      	b.n	801b41e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b546:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801b548:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b54c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b550:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b554:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b558:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b55c:	fb07 0101 	mla	r1, r7, r1, r0
 801b560:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b562:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b566:	1844      	adds	r4, r0, r1
 801b568:	5c40      	ldrb	r0, [r0, r1]
 801b56a:	78a6      	ldrb	r6, [r4, #2]
 801b56c:	7861      	ldrb	r1, [r4, #1]
 801b56e:	960f      	str	r6, [sp, #60]	; 0x3c
 801b570:	78e6      	ldrb	r6, [r4, #3]
 801b572:	910d      	str	r1, [sp, #52]	; 0x34
 801b574:	9610      	str	r6, [sp, #64]	; 0x40
 801b576:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b57a:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b57e:	b192      	cbz	r2, 801b5a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801b580:	f06f 0604 	mvn.w	r6, #4
 801b584:	2103      	movs	r1, #3
 801b586:	3405      	adds	r4, #5
 801b588:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b58c:	19e6      	adds	r6, r4, r7
 801b58e:	5de4      	ldrb	r4, [r4, r7]
 801b590:	9417      	str	r4, [sp, #92]	; 0x5c
 801b592:	7874      	ldrb	r4, [r6, #1]
 801b594:	9419      	str	r4, [sp, #100]	; 0x64
 801b596:	78b4      	ldrb	r4, [r6, #2]
 801b598:	941b      	str	r4, [sp, #108]	; 0x6c
 801b59a:	78f4      	ldrb	r4, [r6, #3]
 801b59c:	9418      	str	r4, [sp, #96]	; 0x60
 801b59e:	7934      	ldrb	r4, [r6, #4]
 801b5a0:	941a      	str	r4, [sp, #104]	; 0x68
 801b5a2:	7974      	ldrb	r4, [r6, #5]
 801b5a4:	941c      	str	r4, [sp, #112]	; 0x70
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b5aa:	b292      	uxth	r2, r2
 801b5ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b5ae:	3503      	adds	r5, #3
 801b5b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b5b4:	fb03 f402 	mul.w	r4, r3, r2
 801b5b8:	011b      	lsls	r3, r3, #4
 801b5ba:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b5be:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b5c2:	1b1b      	subs	r3, r3, r4
 801b5c4:	b292      	uxth	r2, r2
 801b5c6:	b29b      	uxth	r3, r3
 801b5c8:	1ab6      	subs	r6, r6, r2
 801b5ca:	435f      	muls	r7, r3
 801b5cc:	b2b6      	uxth	r6, r6
 801b5ce:	fb03 f909 	mul.w	r9, r3, r9
 801b5d2:	fb03 fb0b 	mul.w	fp, r3, fp
 801b5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5d8:	fb06 7000 	mla	r0, r6, r0, r7
 801b5dc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b5de:	fb06 bb03 	mla	fp, r6, r3, fp
 801b5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b5e4:	fb02 0007 	mla	r0, r2, r7, r0
 801b5e8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b5ea:	fb02 bb03 	mla	fp, r2, r3, fp
 801b5ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b5f0:	fb04 0007 	mla	r0, r4, r7, r0
 801b5f4:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b5f8:	fb17 f701 	smulbb	r7, r7, r1
 801b5fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b600:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b602:	fb00 700e 	mla	r0, r0, lr, r7
 801b606:	fb06 9101 	mla	r1, r6, r1, r9
 801b60a:	b280      	uxth	r0, r0
 801b60c:	1c47      	adds	r7, r0, #1
 801b60e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b612:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b614:	1200      	asrs	r0, r0, #8
 801b616:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b61a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b61c:	fb02 1100 	mla	r1, r2, r0, r1
 801b620:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b622:	fb04 1100 	mla	r1, r4, r0, r1
 801b626:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b62a:	fb04 b403 	mla	r4, r4, r3, fp
 801b62e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b632:	fb10 f007 	smulbb	r0, r0, r7
 801b636:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b63a:	fb13 f307 	smulbb	r3, r3, r7
 801b63e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b642:	fb01 010e 	mla	r1, r1, lr, r0
 801b646:	fb04 340e 	mla	r4, r4, lr, r3
 801b64a:	b289      	uxth	r1, r1
 801b64c:	b2a4      	uxth	r4, r4
 801b64e:	1c48      	adds	r0, r1, #1
 801b650:	1c63      	adds	r3, r4, #1
 801b652:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b656:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b65a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b65c:	1209      	asrs	r1, r1, #8
 801b65e:	1224      	asrs	r4, r4, #8
 801b660:	449a      	add	sl, r3
 801b662:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b664:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b668:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b66c:	4498      	add	r8, r3
 801b66e:	e707      	b.n	801b480 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b670:	b01f      	add	sp, #124	; 0x7c
 801b672:	ecbd 8b08 	vpop	{d8-d11}
 801b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b680:	b085      	sub	sp, #20
 801b682:	784d      	ldrb	r5, [r1, #1]
 801b684:	788e      	ldrb	r6, [r1, #2]
 801b686:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801b68a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801b68e:	9403      	str	r4, [sp, #12]
 801b690:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801b694:	780c      	ldrb	r4, [r1, #0]
 801b696:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801b69a:	fb07 ce03 	mla	lr, r7, r3, ip
 801b69e:	2f00      	cmp	r7, #0
 801b6a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b6a4:	eb02 0b0e 	add.w	fp, r2, lr
 801b6a8:	db56      	blt.n	801b758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b6aa:	45b9      	cmp	r9, r7
 801b6ac:	dd54      	ble.n	801b758 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b6ae:	f1bc 0f00 	cmp.w	ip, #0
 801b6b2:	db4d      	blt.n	801b750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b6b4:	4563      	cmp	r3, ip
 801b6b6:	dd4b      	ble.n	801b750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b6b8:	f812 200e 	ldrb.w	r2, [r2, lr]
 801b6bc:	9200      	str	r2, [sp, #0]
 801b6be:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801b6c2:	9201      	str	r2, [sp, #4]
 801b6c4:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801b6c8:	9202      	str	r2, [sp, #8]
 801b6ca:	f11c 0201 	adds.w	r2, ip, #1
 801b6ce:	d44a      	bmi.n	801b766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	dd48      	ble.n	801b766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b6d4:	2800      	cmp	r0, #0
 801b6d6:	d046      	beq.n	801b766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b6d8:	f89b e003 	ldrb.w	lr, [fp, #3]
 801b6dc:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801b6e0:	f89b a005 	ldrb.w	sl, [fp, #5]
 801b6e4:	3701      	adds	r7, #1
 801b6e6:	d446      	bmi.n	801b776 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b6e8:	45b9      	cmp	r9, r7
 801b6ea:	dd44      	ble.n	801b776 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b6ec:	9a03      	ldr	r2, [sp, #12]
 801b6ee:	2a00      	cmp	r2, #0
 801b6f0:	d045      	beq.n	801b77e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801b6f2:	f1bc 0f00 	cmp.w	ip, #0
 801b6f6:	db3a      	blt.n	801b76e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b6f8:	4563      	cmp	r3, ip
 801b6fa:	dd38      	ble.n	801b76e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b6fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b700:	f04f 0903 	mov.w	r9, #3
 801b704:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801b708:	fb03 b209 	mla	r2, r3, r9, fp
 801b70c:	fb03 b909 	mla	r9, r3, r9, fp
 801b710:	7852      	ldrb	r2, [r2, #1]
 801b712:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b716:	f11c 0c01 	adds.w	ip, ip, #1
 801b71a:	d40d      	bmi.n	801b738 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b71c:	4563      	cmp	r3, ip
 801b71e:	dd0b      	ble.n	801b738 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b720:	b160      	cbz	r0, 801b73c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801b722:	2603      	movs	r6, #3
 801b724:	fb13 6406 	smlabb	r4, r3, r6, r6
 801b728:	fb03 b506 	mla	r5, r3, r6, fp
 801b72c:	fb03 b306 	mla	r3, r3, r6, fp
 801b730:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801b734:	792d      	ldrb	r5, [r5, #4]
 801b736:	795e      	ldrb	r6, [r3, #5]
 801b738:	280f      	cmp	r0, #15
 801b73a:	d802      	bhi.n	801b742 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b73c:	9b03      	ldr	r3, [sp, #12]
 801b73e:	2b0f      	cmp	r3, #15
 801b740:	d922      	bls.n	801b788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801b742:	4b2f      	ldr	r3, [pc, #188]	; (801b800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801b744:	f240 1157 	movw	r1, #343	; 0x157
 801b748:	4a2e      	ldr	r2, [pc, #184]	; (801b804 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801b74a:	482f      	ldr	r0, [pc, #188]	; (801b808 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801b74c:	f004 f83c 	bl	801f7c8 <__assert_func>
 801b750:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b754:	9400      	str	r4, [sp, #0]
 801b756:	e7b8      	b.n	801b6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801b758:	46b2      	mov	sl, r6
 801b75a:	46a8      	mov	r8, r5
 801b75c:	46a6      	mov	lr, r4
 801b75e:	9400      	str	r4, [sp, #0]
 801b760:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b764:	e7be      	b.n	801b6e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b766:	46b2      	mov	sl, r6
 801b768:	46a8      	mov	r8, r5
 801b76a:	46a6      	mov	lr, r4
 801b76c:	e7ba      	b.n	801b6e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b76e:	46b1      	mov	r9, r6
 801b770:	462a      	mov	r2, r5
 801b772:	4627      	mov	r7, r4
 801b774:	e7cf      	b.n	801b716 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b776:	46b1      	mov	r9, r6
 801b778:	462a      	mov	r2, r5
 801b77a:	4627      	mov	r7, r4
 801b77c:	e7dc      	b.n	801b738 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b77e:	280f      	cmp	r0, #15
 801b780:	d8df      	bhi.n	801b742 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b782:	46b1      	mov	r9, r6
 801b784:	462a      	mov	r2, r5
 801b786:	4627      	mov	r7, r4
 801b788:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801b78c:	b280      	uxth	r0, r0
 801b78e:	fb00 f30b 	mul.w	r3, r0, fp
 801b792:	0100      	lsls	r0, r0, #4
 801b794:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801b798:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801b79c:	1ac0      	subs	r0, r0, r3
 801b79e:	fa1f fb8b 	uxth.w	fp, fp
 801b7a2:	b280      	uxth	r0, r0
 801b7a4:	ebac 0c0b 	sub.w	ip, ip, fp
 801b7a8:	9003      	str	r0, [sp, #12]
 801b7aa:	fa1f fc8c 	uxth.w	ip, ip
 801b7ae:	fb00 fe0e 	mul.w	lr, r0, lr
 801b7b2:	9800      	ldr	r0, [sp, #0]
 801b7b4:	fb0c ee00 	mla	lr, ip, r0, lr
 801b7b8:	9803      	ldr	r0, [sp, #12]
 801b7ba:	fb00 f808 	mul.w	r8, r0, r8
 801b7be:	9801      	ldr	r0, [sp, #4]
 801b7c0:	fb0b ee07 	mla	lr, fp, r7, lr
 801b7c4:	fb0c 8800 	mla	r8, ip, r0, r8
 801b7c8:	fb03 ee04 	mla	lr, r3, r4, lr
 801b7cc:	fb0b 8202 	mla	r2, fp, r2, r8
 801b7d0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7d4:	fb03 2505 	mla	r5, r3, r5, r2
 801b7d8:	9a03      	ldr	r2, [sp, #12]
 801b7da:	f881 e000 	strb.w	lr, [r1]
 801b7de:	fb02 f00a 	mul.w	r0, r2, sl
 801b7e2:	9a02      	ldr	r2, [sp, #8]
 801b7e4:	122d      	asrs	r5, r5, #8
 801b7e6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b7ea:	704d      	strb	r5, [r1, #1]
 801b7ec:	fb0b c909 	mla	r9, fp, r9, ip
 801b7f0:	fb03 9606 	mla	r6, r3, r6, r9
 801b7f4:	1236      	asrs	r6, r6, #8
 801b7f6:	708e      	strb	r6, [r1, #2]
 801b7f8:	b005      	add	sp, #20
 801b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7fe:	bf00      	nop
 801b800:	0802453f 	.word	0x0802453f
 801b804:	080249f6 	.word	0x080249f6
 801b808:	080245c7 	.word	0x080245c7

0801b80c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b810:	ed2d 8b08 	vpush	{d8-d11}
 801b814:	b09b      	sub	sp, #108	; 0x6c
 801b816:	eeb0 aa40 	vmov.f32	s20, s0
 801b81a:	eef0 9a60 	vmov.f32	s19, s1
 801b81e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b820:	eeb0 9a41 	vmov.f32	s18, s2
 801b824:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801b826:	eeb0 8a62 	vmov.f32	s16, s5
 801b82a:	9019      	str	r0, [sp, #100]	; 0x64
 801b82c:	eef0 8a43 	vmov.f32	s17, s6
 801b830:	6850      	ldr	r0, [r2, #4]
 801b832:	eef0 ba44 	vmov.f32	s23, s8
 801b836:	9109      	str	r1, [sp, #36]	; 0x24
 801b838:	eeb0 ba64 	vmov.f32	s22, s9
 801b83c:	9306      	str	r3, [sp, #24]
 801b83e:	eef0 aa45 	vmov.f32	s21, s10
 801b842:	6812      	ldr	r2, [r2, #0]
 801b844:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801b848:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 801b84c:	fb00 1303 	mla	r3, r0, r3, r1
 801b850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b854:	18d3      	adds	r3, r2, r3
 801b856:	9307      	str	r3, [sp, #28]
 801b858:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	9308      	str	r3, [sp, #32]
 801b85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b860:	2b00      	cmp	r3, #0
 801b862:	dc03      	bgt.n	801b86c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b866:	2b00      	cmp	r3, #0
 801b868:	f340 81ab 	ble.w	801bbc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801b86c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b86e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b872:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b876:	1e48      	subs	r0, r1, #1
 801b878:	1e55      	subs	r5, r2, #1
 801b87a:	9b06      	ldr	r3, [sp, #24]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	f340 80b1 	ble.w	801b9e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b882:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b886:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b88a:	d406      	bmi.n	801b89a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b88c:	4286      	cmp	r6, r0
 801b88e:	da04      	bge.n	801b89a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b890:	2b00      	cmp	r3, #0
 801b892:	db02      	blt.n	801b89a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b894:	42ab      	cmp	r3, r5
 801b896:	f2c0 80a6 	blt.w	801b9e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801b89a:	3601      	adds	r6, #1
 801b89c:	f100 8097 	bmi.w	801b9ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b8a0:	42b1      	cmp	r1, r6
 801b8a2:	f2c0 8094 	blt.w	801b9ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	f100 8091 	bmi.w	801b9ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b8ac:	429a      	cmp	r2, r3
 801b8ae:	f2c0 808e 	blt.w	801b9ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b8b2:	9b06      	ldr	r3, [sp, #24]
 801b8b4:	9e07      	ldr	r6, [sp, #28]
 801b8b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	f340 80b0 	ble.w	801ba20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8c0:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801b8c2:	1425      	asrs	r5, r4, #16
 801b8c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b8c6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b8ca:	68c7      	ldr	r7, [r0, #12]
 801b8cc:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b8d0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b8d4:	689b      	ldr	r3, [r3, #8]
 801b8d6:	f100 80ea 	bmi.w	801baae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b8da:	f103 3cff 	add.w	ip, r3, #4294967295
 801b8de:	4560      	cmp	r0, ip
 801b8e0:	f280 80e5 	bge.w	801baae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b8e4:	2d00      	cmp	r5, #0
 801b8e6:	f2c0 80e2 	blt.w	801baae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b8ea:	f107 3cff 	add.w	ip, r7, #4294967295
 801b8ee:	4565      	cmp	r5, ip
 801b8f0:	f280 80dd 	bge.w	801baae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b8f4:	b21b      	sxth	r3, r3
 801b8f6:	fb05 0003 	mla	r0, r5, r3, r0
 801b8fa:	9d08      	ldr	r5, [sp, #32]
 801b8fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b900:	182f      	adds	r7, r5, r0
 801b902:	5c2d      	ldrb	r5, [r5, r0]
 801b904:	7878      	ldrb	r0, [r7, #1]
 801b906:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b90a:	900c      	str	r0, [sp, #48]	; 0x30
 801b90c:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b910:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b914:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b918:	b1c9      	cbz	r1, 801b94e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b91a:	f04f 0c03 	mov.w	ip, #3
 801b91e:	f06f 0004 	mvn.w	r0, #4
 801b922:	3705      	adds	r7, #5
 801b924:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b928:	eb07 0c03 	add.w	ip, r7, r3
 801b92c:	5cfb      	ldrb	r3, [r7, r3]
 801b92e:	930d      	str	r3, [sp, #52]	; 0x34
 801b930:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b934:	930f      	str	r3, [sp, #60]	; 0x3c
 801b936:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b93a:	9311      	str	r3, [sp, #68]	; 0x44
 801b93c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b940:	930e      	str	r3, [sp, #56]	; 0x38
 801b942:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b946:	9310      	str	r3, [sp, #64]	; 0x40
 801b948:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b94c:	9312      	str	r3, [sp, #72]	; 0x48
 801b94e:	b292      	uxth	r2, r2
 801b950:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b952:	b289      	uxth	r1, r1
 801b954:	fb02 f301 	mul.w	r3, r2, r1
 801b958:	0112      	lsls	r2, r2, #4
 801b95a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b95e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b962:	1ad2      	subs	r2, r2, r3
 801b964:	b289      	uxth	r1, r1
 801b966:	b292      	uxth	r2, r2
 801b968:	1a7f      	subs	r7, r7, r1
 801b96a:	fb02 f909 	mul.w	r9, r2, r9
 801b96e:	b2bf      	uxth	r7, r7
 801b970:	fb02 f808 	mul.w	r8, r2, r8
 801b974:	fb02 fa0a 	mul.w	sl, r2, sl
 801b978:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b97a:	fb07 9905 	mla	r9, r7, r5, r9
 801b97e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b980:	fb07 8800 	mla	r8, r7, r0, r8
 801b984:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b986:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b98a:	fb01 9905 	mla	r9, r1, r5, r9
 801b98e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b990:	fb01 8800 	mla	r8, r1, r0, r8
 801b994:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b996:	fb01 a102 	mla	r1, r1, r2, sl
 801b99a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b99c:	fb03 9905 	mla	r9, r3, r5, r9
 801b9a0:	fb03 8800 	mla	r8, r3, r0, r8
 801b9a4:	fb03 1302 	mla	r3, r3, r2, r1
 801b9a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9b0:	121b      	asrs	r3, r3, #8
 801b9b2:	f886 9000 	strb.w	r9, [r6]
 801b9b6:	f886 8001 	strb.w	r8, [r6, #1]
 801b9ba:	70b3      	strb	r3, [r6, #2]
 801b9bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b9be:	3603      	adds	r6, #3
 801b9c0:	449b      	add	fp, r3
 801b9c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b9c4:	441c      	add	r4, r3
 801b9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9c8:	3b01      	subs	r3, #1
 801b9ca:	930a      	str	r3, [sp, #40]	; 0x28
 801b9cc:	e774      	b.n	801b8b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801b9ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b9d0:	449b      	add	fp, r3
 801b9d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b9d4:	441c      	add	r4, r3
 801b9d6:	9b06      	ldr	r3, [sp, #24]
 801b9d8:	3b01      	subs	r3, #1
 801b9da:	9306      	str	r3, [sp, #24]
 801b9dc:	9b07      	ldr	r3, [sp, #28]
 801b9de:	3303      	adds	r3, #3
 801b9e0:	9307      	str	r3, [sp, #28]
 801b9e2:	e74a      	b.n	801b87a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b9e4:	d024      	beq.n	801ba30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801b9e6:	9b06      	ldr	r3, [sp, #24]
 801b9e8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801b9ea:	3b01      	subs	r3, #1
 801b9ec:	fb00 b003 	mla	r0, r0, r3, fp
 801b9f0:	1400      	asrs	r0, r0, #16
 801b9f2:	f53f af5e 	bmi.w	801b8b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b9f6:	3901      	subs	r1, #1
 801b9f8:	4288      	cmp	r0, r1
 801b9fa:	f6bf af5a 	bge.w	801b8b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b9fe:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801ba00:	fb01 4303 	mla	r3, r1, r3, r4
 801ba04:	141b      	asrs	r3, r3, #16
 801ba06:	f53f af54 	bmi.w	801b8b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ba0a:	3a01      	subs	r2, #1
 801ba0c:	4293      	cmp	r3, r2
 801ba0e:	f6bf af50 	bge.w	801b8b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ba12:	9b07      	ldr	r3, [sp, #28]
 801ba14:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ba18:	1cde      	adds	r6, r3, #3
 801ba1a:	f1be 0f00 	cmp.w	lr, #0
 801ba1e:	dc5f      	bgt.n	801bae0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801ba20:	9b06      	ldr	r3, [sp, #24]
 801ba22:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ba26:	9b07      	ldr	r3, [sp, #28]
 801ba28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba2c:	4423      	add	r3, r4
 801ba2e:	9307      	str	r3, [sp, #28]
 801ba30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	f340 80c5 	ble.w	801bbc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801ba38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ba3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba3e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ba42:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ba46:	eef0 6a48 	vmov.f32	s13, s16
 801ba4a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ba4e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ba52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba56:	ee16 ba90 	vmov	fp, s13
 801ba5a:	eef0 6a68 	vmov.f32	s13, s17
 801ba5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba62:	ee16 4a90 	vmov	r4, s13
 801ba66:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ba6a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ba6e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ba72:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ba76:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ba7a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ba7e:	ee18 2a10 	vmov	r2, s16
 801ba82:	eeb0 8a47 	vmov.f32	s16, s14
 801ba86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba8a:	ee18 2a90 	vmov	r2, s17
 801ba8e:	932f      	str	r3, [sp, #188]	; 0xbc
 801ba90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ba92:	eef0 8a67 	vmov.f32	s17, s15
 801ba96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba9a:	9330      	str	r3, [sp, #192]	; 0xc0
 801ba9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801baa0:	3b01      	subs	r3, #1
 801baa2:	9309      	str	r3, [sp, #36]	; 0x24
 801baa4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801baa6:	bf08      	it	eq
 801baa8:	4613      	moveq	r3, r2
 801baaa:	9306      	str	r3, [sp, #24]
 801baac:	e6d7      	b.n	801b85e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801baae:	f110 0c01 	adds.w	ip, r0, #1
 801bab2:	d483      	bmi.n	801b9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801bab4:	4563      	cmp	r3, ip
 801bab6:	db81      	blt.n	801b9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801bab8:	f115 0c01 	adds.w	ip, r5, #1
 801babc:	f53f af7e 	bmi.w	801b9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801bac0:	4567      	cmp	r7, ip
 801bac2:	f6ff af7b 	blt.w	801b9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801bac6:	b23f      	sxth	r7, r7
 801bac8:	b21b      	sxth	r3, r3
 801baca:	9700      	str	r7, [sp, #0]
 801bacc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801bad0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801bad4:	9a08      	ldr	r2, [sp, #32]
 801bad6:	4631      	mov	r1, r6
 801bad8:	9819      	ldr	r0, [sp, #100]	; 0x64
 801bada:	f7ff fdcf 	bl	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801bade:	e76d      	b.n	801b9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801bae0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801bae2:	ea4f 402b 	mov.w	r0, fp, asr #16
 801bae6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801baea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801baee:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801baf2:	1421      	asrs	r1, r4, #16
 801baf4:	930a      	str	r3, [sp, #40]	; 0x28
 801baf6:	fb0c 0101 	mla	r1, ip, r1, r0
 801bafa:	9808      	ldr	r0, [sp, #32]
 801bafc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bb00:	1845      	adds	r5, r0, r1
 801bb02:	5c40      	ldrb	r0, [r0, r1]
 801bb04:	796f      	ldrb	r7, [r5, #5]
 801bb06:	7869      	ldrb	r1, [r5, #1]
 801bb08:	f895 8002 	ldrb.w	r8, [r5, #2]
 801bb0c:	f895 a003 	ldrb.w	sl, [r5, #3]
 801bb10:	f895 9004 	ldrb.w	r9, [r5, #4]
 801bb14:	970c      	str	r7, [sp, #48]	; 0x30
 801bb16:	b1a2      	cbz	r2, 801bb42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 801bb18:	2703      	movs	r7, #3
 801bb1a:	f06f 0304 	mvn.w	r3, #4
 801bb1e:	3505      	adds	r5, #5
 801bb20:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801bb24:	eb05 070c 	add.w	r7, r5, ip
 801bb28:	f815 500c 	ldrb.w	r5, [r5, ip]
 801bb2c:	9513      	str	r5, [sp, #76]	; 0x4c
 801bb2e:	787d      	ldrb	r5, [r7, #1]
 801bb30:	9515      	str	r5, [sp, #84]	; 0x54
 801bb32:	78bd      	ldrb	r5, [r7, #2]
 801bb34:	9517      	str	r5, [sp, #92]	; 0x5c
 801bb36:	78fd      	ldrb	r5, [r7, #3]
 801bb38:	9514      	str	r5, [sp, #80]	; 0x50
 801bb3a:	793d      	ldrb	r5, [r7, #4]
 801bb3c:	9516      	str	r5, [sp, #88]	; 0x58
 801bb3e:	797d      	ldrb	r5, [r7, #5]
 801bb40:	9518      	str	r5, [sp, #96]	; 0x60
 801bb42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bb46:	b292      	uxth	r2, r2
 801bb48:	3603      	adds	r6, #3
 801bb4a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bb4e:	fb03 f502 	mul.w	r5, r3, r2
 801bb52:	011b      	lsls	r3, r3, #4
 801bb54:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801bb58:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801bb5c:	1b5b      	subs	r3, r3, r5
 801bb5e:	b292      	uxth	r2, r2
 801bb60:	b29b      	uxth	r3, r3
 801bb62:	1abf      	subs	r7, r7, r2
 801bb64:	fb03 f909 	mul.w	r9, r3, r9
 801bb68:	b2bf      	uxth	r7, r7
 801bb6a:	fb03 fa0a 	mul.w	sl, r3, sl
 801bb6e:	fb07 9901 	mla	r9, r7, r1, r9
 801bb72:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bb74:	fb07 aa00 	mla	sl, r7, r0, sl
 801bb78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bb7a:	fb02 9901 	mla	r9, r2, r1, r9
 801bb7e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801bb80:	fb02 aa00 	mla	sl, r2, r0, sl
 801bb84:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bb86:	fb05 9901 	mla	r9, r5, r1, r9
 801bb8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bb8c:	fb05 aa00 	mla	sl, r5, r0, sl
 801bb90:	434b      	muls	r3, r1
 801bb92:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801bb94:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb98:	fb07 3308 	mla	r3, r7, r8, r3
 801bb9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bba0:	f806 ac06 	strb.w	sl, [r6, #-6]
 801bba4:	fb02 3201 	mla	r2, r2, r1, r3
 801bba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bbaa:	f806 9c05 	strb.w	r9, [r6, #-5]
 801bbae:	fb05 2503 	mla	r5, r5, r3, r2
 801bbb2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801bbb4:	122d      	asrs	r5, r5, #8
 801bbb6:	449b      	add	fp, r3
 801bbb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bbba:	f806 5c04 	strb.w	r5, [r6, #-4]
 801bbbe:	441c      	add	r4, r3
 801bbc0:	e72b      	b.n	801ba1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801bbc2:	b01b      	add	sp, #108	; 0x6c
 801bbc4:	ecbd 8b08 	vpop	{d8-d11}
 801bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801bbcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801bbd4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801bbd8:	fb04 5603 	mla	r6, r4, r3, r5
 801bbdc:	2c00      	cmp	r4, #0
 801bbde:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801bbe2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801bbe6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801bbea:	db36      	blt.n	801bc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801bbec:	45a6      	cmp	lr, r4
 801bbee:	dd34      	ble.n	801bc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801bbf0:	2d00      	cmp	r5, #0
 801bbf2:	db30      	blt.n	801bc56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801bbf4:	42ab      	cmp	r3, r5
 801bbf6:	dd2e      	ble.n	801bc56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801bbf8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801bbfc:	1c6e      	adds	r6, r5, #1
 801bbfe:	d42f      	bmi.n	801bc60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801bc00:	42b3      	cmp	r3, r6
 801bc02:	dd2d      	ble.n	801bc60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801bc04:	b370      	cbz	r0, 801bc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801bc06:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801bc0a:	3401      	adds	r4, #1
 801bc0c:	d42e      	bmi.n	801bc6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801bc0e:	45a6      	cmp	lr, r4
 801bc10:	dd2c      	ble.n	801bc6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801bc12:	b377      	cbz	r7, 801bc72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 801bc14:	2d00      	cmp	r5, #0
 801bc16:	db27      	blt.n	801bc68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801bc18:	42ab      	cmp	r3, r5
 801bc1a:	dd25      	ble.n	801bc68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801bc1c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801bc20:	3501      	adds	r5, #1
 801bc22:	d429      	bmi.n	801bc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801bc24:	42ab      	cmp	r3, r5
 801bc26:	dd27      	ble.n	801bc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801bc28:	b340      	cbz	r0, 801bc7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 801bc2a:	3301      	adds	r3, #1
 801bc2c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801bc30:	280f      	cmp	r0, #15
 801bc32:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801bc36:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801bc3a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801bc3e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801bc42:	d801      	bhi.n	801bc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 801bc44:	2f0f      	cmp	r7, #15
 801bc46:	d91b      	bls.n	801bc80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 801bc48:	4b89      	ldr	r3, [pc, #548]	; (801be70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801bc4a:	f240 1157 	movw	r1, #343	; 0x157
 801bc4e:	4a89      	ldr	r2, [pc, #548]	; (801be74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801bc50:	4889      	ldr	r0, [pc, #548]	; (801be78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801bc52:	f003 fdb9 	bl	801f7c8 <__assert_func>
 801bc56:	2200      	movs	r2, #0
 801bc58:	e7d0      	b.n	801bbfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 801bc5a:	2600      	movs	r6, #0
 801bc5c:	4632      	mov	r2, r6
 801bc5e:	e7d4      	b.n	801bc0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801bc60:	2600      	movs	r6, #0
 801bc62:	e7d2      	b.n	801bc0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801bc64:	4606      	mov	r6, r0
 801bc66:	e7d0      	b.n	801bc0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801bc68:	2400      	movs	r4, #0
 801bc6a:	e7d9      	b.n	801bc20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	461c      	mov	r4, r3
 801bc70:	e7de      	b.n	801bc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bc72:	463b      	mov	r3, r7
 801bc74:	463c      	mov	r4, r7
 801bc76:	e7db      	b.n	801bc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bc78:	2300      	movs	r3, #0
 801bc7a:	e7d9      	b.n	801bc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	e7d7      	b.n	801bc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801bc80:	b280      	uxth	r0, r0
 801bc82:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bc86:	b2bf      	uxth	r7, r7
 801bc88:	fb00 fe07 	mul.w	lr, r0, r7
 801bc8c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bc90:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801bc94:	eba0 0c0e 	sub.w	ip, r0, lr
 801bc98:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801bc9c:	b2bf      	uxth	r7, r7
 801bc9e:	fa1f fc8c 	uxth.w	ip, ip
 801bca2:	eba5 0507 	sub.w	r5, r5, r7
 801bca6:	fb0c f00a 	mul.w	r0, ip, sl
 801bcaa:	b2ad      	uxth	r5, r5
 801bcac:	fb05 000b 	mla	r0, r5, fp, r0
 801bcb0:	fb07 0009 	mla	r0, r7, r9, r0
 801bcb4:	fb0e 0008 	mla	r0, lr, r8, r0
 801bcb8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bcbc:	9001      	str	r0, [sp, #4]
 801bcbe:	d018      	beq.n	801bcf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801bcc0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801bcc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bcc8:	fb0b f000 	mul.w	r0, fp, r0
 801bccc:	fb0b fb02 	mul.w	fp, fp, r2
 801bcd0:	0a02      	lsrs	r2, r0, #8
 801bcd2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bcd6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bcda:	4402      	add	r2, r0
 801bcdc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801bce0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801bce4:	0a12      	lsrs	r2, r2, #8
 801bce6:	0a00      	lsrs	r0, r0, #8
 801bce8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bcec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bcf0:	4302      	orrs	r2, r0
 801bcf2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bcf6:	d01a      	beq.n	801bd2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 801bcf8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bcfc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bd00:	fb0a f000 	mul.w	r0, sl, r0
 801bd04:	fb0a fa06 	mul.w	sl, sl, r6
 801bd08:	0a06      	lsrs	r6, r0, #8
 801bd0a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bd0e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bd12:	4406      	add	r6, r0
 801bd14:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801bd18:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bd1c:	0a36      	lsrs	r6, r6, #8
 801bd1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bd22:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bd26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bd2a:	ea46 060a 	orr.w	r6, r6, sl
 801bd2e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bd32:	d01b      	beq.n	801bd6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 801bd34:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bd38:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bd3c:	fb09 fa0a 	mul.w	sl, r9, sl
 801bd40:	fb09 f004 	mul.w	r0, r9, r4
 801bd44:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bd48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bd4c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801bd50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bd54:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801bd58:	4454      	add	r4, sl
 801bd5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bd5e:	0a24      	lsrs	r4, r4, #8
 801bd60:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bd64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bd68:	ea44 0409 	orr.w	r4, r4, r9
 801bd6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bd70:	d01b      	beq.n	801bdaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 801bd72:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801bd76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bd7a:	fb08 f909 	mul.w	r9, r8, r9
 801bd7e:	fb08 f003 	mul.w	r0, r8, r3
 801bd82:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801bd86:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bd8a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801bd8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bd92:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801bd96:	444b      	add	r3, r9
 801bd98:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bd9c:	0a1b      	lsrs	r3, r3, #8
 801bd9e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bda2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bda6:	ea43 0308 	orr.w	r3, r3, r8
 801bdaa:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bdae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bdb2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801bdb6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bdba:	fb0c f000 	mul.w	r0, ip, r0
 801bdbe:	fb0c f606 	mul.w	r6, ip, r6
 801bdc2:	fb05 0808 	mla	r8, r5, r8, r0
 801bdc6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801bdca:	fb05 6502 	mla	r5, r5, r2, r6
 801bdce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bdd2:	fb07 8800 	mla	r8, r7, r0, r8
 801bdd6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801bdda:	fb07 5704 	mla	r7, r7, r4, r5
 801bdde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bde2:	fb0e 8000 	mla	r0, lr, r0, r8
 801bde6:	fb0e 7e03 	mla	lr, lr, r3, r7
 801bdea:	9b01      	ldr	r3, [sp, #4]
 801bdec:	0a00      	lsrs	r0, r0, #8
 801bdee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bdf2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bdf6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bdfa:	ea40 0e0e 	orr.w	lr, r0, lr
 801bdfe:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801be02:	b280      	uxth	r0, r0
 801be04:	fa5f f48e 	uxtb.w	r4, lr
 801be08:	4343      	muls	r3, r0
 801be0a:	fb14 f400 	smulbb	r4, r4, r0
 801be0e:	1c5a      	adds	r2, r3, #1
 801be10:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801be14:	780b      	ldrb	r3, [r1, #0]
 801be16:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801be1a:	b2d2      	uxtb	r2, r2
 801be1c:	fb03 4302 	mla	r3, r3, r2, r4
 801be20:	b29b      	uxth	r3, r3
 801be22:	1c5c      	adds	r4, r3, #1
 801be24:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801be28:	784c      	ldrb	r4, [r1, #1]
 801be2a:	fb14 f402 	smulbb	r4, r4, r2
 801be2e:	121b      	asrs	r3, r3, #8
 801be30:	700b      	strb	r3, [r1, #0]
 801be32:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801be36:	fb03 4300 	mla	r3, r3, r0, r4
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	1c5c      	adds	r4, r3, #1
 801be3e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801be42:	121b      	asrs	r3, r3, #8
 801be44:	704b      	strb	r3, [r1, #1]
 801be46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801be4a:	f891 e002 	ldrb.w	lr, [r1, #2]
 801be4e:	fb1e fe02 	smulbb	lr, lr, r2
 801be52:	fb03 ee00 	mla	lr, r3, r0, lr
 801be56:	fa1f fe8e 	uxth.w	lr, lr
 801be5a:	f10e 0301 	add.w	r3, lr, #1
 801be5e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801be62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801be66:	f881 e002 	strb.w	lr, [r1, #2]
 801be6a:	b003      	add	sp, #12
 801be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be70:	0802453f 	.word	0x0802453f
 801be74:	080249f6 	.word	0x080249f6
 801be78:	080245c7 	.word	0x080245c7

0801be7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be80:	ed2d 8b08 	vpush	{d8-d11}
 801be84:	b09d      	sub	sp, #116	; 0x74
 801be86:	eeb0 aa40 	vmov.f32	s20, s0
 801be8a:	eef0 9a60 	vmov.f32	s19, s1
 801be8e:	9219      	str	r2, [sp, #100]	; 0x64
 801be90:	eeb0 9a41 	vmov.f32	s18, s2
 801be94:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801be96:	eeb0 8a62 	vmov.f32	s16, s5
 801be9a:	9307      	str	r3, [sp, #28]
 801be9c:	eef0 8a43 	vmov.f32	s17, s6
 801bea0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801bea4:	eef0 ba44 	vmov.f32	s23, s8
 801bea8:	901b      	str	r0, [sp, #108]	; 0x6c
 801beaa:	eeb0 ba64 	vmov.f32	s22, s9
 801beae:	931a      	str	r3, [sp, #104]	; 0x68
 801beb0:	eef0 aa45 	vmov.f32	s21, s10
 801beb4:	6850      	ldr	r0, [r2, #4]
 801beb6:	9117      	str	r1, [sp, #92]	; 0x5c
 801beb8:	6812      	ldr	r2, [r2, #0]
 801beba:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801bebe:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801bec2:	fb00 1303 	mla	r3, r0, r3, r1
 801bec6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801beca:	18d3      	adds	r3, r2, r3
 801becc:	930a      	str	r3, [sp, #40]	; 0x28
 801bece:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	9310      	str	r3, [sp, #64]	; 0x40
 801bed4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bed8:	930b      	str	r3, [sp, #44]	; 0x2c
 801beda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bedc:	2b00      	cmp	r3, #0
 801bede:	dc03      	bgt.n	801bee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bee0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	f340 8368 	ble.w	801c5b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801bee8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801beea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801beee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bef2:	1e48      	subs	r0, r1, #1
 801bef4:	1e57      	subs	r7, r2, #1
 801bef6:	9b07      	ldr	r3, [sp, #28]
 801bef8:	2b00      	cmp	r3, #0
 801befa:	f340 8187 	ble.w	801c20c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801befe:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bf02:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bf06:	d406      	bmi.n	801bf16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bf08:	4584      	cmp	ip, r0
 801bf0a:	da04      	bge.n	801bf16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	db02      	blt.n	801bf16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bf10:	42bb      	cmp	r3, r7
 801bf12:	f2c0 817c 	blt.w	801c20e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801bf16:	f11c 0c01 	adds.w	ip, ip, #1
 801bf1a:	f100 816c 	bmi.w	801c1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bf1e:	4561      	cmp	r1, ip
 801bf20:	f2c0 8169 	blt.w	801c1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bf24:	3301      	adds	r3, #1
 801bf26:	f100 8166 	bmi.w	801c1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	f2c0 8163 	blt.w	801c1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bf30:	9b07      	ldr	r3, [sp, #28]
 801bf32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bf34:	9318      	str	r3, [sp, #96]	; 0x60
 801bf36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	f340 8186 	ble.w	801c24a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801bf3e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bf40:	142a      	asrs	r2, r5, #16
 801bf42:	ea4f 4026 	mov.w	r0, r6, asr #16
 801bf46:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bf4a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801bf4e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801bf52:	f100 81cb 	bmi.w	801c2ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf56:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bf5a:	4542      	cmp	r2, r8
 801bf5c:	f280 81c6 	bge.w	801c2ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf60:	2800      	cmp	r0, #0
 801bf62:	f2c0 81c3 	blt.w	801c2ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf66:	f103 38ff 	add.w	r8, r3, #4294967295
 801bf6a:	4540      	cmp	r0, r8
 801bf6c:	f280 81be 	bge.w	801c2ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf70:	fa0f f38e 	sxth.w	r3, lr
 801bf74:	fb00 2203 	mla	r2, r0, r3, r2
 801bf78:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bf7a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801bf7e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801bf82:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bf86:	2900      	cmp	r1, #0
 801bf88:	f000 81a6 	beq.w	801c2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801bf8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bf90:	900c      	str	r0, [sp, #48]	; 0x30
 801bf92:	0e00      	lsrs	r0, r0, #24
 801bf94:	9013      	str	r0, [sp, #76]	; 0x4c
 801bf96:	f1bc 0f00 	cmp.w	ip, #0
 801bf9a:	d00f      	beq.n	801bfbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801bf9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bfa0:	3b01      	subs	r3, #1
 801bfa2:	009b      	lsls	r3, r3, #2
 801bfa4:	3304      	adds	r3, #4
 801bfa6:	eb08 0003 	add.w	r0, r8, r3
 801bfaa:	f858 3003 	ldr.w	r3, [r8, r3]
 801bfae:	9308      	str	r3, [sp, #32]
 801bfb0:	0e1b      	lsrs	r3, r3, #24
 801bfb2:	9311      	str	r3, [sp, #68]	; 0x44
 801bfb4:	6843      	ldr	r3, [r0, #4]
 801bfb6:	930d      	str	r3, [sp, #52]	; 0x34
 801bfb8:	0e1b      	lsrs	r3, r3, #24
 801bfba:	9314      	str	r3, [sp, #80]	; 0x50
 801bfbc:	b289      	uxth	r1, r1
 801bfbe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bfc0:	fa1f fc8c 	uxth.w	ip, ip
 801bfc4:	0108      	lsls	r0, r1, #4
 801bfc6:	fb01 f90c 	mul.w	r9, r1, ip
 801bfca:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bfce:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801bfd2:	eba0 0809 	sub.w	r8, r0, r9
 801bfd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bfd8:	fa1f f18c 	uxth.w	r1, ip
 801bfdc:	fa1f f888 	uxth.w	r8, r8
 801bfe0:	1a5b      	subs	r3, r3, r1
 801bfe2:	fb08 f000 	mul.w	r0, r8, r0
 801bfe6:	b29b      	uxth	r3, r3
 801bfe8:	fb03 000e 	mla	r0, r3, lr, r0
 801bfec:	fb01 0004 	mla	r0, r1, r4, r0
 801bff0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bff2:	fb09 0004 	mla	r0, r9, r4, r0
 801bff6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bffa:	2800      	cmp	r0, #0
 801bffc:	f000 80f2 	beq.w	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c000:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c004:	d01b      	beq.n	801c03e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801c006:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801c00a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c00e:	fb0e fa0a 	mul.w	sl, lr, sl
 801c012:	fb0e fe02 	mul.w	lr, lr, r2
 801c016:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801c01a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c01e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c022:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c026:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c02a:	4452      	add	r2, sl
 801c02c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c030:	0a12      	lsrs	r2, r2, #8
 801c032:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c036:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c03a:	ea42 020c 	orr.w	r2, r2, ip
 801c03e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c040:	2cff      	cmp	r4, #255	; 0xff
 801c042:	d021      	beq.n	801c088 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c044:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c046:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c04a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c04c:	fb04 fb0b 	mul.w	fp, r4, fp
 801c050:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c052:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c056:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c058:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c05c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c060:	fb04 fa0a 	mul.w	sl, r4, sl
 801c064:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c068:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c06c:	44de      	add	lr, fp
 801c06e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c072:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c076:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c07a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c07e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c082:	ea4e 040a 	orr.w	r4, lr, sl
 801c086:	940c      	str	r4, [sp, #48]	; 0x30
 801c088:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c08a:	2cff      	cmp	r4, #255	; 0xff
 801c08c:	d021      	beq.n	801c0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801c08e:	9c08      	ldr	r4, [sp, #32]
 801c090:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c094:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c096:	fb04 fb0b 	mul.w	fp, r4, fp
 801c09a:	9c08      	ldr	r4, [sp, #32]
 801c09c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c0a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c0a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c0a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c0aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c0ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c0b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c0b6:	44de      	add	lr, fp
 801c0b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c0bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c0c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c0c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c0c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c0cc:	ea4e 040a 	orr.w	r4, lr, sl
 801c0d0:	9408      	str	r4, [sp, #32]
 801c0d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0d4:	2cff      	cmp	r4, #255	; 0xff
 801c0d6:	d021      	beq.n	801c11c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801c0d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c0da:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c0de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0e0:	fb04 fb0b 	mul.w	fp, r4, fp
 801c0e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c0e6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c0ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c0f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c0f4:	fb04 fa0a 	mul.w	sl, r4, sl
 801c0f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c0fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c100:	44de      	add	lr, fp
 801c102:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c106:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c10a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c10e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c112:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c116:	ea4e 040a 	orr.w	r4, lr, sl
 801c11a:	940d      	str	r4, [sp, #52]	; 0x34
 801c11c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c11e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c122:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c126:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c12a:	9c08      	ldr	r4, [sp, #32]
 801c12c:	fb08 fc0c 	mul.w	ip, r8, ip
 801c130:	fb03 cc0e 	mla	ip, r3, lr, ip
 801c134:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c138:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c13a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c13e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c142:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c144:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c148:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c14c:	fb08 f80e 	mul.w	r8, r8, lr
 801c150:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c154:	fb03 8202 	mla	r2, r3, r2, r8
 801c158:	9b08      	ldr	r3, [sp, #32]
 801c15a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c15e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801c162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c164:	fb01 220a 	mla	r2, r1, sl, r2
 801c168:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801c16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c16e:	fb09 2901 	mla	r9, r9, r1, r2
 801c172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c174:	4343      	muls	r3, r0
 801c176:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c17a:	1c58      	adds	r0, r3, #1
 801c17c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c180:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c184:	783b      	ldrb	r3, [r7, #0]
 801c186:	ea4c 0c09 	orr.w	ip, ip, r9
 801c18a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c18e:	fa5f f28c 	uxtb.w	r2, ip
 801c192:	b2c0      	uxtb	r0, r0
 801c194:	fb12 f201 	smulbb	r2, r2, r1
 801c198:	fb03 2300 	mla	r3, r3, r0, r2
 801c19c:	b29b      	uxth	r3, r3
 801c19e:	1c5a      	adds	r2, r3, #1
 801c1a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c1a4:	787a      	ldrb	r2, [r7, #1]
 801c1a6:	fb12 f200 	smulbb	r2, r2, r0
 801c1aa:	121b      	asrs	r3, r3, #8
 801c1ac:	703b      	strb	r3, [r7, #0]
 801c1ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c1b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c1b6:	fb03 2301 	mla	r3, r3, r1, r2
 801c1ba:	b29b      	uxth	r3, r3
 801c1bc:	1c5a      	adds	r2, r3, #1
 801c1be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c1c2:	121b      	asrs	r3, r3, #8
 801c1c4:	707b      	strb	r3, [r7, #1]
 801c1c6:	78bb      	ldrb	r3, [r7, #2]
 801c1c8:	fb13 f000 	smulbb	r0, r3, r0
 801c1cc:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c1d0:	fa1f fc8c 	uxth.w	ip, ip
 801c1d4:	f10c 0301 	add.w	r3, ip, #1
 801c1d8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c1dc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c1e0:	f887 c002 	strb.w	ip, [r7, #2]
 801c1e4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c1e6:	3703      	adds	r7, #3
 801c1e8:	441d      	add	r5, r3
 801c1ea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c1ec:	441e      	add	r6, r3
 801c1ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c1f0:	3b01      	subs	r3, #1
 801c1f2:	9318      	str	r3, [sp, #96]	; 0x60
 801c1f4:	e69f      	b.n	801bf36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801c1f6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c1f8:	441d      	add	r5, r3
 801c1fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c1fc:	441e      	add	r6, r3
 801c1fe:	9b07      	ldr	r3, [sp, #28]
 801c200:	3b01      	subs	r3, #1
 801c202:	9307      	str	r3, [sp, #28]
 801c204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c206:	3303      	adds	r3, #3
 801c208:	930a      	str	r3, [sp, #40]	; 0x28
 801c20a:	e674      	b.n	801bef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c20c:	d025      	beq.n	801c25a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801c20e:	9b07      	ldr	r3, [sp, #28]
 801c210:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801c212:	3b01      	subs	r3, #1
 801c214:	fb00 5003 	mla	r0, r0, r3, r5
 801c218:	1400      	asrs	r0, r0, #16
 801c21a:	f53f ae89 	bmi.w	801bf30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c21e:	3901      	subs	r1, #1
 801c220:	4288      	cmp	r0, r1
 801c222:	f6bf ae85 	bge.w	801bf30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c226:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801c228:	fb01 6303 	mla	r3, r1, r3, r6
 801c22c:	141b      	asrs	r3, r3, #16
 801c22e:	f53f ae7f 	bmi.w	801bf30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c232:	3a01      	subs	r2, #1
 801c234:	4293      	cmp	r3, r2
 801c236:	f6bf ae7b 	bge.w	801bf30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c23c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c240:	f103 0e03 	add.w	lr, r3, #3
 801c244:	f1bb 0f00 	cmp.w	fp, #0
 801c248:	dc6e      	bgt.n	801c328 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801c24a:	9b07      	ldr	r3, [sp, #28]
 801c24c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c252:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c256:	4423      	add	r3, r4
 801c258:	930a      	str	r3, [sp, #40]	; 0x28
 801c25a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	f340 81ab 	ble.w	801c5b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c266:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c268:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c26c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c270:	eef0 6a48 	vmov.f32	s13, s16
 801c274:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c278:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c27c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c280:	ee16 5a90 	vmov	r5, s13
 801c284:	eef0 6a68 	vmov.f32	s13, s17
 801c288:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c28c:	ee16 6a90 	vmov	r6, s13
 801c290:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c294:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c298:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c29c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c2a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c2a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c2a8:	ee18 2a10 	vmov	r2, s16
 801c2ac:	eeb0 8a47 	vmov.f32	s16, s14
 801c2b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2b4:	ee18 2a90 	vmov	r2, s17
 801c2b8:	9331      	str	r3, [sp, #196]	; 0xc4
 801c2ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c2bc:	eef0 8a67 	vmov.f32	s17, s15
 801c2c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2c4:	9332      	str	r3, [sp, #200]	; 0xc8
 801c2c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c2ca:	3b01      	subs	r3, #1
 801c2cc:	9317      	str	r3, [sp, #92]	; 0x5c
 801c2ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c2d0:	bf08      	it	eq
 801c2d2:	4613      	moveq	r3, r2
 801c2d4:	9307      	str	r3, [sp, #28]
 801c2d6:	e600      	b.n	801beda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c2d8:	f1bc 0f00 	cmp.w	ip, #0
 801c2dc:	f43f ae6e 	beq.w	801bfbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c2e0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c2e4:	9308      	str	r3, [sp, #32]
 801c2e6:	0e1b      	lsrs	r3, r3, #24
 801c2e8:	9311      	str	r3, [sp, #68]	; 0x44
 801c2ea:	e667      	b.n	801bfbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c2ec:	f112 0801 	adds.w	r8, r2, #1
 801c2f0:	f53f af78 	bmi.w	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c2f4:	45c6      	cmp	lr, r8
 801c2f6:	f6ff af75 	blt.w	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c2fa:	f110 0801 	adds.w	r8, r0, #1
 801c2fe:	f53f af71 	bmi.w	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c302:	4543      	cmp	r3, r8
 801c304:	f6ff af6e 	blt.w	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c308:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c30a:	b21b      	sxth	r3, r3
 801c30c:	9201      	str	r2, [sp, #4]
 801c30e:	9300      	str	r3, [sp, #0]
 801c310:	fa0f f38e 	sxth.w	r3, lr
 801c314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c31a:	e9cd c404 	strd	ip, r4, [sp, #16]
 801c31e:	4639      	mov	r1, r7
 801c320:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c322:	f7ff fc53 	bl	801bbcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801c326:	e75d      	b.n	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c328:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801c32a:	142f      	asrs	r7, r5, #16
 801c32c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c32e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c332:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c336:	1433      	asrs	r3, r6, #16
 801c338:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c33c:	fb02 7303 	mla	r3, r2, r3, r7
 801c340:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801c344:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c348:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c34c:	2900      	cmp	r1, #0
 801c34e:	f000 812a 	beq.w	801c5a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801c352:	687c      	ldr	r4, [r7, #4]
 801c354:	940e      	str	r4, [sp, #56]	; 0x38
 801c356:	0e24      	lsrs	r4, r4, #24
 801c358:	9415      	str	r4, [sp, #84]	; 0x54
 801c35a:	b178      	cbz	r0, 801c37c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c35c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801c360:	3a01      	subs	r2, #1
 801c362:	0092      	lsls	r2, r2, #2
 801c364:	3204      	adds	r2, #4
 801c366:	eb07 0802 	add.w	r8, r7, r2
 801c36a:	58ba      	ldr	r2, [r7, r2]
 801c36c:	9209      	str	r2, [sp, #36]	; 0x24
 801c36e:	0e12      	lsrs	r2, r2, #24
 801c370:	9212      	str	r2, [sp, #72]	; 0x48
 801c372:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c376:	920f      	str	r2, [sp, #60]	; 0x3c
 801c378:	0e12      	lsrs	r2, r2, #24
 801c37a:	9216      	str	r2, [sp, #88]	; 0x58
 801c37c:	b289      	uxth	r1, r1
 801c37e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c380:	b280      	uxth	r0, r0
 801c382:	fb01 f900 	mul.w	r9, r1, r0
 801c386:	0109      	lsls	r1, r1, #4
 801c388:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c38c:	eba1 0809 	sub.w	r8, r1, r9
 801c390:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c394:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c396:	b280      	uxth	r0, r0
 801c398:	fa1f f888 	uxth.w	r8, r8
 801c39c:	1a12      	subs	r2, r2, r0
 801c39e:	fb08 f101 	mul.w	r1, r8, r1
 801c3a2:	b292      	uxth	r2, r2
 801c3a4:	fb02 110c 	mla	r1, r2, ip, r1
 801c3a8:	fb00 1104 	mla	r1, r0, r4, r1
 801c3ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c3ae:	fb09 1104 	mla	r1, r9, r4, r1
 801c3b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c3b6:	2900      	cmp	r1, #0
 801c3b8:	f000 80ec 	beq.w	801c594 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801c3bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c3c0:	d019      	beq.n	801c3f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801c3c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c3c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c3ca:	fb0c fa0a 	mul.w	sl, ip, sl
 801c3ce:	fb0c fc03 	mul.w	ip, ip, r3
 801c3d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c3d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c3da:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c3de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c3e2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c3e6:	4453      	add	r3, sl
 801c3e8:	0a3f      	lsrs	r7, r7, #8
 801c3ea:	0a1b      	lsrs	r3, r3, #8
 801c3ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c3f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c3f4:	433b      	orrs	r3, r7
 801c3f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c3f8:	2cff      	cmp	r4, #255	; 0xff
 801c3fa:	d020      	beq.n	801c43e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801c3fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c3fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c402:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c404:	4367      	muls	r7, r4
 801c406:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c408:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c40c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c410:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c412:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c416:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c41a:	fb04 fa0a 	mul.w	sl, r4, sl
 801c41e:	44bc      	add	ip, r7
 801c420:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c424:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c428:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c42c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c430:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c434:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c438:	ea4c 040a 	orr.w	r4, ip, sl
 801c43c:	940e      	str	r4, [sp, #56]	; 0x38
 801c43e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c440:	2cff      	cmp	r4, #255	; 0xff
 801c442:	d020      	beq.n	801c486 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801c444:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c446:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c44a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c44c:	4367      	muls	r7, r4
 801c44e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c450:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c454:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c458:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c45a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c45e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c462:	fb04 fa0a 	mul.w	sl, r4, sl
 801c466:	44bc      	add	ip, r7
 801c468:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c46c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c470:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c474:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c478:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c47c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c480:	ea4c 040a 	orr.w	r4, ip, sl
 801c484:	9409      	str	r4, [sp, #36]	; 0x24
 801c486:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c488:	2cff      	cmp	r4, #255	; 0xff
 801c48a:	d020      	beq.n	801c4ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801c48c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c48e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c492:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c494:	4367      	muls	r7, r4
 801c496:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c498:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c49c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c4a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c4a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c4a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c4aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c4ae:	44bc      	add	ip, r7
 801c4b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c4b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c4b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c4bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c4c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c4c8:	ea4c 040a 	orr.w	r4, ip, sl
 801c4cc:	940f      	str	r4, [sp, #60]	; 0x3c
 801c4ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c4d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c4d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c4d8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c4dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c4de:	fb08 f707 	mul.w	r7, r8, r7
 801c4e2:	fb02 770c 	mla	r7, r2, ip, r7
 801c4e6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c4ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c4ec:	fb00 770c 	mla	r7, r0, ip, r7
 801c4f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c4f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c4f6:	fb09 770c 	mla	r7, r9, ip, r7
 801c4fa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c4fe:	fb08 f80c 	mul.w	r8, r8, ip
 801c502:	0a3f      	lsrs	r7, r7, #8
 801c504:	fb02 8303 	mla	r3, r2, r3, r8
 801c508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c50a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c50e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c512:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c514:	fb00 330a 	mla	r3, r0, sl, r3
 801c518:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c51c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c51e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c524:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c528:	434b      	muls	r3, r1
 801c52a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c52e:	1c59      	adds	r1, r3, #1
 801c530:	ea47 070c 	orr.w	r7, r7, ip
 801c534:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c538:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c53c:	b2fa      	uxtb	r2, r7
 801c53e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c542:	fb12 f200 	smulbb	r2, r2, r0
 801c546:	b2c9      	uxtb	r1, r1
 801c548:	fb03 2301 	mla	r3, r3, r1, r2
 801c54c:	b29b      	uxth	r3, r3
 801c54e:	1c5a      	adds	r2, r3, #1
 801c550:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c554:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c558:	fb12 f201 	smulbb	r2, r2, r1
 801c55c:	121b      	asrs	r3, r3, #8
 801c55e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c562:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c566:	0c3f      	lsrs	r7, r7, #16
 801c568:	fb03 2300 	mla	r3, r3, r0, r2
 801c56c:	b29b      	uxth	r3, r3
 801c56e:	1c5a      	adds	r2, r3, #1
 801c570:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c574:	121b      	asrs	r3, r3, #8
 801c576:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c57a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c57e:	fb13 f101 	smulbb	r1, r3, r1
 801c582:	fb07 1700 	mla	r7, r7, r0, r1
 801c586:	b2bf      	uxth	r7, r7
 801c588:	1c79      	adds	r1, r7, #1
 801c58a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c58e:	123f      	asrs	r7, r7, #8
 801c590:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c594:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c596:	f10e 0e03 	add.w	lr, lr, #3
 801c59a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c59e:	441d      	add	r5, r3
 801c5a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c5a2:	441e      	add	r6, r3
 801c5a4:	e64e      	b.n	801c244 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	f43f aee8 	beq.w	801c37c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c5ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c5b0:	9209      	str	r2, [sp, #36]	; 0x24
 801c5b2:	0e12      	lsrs	r2, r2, #24
 801c5b4:	9212      	str	r2, [sp, #72]	; 0x48
 801c5b6:	e6e1      	b.n	801c37c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c5b8:	b01d      	add	sp, #116	; 0x74
 801c5ba:	ecbd 8b08 	vpop	{d8-d11}
 801c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c5c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801c5cc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801c5d0:	fb04 5603 	mla	r6, r4, r3, r5
 801c5d4:	2c00      	cmp	r4, #0
 801c5d6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801c5da:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801c5de:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801c5e2:	db36      	blt.n	801c652 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c5e4:	45a6      	cmp	lr, r4
 801c5e6:	dd34      	ble.n	801c652 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c5e8:	2d00      	cmp	r5, #0
 801c5ea:	db30      	blt.n	801c64e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c5ec:	42ab      	cmp	r3, r5
 801c5ee:	dd2e      	ble.n	801c64e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c5f0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801c5f4:	1c6e      	adds	r6, r5, #1
 801c5f6:	d42f      	bmi.n	801c658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c5f8:	42b3      	cmp	r3, r6
 801c5fa:	dd2d      	ble.n	801c658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c5fc:	b370      	cbz	r0, 801c65c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801c5fe:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c602:	3401      	adds	r4, #1
 801c604:	d42e      	bmi.n	801c664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c606:	45a6      	cmp	lr, r4
 801c608:	dd2c      	ble.n	801c664 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c60a:	b377      	cbz	r7, 801c66a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801c60c:	2d00      	cmp	r5, #0
 801c60e:	db27      	blt.n	801c660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c610:	42ab      	cmp	r3, r5
 801c612:	dd25      	ble.n	801c660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c614:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801c618:	3501      	adds	r5, #1
 801c61a:	d429      	bmi.n	801c670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c61c:	42ab      	cmp	r3, r5
 801c61e:	dd27      	ble.n	801c670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c620:	b340      	cbz	r0, 801c674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801c622:	3301      	adds	r3, #1
 801c624:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801c628:	280f      	cmp	r0, #15
 801c62a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c62e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c632:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c636:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801c63a:	d801      	bhi.n	801c640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801c63c:	2f0f      	cmp	r7, #15
 801c63e:	d91b      	bls.n	801c678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801c640:	4b7e      	ldr	r3, [pc, #504]	; (801c83c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801c642:	f240 1157 	movw	r1, #343	; 0x157
 801c646:	4a7e      	ldr	r2, [pc, #504]	; (801c840 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801c648:	487e      	ldr	r0, [pc, #504]	; (801c844 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801c64a:	f003 f8bd 	bl	801f7c8 <__assert_func>
 801c64e:	2200      	movs	r2, #0
 801c650:	e7d0      	b.n	801c5f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801c652:	2600      	movs	r6, #0
 801c654:	4632      	mov	r2, r6
 801c656:	e7d4      	b.n	801c602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c658:	2600      	movs	r6, #0
 801c65a:	e7d2      	b.n	801c602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c65c:	4606      	mov	r6, r0
 801c65e:	e7d0      	b.n	801c602 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c660:	2400      	movs	r4, #0
 801c662:	e7d9      	b.n	801c618 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801c664:	2300      	movs	r3, #0
 801c666:	461c      	mov	r4, r3
 801c668:	e7de      	b.n	801c628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c66a:	463b      	mov	r3, r7
 801c66c:	463c      	mov	r4, r7
 801c66e:	e7db      	b.n	801c628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c670:	2300      	movs	r3, #0
 801c672:	e7d9      	b.n	801c628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c674:	4603      	mov	r3, r0
 801c676:	e7d7      	b.n	801c628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c678:	b280      	uxth	r0, r0
 801c67a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c67e:	b2bf      	uxth	r7, r7
 801c680:	fb00 fe07 	mul.w	lr, r0, r7
 801c684:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c688:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801c68c:	eba0 0c0e 	sub.w	ip, r0, lr
 801c690:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801c694:	b2bf      	uxth	r7, r7
 801c696:	fa1f fc8c 	uxth.w	ip, ip
 801c69a:	eba0 0507 	sub.w	r5, r0, r7
 801c69e:	fb0c f00a 	mul.w	r0, ip, sl
 801c6a2:	b2ad      	uxth	r5, r5
 801c6a4:	fb05 000b 	mla	r0, r5, fp, r0
 801c6a8:	fb07 0009 	mla	r0, r7, r9, r0
 801c6ac:	fb0e 0008 	mla	r0, lr, r8, r0
 801c6b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c6b4:	9001      	str	r0, [sp, #4]
 801c6b6:	d018      	beq.n	801c6ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801c6b8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801c6bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c6c0:	fb0b f000 	mul.w	r0, fp, r0
 801c6c4:	fb0b fb02 	mul.w	fp, fp, r2
 801c6c8:	0a02      	lsrs	r2, r0, #8
 801c6ca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c6ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c6d2:	4402      	add	r2, r0
 801c6d4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801c6d8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801c6dc:	0a12      	lsrs	r2, r2, #8
 801c6de:	0a00      	lsrs	r0, r0, #8
 801c6e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c6e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c6e8:	4302      	orrs	r2, r0
 801c6ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c6ee:	d01a      	beq.n	801c726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801c6f0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c6f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c6f8:	fb0a f000 	mul.w	r0, sl, r0
 801c6fc:	fb0a fa06 	mul.w	sl, sl, r6
 801c700:	0a06      	lsrs	r6, r0, #8
 801c702:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c706:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c70a:	4406      	add	r6, r0
 801c70c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c710:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c714:	0a36      	lsrs	r6, r6, #8
 801c716:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c71a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c71e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c722:	ea46 060a 	orr.w	r6, r6, sl
 801c726:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c72a:	d01b      	beq.n	801c764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801c72c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801c730:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c734:	fb09 fa0a 	mul.w	sl, r9, sl
 801c738:	fb09 f004 	mul.w	r0, r9, r4
 801c73c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801c740:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c744:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801c748:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c74c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801c750:	4454      	add	r4, sl
 801c752:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c756:	0a24      	lsrs	r4, r4, #8
 801c758:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c75c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c760:	ea44 0409 	orr.w	r4, r4, r9
 801c764:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c768:	d01b      	beq.n	801c7a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801c76a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801c76e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c772:	fb08 f909 	mul.w	r9, r8, r9
 801c776:	fb08 f003 	mul.w	r0, r8, r3
 801c77a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801c77e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c782:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801c786:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c78a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801c78e:	444b      	add	r3, r9
 801c790:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c794:	0a1b      	lsrs	r3, r3, #8
 801c796:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c79a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c79e:	ea43 0308 	orr.w	r3, r3, r8
 801c7a2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c7a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c7aa:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801c7ae:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c7b2:	fb0c f000 	mul.w	r0, ip, r0
 801c7b6:	fb0c f606 	mul.w	r6, ip, r6
 801c7ba:	fb05 0808 	mla	r8, r5, r8, r0
 801c7be:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801c7c2:	fb05 6502 	mla	r5, r5, r2, r6
 801c7c6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c7ca:	fb07 8800 	mla	r8, r7, r0, r8
 801c7ce:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801c7d2:	fb07 5704 	mla	r7, r7, r4, r5
 801c7d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c7da:	fb0e 8000 	mla	r0, lr, r0, r8
 801c7de:	780a      	ldrb	r2, [r1, #0]
 801c7e0:	fb0e 7e03 	mla	lr, lr, r3, r7
 801c7e4:	9b01      	ldr	r3, [sp, #4]
 801c7e6:	0a00      	lsrs	r0, r0, #8
 801c7e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c7ec:	43db      	mvns	r3, r3
 801c7ee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c7f8:	ea40 0e0e 	orr.w	lr, r0, lr
 801c7fc:	fb02 f003 	mul.w	r0, r2, r3
 801c800:	1c42      	adds	r2, r0, #1
 801c802:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c806:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c80a:	700a      	strb	r2, [r1, #0]
 801c80c:	784a      	ldrb	r2, [r1, #1]
 801c80e:	435a      	muls	r2, r3
 801c810:	1c50      	adds	r0, r2, #1
 801c812:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c816:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801c81a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c81e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c822:	704a      	strb	r2, [r1, #1]
 801c824:	788a      	ldrb	r2, [r1, #2]
 801c826:	4353      	muls	r3, r2
 801c828:	1c5a      	adds	r2, r3, #1
 801c82a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c82e:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c832:	f881 e002 	strb.w	lr, [r1, #2]
 801c836:	b003      	add	sp, #12
 801c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c83c:	0802453f 	.word	0x0802453f
 801c840:	080249f6 	.word	0x080249f6
 801c844:	080245c7 	.word	0x080245c7

0801c848 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c84c:	ed2d 8b08 	vpush	{d8-d11}
 801c850:	b099      	sub	sp, #100	; 0x64
 801c852:	eeb0 aa40 	vmov.f32	s20, s0
 801c856:	eef0 9a60 	vmov.f32	s19, s1
 801c85a:	9017      	str	r0, [sp, #92]	; 0x5c
 801c85c:	eeb0 9a41 	vmov.f32	s18, s2
 801c860:	9306      	str	r3, [sp, #24]
 801c862:	eeb0 8a62 	vmov.f32	s16, s5
 801c866:	eef0 8a43 	vmov.f32	s17, s6
 801c86a:	eef0 ba44 	vmov.f32	s23, s8
 801c86e:	eeb0 ba64 	vmov.f32	s22, s9
 801c872:	eef0 aa45 	vmov.f32	s21, s10
 801c876:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c87a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c87c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c880:	6850      	ldr	r0, [r2, #4]
 801c882:	6812      	ldr	r2, [r2, #0]
 801c884:	fb00 1303 	mla	r3, r0, r3, r1
 801c888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c88c:	18d3      	adds	r3, r2, r3
 801c88e:	9309      	str	r3, [sp, #36]	; 0x24
 801c890:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c892:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	930e      	str	r3, [sp, #56]	; 0x38
 801c89a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	dc03      	bgt.n	801c8a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c8a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	f340 8360 	ble.w	801cf68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801c8a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c8aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c8ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c8b2:	1e48      	subs	r0, r1, #1
 801c8b4:	1e57      	subs	r7, r2, #1
 801c8b6:	9b06      	ldr	r3, [sp, #24]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	f340 817b 	ble.w	801cbb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801c8be:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c8c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c8c6:	d406      	bmi.n	801c8d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c8c8:	4584      	cmp	ip, r0
 801c8ca:	da04      	bge.n	801c8d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	db02      	blt.n	801c8d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c8d0:	42bb      	cmp	r3, r7
 801c8d2:	f2c0 8170 	blt.w	801cbb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c8d6:	f11c 0c01 	adds.w	ip, ip, #1
 801c8da:	f100 8160 	bmi.w	801cb9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c8de:	4561      	cmp	r1, ip
 801c8e0:	f2c0 815d 	blt.w	801cb9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c8e4:	3301      	adds	r3, #1
 801c8e6:	f100 815a 	bmi.w	801cb9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	f2c0 8157 	blt.w	801cb9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c8f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c8f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c8f6:	f1b8 0f00 	cmp.w	r8, #0
 801c8fa:	f340 8179 	ble.w	801cbf0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801c8fe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801c900:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c904:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c906:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c90a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c90e:	142a      	asrs	r2, r5, #16
 801c910:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c914:	689b      	ldr	r3, [r3, #8]
 801c916:	f100 81be 	bmi.w	801cc96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c91a:	f103 39ff 	add.w	r9, r3, #4294967295
 801c91e:	454a      	cmp	r2, r9
 801c920:	f280 81b9 	bge.w	801cc96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c924:	f1bc 0f00 	cmp.w	ip, #0
 801c928:	f2c0 81b5 	blt.w	801cc96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c92c:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c930:	45cc      	cmp	ip, r9
 801c932:	f280 81b0 	bge.w	801cc96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c936:	b21b      	sxth	r3, r3
 801c938:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c93a:	fb0c 2203 	mla	r2, ip, r3, r2
 801c93e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c946:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c94a:	2900      	cmp	r1, #0
 801c94c:	f000 8197 	beq.w	801cc7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801c950:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c954:	940a      	str	r4, [sp, #40]	; 0x28
 801c956:	0e24      	lsrs	r4, r4, #24
 801c958:	9411      	str	r4, [sp, #68]	; 0x44
 801c95a:	b180      	cbz	r0, 801c97e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c95c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c960:	3b01      	subs	r3, #1
 801c962:	009b      	lsls	r3, r3, #2
 801c964:	3304      	adds	r3, #4
 801c966:	eb09 0c03 	add.w	ip, r9, r3
 801c96a:	f859 3003 	ldr.w	r3, [r9, r3]
 801c96e:	9307      	str	r3, [sp, #28]
 801c970:	0e1b      	lsrs	r3, r3, #24
 801c972:	930f      	str	r3, [sp, #60]	; 0x3c
 801c974:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c978:	930b      	str	r3, [sp, #44]	; 0x2c
 801c97a:	0e1b      	lsrs	r3, r3, #24
 801c97c:	9312      	str	r3, [sp, #72]	; 0x48
 801c97e:	b289      	uxth	r1, r1
 801c980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c982:	b280      	uxth	r0, r0
 801c984:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c986:	fb01 fa00 	mul.w	sl, r1, r0
 801c98a:	0109      	lsls	r1, r1, #4
 801c98c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c990:	eba1 090a 	sub.w	r9, r1, sl
 801c994:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c998:	b280      	uxth	r0, r0
 801c99a:	fa1f f989 	uxth.w	r9, r9
 801c99e:	1a09      	subs	r1, r1, r0
 801c9a0:	fb09 f303 	mul.w	r3, r9, r3
 801c9a4:	b289      	uxth	r1, r1
 801c9a6:	fb01 330e 	mla	r3, r1, lr, r3
 801c9aa:	fb00 3304 	mla	r3, r0, r4, r3
 801c9ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c9b0:	fb0a 3304 	mla	r3, sl, r4, r3
 801c9b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	f000 80e8 	beq.w	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801c9be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c9c2:	d01b      	beq.n	801c9fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c9c4:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c9c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c9cc:	fb0e fb0b 	mul.w	fp, lr, fp
 801c9d0:	fb0e fe02 	mul.w	lr, lr, r2
 801c9d4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c9d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c9dc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c9e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c9e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c9e8:	445a      	add	r2, fp
 801c9ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c9ee:	0a12      	lsrs	r2, r2, #8
 801c9f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c9f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c9f8:	ea42 020c 	orr.w	r2, r2, ip
 801c9fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c9fe:	2cff      	cmp	r4, #255	; 0xff
 801ca00:	d021      	beq.n	801ca46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ca02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ca04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ca08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ca0a:	fb04 fc0c 	mul.w	ip, r4, ip
 801ca0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ca10:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ca14:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ca18:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ca1a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ca1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ca22:	fb04 fb0b 	mul.w	fp, r4, fp
 801ca26:	44e6      	add	lr, ip
 801ca28:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ca2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca30:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ca34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ca38:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ca3c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ca40:	ea4e 040b 	orr.w	r4, lr, fp
 801ca44:	940a      	str	r4, [sp, #40]	; 0x28
 801ca46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ca48:	2cff      	cmp	r4, #255	; 0xff
 801ca4a:	d021      	beq.n	801ca90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801ca4c:	9c07      	ldr	r4, [sp, #28]
 801ca4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ca52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ca54:	fb04 fc0c 	mul.w	ip, r4, ip
 801ca58:	9c07      	ldr	r4, [sp, #28]
 801ca5a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ca5e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ca62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ca64:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ca68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ca6c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ca70:	44e6      	add	lr, ip
 801ca72:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ca76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca7a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ca7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ca82:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ca86:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ca8a:	ea4e 040b 	orr.w	r4, lr, fp
 801ca8e:	9407      	str	r4, [sp, #28]
 801ca90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ca92:	2cff      	cmp	r4, #255	; 0xff
 801ca94:	d021      	beq.n	801cada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ca96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ca98:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ca9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ca9e:	fb04 fc0c 	mul.w	ip, r4, ip
 801caa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801caa4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801caa8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801caac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801caae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cab2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cab6:	fb04 fb0b 	mul.w	fp, r4, fp
 801caba:	44e6      	add	lr, ip
 801cabc:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801cac0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cac4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801cac8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cacc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801cad0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801cad4:	ea4e 040b 	orr.w	r4, lr, fp
 801cad8:	940b      	str	r4, [sp, #44]	; 0x2c
 801cada:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cadc:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801cae0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cae4:	2bff      	cmp	r3, #255	; 0xff
 801cae6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801caea:	9c07      	ldr	r4, [sp, #28]
 801caec:	fb09 fc0c 	mul.w	ip, r9, ip
 801caf0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801caf4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801caf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cafa:	fb00 cc0e 	mla	ip, r0, lr, ip
 801cafe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cb02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cb04:	fb0a cc0e 	mla	ip, sl, lr, ip
 801cb08:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cb0c:	fb09 f90e 	mul.w	r9, r9, lr
 801cb10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb14:	fb01 9202 	mla	r2, r1, r2, r9
 801cb18:	9907      	ldr	r1, [sp, #28]
 801cb1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cb1e:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801cb22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cb24:	fb00 220b 	mla	r2, r0, fp, r2
 801cb28:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801cb2c:	fb0a 2a00 	mla	sl, sl, r0, r2
 801cb30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb38:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cb3c:	fa5f f08c 	uxtb.w	r0, ip
 801cb40:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cb44:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cb48:	f000 80a2 	beq.w	801cc90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801cb4c:	43db      	mvns	r3, r3
 801cb4e:	783a      	ldrb	r2, [r7, #0]
 801cb50:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cb54:	b2db      	uxtb	r3, r3
 801cb56:	fb02 fe03 	mul.w	lr, r2, r3
 801cb5a:	fb0a fa03 	mul.w	sl, sl, r3
 801cb5e:	f10e 0201 	add.w	r2, lr, #1
 801cb62:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801cb66:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cb6a:	703a      	strb	r2, [r7, #0]
 801cb6c:	787a      	ldrb	r2, [r7, #1]
 801cb6e:	fb02 f003 	mul.w	r0, r2, r3
 801cb72:	f10a 0301 	add.w	r3, sl, #1
 801cb76:	1c42      	adds	r2, r0, #1
 801cb78:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801cb7c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801cb80:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801cb84:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cb88:	707a      	strb	r2, [r7, #1]
 801cb8a:	f887 c002 	strb.w	ip, [r7, #2]
 801cb8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cb90:	3703      	adds	r7, #3
 801cb92:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb96:	441d      	add	r5, r3
 801cb98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cb9a:	441e      	add	r6, r3
 801cb9c:	e6ab      	b.n	801c8f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801cb9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cba0:	441d      	add	r5, r3
 801cba2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cba4:	441e      	add	r6, r3
 801cba6:	9b06      	ldr	r3, [sp, #24]
 801cba8:	3b01      	subs	r3, #1
 801cbaa:	9306      	str	r3, [sp, #24]
 801cbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbae:	3303      	adds	r3, #3
 801cbb0:	9309      	str	r3, [sp, #36]	; 0x24
 801cbb2:	e680      	b.n	801c8b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cbb4:	d024      	beq.n	801cc00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801cbb6:	9b06      	ldr	r3, [sp, #24]
 801cbb8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801cbba:	3b01      	subs	r3, #1
 801cbbc:	fb00 5003 	mla	r0, r0, r3, r5
 801cbc0:	1400      	asrs	r0, r0, #16
 801cbc2:	f53f ae95 	bmi.w	801c8f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cbc6:	3901      	subs	r1, #1
 801cbc8:	4288      	cmp	r0, r1
 801cbca:	f6bf ae91 	bge.w	801c8f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cbce:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801cbd0:	fb01 6303 	mla	r3, r1, r3, r6
 801cbd4:	141b      	asrs	r3, r3, #16
 801cbd6:	f53f ae8b 	bmi.w	801c8f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cbda:	3a01      	subs	r2, #1
 801cbdc:	4293      	cmp	r3, r2
 801cbde:	f6bf ae87 	bge.w	801c8f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbe4:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cbe8:	1cdf      	adds	r7, r3, #3
 801cbea:	f1bb 0f00 	cmp.w	fp, #0
 801cbee:	dc6e      	bgt.n	801ccce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801cbf0:	9b06      	ldr	r3, [sp, #24]
 801cbf2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cbfc:	4423      	add	r3, r4
 801cbfe:	9309      	str	r3, [sp, #36]	; 0x24
 801cc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	f340 81b0 	ble.w	801cf68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801cc08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc0c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cc12:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cc16:	eef0 6a48 	vmov.f32	s13, s16
 801cc1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cc1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cc22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc26:	ee16 5a90 	vmov	r5, s13
 801cc2a:	eef0 6a68 	vmov.f32	s13, s17
 801cc2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc32:	ee16 6a90 	vmov	r6, s13
 801cc36:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cc3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cc3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cc42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cc46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cc4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cc4e:	ee18 2a10 	vmov	r2, s16
 801cc52:	eeb0 8a47 	vmov.f32	s16, s14
 801cc56:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc5a:	ee18 2a90 	vmov	r2, s17
 801cc5e:	932d      	str	r3, [sp, #180]	; 0xb4
 801cc60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc62:	eef0 8a67 	vmov.f32	s17, s15
 801cc66:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc6a:	932e      	str	r3, [sp, #184]	; 0xb8
 801cc6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cc70:	3b01      	subs	r3, #1
 801cc72:	9315      	str	r3, [sp, #84]	; 0x54
 801cc74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc76:	bf08      	it	eq
 801cc78:	4613      	moveq	r3, r2
 801cc7a:	9306      	str	r3, [sp, #24]
 801cc7c:	e60d      	b.n	801c89a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	f43f ae7d 	beq.w	801c97e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801cc84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cc88:	9307      	str	r3, [sp, #28]
 801cc8a:	0e1b      	lsrs	r3, r3, #24
 801cc8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc8e:	e676      	b.n	801c97e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801cc90:	7038      	strb	r0, [r7, #0]
 801cc92:	7079      	strb	r1, [r7, #1]
 801cc94:	e779      	b.n	801cb8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801cc96:	f112 0901 	adds.w	r9, r2, #1
 801cc9a:	f53f af78 	bmi.w	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cc9e:	454b      	cmp	r3, r9
 801cca0:	f6ff af75 	blt.w	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cca4:	f11c 0901 	adds.w	r9, ip, #1
 801cca8:	f53f af71 	bmi.w	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ccac:	45ce      	cmp	lr, r9
 801ccae:	f6ff af6e 	blt.w	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ccb2:	b21b      	sxth	r3, r3
 801ccb4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801ccb8:	fa0f f28e 	sxth.w	r2, lr
 801ccbc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801ccc0:	9200      	str	r2, [sp, #0]
 801ccc2:	4639      	mov	r1, r7
 801ccc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccc6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ccc8:	f7ff fc7c 	bl	801c5c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801cccc:	e75f      	b.n	801cb8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801ccce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ccd0:	1429      	asrs	r1, r5, #16
 801ccd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ccd4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ccd8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801ccdc:	1433      	asrs	r3, r6, #16
 801ccde:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cce2:	fb0c 1303 	mla	r3, ip, r3, r1
 801cce6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cce8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ccec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ccf0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ccf4:	2a00      	cmp	r2, #0
 801ccf6:	f000 8129 	beq.w	801cf4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801ccfa:	684c      	ldr	r4, [r1, #4]
 801ccfc:	940c      	str	r4, [sp, #48]	; 0x30
 801ccfe:	0e24      	lsrs	r4, r4, #24
 801cd00:	9413      	str	r4, [sp, #76]	; 0x4c
 801cd02:	b198      	cbz	r0, 801cd2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cd04:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801cd08:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cd0c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801cd10:	f10c 0c04 	add.w	ip, ip, #4
 801cd14:	eb01 080c 	add.w	r8, r1, ip
 801cd18:	f851 100c 	ldr.w	r1, [r1, ip]
 801cd1c:	9108      	str	r1, [sp, #32]
 801cd1e:	0e09      	lsrs	r1, r1, #24
 801cd20:	9110      	str	r1, [sp, #64]	; 0x40
 801cd22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cd26:	910d      	str	r1, [sp, #52]	; 0x34
 801cd28:	0e09      	lsrs	r1, r1, #24
 801cd2a:	9114      	str	r1, [sp, #80]	; 0x50
 801cd2c:	b292      	uxth	r2, r2
 801cd2e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cd30:	b280      	uxth	r0, r0
 801cd32:	fb02 f900 	mul.w	r9, r2, r0
 801cd36:	0112      	lsls	r2, r2, #4
 801cd38:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cd3c:	eba2 0809 	sub.w	r8, r2, r9
 801cd40:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801cd44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd46:	b280      	uxth	r0, r0
 801cd48:	fa1f f888 	uxth.w	r8, r8
 801cd4c:	1a09      	subs	r1, r1, r0
 801cd4e:	fb08 f202 	mul.w	r2, r8, r2
 801cd52:	b289      	uxth	r1, r1
 801cd54:	fb01 220e 	mla	r2, r1, lr, r2
 801cd58:	fb00 2204 	mla	r2, r0, r4, r2
 801cd5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cd5e:	fb09 2204 	mla	r2, r9, r4, r2
 801cd62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cd66:	2a00      	cmp	r2, #0
 801cd68:	f000 80e8 	beq.w	801cf3c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801cd6c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cd70:	d01b      	beq.n	801cdaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801cd72:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cd76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd7a:	fb0e fa0a 	mul.w	sl, lr, sl
 801cd7e:	fb0e fe03 	mul.w	lr, lr, r3
 801cd82:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cd86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cd8a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801cd8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cd92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cd96:	4453      	add	r3, sl
 801cd98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd9c:	0a1b      	lsrs	r3, r3, #8
 801cd9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cda2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cda6:	ea43 030c 	orr.w	r3, r3, ip
 801cdaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cdac:	2cff      	cmp	r4, #255	; 0xff
 801cdae:	d021      	beq.n	801cdf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801cdb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cdb2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cdb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cdb8:	fb04 fc0c 	mul.w	ip, r4, ip
 801cdbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cdbe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cdc2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cdc6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cdc8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cdcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cdd0:	fb04 fa0a 	mul.w	sl, r4, sl
 801cdd4:	44e6      	add	lr, ip
 801cdd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cdda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cdde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cde2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cde6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cdea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cdee:	ea4e 040a 	orr.w	r4, lr, sl
 801cdf2:	940c      	str	r4, [sp, #48]	; 0x30
 801cdf4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cdf6:	2cff      	cmp	r4, #255	; 0xff
 801cdf8:	d021      	beq.n	801ce3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801cdfa:	9c08      	ldr	r4, [sp, #32]
 801cdfc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ce00:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ce02:	fb04 fc0c 	mul.w	ip, r4, ip
 801ce06:	9c08      	ldr	r4, [sp, #32]
 801ce08:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ce0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ce0e:	fb04 fa0e 	mul.w	sl, r4, lr
 801ce12:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ce16:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ce1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce1e:	44e6      	add	lr, ip
 801ce20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ce24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ce38:	ea4e 040a 	orr.w	r4, lr, sl
 801ce3c:	9408      	str	r4, [sp, #32]
 801ce3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ce40:	2cff      	cmp	r4, #255	; 0xff
 801ce42:	d021      	beq.n	801ce88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801ce44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ce46:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ce4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ce4c:	fb04 fc0c 	mul.w	ip, r4, ip
 801ce50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ce52:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ce56:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ce5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ce5c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ce60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce64:	fb04 fa0a 	mul.w	sl, r4, sl
 801ce68:	44e6      	add	lr, ip
 801ce6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ce6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ce82:	ea4e 040a 	orr.w	r4, lr, sl
 801ce86:	940d      	str	r4, [sp, #52]	; 0x34
 801ce88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ce8a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ce8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ce92:	2aff      	cmp	r2, #255	; 0xff
 801ce94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ce98:	9c08      	ldr	r4, [sp, #32]
 801ce9a:	fb08 fc0c 	mul.w	ip, r8, ip
 801ce9e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801cea2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cea6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cea8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ceac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ceb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ceb2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ceb6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ceba:	fb08 f80e 	mul.w	r8, r8, lr
 801cebe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cec2:	fb01 8303 	mla	r3, r1, r3, r8
 801cec6:	9908      	ldr	r1, [sp, #32]
 801cec8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cecc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ced0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ced2:	fb00 330a 	mla	r3, r0, sl, r3
 801ced6:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ceda:	fb09 3e0e 	mla	lr, r9, lr, r3
 801cede:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cee2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cee6:	ea4c 0c0e 	orr.w	ip, ip, lr
 801ceea:	fa5f f08c 	uxtb.w	r0, ip
 801ceee:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cef2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cef6:	d032      	beq.n	801cf5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801cef8:	43d2      	mvns	r2, r2
 801cefa:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801cefe:	b2d2      	uxtb	r2, r2
 801cf00:	fb0e fe02 	mul.w	lr, lr, r2
 801cf04:	f10e 0301 	add.w	r3, lr, #1
 801cf08:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801cf0c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cf10:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801cf14:	4350      	muls	r0, r2
 801cf16:	f807 3c03 	strb.w	r3, [r7, #-3]
 801cf1a:	1c43      	adds	r3, r0, #1
 801cf1c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cf20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cf24:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801cf28:	4353      	muls	r3, r2
 801cf2a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cf2e:	1c5a      	adds	r2, r3, #1
 801cf30:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cf34:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801cf38:	f807 cc01 	strb.w	ip, [r7, #-1]
 801cf3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cf3e:	3703      	adds	r7, #3
 801cf40:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cf44:	441d      	add	r5, r3
 801cf46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cf48:	441e      	add	r6, r3
 801cf4a:	e64e      	b.n	801cbea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	f43f aeed 	beq.w	801cd2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cf52:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801cf56:	9108      	str	r1, [sp, #32]
 801cf58:	0e09      	lsrs	r1, r1, #24
 801cf5a:	9110      	str	r1, [sp, #64]	; 0x40
 801cf5c:	e6e6      	b.n	801cd2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cf5e:	f807 0c03 	strb.w	r0, [r7, #-3]
 801cf62:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cf66:	e7e7      	b.n	801cf38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801cf68:	b019      	add	sp, #100	; 0x64
 801cf6a:	ecbd 8b08 	vpop	{d8-d11}
 801cf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cf74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801cf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf78:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801cf7c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801cf80:	2800      	cmp	r0, #0
 801cf82:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801cf86:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801cf8a:	fb0c 0e03 	mla	lr, ip, r3, r0
 801cf8e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801cf92:	db6b      	blt.n	801d06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cf94:	4580      	cmp	r8, r0
 801cf96:	dd69      	ble.n	801d06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cf98:	f1bc 0f00 	cmp.w	ip, #0
 801cf9c:	db66      	blt.n	801d06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cf9e:	45e1      	cmp	r9, ip
 801cfa0:	dd64      	ble.n	801d06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cfa2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801cfa6:	f01e 0f01 	tst.w	lr, #1
 801cfaa:	5d16      	ldrb	r6, [r2, r4]
 801cfac:	bf0c      	ite	eq
 801cfae:	f006 060f 	andeq.w	r6, r6, #15
 801cfb2:	1136      	asrne	r6, r6, #4
 801cfb4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cfb8:	b2f6      	uxtb	r6, r6
 801cfba:	f110 0a01 	adds.w	sl, r0, #1
 801cfbe:	d457      	bmi.n	801d070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cfc0:	45d0      	cmp	r8, sl
 801cfc2:	dd55      	ble.n	801d070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cfc4:	f1bc 0f00 	cmp.w	ip, #0
 801cfc8:	db52      	blt.n	801d070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cfca:	45e1      	cmp	r9, ip
 801cfcc:	dd50      	ble.n	801d070 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cfce:	2f00      	cmp	r7, #0
 801cfd0:	f000 80ac 	beq.w	801d12c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801cfd4:	f10e 0b01 	add.w	fp, lr, #1
 801cfd8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801cfdc:	f01b 0f01 	tst.w	fp, #1
 801cfe0:	5d14      	ldrb	r4, [r2, r4]
 801cfe2:	bf0c      	ite	eq
 801cfe4:	f004 040f 	andeq.w	r4, r4, #15
 801cfe8:	1124      	asrne	r4, r4, #4
 801cfea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cfee:	b2e4      	uxtb	r4, r4
 801cff0:	2d00      	cmp	r5, #0
 801cff2:	f000 8096 	beq.w	801d122 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801cff6:	2800      	cmp	r0, #0
 801cff8:	f10c 0c01 	add.w	ip, ip, #1
 801cffc:	db3c      	blt.n	801d078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801cffe:	4580      	cmp	r8, r0
 801d000:	dd3a      	ble.n	801d078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801d002:	f1bc 0f00 	cmp.w	ip, #0
 801d006:	db37      	blt.n	801d078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801d008:	45e1      	cmp	r9, ip
 801d00a:	dd35      	ble.n	801d078 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801d00c:	eb03 0b0e 	add.w	fp, r3, lr
 801d010:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801d014:	f01b 0f01 	tst.w	fp, #1
 801d018:	5c10      	ldrb	r0, [r2, r0]
 801d01a:	bf0c      	ite	eq
 801d01c:	f000 000f 	andeq.w	r0, r0, #15
 801d020:	1100      	asrne	r0, r0, #4
 801d022:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d026:	b2c0      	uxtb	r0, r0
 801d028:	f1ba 0f00 	cmp.w	sl, #0
 801d02c:	db26      	blt.n	801d07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801d02e:	45d0      	cmp	r8, sl
 801d030:	dd24      	ble.n	801d07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801d032:	f1bc 0f00 	cmp.w	ip, #0
 801d036:	db21      	blt.n	801d07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801d038:	45e1      	cmp	r9, ip
 801d03a:	dd1f      	ble.n	801d07c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801d03c:	b307      	cbz	r7, 801d080 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801d03e:	3301      	adds	r3, #1
 801d040:	449e      	add	lr, r3
 801d042:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d046:	f01e 0f01 	tst.w	lr, #1
 801d04a:	5cd3      	ldrb	r3, [r2, r3]
 801d04c:	bf0c      	ite	eq
 801d04e:	f003 030f 	andeq.w	r3, r3, #15
 801d052:	111b      	asrne	r3, r3, #4
 801d054:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d058:	b2db      	uxtb	r3, r3
 801d05a:	2f0f      	cmp	r7, #15
 801d05c:	d911      	bls.n	801d082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801d05e:	4b35      	ldr	r3, [pc, #212]	; (801d134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801d060:	f240 1157 	movw	r1, #343	; 0x157
 801d064:	4a34      	ldr	r2, [pc, #208]	; (801d138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801d066:	4835      	ldr	r0, [pc, #212]	; (801d13c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801d068:	f002 fbae 	bl	801f7c8 <__assert_func>
 801d06c:	2600      	movs	r6, #0
 801d06e:	e7a4      	b.n	801cfba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801d070:	2400      	movs	r4, #0
 801d072:	e7bd      	b.n	801cff0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801d074:	463c      	mov	r4, r7
 801d076:	e7be      	b.n	801cff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801d078:	2000      	movs	r0, #0
 801d07a:	e7d5      	b.n	801d028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801d07c:	2300      	movs	r3, #0
 801d07e:	e7ec      	b.n	801d05a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801d080:	463b      	mov	r3, r7
 801d082:	2d0f      	cmp	r5, #15
 801d084:	d8eb      	bhi.n	801d05e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801d086:	b2bf      	uxth	r7, r7
 801d088:	b2ad      	uxth	r5, r5
 801d08a:	fb07 f205 	mul.w	r2, r7, r5
 801d08e:	013f      	lsls	r7, r7, #4
 801d090:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801d094:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801d098:	1abf      	subs	r7, r7, r2
 801d09a:	b2ad      	uxth	r5, r5
 801d09c:	b2bf      	uxth	r7, r7
 801d09e:	ebac 0c05 	sub.w	ip, ip, r5
 801d0a2:	437c      	muls	r4, r7
 801d0a4:	fa1f fc8c 	uxth.w	ip, ip
 801d0a8:	fb06 440c 	mla	r4, r6, ip, r4
 801d0ac:	fb05 4400 	mla	r4, r5, r0, r4
 801d0b0:	fb02 4203 	mla	r2, r2, r3, r4
 801d0b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d0b8:	b38a      	cbz	r2, 801d11e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801d0ba:	4b21      	ldr	r3, [pc, #132]	; (801d140 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801d0bc:	681c      	ldr	r4, [r3, #0]
 801d0be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801d0c2:	b2e5      	uxtb	r5, r4
 801d0c4:	4353      	muls	r3, r2
 801d0c6:	1c5a      	adds	r2, r3, #1
 801d0c8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d0cc:	1212      	asrs	r2, r2, #8
 801d0ce:	b290      	uxth	r0, r2
 801d0d0:	43d2      	mvns	r2, r2
 801d0d2:	fb15 f500 	smulbb	r5, r5, r0
 801d0d6:	b2d3      	uxtb	r3, r2
 801d0d8:	780a      	ldrb	r2, [r1, #0]
 801d0da:	fb02 5203 	mla	r2, r2, r3, r5
 801d0de:	b292      	uxth	r2, r2
 801d0e0:	1c55      	adds	r5, r2, #1
 801d0e2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801d0e6:	784d      	ldrb	r5, [r1, #1]
 801d0e8:	fb15 f503 	smulbb	r5, r5, r3
 801d0ec:	1212      	asrs	r2, r2, #8
 801d0ee:	700a      	strb	r2, [r1, #0]
 801d0f0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801d0f4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d0f8:	fb02 5200 	mla	r2, r2, r0, r5
 801d0fc:	b292      	uxth	r2, r2
 801d0fe:	1c55      	adds	r5, r2, #1
 801d100:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801d104:	1212      	asrs	r2, r2, #8
 801d106:	704a      	strb	r2, [r1, #1]
 801d108:	788a      	ldrb	r2, [r1, #2]
 801d10a:	fb12 f303 	smulbb	r3, r2, r3
 801d10e:	fb04 3300 	mla	r3, r4, r0, r3
 801d112:	b29b      	uxth	r3, r3
 801d114:	1c5a      	adds	r2, r3, #1
 801d116:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d11a:	121b      	asrs	r3, r3, #8
 801d11c:	708b      	strb	r3, [r1, #2]
 801d11e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d122:	2f0f      	cmp	r7, #15
 801d124:	d89b      	bhi.n	801d05e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801d126:	462b      	mov	r3, r5
 801d128:	4628      	mov	r0, r5
 801d12a:	e7ac      	b.n	801d086 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801d12c:	2d00      	cmp	r5, #0
 801d12e:	d1a1      	bne.n	801d074 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801d130:	462c      	mov	r4, r5
 801d132:	e7f8      	b.n	801d126 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801d134:	0802453f 	.word	0x0802453f
 801d138:	080249f6 	.word	0x080249f6
 801d13c:	080245c7 	.word	0x080245c7
 801d140:	2400ea18 	.word	0x2400ea18

0801d144 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d148:	ed2d 8b08 	vpush	{d8-d11}
 801d14c:	b097      	sub	sp, #92	; 0x5c
 801d14e:	eeb0 aa40 	vmov.f32	s20, s0
 801d152:	eef0 9a60 	vmov.f32	s19, s1
 801d156:	9214      	str	r2, [sp, #80]	; 0x50
 801d158:	eeb0 9a41 	vmov.f32	s18, s2
 801d15c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d15e:	eeb0 8a62 	vmov.f32	s16, s5
 801d162:	9309      	str	r3, [sp, #36]	; 0x24
 801d164:	eef0 8a43 	vmov.f32	s17, s6
 801d168:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d16c:	eef0 ba44 	vmov.f32	s23, s8
 801d170:	9015      	str	r0, [sp, #84]	; 0x54
 801d172:	eeb0 ba64 	vmov.f32	s22, s9
 801d176:	6850      	ldr	r0, [r2, #4]
 801d178:	eef0 aa45 	vmov.f32	s21, s10
 801d17c:	910c      	str	r1, [sp, #48]	; 0x30
 801d17e:	930e      	str	r3, [sp, #56]	; 0x38
 801d180:	6812      	ldr	r2, [r2, #0]
 801d182:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d186:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801d18a:	fb00 1303 	mla	r3, r0, r3, r1
 801d18e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d192:	eb02 0a03 	add.w	sl, r2, r3
 801d196:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d198:	689b      	ldr	r3, [r3, #8]
 801d19a:	3301      	adds	r3, #1
 801d19c:	f023 0301 	bic.w	r3, r3, #1
 801d1a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801d1a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d1a4:	681f      	ldr	r7, [r3, #0]
 801d1a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	dc03      	bgt.n	801d1b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d1ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	f340 8247 	ble.w	801d642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801d1b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d1b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d1ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d1be:	1e48      	subs	r0, r1, #1
 801d1c0:	f102 3cff 	add.w	ip, r2, #4294967295
 801d1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	f340 80e5 	ble.w	801d396 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d1cc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801d1d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d1d4:	d406      	bmi.n	801d1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d1d6:	4586      	cmp	lr, r0
 801d1d8:	da04      	bge.n	801d1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	db02      	blt.n	801d1e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d1de:	4563      	cmp	r3, ip
 801d1e0:	f2c0 80da 	blt.w	801d398 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d1e4:	f11e 0e01 	adds.w	lr, lr, #1
 801d1e8:	f100 80cb 	bmi.w	801d382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d1ec:	4571      	cmp	r1, lr
 801d1ee:	f2c0 80c8 	blt.w	801d382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d1f2:	3301      	adds	r3, #1
 801d1f4:	f100 80c5 	bmi.w	801d382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d1f8:	429a      	cmp	r2, r3
 801d1fa:	f2c0 80c2 	blt.w	801d382 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d200:	46d0      	mov	r8, sl
 801d202:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d206:	930d      	str	r3, [sp, #52]	; 0x34
 801d208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	f340 80e3 	ble.w	801d3d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d210:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d212:	1430      	asrs	r0, r6, #16
 801d214:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d218:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d21c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d220:	142b      	asrs	r3, r5, #16
 801d222:	f100 812e 	bmi.w	801d482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d226:	f10c 3bff 	add.w	fp, ip, #4294967295
 801d22a:	455b      	cmp	r3, fp
 801d22c:	f280 8129 	bge.w	801d482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d230:	2800      	cmp	r0, #0
 801d232:	f2c0 8126 	blt.w	801d482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d236:	f10e 3bff 	add.w	fp, lr, #4294967295
 801d23a:	4558      	cmp	r0, fp
 801d23c:	f280 8121 	bge.w	801d482 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d240:	fb00 3309 	mla	r3, r0, r9, r3
 801d244:	0858      	lsrs	r0, r3, #1
 801d246:	07dc      	lsls	r4, r3, #31
 801d248:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d24c:	bf54      	ite	pl
 801d24e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d252:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d256:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d25a:	fa5f fc8c 	uxtb.w	ip, ip
 801d25e:	2a00      	cmp	r2, #0
 801d260:	f000 80fe 	beq.w	801d460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d264:	1c58      	adds	r0, r3, #1
 801d266:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d26a:	07c0      	lsls	r0, r0, #31
 801d26c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d270:	bf54      	ite	pl
 801d272:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d276:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d27a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d27e:	fa5f f08e 	uxtb.w	r0, lr
 801d282:	9010      	str	r0, [sp, #64]	; 0x40
 801d284:	b1d9      	cbz	r1, 801d2be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d286:	444b      	add	r3, r9
 801d288:	0858      	lsrs	r0, r3, #1
 801d28a:	07dc      	lsls	r4, r3, #31
 801d28c:	f103 0301 	add.w	r3, r3, #1
 801d290:	5c38      	ldrb	r0, [r7, r0]
 801d292:	bf54      	ite	pl
 801d294:	f000 000f 	andpl.w	r0, r0, #15
 801d298:	1100      	asrmi	r0, r0, #4
 801d29a:	07dc      	lsls	r4, r3, #31
 801d29c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d2a0:	b2c0      	uxtb	r0, r0
 801d2a2:	900a      	str	r0, [sp, #40]	; 0x28
 801d2a4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801d2a8:	f817 e000 	ldrb.w	lr, [r7, r0]
 801d2ac:	bf54      	ite	pl
 801d2ae:	f00e 030f 	andpl.w	r3, lr, #15
 801d2b2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801d2b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d2ba:	b2db      	uxtb	r3, r3
 801d2bc:	9311      	str	r3, [sp, #68]	; 0x44
 801d2be:	b292      	uxth	r2, r2
 801d2c0:	b289      	uxth	r1, r1
 801d2c2:	0113      	lsls	r3, r2, #4
 801d2c4:	fb02 f001 	mul.w	r0, r2, r1
 801d2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2ca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d2ce:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801d2d2:	1a1b      	subs	r3, r3, r0
 801d2d4:	b289      	uxth	r1, r1
 801d2d6:	b29b      	uxth	r3, r3
 801d2d8:	ebae 0e01 	sub.w	lr, lr, r1
 801d2dc:	4353      	muls	r3, r2
 801d2de:	fa1f fe8e 	uxth.w	lr, lr
 801d2e2:	fb0c 320e 	mla	r2, ip, lr, r3
 801d2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2e8:	fb01 2203 	mla	r2, r1, r3, r2
 801d2ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d2ee:	fb00 2203 	mla	r2, r0, r3, r2
 801d2f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d2f6:	2a00      	cmp	r2, #0
 801d2f8:	d039      	beq.n	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2fa:	4bc7      	ldr	r3, [pc, #796]	; (801d618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d2fc:	6819      	ldr	r1, [r3, #0]
 801d2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d300:	fa5f fc81 	uxtb.w	ip, r1
 801d304:	435a      	muls	r2, r3
 801d306:	1c53      	adds	r3, r2, #1
 801d308:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d30c:	1212      	asrs	r2, r2, #8
 801d30e:	b290      	uxth	r0, r2
 801d310:	43d2      	mvns	r2, r2
 801d312:	fb1c fc00 	smulbb	ip, ip, r0
 801d316:	b2d3      	uxtb	r3, r2
 801d318:	f898 2000 	ldrb.w	r2, [r8]
 801d31c:	fb02 c203 	mla	r2, r2, r3, ip
 801d320:	b292      	uxth	r2, r2
 801d322:	f102 0c01 	add.w	ip, r2, #1
 801d326:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d32a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d32e:	fb1c fc03 	smulbb	ip, ip, r3
 801d332:	1212      	asrs	r2, r2, #8
 801d334:	f888 2000 	strb.w	r2, [r8]
 801d338:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801d33c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801d340:	fb02 c200 	mla	r2, r2, r0, ip
 801d344:	b292      	uxth	r2, r2
 801d346:	f102 0c01 	add.w	ip, r2, #1
 801d34a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d34e:	1212      	asrs	r2, r2, #8
 801d350:	f888 2001 	strb.w	r2, [r8, #1]
 801d354:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d358:	fb12 f303 	smulbb	r3, r2, r3
 801d35c:	fb01 3300 	mla	r3, r1, r0, r3
 801d360:	b29b      	uxth	r3, r3
 801d362:	1c5a      	adds	r2, r3, #1
 801d364:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d368:	121b      	asrs	r3, r3, #8
 801d36a:	f888 3002 	strb.w	r3, [r8, #2]
 801d36e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d370:	f108 0803 	add.w	r8, r8, #3
 801d374:	441d      	add	r5, r3
 801d376:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d378:	441e      	add	r6, r3
 801d37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d37c:	3b01      	subs	r3, #1
 801d37e:	930d      	str	r3, [sp, #52]	; 0x34
 801d380:	e742      	b.n	801d208 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801d382:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d384:	f10a 0a03 	add.w	sl, sl, #3
 801d388:	441d      	add	r5, r3
 801d38a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d38c:	441e      	add	r6, r3
 801d38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d390:	3b01      	subs	r3, #1
 801d392:	9309      	str	r3, [sp, #36]	; 0x24
 801d394:	e716      	b.n	801d1c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d396:	d024      	beq.n	801d3e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d39a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d39c:	3b01      	subs	r3, #1
 801d39e:	fb00 5003 	mla	r0, r0, r3, r5
 801d3a2:	1400      	asrs	r0, r0, #16
 801d3a4:	f53f af2b 	bmi.w	801d1fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d3a8:	3901      	subs	r1, #1
 801d3aa:	4288      	cmp	r0, r1
 801d3ac:	f6bf af27 	bge.w	801d1fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d3b0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d3b2:	fb01 6303 	mla	r3, r1, r3, r6
 801d3b6:	141b      	asrs	r3, r3, #16
 801d3b8:	f53f af21 	bmi.w	801d1fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d3bc:	3a01      	subs	r2, #1
 801d3be:	4293      	cmp	r3, r2
 801d3c0:	f6bf af1d 	bge.w	801d1fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d3c4:	f10a 0e03 	add.w	lr, sl, #3
 801d3c8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801d3cc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d3d0:	f1b8 0f00 	cmp.w	r8, #0
 801d3d4:	dc76      	bgt.n	801d4c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801d3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d3dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d3e0:	44a2      	add	sl, r4
 801d3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	f340 812c 	ble.w	801d642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801d3ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d3ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3f0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d3f4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d3f8:	eef0 6a48 	vmov.f32	s13, s16
 801d3fc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d400:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d404:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d408:	ee16 5a90 	vmov	r5, s13
 801d40c:	eef0 6a68 	vmov.f32	s13, s17
 801d410:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d414:	ee16 6a90 	vmov	r6, s13
 801d418:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d41c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d420:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d424:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d428:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d42c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d430:	ee18 2a10 	vmov	r2, s16
 801d434:	eeb0 8a47 	vmov.f32	s16, s14
 801d438:	fb92 f3f3 	sdiv	r3, r2, r3
 801d43c:	ee18 2a90 	vmov	r2, s17
 801d440:	932b      	str	r3, [sp, #172]	; 0xac
 801d442:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d444:	eef0 8a67 	vmov.f32	s17, s15
 801d448:	fb92 f3f3 	sdiv	r3, r2, r3
 801d44c:	932c      	str	r3, [sp, #176]	; 0xb0
 801d44e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d452:	3b01      	subs	r3, #1
 801d454:	930c      	str	r3, [sp, #48]	; 0x30
 801d456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d458:	bf08      	it	eq
 801d45a:	4613      	moveq	r3, r2
 801d45c:	9309      	str	r3, [sp, #36]	; 0x24
 801d45e:	e6a2      	b.n	801d1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d460:	2900      	cmp	r1, #0
 801d462:	f43f af2c 	beq.w	801d2be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d466:	eb09 0003 	add.w	r0, r9, r3
 801d46a:	0843      	lsrs	r3, r0, #1
 801d46c:	07c0      	lsls	r0, r0, #31
 801d46e:	5cfb      	ldrb	r3, [r7, r3]
 801d470:	bf54      	ite	pl
 801d472:	f003 030f 	andpl.w	r3, r3, #15
 801d476:	111b      	asrmi	r3, r3, #4
 801d478:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d47c:	b2db      	uxtb	r3, r3
 801d47e:	930a      	str	r3, [sp, #40]	; 0x28
 801d480:	e71d      	b.n	801d2be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d482:	f113 0b01 	adds.w	fp, r3, #1
 801d486:	f53f af72 	bmi.w	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d48a:	45dc      	cmp	ip, fp
 801d48c:	f6ff af6f 	blt.w	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d490:	f110 0b01 	adds.w	fp, r0, #1
 801d494:	f53f af6b 	bmi.w	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d498:	45de      	cmp	lr, fp
 801d49a:	f6ff af68 	blt.w	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d49e:	9302      	str	r3, [sp, #8]
 801d4a0:	fa0f f38e 	sxth.w	r3, lr
 801d4a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d4a6:	9301      	str	r3, [sp, #4]
 801d4a8:	fa0f f38c 	sxth.w	r3, ip
 801d4ac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d4b0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d4b4:	9300      	str	r3, [sp, #0]
 801d4b6:	463a      	mov	r2, r7
 801d4b8:	464b      	mov	r3, r9
 801d4ba:	4641      	mov	r1, r8
 801d4bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d4be:	f7ff fd59 	bl	801cf74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801d4c2:	e754      	b.n	801d36e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d4c4:	142a      	asrs	r2, r5, #16
 801d4c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d4ca:	1433      	asrs	r3, r6, #16
 801d4cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d4d0:	fb09 2303 	mla	r3, r9, r3, r2
 801d4d4:	085a      	lsrs	r2, r3, #1
 801d4d6:	07dc      	lsls	r4, r3, #31
 801d4d8:	5cba      	ldrb	r2, [r7, r2]
 801d4da:	bf54      	ite	pl
 801d4dc:	f002 020f 	andpl.w	r2, r2, #15
 801d4e0:	1112      	asrmi	r2, r2, #4
 801d4e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4e6:	b2d2      	uxtb	r2, r2
 801d4e8:	2900      	cmp	r1, #0
 801d4ea:	f000 8097 	beq.w	801d61c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d4ee:	f103 0b01 	add.w	fp, r3, #1
 801d4f2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801d4f6:	f01b 0f01 	tst.w	fp, #1
 801d4fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d4fe:	bf0c      	ite	eq
 801d500:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d504:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d508:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d50c:	fa5f f48c 	uxtb.w	r4, ip
 801d510:	9412      	str	r4, [sp, #72]	; 0x48
 801d512:	b300      	cbz	r0, 801d556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d514:	444b      	add	r3, r9
 801d516:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d51a:	07dc      	lsls	r4, r3, #31
 801d51c:	f103 0301 	add.w	r3, r3, #1
 801d520:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d524:	bf54      	ite	pl
 801d526:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d52a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d52e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d532:	fa5f f48c 	uxtb.w	r4, ip
 801d536:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d53a:	940b      	str	r4, [sp, #44]	; 0x2c
 801d53c:	07dc      	lsls	r4, r3, #31
 801d53e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d542:	bf54      	ite	pl
 801d544:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d548:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d54c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d550:	fa5f f38c 	uxtb.w	r3, ip
 801d554:	9313      	str	r3, [sp, #76]	; 0x4c
 801d556:	b289      	uxth	r1, r1
 801d558:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d55a:	b280      	uxth	r0, r0
 801d55c:	fb01 f300 	mul.w	r3, r1, r0
 801d560:	0109      	lsls	r1, r1, #4
 801d562:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d566:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d56a:	1ac9      	subs	r1, r1, r3
 801d56c:	b280      	uxth	r0, r0
 801d56e:	b289      	uxth	r1, r1
 801d570:	ebac 0c00 	sub.w	ip, ip, r0
 801d574:	4361      	muls	r1, r4
 801d576:	fa1f fc8c 	uxth.w	ip, ip
 801d57a:	fb02 120c 	mla	r2, r2, ip, r1
 801d57e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d580:	fb00 2001 	mla	r0, r0, r1, r2
 801d584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d586:	fb03 0302 	mla	r3, r3, r2, r0
 801d58a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d039      	beq.n	801d606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d592:	4a21      	ldr	r2, [pc, #132]	; (801d618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d594:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d598:	6810      	ldr	r0, [r2, #0]
 801d59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d59c:	fa5f fc80 	uxtb.w	ip, r0
 801d5a0:	4353      	muls	r3, r2
 801d5a2:	1c5a      	adds	r2, r3, #1
 801d5a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d5a8:	121b      	asrs	r3, r3, #8
 801d5aa:	b29a      	uxth	r2, r3
 801d5ac:	43db      	mvns	r3, r3
 801d5ae:	fb1c fc02 	smulbb	ip, ip, r2
 801d5b2:	b2db      	uxtb	r3, r3
 801d5b4:	fb01 c103 	mla	r1, r1, r3, ip
 801d5b8:	b289      	uxth	r1, r1
 801d5ba:	f101 0c01 	add.w	ip, r1, #1
 801d5be:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d5c2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d5c6:	fb1c fc03 	smulbb	ip, ip, r3
 801d5ca:	1209      	asrs	r1, r1, #8
 801d5cc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d5d0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d5d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d5d8:	fb01 c102 	mla	r1, r1, r2, ip
 801d5dc:	b289      	uxth	r1, r1
 801d5de:	f101 0c01 	add.w	ip, r1, #1
 801d5e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d5e6:	1209      	asrs	r1, r1, #8
 801d5e8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d5ec:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d5f0:	fb11 f303 	smulbb	r3, r1, r3
 801d5f4:	fb00 3002 	mla	r0, r0, r2, r3
 801d5f8:	b280      	uxth	r0, r0
 801d5fa:	1c42      	adds	r2, r0, #1
 801d5fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d600:	1200      	asrs	r0, r0, #8
 801d602:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d606:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d608:	f10e 0e03 	add.w	lr, lr, #3
 801d60c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d610:	441d      	add	r5, r3
 801d612:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d614:	441e      	add	r6, r3
 801d616:	e6db      	b.n	801d3d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d618:	2400ea18 	.word	0x2400ea18
 801d61c:	2800      	cmp	r0, #0
 801d61e:	d09a      	beq.n	801d556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d620:	444b      	add	r3, r9
 801d622:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d626:	07db      	lsls	r3, r3, #31
 801d628:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d62c:	bf54      	ite	pl
 801d62e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d632:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d636:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d63a:	fa5f f38c 	uxtb.w	r3, ip
 801d63e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d640:	e789      	b.n	801d556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d642:	b017      	add	sp, #92	; 0x5c
 801d644:	ecbd 8b08 	vpop	{d8-d11}
 801d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d64c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d650:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801d654:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d658:	2800      	cmp	r0, #0
 801d65a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801d65e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801d662:	fb0c 0e03 	mla	lr, ip, r3, r0
 801d666:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801d66a:	db6b      	blt.n	801d744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d66c:	4580      	cmp	r8, r0
 801d66e:	dd69      	ble.n	801d744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d670:	f1bc 0f00 	cmp.w	ip, #0
 801d674:	db66      	blt.n	801d744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d676:	45e1      	cmp	r9, ip
 801d678:	dd64      	ble.n	801d744 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d67a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801d67e:	f01e 0f01 	tst.w	lr, #1
 801d682:	5d16      	ldrb	r6, [r2, r4]
 801d684:	bf0c      	ite	eq
 801d686:	f006 060f 	andeq.w	r6, r6, #15
 801d68a:	1136      	asrne	r6, r6, #4
 801d68c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d690:	b2f6      	uxtb	r6, r6
 801d692:	f110 0a01 	adds.w	sl, r0, #1
 801d696:	d457      	bmi.n	801d748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d698:	45d0      	cmp	r8, sl
 801d69a:	dd55      	ble.n	801d748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d69c:	f1bc 0f00 	cmp.w	ip, #0
 801d6a0:	db52      	blt.n	801d748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d6a2:	45e1      	cmp	r9, ip
 801d6a4:	dd50      	ble.n	801d748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d6a6:	2f00      	cmp	r7, #0
 801d6a8:	f000 80a5 	beq.w	801d7f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801d6ac:	f10e 0b01 	add.w	fp, lr, #1
 801d6b0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801d6b4:	f01b 0f01 	tst.w	fp, #1
 801d6b8:	5d14      	ldrb	r4, [r2, r4]
 801d6ba:	bf0c      	ite	eq
 801d6bc:	f004 040f 	andeq.w	r4, r4, #15
 801d6c0:	1124      	asrne	r4, r4, #4
 801d6c2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d6c6:	b2e4      	uxtb	r4, r4
 801d6c8:	2d00      	cmp	r5, #0
 801d6ca:	f000 808f 	beq.w	801d7ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801d6ce:	2800      	cmp	r0, #0
 801d6d0:	f10c 0c01 	add.w	ip, ip, #1
 801d6d4:	db3c      	blt.n	801d750 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d6d6:	4580      	cmp	r8, r0
 801d6d8:	dd3a      	ble.n	801d750 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d6da:	f1bc 0f00 	cmp.w	ip, #0
 801d6de:	db37      	blt.n	801d750 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d6e0:	45e1      	cmp	r9, ip
 801d6e2:	dd35      	ble.n	801d750 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d6e4:	eb03 0b0e 	add.w	fp, r3, lr
 801d6e8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801d6ec:	f01b 0f01 	tst.w	fp, #1
 801d6f0:	5c10      	ldrb	r0, [r2, r0]
 801d6f2:	bf0c      	ite	eq
 801d6f4:	f000 000f 	andeq.w	r0, r0, #15
 801d6f8:	1100      	asrne	r0, r0, #4
 801d6fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d6fe:	b2c0      	uxtb	r0, r0
 801d700:	f1ba 0f00 	cmp.w	sl, #0
 801d704:	db26      	blt.n	801d754 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d706:	45d0      	cmp	r8, sl
 801d708:	dd24      	ble.n	801d754 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d70a:	f1bc 0f00 	cmp.w	ip, #0
 801d70e:	db21      	blt.n	801d754 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d710:	45e1      	cmp	r9, ip
 801d712:	dd1f      	ble.n	801d754 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d714:	b307      	cbz	r7, 801d758 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801d716:	3301      	adds	r3, #1
 801d718:	449e      	add	lr, r3
 801d71a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d71e:	f01e 0f01 	tst.w	lr, #1
 801d722:	5cd3      	ldrb	r3, [r2, r3]
 801d724:	bf0c      	ite	eq
 801d726:	f003 030f 	andeq.w	r3, r3, #15
 801d72a:	111b      	asrne	r3, r3, #4
 801d72c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d730:	b2db      	uxtb	r3, r3
 801d732:	2f0f      	cmp	r7, #15
 801d734:	d911      	bls.n	801d75a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801d736:	4b32      	ldr	r3, [pc, #200]	; (801d800 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801d738:	f240 1157 	movw	r1, #343	; 0x157
 801d73c:	4a31      	ldr	r2, [pc, #196]	; (801d804 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801d73e:	4832      	ldr	r0, [pc, #200]	; (801d808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801d740:	f002 f842 	bl	801f7c8 <__assert_func>
 801d744:	2600      	movs	r6, #0
 801d746:	e7a4      	b.n	801d692 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801d748:	2400      	movs	r4, #0
 801d74a:	e7bd      	b.n	801d6c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801d74c:	463c      	mov	r4, r7
 801d74e:	e7be      	b.n	801d6ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801d750:	2000      	movs	r0, #0
 801d752:	e7d5      	b.n	801d700 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801d754:	2300      	movs	r3, #0
 801d756:	e7ec      	b.n	801d732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801d758:	463b      	mov	r3, r7
 801d75a:	2d0f      	cmp	r5, #15
 801d75c:	d8eb      	bhi.n	801d736 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d75e:	b2bf      	uxth	r7, r7
 801d760:	b2ad      	uxth	r5, r5
 801d762:	fb07 f205 	mul.w	r2, r7, r5
 801d766:	013f      	lsls	r7, r7, #4
 801d768:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801d76c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801d770:	1abf      	subs	r7, r7, r2
 801d772:	b2ad      	uxth	r5, r5
 801d774:	b2bf      	uxth	r7, r7
 801d776:	ebac 0c05 	sub.w	ip, ip, r5
 801d77a:	437c      	muls	r4, r7
 801d77c:	fa1f fc8c 	uxth.w	ip, ip
 801d780:	fb06 440c 	mla	r4, r6, ip, r4
 801d784:	fb05 4400 	mla	r4, r5, r0, r4
 801d788:	fb02 4303 	mla	r3, r2, r3, r4
 801d78c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d790:	b353      	cbz	r3, 801d7e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801d792:	4a1e      	ldr	r2, [pc, #120]	; (801d80c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801d794:	7808      	ldrb	r0, [r1, #0]
 801d796:	6814      	ldr	r4, [r2, #0]
 801d798:	b29a      	uxth	r2, r3
 801d79a:	43db      	mvns	r3, r3
 801d79c:	b2e5      	uxtb	r5, r4
 801d79e:	b2db      	uxtb	r3, r3
 801d7a0:	fb15 f502 	smulbb	r5, r5, r2
 801d7a4:	fb00 5003 	mla	r0, r0, r3, r5
 801d7a8:	b280      	uxth	r0, r0
 801d7aa:	1c45      	adds	r5, r0, #1
 801d7ac:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d7b0:	784d      	ldrb	r5, [r1, #1]
 801d7b2:	fb15 f503 	smulbb	r5, r5, r3
 801d7b6:	1200      	asrs	r0, r0, #8
 801d7b8:	7008      	strb	r0, [r1, #0]
 801d7ba:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d7be:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d7c2:	fb00 5002 	mla	r0, r0, r2, r5
 801d7c6:	b280      	uxth	r0, r0
 801d7c8:	1c45      	adds	r5, r0, #1
 801d7ca:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d7ce:	1200      	asrs	r0, r0, #8
 801d7d0:	7048      	strb	r0, [r1, #1]
 801d7d2:	7888      	ldrb	r0, [r1, #2]
 801d7d4:	fb10 f303 	smulbb	r3, r0, r3
 801d7d8:	fb04 3202 	mla	r2, r4, r2, r3
 801d7dc:	b292      	uxth	r2, r2
 801d7de:	1c53      	adds	r3, r2, #1
 801d7e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d7e4:	1212      	asrs	r2, r2, #8
 801d7e6:	708a      	strb	r2, [r1, #2]
 801d7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ec:	2f0f      	cmp	r7, #15
 801d7ee:	d8a2      	bhi.n	801d736 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d7f0:	462b      	mov	r3, r5
 801d7f2:	4628      	mov	r0, r5
 801d7f4:	e7b3      	b.n	801d75e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801d7f6:	2d00      	cmp	r5, #0
 801d7f8:	d1a8      	bne.n	801d74c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801d7fa:	462c      	mov	r4, r5
 801d7fc:	e7f8      	b.n	801d7f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801d7fe:	bf00      	nop
 801d800:	0802453f 	.word	0x0802453f
 801d804:	080249f6 	.word	0x080249f6
 801d808:	080245c7 	.word	0x080245c7
 801d80c:	2400ea18 	.word	0x2400ea18

0801d810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d814:	ed2d 8b08 	vpush	{d8-d11}
 801d818:	b093      	sub	sp, #76	; 0x4c
 801d81a:	461c      	mov	r4, r3
 801d81c:	eeb0 aa40 	vmov.f32	s20, s0
 801d820:	920c      	str	r2, [sp, #48]	; 0x30
 801d822:	eef0 9a60 	vmov.f32	s19, s1
 801d826:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d828:	eeb0 9a41 	vmov.f32	s18, s2
 801d82c:	9011      	str	r0, [sp, #68]	; 0x44
 801d82e:	eeb0 8a62 	vmov.f32	s16, s5
 801d832:	6850      	ldr	r0, [r2, #4]
 801d834:	eef0 8a43 	vmov.f32	s17, s6
 801d838:	9107      	str	r1, [sp, #28]
 801d83a:	eef0 ba44 	vmov.f32	s23, s8
 801d83e:	6812      	ldr	r2, [r2, #0]
 801d840:	eeb0 ba64 	vmov.f32	s22, s9
 801d844:	eef0 aa45 	vmov.f32	s21, s10
 801d848:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d84c:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801d850:	fb00 1303 	mla	r3, r0, r3, r1
 801d854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d858:	eb02 0b03 	add.w	fp, r2, r3
 801d85c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d85e:	689b      	ldr	r3, [r3, #8]
 801d860:	3301      	adds	r3, #1
 801d862:	f023 0301 	bic.w	r3, r3, #1
 801d866:	9309      	str	r3, [sp, #36]	; 0x24
 801d868:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d86a:	f8d3 8000 	ldr.w	r8, [r3]
 801d86e:	9b07      	ldr	r3, [sp, #28]
 801d870:	2b00      	cmp	r3, #0
 801d872:	dc03      	bgt.n	801d87c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d876:	2b00      	cmp	r3, #0
 801d878:	f340 822b 	ble.w	801dcd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d87c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d87e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d882:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d886:	1e48      	subs	r0, r1, #1
 801d888:	1e57      	subs	r7, r2, #1
 801d88a:	2c00      	cmp	r4, #0
 801d88c:	f340 80d7 	ble.w	801da3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801d890:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d894:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d898:	d406      	bmi.n	801d8a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d89a:	4584      	cmp	ip, r0
 801d89c:	da04      	bge.n	801d8a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	db02      	blt.n	801d8a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d8a2:	42bb      	cmp	r3, r7
 801d8a4:	f2c0 80cc 	blt.w	801da40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d8a8:	f11c 0c01 	adds.w	ip, ip, #1
 801d8ac:	f100 80bf 	bmi.w	801da2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d8b0:	4561      	cmp	r1, ip
 801d8b2:	f2c0 80bc 	blt.w	801da2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d8b6:	3301      	adds	r3, #1
 801d8b8:	f100 80b9 	bmi.w	801da2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d8bc:	429a      	cmp	r2, r3
 801d8be:	f2c0 80b6 	blt.w	801da2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d8c2:	46a2      	mov	sl, r4
 801d8c4:	465f      	mov	r7, fp
 801d8c6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d8ca:	f1ba 0f00 	cmp.w	sl, #0
 801d8ce:	f340 80d4 	ble.w	801da7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d8d2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d8d6:	1430      	asrs	r0, r6, #16
 801d8d8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d8dc:	9308      	str	r3, [sp, #32]
 801d8de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d8e0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d8e4:	142b      	asrs	r3, r5, #16
 801d8e6:	f100 8124 	bmi.w	801db32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8ea:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d8ee:	4293      	cmp	r3, r2
 801d8f0:	f280 811f 	bge.w	801db32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8f4:	2800      	cmp	r0, #0
 801d8f6:	f2c0 811c 	blt.w	801db32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8fa:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d8fe:	4290      	cmp	r0, r2
 801d900:	f280 8117 	bge.w	801db32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d904:	fb00 3309 	mla	r3, r0, r9, r3
 801d908:	0858      	lsrs	r0, r3, #1
 801d90a:	07da      	lsls	r2, r3, #31
 801d90c:	9a08      	ldr	r2, [sp, #32]
 801d90e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d912:	bf54      	ite	pl
 801d914:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d918:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d91c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d920:	fa5f fc8c 	uxtb.w	ip, ip
 801d924:	2a00      	cmp	r2, #0
 801d926:	f000 80ed 	beq.w	801db04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d92a:	1c58      	adds	r0, r3, #1
 801d92c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d930:	07c0      	lsls	r0, r0, #31
 801d932:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d936:	bf54      	ite	pl
 801d938:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d93c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d940:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d944:	fa5f fe8e 	uxtb.w	lr, lr
 801d948:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d94c:	b1c9      	cbz	r1, 801d982 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d94e:	444b      	add	r3, r9
 801d950:	0858      	lsrs	r0, r3, #1
 801d952:	07da      	lsls	r2, r3, #31
 801d954:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d958:	bf54      	ite	pl
 801d95a:	f000 000f 	andpl.w	r0, r0, #15
 801d95e:	1100      	asrmi	r0, r0, #4
 801d960:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d964:	b2c0      	uxtb	r0, r0
 801d966:	900a      	str	r0, [sp, #40]	; 0x28
 801d968:	1c58      	adds	r0, r3, #1
 801d96a:	0843      	lsrs	r3, r0, #1
 801d96c:	07c2      	lsls	r2, r0, #31
 801d96e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d972:	bf54      	ite	pl
 801d974:	f003 030f 	andpl.w	r3, r3, #15
 801d978:	111b      	asrmi	r3, r3, #4
 801d97a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d97e:	b2db      	uxtb	r3, r3
 801d980:	930e      	str	r3, [sp, #56]	; 0x38
 801d982:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d986:	b289      	uxth	r1, r1
 801d988:	fb02 f301 	mul.w	r3, r2, r1
 801d98c:	0112      	lsls	r2, r2, #4
 801d98e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d992:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d996:	1ad2      	subs	r2, r2, r3
 801d998:	b289      	uxth	r1, r1
 801d99a:	b292      	uxth	r2, r2
 801d99c:	1a40      	subs	r0, r0, r1
 801d99e:	fa1f fe80 	uxth.w	lr, r0
 801d9a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d9a4:	4342      	muls	r2, r0
 801d9a6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9ac:	fb01 c102 	mla	r1, r1, r2, ip
 801d9b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d9b2:	fb03 1302 	mla	r3, r3, r2, r1
 801d9b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d9ba:	b383      	cbz	r3, 801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d9bc:	4ac7      	ldr	r2, [pc, #796]	; (801dcdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801d9be:	2bff      	cmp	r3, #255	; 0xff
 801d9c0:	6812      	ldr	r2, [r2, #0]
 801d9c2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d9c6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d9ca:	b2d2      	uxtb	r2, r2
 801d9cc:	f000 80ac 	beq.w	801db28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801d9d0:	b299      	uxth	r1, r3
 801d9d2:	43db      	mvns	r3, r3
 801d9d4:	f897 c000 	ldrb.w	ip, [r7]
 801d9d8:	fb12 f201 	smulbb	r2, r2, r1
 801d9dc:	b2db      	uxtb	r3, r3
 801d9de:	fb10 f001 	smulbb	r0, r0, r1
 801d9e2:	fb0c 2203 	mla	r2, ip, r3, r2
 801d9e6:	fb1e f101 	smulbb	r1, lr, r1
 801d9ea:	b292      	uxth	r2, r2
 801d9ec:	f102 0c01 	add.w	ip, r2, #1
 801d9f0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d9f4:	1212      	asrs	r2, r2, #8
 801d9f6:	703a      	strb	r2, [r7, #0]
 801d9f8:	787a      	ldrb	r2, [r7, #1]
 801d9fa:	fb02 0003 	mla	r0, r2, r3, r0
 801d9fe:	b280      	uxth	r0, r0
 801da00:	1c42      	adds	r2, r0, #1
 801da02:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801da06:	78ba      	ldrb	r2, [r7, #2]
 801da08:	fb02 1303 	mla	r3, r2, r3, r1
 801da0c:	1200      	asrs	r0, r0, #8
 801da0e:	b29b      	uxth	r3, r3
 801da10:	7078      	strb	r0, [r7, #1]
 801da12:	f103 0e01 	add.w	lr, r3, #1
 801da16:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801da1a:	121b      	asrs	r3, r3, #8
 801da1c:	70bb      	strb	r3, [r7, #2]
 801da1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801da20:	3703      	adds	r7, #3
 801da22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da26:	441d      	add	r5, r3
 801da28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da2a:	441e      	add	r6, r3
 801da2c:	e74d      	b.n	801d8ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801da2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801da30:	3c01      	subs	r4, #1
 801da32:	f10b 0b03 	add.w	fp, fp, #3
 801da36:	441d      	add	r5, r3
 801da38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da3a:	441e      	add	r6, r3
 801da3c:	e725      	b.n	801d88a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801da3e:	d021      	beq.n	801da84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801da40:	1e63      	subs	r3, r4, #1
 801da42:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801da44:	fb00 5003 	mla	r0, r0, r3, r5
 801da48:	1400      	asrs	r0, r0, #16
 801da4a:	f53f af3a 	bmi.w	801d8c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801da4e:	3901      	subs	r1, #1
 801da50:	4288      	cmp	r0, r1
 801da52:	f6bf af36 	bge.w	801d8c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801da56:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801da58:	fb01 6303 	mla	r3, r1, r3, r6
 801da5c:	141b      	asrs	r3, r3, #16
 801da5e:	f53f af30 	bmi.w	801d8c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801da62:	3a01      	subs	r2, #1
 801da64:	4293      	cmp	r3, r2
 801da66:	f6bf af2c 	bge.w	801d8c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801da6a:	f10b 0c03 	add.w	ip, fp, #3
 801da6e:	46a6      	mov	lr, r4
 801da70:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801da74:	f1be 0f00 	cmp.w	lr, #0
 801da78:	dc79      	bgt.n	801db6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801da7a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801da7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801da82:	44a3      	add	fp, r4
 801da84:	9b07      	ldr	r3, [sp, #28]
 801da86:	2b00      	cmp	r3, #0
 801da88:	f340 8123 	ble.w	801dcd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801da8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da92:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801da96:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801da9a:	eef0 6a48 	vmov.f32	s13, s16
 801da9e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801daa2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801daa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daaa:	ee16 5a90 	vmov	r5, s13
 801daae:	eef0 6a68 	vmov.f32	s13, s17
 801dab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dab6:	ee16 6a90 	vmov	r6, s13
 801daba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dabe:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dac2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dac6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801daca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dace:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dad2:	ee18 2a10 	vmov	r2, s16
 801dad6:	eeb0 8a47 	vmov.f32	s16, s14
 801dada:	fb92 f3f3 	sdiv	r3, r2, r3
 801dade:	ee18 2a90 	vmov	r2, s17
 801dae2:	9327      	str	r3, [sp, #156]	; 0x9c
 801dae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dae6:	eef0 8a67 	vmov.f32	s17, s15
 801daea:	fb92 f3f3 	sdiv	r3, r2, r3
 801daee:	9328      	str	r3, [sp, #160]	; 0xa0
 801daf0:	9b07      	ldr	r3, [sp, #28]
 801daf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801daf4:	3b01      	subs	r3, #1
 801daf6:	9307      	str	r3, [sp, #28]
 801daf8:	bf08      	it	eq
 801dafa:	4614      	moveq	r4, r2
 801dafc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dafe:	bf18      	it	ne
 801db00:	461c      	movne	r4, r3
 801db02:	e6b4      	b.n	801d86e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801db04:	2900      	cmp	r1, #0
 801db06:	f43f af3c 	beq.w	801d982 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801db0a:	eb09 0003 	add.w	r0, r9, r3
 801db0e:	0843      	lsrs	r3, r0, #1
 801db10:	07c0      	lsls	r0, r0, #31
 801db12:	f818 3003 	ldrb.w	r3, [r8, r3]
 801db16:	bf54      	ite	pl
 801db18:	f003 030f 	andpl.w	r3, r3, #15
 801db1c:	111b      	asrmi	r3, r3, #4
 801db1e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801db22:	b2db      	uxtb	r3, r3
 801db24:	930a      	str	r3, [sp, #40]	; 0x28
 801db26:	e72c      	b.n	801d982 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801db28:	703a      	strb	r2, [r7, #0]
 801db2a:	7078      	strb	r0, [r7, #1]
 801db2c:	f887 e002 	strb.w	lr, [r7, #2]
 801db30:	e775      	b.n	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db32:	1c5a      	adds	r2, r3, #1
 801db34:	f53f af73 	bmi.w	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db38:	4594      	cmp	ip, r2
 801db3a:	f6ff af70 	blt.w	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db3e:	1c42      	adds	r2, r0, #1
 801db40:	f53f af6d 	bmi.w	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db44:	4596      	cmp	lr, r2
 801db46:	f6ff af6a 	blt.w	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db4a:	9302      	str	r3, [sp, #8]
 801db4c:	fa0f f38e 	sxth.w	r3, lr
 801db50:	9a08      	ldr	r2, [sp, #32]
 801db52:	9301      	str	r3, [sp, #4]
 801db54:	fa0f f38c 	sxth.w	r3, ip
 801db58:	9105      	str	r1, [sp, #20]
 801db5a:	4639      	mov	r1, r7
 801db5c:	9300      	str	r3, [sp, #0]
 801db5e:	464b      	mov	r3, r9
 801db60:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801db64:	4642      	mov	r2, r8
 801db66:	9811      	ldr	r0, [sp, #68]	; 0x44
 801db68:	f7ff fd70 	bl	801d64c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801db6c:	e757      	b.n	801da1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801db6e:	142a      	asrs	r2, r5, #16
 801db70:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801db74:	1433      	asrs	r3, r6, #16
 801db76:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801db7a:	fb09 2303 	mla	r3, r9, r3, r2
 801db7e:	085a      	lsrs	r2, r3, #1
 801db80:	07d9      	lsls	r1, r3, #31
 801db82:	f818 2002 	ldrb.w	r2, [r8, r2]
 801db86:	bf54      	ite	pl
 801db88:	f002 020f 	andpl.w	r2, r2, #15
 801db8c:	1112      	asrmi	r2, r2, #4
 801db8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801db92:	b2d2      	uxtb	r2, r2
 801db94:	2800      	cmp	r0, #0
 801db96:	f000 8085 	beq.w	801dca4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801db9a:	f103 0a01 	add.w	sl, r3, #1
 801db9e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801dba2:	f01a 0f01 	tst.w	sl, #1
 801dba6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dbaa:	bf0c      	ite	eq
 801dbac:	f001 010f 	andeq.w	r1, r1, #15
 801dbb0:	1109      	asrne	r1, r1, #4
 801dbb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801dbb6:	b2c9      	uxtb	r1, r1
 801dbb8:	910f      	str	r1, [sp, #60]	; 0x3c
 801dbba:	b1df      	cbz	r7, 801dbf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dbbc:	444b      	add	r3, r9
 801dbbe:	0859      	lsrs	r1, r3, #1
 801dbc0:	f013 0f01 	tst.w	r3, #1
 801dbc4:	f103 0301 	add.w	r3, r3, #1
 801dbc8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dbcc:	bf0c      	ite	eq
 801dbce:	f001 010f 	andeq.w	r1, r1, #15
 801dbd2:	1109      	asrne	r1, r1, #4
 801dbd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801dbd8:	b2c9      	uxtb	r1, r1
 801dbda:	910b      	str	r1, [sp, #44]	; 0x2c
 801dbdc:	0859      	lsrs	r1, r3, #1
 801dbde:	07db      	lsls	r3, r3, #31
 801dbe0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dbe4:	bf54      	ite	pl
 801dbe6:	f001 010f 	andpl.w	r1, r1, #15
 801dbea:	1109      	asrmi	r1, r1, #4
 801dbec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801dbf0:	b2c9      	uxtb	r1, r1
 801dbf2:	9110      	str	r1, [sp, #64]	; 0x40
 801dbf4:	b280      	uxth	r0, r0
 801dbf6:	b2bf      	uxth	r7, r7
 801dbf8:	fb00 f307 	mul.w	r3, r0, r7
 801dbfc:	0100      	lsls	r0, r0, #4
 801dbfe:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801dc02:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801dc06:	1ac0      	subs	r0, r0, r3
 801dc08:	b2bf      	uxth	r7, r7
 801dc0a:	b280      	uxth	r0, r0
 801dc0c:	1bc9      	subs	r1, r1, r7
 801dc0e:	fa1f fa81 	uxth.w	sl, r1
 801dc12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801dc14:	4348      	muls	r0, r1
 801dc16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dc18:	fb02 020a 	mla	r2, r2, sl, r0
 801dc1c:	fb07 2701 	mla	r7, r7, r1, r2
 801dc20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc22:	fb03 7302 	mla	r3, r3, r2, r7
 801dc26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dc2a:	b393      	cbz	r3, 801dc92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801dc2c:	4a2b      	ldr	r2, [pc, #172]	; (801dcdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801dc2e:	2bff      	cmp	r3, #255	; 0xff
 801dc30:	6811      	ldr	r1, [r2, #0]
 801dc32:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801dc36:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801dc3a:	b2c9      	uxtb	r1, r1
 801dc3c:	d042      	beq.n	801dcc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801dc3e:	b298      	uxth	r0, r3
 801dc40:	43db      	mvns	r3, r3
 801dc42:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801dc46:	fb11 f100 	smulbb	r1, r1, r0
 801dc4a:	b2db      	uxtb	r3, r3
 801dc4c:	fb17 f700 	smulbb	r7, r7, r0
 801dc50:	fb02 1103 	mla	r1, r2, r3, r1
 801dc54:	fb1a f000 	smulbb	r0, sl, r0
 801dc58:	b289      	uxth	r1, r1
 801dc5a:	1c4a      	adds	r2, r1, #1
 801dc5c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801dc60:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801dc64:	fb02 7703 	mla	r7, r2, r3, r7
 801dc68:	1209      	asrs	r1, r1, #8
 801dc6a:	b2bf      	uxth	r7, r7
 801dc6c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801dc70:	1c7a      	adds	r2, r7, #1
 801dc72:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801dc76:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801dc7a:	fb02 0303 	mla	r3, r2, r3, r0
 801dc7e:	123f      	asrs	r7, r7, #8
 801dc80:	b29b      	uxth	r3, r3
 801dc82:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801dc86:	1c5a      	adds	r2, r3, #1
 801dc88:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dc8c:	121b      	asrs	r3, r3, #8
 801dc8e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801dc92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dc94:	f10c 0c03 	add.w	ip, ip, #3
 801dc98:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dc9c:	441d      	add	r5, r3
 801dc9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dca0:	441e      	add	r6, r3
 801dca2:	e6e7      	b.n	801da74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801dca4:	2f00      	cmp	r7, #0
 801dca6:	d0a5      	beq.n	801dbf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dca8:	444b      	add	r3, r9
 801dcaa:	0859      	lsrs	r1, r3, #1
 801dcac:	07db      	lsls	r3, r3, #31
 801dcae:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dcb2:	bf54      	ite	pl
 801dcb4:	f001 010f 	andpl.w	r1, r1, #15
 801dcb8:	1109      	asrmi	r1, r1, #4
 801dcba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801dcbe:	b2c9      	uxtb	r1, r1
 801dcc0:	910b      	str	r1, [sp, #44]	; 0x2c
 801dcc2:	e797      	b.n	801dbf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dcc4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801dcc8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801dccc:	f80c ac01 	strb.w	sl, [ip, #-1]
 801dcd0:	e7df      	b.n	801dc92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801dcd2:	b013      	add	sp, #76	; 0x4c
 801dcd4:	ecbd 8b08 	vpop	{d8-d11}
 801dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcdc:	2400ea18 	.word	0x2400ea18

0801dce0 <CRC_Lock>:
 801dce0:	4a20      	ldr	r2, [pc, #128]	; (801dd64 <CRC_Lock+0x84>)
 801dce2:	b530      	push	{r4, r5, lr}
 801dce4:	6813      	ldr	r3, [r2, #0]
 801dce6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801dcea:	f24c 2540 	movw	r5, #49728	; 0xc240
 801dcee:	f023 0301 	bic.w	r3, r3, #1
 801dcf2:	6013      	str	r3, [r2, #0]
 801dcf4:	4b1c      	ldr	r3, [pc, #112]	; (801dd68 <CRC_Lock+0x88>)
 801dcf6:	681a      	ldr	r2, [r3, #0]
 801dcf8:	4022      	ands	r2, r4
 801dcfa:	42aa      	cmp	r2, r5
 801dcfc:	d005      	beq.n	801dd0a <CRC_Lock+0x2a>
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	f24c 2270 	movw	r2, #49776	; 0xc270
 801dd04:	4023      	ands	r3, r4
 801dd06:	4293      	cmp	r3, r2
 801dd08:	d124      	bne.n	801dd54 <CRC_Lock+0x74>
 801dd0a:	4b18      	ldr	r3, [pc, #96]	; (801dd6c <CRC_Lock+0x8c>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	bb0b      	cbnz	r3, 801dd54 <CRC_Lock+0x74>
 801dd10:	4b17      	ldr	r3, [pc, #92]	; (801dd70 <CRC_Lock+0x90>)
 801dd12:	681a      	ldr	r2, [r3, #0]
 801dd14:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801dd18:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801dd1c:	d00d      	beq.n	801dd3a <CRC_Lock+0x5a>
 801dd1e:	681a      	ldr	r2, [r3, #0]
 801dd20:	f240 4483 	movw	r4, #1155	; 0x483
 801dd24:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801dd28:	42a2      	cmp	r2, r4
 801dd2a:	d006      	beq.n	801dd3a <CRC_Lock+0x5a>
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	f240 4285 	movw	r2, #1157	; 0x485
 801dd32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dd36:	4293      	cmp	r3, r2
 801dd38:	d10c      	bne.n	801dd54 <CRC_Lock+0x74>
 801dd3a:	4b0e      	ldr	r3, [pc, #56]	; (801dd74 <CRC_Lock+0x94>)
 801dd3c:	2201      	movs	r2, #1
 801dd3e:	601a      	str	r2, [r3, #0]
 801dd40:	681a      	ldr	r2, [r3, #0]
 801dd42:	2a00      	cmp	r2, #0
 801dd44:	d1fc      	bne.n	801dd40 <CRC_Lock+0x60>
 801dd46:	4b0c      	ldr	r3, [pc, #48]	; (801dd78 <CRC_Lock+0x98>)
 801dd48:	6018      	str	r0, [r3, #0]
 801dd4a:	6818      	ldr	r0, [r3, #0]
 801dd4c:	1a43      	subs	r3, r0, r1
 801dd4e:	4258      	negs	r0, r3
 801dd50:	4158      	adcs	r0, r3
 801dd52:	bd30      	pop	{r4, r5, pc}
 801dd54:	4b09      	ldr	r3, [pc, #36]	; (801dd7c <CRC_Lock+0x9c>)
 801dd56:	2201      	movs	r2, #1
 801dd58:	601a      	str	r2, [r3, #0]
 801dd5a:	681a      	ldr	r2, [r3, #0]
 801dd5c:	2a00      	cmp	r2, #0
 801dd5e:	d1fc      	bne.n	801dd5a <CRC_Lock+0x7a>
 801dd60:	4b07      	ldr	r3, [pc, #28]	; (801dd80 <CRC_Lock+0xa0>)
 801dd62:	e7f1      	b.n	801dd48 <CRC_Lock+0x68>
 801dd64:	e0002000 	.word	0xe0002000
 801dd68:	e000ed00 	.word	0xe000ed00
 801dd6c:	e0042000 	.word	0xe0042000
 801dd70:	5c001000 	.word	0x5c001000
 801dd74:	58024c08 	.word	0x58024c08
 801dd78:	58024c00 	.word	0x58024c00
 801dd7c:	40023008 	.word	0x40023008
 801dd80:	40023000 	.word	0x40023000

0801dd84 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801dd84:	6101      	str	r1, [r0, #16]
 801dd86:	4770      	bx	lr

0801dd88 <_ZN8touchgfx8Gestures4tickEv>:
 801dd88:	7b83      	ldrb	r3, [r0, #14]
 801dd8a:	b14b      	cbz	r3, 801dda0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801dd8c:	8903      	ldrh	r3, [r0, #8]
 801dd8e:	3301      	adds	r3, #1
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	2b07      	cmp	r3, #7
 801dd94:	8103      	strh	r3, [r0, #8]
 801dd96:	bf81      	itttt	hi
 801dd98:	2300      	movhi	r3, #0
 801dd9a:	8143      	strhhi	r3, [r0, #10]
 801dd9c:	8183      	strhhi	r3, [r0, #12]
 801dd9e:	7383      	strbhi	r3, [r0, #14]
 801dda0:	4770      	bx	lr
	...

0801dda4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801dda4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801dda8:	4604      	mov	r4, r0
 801ddaa:	4698      	mov	r8, r3
 801ddac:	8880      	ldrh	r0, [r0, #4]
 801ddae:	4617      	mov	r7, r2
 801ddb0:	4b1d      	ldr	r3, [pc, #116]	; (801de28 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801ddb2:	460e      	mov	r6, r1
 801ddb4:	f8ad 0006 	strh.w	r0, [sp, #6]
 801ddb8:	eba8 0000 	sub.w	r0, r8, r0
 801ddbc:	9300      	str	r3, [sp, #0]
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	b280      	uxth	r0, r0
 801ddc2:	8aa2      	ldrh	r2, [r4, #20]
 801ddc4:	f88d 3004 	strb.w	r3, [sp, #4]
 801ddc8:	b203      	sxth	r3, r0
 801ddca:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ddce:	88e1      	ldrh	r1, [r4, #6]
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ddd6:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ddda:	bfb8      	it	lt
 801dddc:	4240      	neglt	r0, r0
 801ddde:	f8ad 500c 	strh.w	r5, [sp, #12]
 801dde2:	bfb8      	it	lt
 801dde4:	b203      	sxthlt	r3, r0
 801dde6:	4293      	cmp	r3, r2
 801dde8:	dc08      	bgt.n	801ddfc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ddea:	1a69      	subs	r1, r5, r1
 801ddec:	b289      	uxth	r1, r1
 801ddee:	b20b      	sxth	r3, r1
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	bfbc      	itt	lt
 801ddf4:	4249      	neglt	r1, r1
 801ddf6:	b20b      	sxthlt	r3, r1
 801ddf8:	429a      	cmp	r2, r3
 801ddfa:	da13      	bge.n	801de24 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801ddfc:	6920      	ldr	r0, [r4, #16]
 801ddfe:	4669      	mov	r1, sp
 801de00:	eba8 0606 	sub.w	r6, r8, r6
 801de04:	1bef      	subs	r7, r5, r7
 801de06:	6803      	ldr	r3, [r0, #0]
 801de08:	685b      	ldr	r3, [r3, #4]
 801de0a:	4798      	blx	r3
 801de0c:	2300      	movs	r3, #0
 801de0e:	2001      	movs	r0, #1
 801de10:	8166      	strh	r6, [r4, #10]
 801de12:	8123      	strh	r3, [r4, #8]
 801de14:	81a7      	strh	r7, [r4, #12]
 801de16:	f8a4 8004 	strh.w	r8, [r4, #4]
 801de1a:	80e5      	strh	r5, [r4, #6]
 801de1c:	73a0      	strb	r0, [r4, #14]
 801de1e:	b004      	add	sp, #16
 801de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de24:	2000      	movs	r0, #0
 801de26:	e7fa      	b.n	801de1e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801de28:	080239f8 	.word	0x080239f8

0801de2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801de2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de2e:	461e      	mov	r6, r3
 801de30:	1e4b      	subs	r3, r1, #1
 801de32:	b085      	sub	sp, #20
 801de34:	4604      	mov	r4, r0
 801de36:	2b01      	cmp	r3, #1
 801de38:	460d      	mov	r5, r1
 801de3a:	4617      	mov	r7, r2
 801de3c:	d84b      	bhi.n	801ded6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801de3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801de42:	1cd3      	adds	r3, r2, #3
 801de44:	b29b      	uxth	r3, r3
 801de46:	2b06      	cmp	r3, #6
 801de48:	d916      	bls.n	801de78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801de4a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801deec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801de4e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801de52:	f8cd c004 	str.w	ip, [sp, #4]
 801de56:	f04f 0c00 	mov.w	ip, #0
 801de5a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801de5e:	6900      	ldr	r0, [r0, #16]
 801de60:	f8ad 100c 	strh.w	r1, [sp, #12]
 801de64:	a901      	add	r1, sp, #4
 801de66:	f88d c008 	strb.w	ip, [sp, #8]
 801de6a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801de6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801de72:	6803      	ldr	r3, [r0, #0]
 801de74:	689b      	ldr	r3, [r3, #8]
 801de76:	4798      	blx	r3
 801de78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801de7c:	1cd3      	adds	r3, r2, #3
 801de7e:	b29b      	uxth	r3, r3
 801de80:	2b06      	cmp	r3, #6
 801de82:	d916      	bls.n	801deb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801de84:	f8df c064 	ldr.w	ip, [pc, #100]	; 801deec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801de88:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801de8c:	f8cd c004 	str.w	ip, [sp, #4]
 801de90:	f04f 0c01 	mov.w	ip, #1
 801de94:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801de98:	6920      	ldr	r0, [r4, #16]
 801de9a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801de9e:	a901      	add	r1, sp, #4
 801dea0:	f88d c008 	strb.w	ip, [sp, #8]
 801dea4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dea8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801deac:	6803      	ldr	r3, [r0, #0]
 801deae:	689b      	ldr	r3, [r3, #8]
 801deb0:	4798      	blx	r3
 801deb2:	4b0d      	ldr	r3, [pc, #52]	; (801dee8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801deb4:	a901      	add	r1, sp, #4
 801deb6:	6920      	ldr	r0, [r4, #16]
 801deb8:	9301      	str	r3, [sp, #4]
 801deba:	2300      	movs	r3, #0
 801debc:	f88d 5008 	strb.w	r5, [sp, #8]
 801dec0:	f8ad 700a 	strh.w	r7, [sp, #10]
 801dec4:	f8ad 600c 	strh.w	r6, [sp, #12]
 801dec8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801decc:	6803      	ldr	r3, [r0, #0]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	4798      	blx	r3
 801ded2:	b005      	add	sp, #20
 801ded4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ded6:	2900      	cmp	r1, #0
 801ded8:	d1eb      	bne.n	801deb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801deda:	80a2      	strh	r2, [r4, #4]
 801dedc:	80c6      	strh	r6, [r0, #6]
 801dede:	60a1      	str	r1, [r4, #8]
 801dee0:	81a1      	strh	r1, [r4, #12]
 801dee2:	73a1      	strb	r1, [r4, #14]
 801dee4:	e7e5      	b.n	801deb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dee6:	bf00      	nop
 801dee8:	080239e4 	.word	0x080239e4
 801deec:	08023a0c 	.word	0x08023a0c

0801def0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 801def0:	10c9      	asrs	r1, r1, #3
 801def2:	2900      	cmp	r1, #0
 801def4:	bfb8      	it	lt
 801def6:	4249      	neglt	r1, r1
 801def8:	2801      	cmp	r0, #1
 801defa:	d108      	bne.n	801df0e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801defc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801df00:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801df04:	4601      	mov	r1, r0
 801df06:	dd02      	ble.n	801df0e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801df08:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801df0c:	4770      	bx	lr
 801df0e:	29ff      	cmp	r1, #255	; 0xff
 801df10:	bfa8      	it	ge
 801df12:	21ff      	movge	r1, #255	; 0xff
 801df14:	4608      	mov	r0, r1
 801df16:	4770      	bx	lr

0801df18 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 801df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df1c:	688c      	ldr	r4, [r1, #8]
 801df1e:	b087      	sub	sp, #28
 801df20:	4607      	mov	r7, r0
 801df22:	2c00      	cmp	r4, #0
 801df24:	db2b      	blt.n	801df7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801df26:	6803      	ldr	r3, [r0, #0]
 801df28:	691a      	ldr	r2, [r3, #16]
 801df2a:	42a2      	cmp	r2, r4
 801df2c:	dd27      	ble.n	801df7e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801df2e:	685a      	ldr	r2, [r3, #4]
 801df30:	695e      	ldr	r6, [r3, #20]
 801df32:	68cd      	ldr	r5, [r1, #12]
 801df34:	fb06 2604 	mla	r6, r6, r4, r2
 801df38:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801df3c:	698a      	ldr	r2, [r1, #24]
 801df3e:	f893 a008 	ldrb.w	sl, [r3, #8]
 801df42:	f8d1 8020 	ldr.w	r8, [r1, #32]
 801df46:	9205      	str	r2, [sp, #20]
 801df48:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 801df4c:	9b05      	ldr	r3, [sp, #20]
 801df4e:	6839      	ldr	r1, [r7, #0]
 801df50:	eb03 0c02 	add.w	ip, r3, r2
 801df54:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 801df58:	68c9      	ldr	r1, [r1, #12]
 801df5a:	1898      	adds	r0, r3, r2
 801df5c:	4288      	cmp	r0, r1
 801df5e:	db02      	blt.n	801df66 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 801df60:	1a8b      	subs	r3, r1, r2
 801df62:	2b00      	cmp	r3, #0
 801df64:	dd09      	ble.n	801df7a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 801df66:	6878      	ldr	r0, [r7, #4]
 801df68:	6801      	ldr	r1, [r0, #0]
 801df6a:	9400      	str	r4, [sp, #0]
 801df6c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 801df70:	4653      	mov	r3, sl
 801df72:	f8d1 b008 	ldr.w	fp, [r1, #8]
 801df76:	4631      	mov	r1, r6
 801df78:	47d8      	blx	fp
 801df7a:	3d01      	subs	r5, #1
 801df7c:	d1e4      	bne.n	801df48 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 801df7e:	b007      	add	sp, #28
 801df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df84 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801df84:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801df88:	b90b      	cbnz	r3, 801df8e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 801df8a:	f001 b9b1 	b.w	801f2f0 <_ZN8touchgfx7Outline6lineToEii>
 801df8e:	4770      	bx	lr

0801df90 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801df90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df94:	4604      	mov	r4, r0
 801df96:	2600      	movs	r6, #0
 801df98:	4b8f      	ldr	r3, [pc, #572]	; (801e1d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 801df9a:	f100 0518 	add.w	r5, r0, #24
 801df9e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 801dfa2:	b086      	sub	sp, #24
 801dfa4:	4690      	mov	r8, r2
 801dfa6:	e9c0 3100 	strd	r3, r1, [r0]
 801dfaa:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801dfae:	e9c0 6604 	strd	r6, r6, [r0, #16]
 801dfb2:	4628      	mov	r0, r5
 801dfb4:	f001 fbc0 	bl	801f738 <_ZN8touchgfx15RenderingBufferC1Ev>
 801dfb8:	4638      	mov	r0, r7
 801dfba:	f000 fb65 	bl	801e688 <_ZN8touchgfx7OutlineC1Ev>
 801dfbe:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801dfc2:	f001 fb61 	bl	801f688 <_ZN8touchgfx8ScanlineC1Ev>
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 801dfcc:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 801dfd0:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 801dfd4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801dfd8:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 801dfdc:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801dfe0:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 801dfe4:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 801dfe8:	f7f2 ff32 	bl	8010e50 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 801dfec:	b928      	cbnz	r0, 801dffa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 801dfee:	4b7b      	ldr	r3, [pc, #492]	; (801e1dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 801dff0:	212d      	movs	r1, #45	; 0x2d
 801dff2:	4a7b      	ldr	r2, [pc, #492]	; (801e1e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801dff4:	487b      	ldr	r0, [pc, #492]	; (801e1e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 801dff6:	f001 fbe7 	bl	801f7c8 <__assert_func>
 801dffa:	f9b8 2000 	ldrsh.w	r2, [r8]
 801dffe:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801e002:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801e006:	4410      	add	r0, r2
 801e008:	9602      	str	r6, [sp, #8]
 801e00a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801e00e:	b280      	uxth	r0, r0
 801e010:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801e014:	fa0f fa80 	sxth.w	sl, r0
 801e018:	f1ba 0f00 	cmp.w	sl, #0
 801e01c:	dd70      	ble.n	801e100 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801e01e:	4591      	cmp	r9, r2
 801e020:	dd6e      	ble.n	801e100 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801e022:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801e026:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801e02a:	440b      	add	r3, r1
 801e02c:	b29b      	uxth	r3, r3
 801e02e:	b21e      	sxth	r6, r3
 801e030:	2e00      	cmp	r6, #0
 801e032:	dd65      	ble.n	801e100 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801e034:	458e      	cmp	lr, r1
 801e036:	dd63      	ble.n	801e100 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801e038:	45d1      	cmp	r9, sl
 801e03a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e03e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801e042:	bfb8      	it	lt
 801e044:	fa1f f089 	uxthlt.w	r0, r9
 801e048:	45b6      	cmp	lr, r6
 801e04a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801e04e:	bfb8      	it	lt
 801e050:	fa1f f38e 	uxthlt.w	r3, lr
 801e054:	1a80      	subs	r0, r0, r2
 801e056:	f8ad 100a 	strh.w	r1, [sp, #10]
 801e05a:	1a5b      	subs	r3, r3, r1
 801e05c:	f8ad 000c 	strh.w	r0, [sp, #12]
 801e060:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e064:	f10d 0808 	add.w	r8, sp, #8
 801e068:	ae04      	add	r6, sp, #16
 801e06a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e06e:	e886 0003 	stmia.w	r6, {r0, r1}
 801e072:	f8dc 3000 	ldr.w	r3, [ip]
 801e076:	4660      	mov	r0, ip
 801e078:	4631      	mov	r1, r6
 801e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e07c:	4798      	blx	r3
 801e07e:	6861      	ldr	r1, [r4, #4]
 801e080:	4640      	mov	r0, r8
 801e082:	3104      	adds	r1, #4
 801e084:	f7f4 fa1e 	bl	80124c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e088:	4630      	mov	r0, r6
 801e08a:	f7f4 f9f3 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e08e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801e092:	f7f2 fe6d 	bl	8010d70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 801e096:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 801e09a:	4638      	mov	r0, r7
 801e09c:	f000 facf 	bl	801e63e <_ZN8touchgfx7Outline5resetEv>
 801e0a0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801e0a4:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801e0a8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801e0ac:	015b      	lsls	r3, r3, #5
 801e0ae:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 801e0b2:	0152      	lsls	r2, r2, #5
 801e0b4:	60e3      	str	r3, [r4, #12]
 801e0b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e0ba:	60a2      	str	r2, [r4, #8]
 801e0bc:	015b      	lsls	r3, r3, #5
 801e0be:	6123      	str	r3, [r4, #16]
 801e0c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e0c4:	015b      	lsls	r3, r3, #5
 801e0c6:	6163      	str	r3, [r4, #20]
 801e0c8:	4b47      	ldr	r3, [pc, #284]	; (801e1e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 801e0ca:	6818      	ldr	r0, [r3, #0]
 801e0cc:	6803      	ldr	r3, [r0, #0]
 801e0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0d0:	4798      	blx	r3
 801e0d2:	4606      	mov	r6, r0
 801e0d4:	f7f0 f8d8 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 801e0d8:	6803      	ldr	r3, [r0, #0]
 801e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0dc:	4798      	blx	r3
 801e0de:	4607      	mov	r7, r0
 801e0e0:	f7f0 f8d2 	bl	800e288 <_ZN8touchgfx3HAL3lcdEv>
 801e0e4:	6803      	ldr	r3, [r0, #0]
 801e0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0e8:	4798      	blx	r3
 801e0ea:	280d      	cmp	r0, #13
 801e0ec:	d854      	bhi.n	801e198 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 801e0ee:	e8df f000 	tbb	[pc, r0]
 801e0f2:	554b      	.short	0x554b
 801e0f4:	2b6e0a66 	.word	0x2b6e0a66
 801e0f8:	5f5f5f3b 	.word	0x5f5f5f3b
 801e0fc:	6e6e5f5f 	.word	0x6e6e5f5f
 801e100:	2300      	movs	r3, #0
 801e102:	9303      	str	r3, [sp, #12]
 801e104:	e7ae      	b.n	801e064 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 801e106:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e10a:	2108      	movs	r1, #8
 801e10c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e110:	fb92 f1f1 	sdiv	r1, r2, r1
 801e114:	fb07 1303 	mla	r3, r7, r3, r1
 801e118:	441e      	add	r6, r3
 801e11a:	4253      	negs	r3, r2
 801e11c:	f002 0207 	and.w	r2, r2, #7
 801e120:	f003 0307 	and.w	r3, r3, #7
 801e124:	bf58      	it	pl
 801e126:	425a      	negpl	r2, r3
 801e128:	b2d2      	uxtb	r2, r2
 801e12a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e12e:	4628      	mov	r0, r5
 801e130:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e134:	6721      	str	r1, [r4, #112]	; 0x70
 801e136:	e9cd 1700 	strd	r1, r7, [sp]
 801e13a:	4631      	mov	r1, r6
 801e13c:	f001 fb08 	bl	801f750 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 801e140:	4620      	mov	r0, r4
 801e142:	b006      	add	sp, #24
 801e144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e148:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e14c:	2104      	movs	r1, #4
 801e14e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e152:	fb92 f1f1 	sdiv	r1, r2, r1
 801e156:	fb07 1303 	mla	r3, r7, r3, r1
 801e15a:	441e      	add	r6, r3
 801e15c:	4253      	negs	r3, r2
 801e15e:	f002 0203 	and.w	r2, r2, #3
 801e162:	f003 0303 	and.w	r3, r3, #3
 801e166:	e7dd      	b.n	801e124 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 801e168:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e16c:	2102      	movs	r1, #2
 801e16e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e172:	2a00      	cmp	r2, #0
 801e174:	fb92 f1f1 	sdiv	r1, r2, r1
 801e178:	f002 0201 	and.w	r2, r2, #1
 801e17c:	fb07 1303 	mla	r3, r7, r3, r1
 801e180:	bfb8      	it	lt
 801e182:	4252      	neglt	r2, r2
 801e184:	441e      	add	r6, r3
 801e186:	e7cf      	b.n	801e128 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 801e188:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e18c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e190:	437b      	muls	r3, r7
 801e192:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801e196:	441e      	add	r6, r3
 801e198:	2200      	movs	r2, #0
 801e19a:	e7c6      	b.n	801e12a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 801e19c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e1a0:	2103      	movs	r1, #3
 801e1a2:	fb07 f203 	mul.w	r2, r7, r3
 801e1a6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801e1aa:	fb13 2301 	smlabb	r3, r3, r1, r2
 801e1ae:	e7f2      	b.n	801e196 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801e1b0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e1b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e1b8:	fb07 2303 	mla	r3, r7, r3, r2
 801e1bc:	e7eb      	b.n	801e196 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801e1be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e1c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e1c6:	437b      	muls	r3, r7
 801e1c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e1cc:	e7e3      	b.n	801e196 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801e1ce:	4b07      	ldr	r3, [pc, #28]	; (801e1ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 801e1d0:	216c      	movs	r1, #108	; 0x6c
 801e1d2:	4a03      	ldr	r2, [pc, #12]	; (801e1e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801e1d4:	e70e      	b.n	801dff4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 801e1d6:	bf00      	nop
 801e1d8:	08024d1c 	.word	0x08024d1c
 801e1dc:	08024c66 	.word	0x08024c66
 801e1e0:	08024d24 	.word	0x08024d24
 801e1e4:	08024cc2 	.word	0x08024cc2
 801e1e8:	2400e9f0 	.word	0x2400e9f0
 801e1ec:	08024cf6 	.word	0x08024cf6

0801e1f0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 801e1f0:	6812      	ldr	r2, [r2, #0]
 801e1f2:	2a00      	cmp	r2, #0
 801e1f4:	db0b      	blt.n	801e20e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 801e1f6:	9800      	ldr	r0, [sp, #0]
 801e1f8:	6800      	ldr	r0, [r0, #0]
 801e1fa:	4290      	cmp	r0, r2
 801e1fc:	bfd4      	ite	le
 801e1fe:	2002      	movle	r0, #2
 801e200:	2000      	movgt	r0, #0
 801e202:	680a      	ldr	r2, [r1, #0]
 801e204:	2a00      	cmp	r2, #0
 801e206:	da04      	bge.n	801e212 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 801e208:	f040 0004 	orr.w	r0, r0, #4
 801e20c:	4770      	bx	lr
 801e20e:	2001      	movs	r0, #1
 801e210:	e7f7      	b.n	801e202 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	4293      	cmp	r3, r2
 801e216:	bfd8      	it	le
 801e218:	f040 0008 	orrle.w	r0, r0, #8
 801e21c:	4770      	bx	lr
	...

0801e220 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801e220:	4b07      	ldr	r3, [pc, #28]	; (801e240 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801e222:	b510      	push	{r4, lr}
 801e224:	781b      	ldrb	r3, [r3, #0]
 801e226:	2b01      	cmp	r3, #1
 801e228:	d108      	bne.n	801e23c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801e22a:	6843      	ldr	r3, [r0, #4]
 801e22c:	6814      	ldr	r4, [r2, #0]
 801e22e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e232:	680b      	ldr	r3, [r1, #0]
 801e234:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801e238:	6013      	str	r3, [r2, #0]
 801e23a:	600c      	str	r4, [r1, #0]
 801e23c:	bd10      	pop	{r4, pc}
 801e23e:	bf00      	nop
 801e240:	2400e9e8 	.word	0x2400e9e8

0801e244 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801e244:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e246:	b085      	sub	sp, #20
 801e248:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e24c:	4604      	mov	r4, r0
 801e24e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e252:	b33b      	cbz	r3, 801e2a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 801e254:	aa02      	add	r2, sp, #8
 801e256:	a903      	add	r1, sp, #12
 801e258:	f7ff ffe2 	bl	801e220 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e25c:	68a3      	ldr	r3, [r4, #8]
 801e25e:	9e03      	ldr	r6, [sp, #12]
 801e260:	aa02      	add	r2, sp, #8
 801e262:	9f02      	ldr	r7, [sp, #8]
 801e264:	a903      	add	r1, sp, #12
 801e266:	1af6      	subs	r6, r6, r3
 801e268:	68e3      	ldr	r3, [r4, #12]
 801e26a:	4620      	mov	r0, r4
 801e26c:	1aff      	subs	r7, r7, r3
 801e26e:	f104 0314 	add.w	r3, r4, #20
 801e272:	9603      	str	r6, [sp, #12]
 801e274:	9300      	str	r3, [sp, #0]
 801e276:	f104 0310 	add.w	r3, r4, #16
 801e27a:	9702      	str	r7, [sp, #8]
 801e27c:	f7ff ffb8 	bl	801e1f0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801e280:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 801e284:	4605      	mov	r5, r0
 801e286:	b97b      	cbnz	r3, 801e2a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 801e288:	463a      	mov	r2, r7
 801e28a:	4631      	mov	r1, r6
 801e28c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e290:	f7ff fe78 	bl	801df84 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e294:	9b03      	ldr	r3, [sp, #12]
 801e296:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 801e29a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801e29e:	9b02      	ldr	r3, [sp, #8]
 801e2a0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801e2a4:	b005      	add	sp, #20
 801e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2a8:	b110      	cbz	r0, 801e2b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 801e2aa:	ea13 0200 	ands.w	r2, r3, r0
 801e2ae:	d11c      	bne.n	801e2ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 801e2b0:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 801e2b4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801e2b8:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801e2bc:	b188      	cbz	r0, 801e2e2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 801e2be:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 801e2c2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e2c6:	b913      	cbnz	r3, 801e2ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 801e2c8:	4630      	mov	r0, r6
 801e2ca:	f001 f841 	bl	801f350 <_ZN8touchgfx7Outline6moveToEii>
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801e2da:	4630      	mov	r0, r6
 801e2dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e2e0:	e7d6      	b.n	801e290 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 801e2e2:	4630      	mov	r0, r6
 801e2e4:	f7ff fe4e 	bl	801df84 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e2e8:	e7f7      	b.n	801e2da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 801e2ea:	4615      	mov	r5, r2
 801e2ec:	e7d2      	b.n	801e294 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0801e2ee <_ZN8touchgfx6Canvas5closeEv>:
 801e2ee:	b538      	push	{r3, r4, r5, lr}
 801e2f0:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801e2f4:	4604      	mov	r4, r0
 801e2f6:	b993      	cbnz	r3, 801e31e <_ZN8touchgfx6Canvas5closeEv+0x30>
 801e2f8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 801e2fc:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 801e300:	4213      	tst	r3, r2
 801e302:	d10c      	bne.n	801e31e <_ZN8touchgfx6Canvas5closeEv+0x30>
 801e304:	f100 0530 	add.w	r5, r0, #48	; 0x30
 801e308:	b123      	cbz	r3, 801e314 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801e30a:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 801e30e:	4628      	mov	r0, r5
 801e310:	f7ff fe38 	bl	801df84 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e314:	4628      	mov	r0, r5
 801e316:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 801e31a:	f7ff fe33 	bl	801df84 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e31e:	2300      	movs	r3, #0
 801e320:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e324:	bd38      	pop	{r3, r4, r5, pc}

0801e326 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801e326:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e328:	b085      	sub	sp, #20
 801e32a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e32e:	4604      	mov	r4, r0
 801e330:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e334:	b353      	cbz	r3, 801e38c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 801e336:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801e33a:	b90b      	cbnz	r3, 801e340 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 801e33c:	f7ff ffd7 	bl	801e2ee <_ZN8touchgfx6Canvas5closeEv>
 801e340:	aa02      	add	r2, sp, #8
 801e342:	a903      	add	r1, sp, #12
 801e344:	4620      	mov	r0, r4
 801e346:	f7ff ff6b 	bl	801e220 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e34a:	68a3      	ldr	r3, [r4, #8]
 801e34c:	9d03      	ldr	r5, [sp, #12]
 801e34e:	aa02      	add	r2, sp, #8
 801e350:	9e02      	ldr	r6, [sp, #8]
 801e352:	a903      	add	r1, sp, #12
 801e354:	1aed      	subs	r5, r5, r3
 801e356:	68e3      	ldr	r3, [r4, #12]
 801e358:	4620      	mov	r0, r4
 801e35a:	1af6      	subs	r6, r6, r3
 801e35c:	f104 0314 	add.w	r3, r4, #20
 801e360:	9503      	str	r5, [sp, #12]
 801e362:	9300      	str	r3, [sp, #0]
 801e364:	f104 0310 	add.w	r3, r4, #16
 801e368:	9602      	str	r6, [sp, #8]
 801e36a:	f7ff ff41 	bl	801e1f0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801e36e:	4607      	mov	r7, r0
 801e370:	b170      	cbz	r0, 801e390 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 801e372:	2301      	movs	r3, #1
 801e374:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e378:	9a03      	ldr	r2, [sp, #12]
 801e37a:	9b02      	ldr	r3, [sp, #8]
 801e37c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 801e380:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801e384:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 801e388:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 801e38c:	b005      	add	sp, #20
 801e38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e390:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e394:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 801e398:	b92b      	cbnz	r3, 801e3a6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 801e39a:	4632      	mov	r2, r6
 801e39c:	4629      	mov	r1, r5
 801e39e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e3a2:	f000 ffd5 	bl	801f350 <_ZN8touchgfx7Outline6moveToEii>
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801e3b2:	e7e1      	b.n	801e378 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0801e3b4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 801e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b8:	4604      	mov	r4, r0
 801e3ba:	b087      	sub	sp, #28
 801e3bc:	9105      	str	r1, [sp, #20]
 801e3be:	f001 f90c 	bl	801f5da <_ZN8touchgfx7Outline8getCellsEv>
 801e3c2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801e3c6:	4605      	mov	r5, r0
 801e3c8:	f1b9 0f00 	cmp.w	r9, #0
 801e3cc:	d103      	bne.n	801e3d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 801e3ce:	2001      	movs	r0, #1
 801e3d0:	b007      	add	sp, #28
 801e3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3d6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801e3da:	2e00      	cmp	r6, #0
 801e3dc:	d139      	bne.n	801e452 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 801e3de:	f104 0848 	add.w	r8, r4, #72	; 0x48
 801e3e2:	f105 0708 	add.w	r7, r5, #8
 801e3e6:	4640      	mov	r0, r8
 801e3e8:	f001 f939 	bl	801f65e <_ZN8touchgfx8Scanline5resetEv>
 801e3ec:	f109 33ff 	add.w	r3, r9, #4294967295
 801e3f0:	9303      	str	r3, [sp, #12]
 801e3f2:	f9b5 b000 	ldrsh.w	fp, [r5]
 801e3f6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 801e3fa:	46da      	mov	sl, fp
 801e3fc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e400:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 801e404:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801e408:	9b03      	ldr	r3, [sp, #12]
 801e40a:	4416      	add	r6, r2
 801e40c:	9504      	str	r5, [sp, #16]
 801e40e:	463d      	mov	r5, r7
 801e410:	3b01      	subs	r3, #1
 801e412:	9303      	str	r3, [sp, #12]
 801e414:	3301      	adds	r3, #1
 801e416:	d01e      	beq.n	801e456 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 801e418:	3708      	adds	r7, #8
 801e41a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 801e41e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 801e422:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 801e426:	4290      	cmp	r0, r2
 801e428:	d11e      	bne.n	801e468 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 801e42a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 801e42e:	4411      	add	r1, r2
 801e430:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 801e434:	e7e8      	b.n	801e408 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 801e436:	1c91      	adds	r1, r2, #2
 801e438:	f04f 0301 	mov.w	r3, #1
 801e43c:	65e1      	str	r1, [r4, #92]	; 0x5c
 801e43e:	8053      	strh	r3, [r2, #2]
 801e440:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801e442:	1c91      	adds	r1, r2, #2
 801e444:	65a1      	str	r1, [r4, #88]	; 0x58
 801e446:	f8a2 b002 	strh.w	fp, [r2, #2]
 801e44a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e44c:	3201      	adds	r2, #1
 801e44e:	6562      	str	r2, [r4, #84]	; 0x54
 801e450:	e03a      	b.n	801e4c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 801e452:	2000      	movs	r0, #0
 801e454:	e7bc      	b.n	801e3d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 801e456:	b951      	cbnz	r1, 801e46e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 801e458:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d0b7      	beq.n	801e3ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801e45e:	4641      	mov	r1, r8
 801e460:	9805      	ldr	r0, [sp, #20]
 801e462:	f7ff fd59 	bl	801df18 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e466:	e7b2      	b.n	801e3ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801e468:	2900      	cmp	r1, #0
 801e46a:	d035      	beq.n	801e4d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 801e46c:	9504      	str	r5, [sp, #16]
 801e46e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 801e472:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801e476:	f7ff fd3b 	bl	801def0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801e47a:	4605      	mov	r5, r0
 801e47c:	b330      	cbz	r0, 801e4cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e47e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e480:	b182      	cbz	r2, 801e4a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801e482:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e484:	4591      	cmp	r9, r2
 801e486:	d00d      	beq.n	801e4a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801e488:	4641      	mov	r1, r8
 801e48a:	9805      	ldr	r0, [sp, #20]
 801e48c:	f7ff fd44 	bl	801df18 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e490:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e494:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801e496:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801e49a:	65e2      	str	r2, [r4, #92]	; 0x5c
 801e49c:	2300      	movs	r3, #0
 801e49e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e4a0:	6563      	str	r3, [r4, #84]	; 0x54
 801e4a2:	65a2      	str	r2, [r4, #88]	; 0x58
 801e4a4:	f1bb 0f00 	cmp.w	fp, #0
 801e4a8:	db10      	blt.n	801e4cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e4aa:	f7f2 fcdf 	bl	8010e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801e4ae:	4583      	cmp	fp, r0
 801e4b0:	da0c      	bge.n	801e4cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e4b2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801e4b4:	f802 500b 	strb.w	r5, [r2, fp]
 801e4b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801e4ba:	3201      	adds	r2, #1
 801e4bc:	4593      	cmp	fp, r2
 801e4be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801e4c0:	d1b9      	bne.n	801e436 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 801e4c2:	8811      	ldrh	r1, [r2, #0]
 801e4c4:	3101      	adds	r1, #1
 801e4c6:	8011      	strh	r1, [r2, #0]
 801e4c8:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 801e4cc:	9b03      	ldr	r3, [sp, #12]
 801e4ce:	3301      	adds	r3, #1
 801e4d0:	d0c2      	beq.n	801e458 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 801e4d2:	f10b 0a01 	add.w	sl, fp, #1
 801e4d6:	9d04      	ldr	r5, [sp, #16]
 801e4d8:	f9b5 3000 	ldrsh.w	r3, [r5]
 801e4dc:	4553      	cmp	r3, sl
 801e4de:	dd88      	ble.n	801e3f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801e4e0:	01b1      	lsls	r1, r6, #6
 801e4e2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801e4e6:	f7ff fd03 	bl	801def0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801e4ea:	4683      	mov	fp, r0
 801e4ec:	2800      	cmp	r0, #0
 801e4ee:	d080      	beq.n	801e3f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801e4f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e4f2:	b183      	cbz	r3, 801e516 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801e4f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e4f6:	4599      	cmp	r9, r3
 801e4f8:	d00d      	beq.n	801e516 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801e4fa:	4641      	mov	r1, r8
 801e4fc:	9805      	ldr	r0, [sp, #20]
 801e4fe:	f7ff fd0b 	bl	801df18 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e502:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e506:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801e50a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801e50c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801e50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e510:	65a3      	str	r3, [r4, #88]	; 0x58
 801e512:	2300      	movs	r3, #0
 801e514:	6563      	str	r3, [r4, #84]	; 0x54
 801e516:	f9b5 3000 	ldrsh.w	r3, [r5]
 801e51a:	464a      	mov	r2, r9
 801e51c:	f8cd b000 	str.w	fp, [sp]
 801e520:	4651      	mov	r1, sl
 801e522:	eba3 030a 	sub.w	r3, r3, sl
 801e526:	4640      	mov	r0, r8
 801e528:	f001 f8c4 	bl	801f6b4 <_ZN8touchgfx8Scanline7addSpanEiijj>
 801e52c:	e761      	b.n	801e3f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0801e52e <_ZN8touchgfx6Canvas6renderEh>:
 801e52e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e530:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e534:	4604      	mov	r4, r0
 801e536:	460d      	mov	r5, r1
 801e538:	b913      	cbnz	r3, 801e540 <_ZN8touchgfx6Canvas6renderEh+0x12>
 801e53a:	2001      	movs	r0, #1
 801e53c:	b003      	add	sp, #12
 801e53e:	bd30      	pop	{r4, r5, pc}
 801e540:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 801e544:	2b00      	cmp	r3, #0
 801e546:	d12f      	bne.n	801e5a8 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 801e548:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d0f4      	beq.n	801e53a <_ZN8touchgfx6Canvas6renderEh+0xc>
 801e550:	6840      	ldr	r0, [r0, #4]
 801e552:	6803      	ldr	r3, [r0, #0]
 801e554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e556:	4798      	blx	r3
 801e558:	fb10 f105 	smulbb	r1, r0, r5
 801e55c:	b288      	uxth	r0, r1
 801e55e:	1c41      	adds	r1, r0, #1
 801e560:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e564:	120d      	asrs	r5, r1, #8
 801e566:	d0e8      	beq.n	801e53a <_ZN8touchgfx6Canvas6renderEh+0xc>
 801e568:	4620      	mov	r0, r4
 801e56a:	f7ff fec0 	bl	801e2ee <_ZN8touchgfx6Canvas5closeEv>
 801e56e:	6860      	ldr	r0, [r4, #4]
 801e570:	6803      	ldr	r3, [r0, #0]
 801e572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e574:	4798      	blx	r3
 801e576:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 801e57a:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 801e57e:	8082      	strh	r2, [r0, #4]
 801e580:	80c3      	strh	r3, [r0, #6]
 801e582:	6860      	ldr	r0, [r4, #4]
 801e584:	6803      	ldr	r3, [r0, #0]
 801e586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e588:	4798      	blx	r3
 801e58a:	7205      	strb	r5, [r0, #8]
 801e58c:	6860      	ldr	r0, [r4, #4]
 801e58e:	6803      	ldr	r3, [r0, #0]
 801e590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e592:	4798      	blx	r3
 801e594:	f104 0318 	add.w	r3, r4, #24
 801e598:	4669      	mov	r1, sp
 801e59a:	e9cd 3000 	strd	r3, r0, [sp]
 801e59e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e5a2:	f7ff ff07 	bl	801e3b4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 801e5a6:	e7c9      	b.n	801e53c <_ZN8touchgfx6Canvas6renderEh+0xe>
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	e7c7      	b.n	801e53c <_ZN8touchgfx6Canvas6renderEh+0xe>

0801e5ac <_ZN8touchgfx6CanvasD1Ev>:
 801e5ac:	b538      	push	{r3, r4, r5, lr}
 801e5ae:	4605      	mov	r5, r0
 801e5b0:	4b08      	ldr	r3, [pc, #32]	; (801e5d4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 801e5b2:	4604      	mov	r4, r0
 801e5b4:	f845 3b30 	str.w	r3, [r5], #48
 801e5b8:	4b07      	ldr	r3, [pc, #28]	; (801e5d8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 801e5ba:	6818      	ldr	r0, [r3, #0]
 801e5bc:	6803      	ldr	r3, [r0, #0]
 801e5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5c0:	4798      	blx	r3
 801e5c2:	4628      	mov	r0, r5
 801e5c4:	f000 f833 	bl	801e62e <_ZN8touchgfx7OutlineD1Ev>
 801e5c8:	f104 0018 	add.w	r0, r4, #24
 801e5cc:	f001 f8ab 	bl	801f726 <_ZN8touchgfx15RenderingBufferD1Ev>
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	bd38      	pop	{r3, r4, r5, pc}
 801e5d4:	08024d1c 	.word	0x08024d1c
 801e5d8:	2400e9f0 	.word	0x2400e9f0

0801e5dc <_ZN8touchgfx6CanvasD0Ev>:
 801e5dc:	b510      	push	{r4, lr}
 801e5de:	4604      	mov	r4, r0
 801e5e0:	f7ff ffe4 	bl	801e5ac <_ZN8touchgfx6CanvasD1Ev>
 801e5e4:	21bc      	movs	r1, #188	; 0xbc
 801e5e6:	4620      	mov	r0, r4
 801e5e8:	f001 f8bf 	bl	801f76a <_ZdlPvj>
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	bd10      	pop	{r4, pc}

0801e5f0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801e5f0:	790b      	ldrb	r3, [r1, #4]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	bf0c      	ite	eq
 801e5f6:	2301      	moveq	r3, #1
 801e5f8:	2300      	movne	r3, #0
 801e5fa:	b570      	push	{r4, r5, r6, lr}
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801e602:	460e      	mov	r6, r1
 801e604:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801e608:	d109      	bne.n	801e61e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801e60a:	b14d      	cbz	r5, 801e620 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801e60c:	7933      	ldrb	r3, [r6, #4]
 801e60e:	2b01      	cmp	r3, #1
 801e610:	d10c      	bne.n	801e62c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801e612:	6823      	ldr	r3, [r4, #0]
 801e614:	4620      	mov	r0, r4
 801e616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e61c:	4718      	bx	r3
 801e61e:	b12d      	cbz	r5, 801e62c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801e620:	6823      	ldr	r3, [r4, #0]
 801e622:	4620      	mov	r0, r4
 801e624:	695b      	ldr	r3, [r3, #20]
 801e626:	4798      	blx	r3
 801e628:	2d00      	cmp	r5, #0
 801e62a:	d1ef      	bne.n	801e60c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801e62c:	bd70      	pop	{r4, r5, r6, pc}

0801e62e <_ZN8touchgfx7OutlineD1Ev>:
 801e62e:	4770      	bx	lr

0801e630 <_ZN8touchgfx7OutlineD0Ev>:
 801e630:	b510      	push	{r4, lr}
 801e632:	4604      	mov	r4, r0
 801e634:	2148      	movs	r1, #72	; 0x48
 801e636:	f001 f898 	bl	801f76a <_ZdlPvj>
 801e63a:	4620      	mov	r0, r4
 801e63c:	bd10      	pop	{r4, pc}

0801e63e <_ZN8touchgfx7Outline5resetEv>:
 801e63e:	b510      	push	{r4, lr}
 801e640:	4604      	mov	r4, r0
 801e642:	f7f2 fc2b 	bl	8010e9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801e646:	60e0      	str	r0, [r4, #12]
 801e648:	f7f2 fc2e 	bl	8010ea8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801e64c:	68e3      	ldr	r3, [r4, #12]
 801e64e:	2200      	movs	r2, #0
 801e650:	08c0      	lsrs	r0, r0, #3
 801e652:	6123      	str	r3, [r4, #16]
 801e654:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e658:	6060      	str	r0, [r4, #4]
 801e65a:	82a3      	strh	r3, [r4, #20]
 801e65c:	82e3      	strh	r3, [r4, #22]
 801e65e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e660:	60a2      	str	r2, [r4, #8]
 801e662:	f023 0301 	bic.w	r3, r3, #1
 801e666:	8322      	strh	r2, [r4, #24]
 801e668:	8362      	strh	r2, [r4, #26]
 801e66a:	f043 0302 	orr.w	r3, r3, #2
 801e66e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801e672:	63e3      	str	r3, [r4, #60]	; 0x3c
 801e674:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e678:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801e67c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801e680:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801e684:	bd10      	pop	{r4, pc}
	...

0801e688 <_ZN8touchgfx7OutlineC1Ev>:
 801e688:	4b0f      	ldr	r3, [pc, #60]	; (801e6c8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 801e68a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e68e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801e692:	b510      	push	{r4, lr}
 801e694:	6003      	str	r3, [r0, #0]
 801e696:	2300      	movs	r3, #0
 801e698:	4604      	mov	r4, r0
 801e69a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801e69e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801e6a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e6a6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801e6aa:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801e6ae:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 801e6b2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801e6b6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 801e6ba:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 801e6be:	f7ff ffbe 	bl	801e63e <_ZN8touchgfx7Outline5resetEv>
 801e6c2:	4620      	mov	r0, r4
 801e6c4:	bd10      	pop	{r4, pc}
 801e6c6:	bf00      	nop
 801e6c8:	08024dec 	.word	0x08024dec

0801e6cc <_ZN8touchgfx7Outline10renderLineEiiii>:
 801e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d0:	b095      	sub	sp, #84	; 0x54
 801e6d2:	4604      	mov	r4, r0
 801e6d4:	1155      	asrs	r5, r2, #5
 801e6d6:	f002 061f 	and.w	r6, r2, #31
 801e6da:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e6dc:	1157      	asrs	r7, r2, #5
 801e6de:	9304      	str	r3, [sp, #16]
 801e6e0:	1153      	asrs	r3, r2, #5
 801e6e2:	9300      	str	r3, [sp, #0]
 801e6e4:	1143      	asrs	r3, r0, #5
 801e6e6:	930c      	str	r3, [sp, #48]	; 0x30
 801e6e8:	f000 031f 	and.w	r3, r0, #31
 801e6ec:	9303      	str	r3, [sp, #12]
 801e6ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e6f0:	42ab      	cmp	r3, r5
 801e6f2:	bfc8      	it	gt
 801e6f4:	462b      	movgt	r3, r5
 801e6f6:	ea4f 1562 	mov.w	r5, r2, asr #5
 801e6fa:	bfc8      	it	gt
 801e6fc:	6323      	strgt	r3, [r4, #48]	; 0x30
 801e6fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e700:	42ab      	cmp	r3, r5
 801e702:	bfd8      	it	le
 801e704:	462b      	movle	r3, r5
 801e706:	ea4f 1560 	mov.w	r5, r0, asr #5
 801e70a:	bfdc      	itt	le
 801e70c:	3301      	addle	r3, #1
 801e70e:	63a3      	strle	r3, [r4, #56]	; 0x38
 801e710:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e712:	42ab      	cmp	r3, r5
 801e714:	bfc8      	it	gt
 801e716:	462b      	movgt	r3, r5
 801e718:	ea4f 1560 	mov.w	r5, r0, asr #5
 801e71c:	bfc8      	it	gt
 801e71e:	6323      	strgt	r3, [r4, #48]	; 0x30
 801e720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e722:	42ab      	cmp	r3, r5
 801e724:	bfd8      	it	le
 801e726:	462b      	movle	r3, r5
 801e728:	ea4f 1561 	mov.w	r5, r1, asr #5
 801e72c:	bfdc      	itt	le
 801e72e:	3301      	addle	r3, #1
 801e730:	63a3      	strle	r3, [r4, #56]	; 0x38
 801e732:	9b04      	ldr	r3, [sp, #16]
 801e734:	eba3 0a01 	sub.w	sl, r3, r1
 801e738:	1143      	asrs	r3, r0, #5
 801e73a:	429f      	cmp	r7, r3
 801e73c:	f040 811d 	bne.w	801e97a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 801e740:	9b04      	ldr	r3, [sp, #16]
 801e742:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801e746:	9b03      	ldr	r3, [sp, #12]
 801e748:	429e      	cmp	r6, r3
 801e74a:	d131      	bne.n	801e7b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 801e74c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801e750:	fa0f fb8b 	sxth.w	fp, fp
 801e754:	f9bd 2000 	ldrsh.w	r2, [sp]
 801e758:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801e75c:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 801e760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e764:	4281      	cmp	r1, r0
 801e766:	f000 80e6 	beq.w	801e936 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801e76a:	8b60      	ldrh	r0, [r4, #26]
 801e76c:	8b21      	ldrh	r1, [r4, #24]
 801e76e:	4301      	orrs	r1, r0
 801e770:	d00b      	beq.n	801e78a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e772:	2b00      	cmp	r3, #0
 801e774:	db09      	blt.n	801e78a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e776:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e778:	428b      	cmp	r3, r1
 801e77a:	da06      	bge.n	801e78a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e77c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801e780:	4299      	cmp	r1, r3
 801e782:	d308      	bcc.n	801e796 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 801e784:	2301      	movs	r3, #1
 801e786:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801e78a:	f8a4 b014 	strh.w	fp, [r4, #20]
 801e78e:	2300      	movs	r3, #0
 801e790:	82e2      	strh	r2, [r4, #22]
 801e792:	8323      	strh	r3, [r4, #24]
 801e794:	e01f      	b.n	801e7d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801e796:	f104 0314 	add.w	r3, r4, #20
 801e79a:	6925      	ldr	r5, [r4, #16]
 801e79c:	cb03      	ldmia	r3!, {r0, r1}
 801e79e:	6028      	str	r0, [r5, #0]
 801e7a0:	6069      	str	r1, [r5, #4]
 801e7a2:	6923      	ldr	r3, [r4, #16]
 801e7a4:	3308      	adds	r3, #8
 801e7a6:	6123      	str	r3, [r4, #16]
 801e7a8:	68a3      	ldr	r3, [r4, #8]
 801e7aa:	3301      	adds	r3, #1
 801e7ac:	60a3      	str	r3, [r4, #8]
 801e7ae:	e7ec      	b.n	801e78a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e7b0:	9b04      	ldr	r3, [sp, #16]
 801e7b2:	45ab      	cmp	fp, r5
 801e7b4:	f001 011f 	and.w	r1, r1, #31
 801e7b8:	8b20      	ldrh	r0, [r4, #24]
 801e7ba:	f003 031f 	and.w	r3, r3, #31
 801e7be:	8b62      	ldrh	r2, [r4, #26]
 801e7c0:	9305      	str	r3, [sp, #20]
 801e7c2:	9b03      	ldr	r3, [sp, #12]
 801e7c4:	eba3 0306 	sub.w	r3, r3, r6
 801e7c8:	d107      	bne.n	801e7da <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 801e7ca:	4418      	add	r0, r3
 801e7cc:	8320      	strh	r0, [r4, #24]
 801e7ce:	9805      	ldr	r0, [sp, #20]
 801e7d0:	4401      	add	r1, r0
 801e7d2:	fb03 2301 	mla	r3, r3, r1, r2
 801e7d6:	8363      	strh	r3, [r4, #26]
 801e7d8:	e0ad      	b.n	801e936 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801e7da:	f1ba 0f00 	cmp.w	sl, #0
 801e7de:	db33      	blt.n	801e848 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 801e7e0:	2701      	movs	r7, #1
 801e7e2:	f1c1 0c20 	rsb	ip, r1, #32
 801e7e6:	9702      	str	r7, [sp, #8]
 801e7e8:	2720      	movs	r7, #32
 801e7ea:	fb03 f30c 	mul.w	r3, r3, ip
 801e7ee:	9701      	str	r7, [sp, #4]
 801e7f0:	9f01      	ldr	r7, [sp, #4]
 801e7f2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801e7f6:	4439      	add	r1, r7
 801e7f8:	fb93 fcfa 	sdiv	ip, r3, sl
 801e7fc:	fb0a 331c 	mls	r3, sl, ip, r3
 801e800:	2b00      	cmp	r3, #0
 801e802:	bfbc      	itt	lt
 801e804:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801e808:	4453      	addlt	r3, sl
 801e80a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e80e:	9a02      	ldr	r2, [sp, #8]
 801e810:	4460      	add	r0, ip
 801e812:	4415      	add	r5, r2
 801e814:	f9bd 2000 	ldrsh.w	r2, [sp]
 801e818:	b200      	sxth	r0, r0
 801e81a:	0417      	lsls	r7, r2, #16
 801e81c:	9200      	str	r2, [sp, #0]
 801e81e:	fa0f fe85 	sxth.w	lr, r5
 801e822:	8320      	strh	r0, [r4, #24]
 801e824:	9704      	str	r7, [sp, #16]
 801e826:	b209      	sxth	r1, r1
 801e828:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801e82c:	9a04      	ldr	r2, [sp, #16]
 801e82e:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 801e832:	8361      	strh	r1, [r4, #26]
 801e834:	eb0e 0902 	add.w	r9, lr, r2
 801e838:	454f      	cmp	r7, r9
 801e83a:	d10d      	bne.n	801e858 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 801e83c:	4ba0      	ldr	r3, [pc, #640]	; (801eac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 801e83e:	2177      	movs	r1, #119	; 0x77
 801e840:	4aa0      	ldr	r2, [pc, #640]	; (801eac4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 801e842:	48a1      	ldr	r0, [pc, #644]	; (801eac8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 801e844:	f000 ffc0 	bl	801f7c8 <__assert_func>
 801e848:	f04f 37ff 	mov.w	r7, #4294967295
 801e84c:	434b      	muls	r3, r1
 801e84e:	f1ca 0a00 	rsb	sl, sl, #0
 801e852:	9702      	str	r7, [sp, #8]
 801e854:	2700      	movs	r7, #0
 801e856:	e7ca      	b.n	801e7ee <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 801e858:	ea50 0201 	orrs.w	r2, r0, r1
 801e85c:	d00c      	beq.n	801e878 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e85e:	f1b8 0f00 	cmp.w	r8, #0
 801e862:	db09      	blt.n	801e878 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e864:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e866:	4588      	cmp	r8, r1
 801e868:	da06      	bge.n	801e878 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e86a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e86e:	4288      	cmp	r0, r1
 801e870:	d364      	bcc.n	801e93c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 801e872:	2101      	movs	r1, #1
 801e874:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e878:	2100      	movs	r1, #0
 801e87a:	9a00      	ldr	r2, [sp, #0]
 801e87c:	45ab      	cmp	fp, r5
 801e87e:	f8a4 e014 	strh.w	lr, [r4, #20]
 801e882:	82e2      	strh	r2, [r4, #22]
 801e884:	4466      	add	r6, ip
 801e886:	8321      	strh	r1, [r4, #24]
 801e888:	8361      	strh	r1, [r4, #26]
 801e88a:	d04b      	beq.n	801e924 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 801e88c:	9a03      	ldr	r2, [sp, #12]
 801e88e:	eba3 030a 	sub.w	r3, r3, sl
 801e892:	f04f 0800 	mov.w	r8, #0
 801e896:	1b91      	subs	r1, r2, r6
 801e898:	448c      	add	ip, r1
 801e89a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 801e89e:	fb9c f7fa 	sdiv	r7, ip, sl
 801e8a2:	fb0a cc17 	mls	ip, sl, r7, ip
 801e8a6:	f1bc 0f00 	cmp.w	ip, #0
 801e8aa:	bfbc      	itt	lt
 801e8ac:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801e8b0:	44d4      	addlt	ip, sl
 801e8b2:	1c7a      	adds	r2, r7, #1
 801e8b4:	9207      	str	r2, [sp, #28]
 801e8b6:	eb13 030c 	adds.w	r3, r3, ip
 801e8ba:	9a02      	ldr	r2, [sp, #8]
 801e8bc:	bf54      	ite	pl
 801e8be:	9807      	ldrpl	r0, [sp, #28]
 801e8c0:	4638      	movmi	r0, r7
 801e8c2:	4415      	add	r5, r2
 801e8c4:	9a04      	ldr	r2, [sp, #16]
 801e8c6:	fa0f fe80 	sxth.w	lr, r0
 801e8ca:	4406      	add	r6, r0
 801e8cc:	ea4f 1140 	mov.w	r1, r0, lsl #5
 801e8d0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801e8d4:	fa0f f985 	sxth.w	r9, r5
 801e8d8:	bf58      	it	pl
 801e8da:	eba3 030a 	subpl.w	r3, r3, sl
 801e8de:	4410      	add	r0, r2
 801e8e0:	b209      	sxth	r1, r1
 801e8e2:	444a      	add	r2, r9
 801e8e4:	f8a4 e018 	strh.w	lr, [r4, #24]
 801e8e8:	8361      	strh	r1, [r4, #26]
 801e8ea:	4290      	cmp	r0, r2
 801e8ec:	d0a6      	beq.n	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801e8ee:	ea5e 0201 	orrs.w	r2, lr, r1
 801e8f2:	d00d      	beq.n	801e910 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e8f4:	9a00      	ldr	r2, [sp, #0]
 801e8f6:	2a00      	cmp	r2, #0
 801e8f8:	db0a      	blt.n	801e910 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e8fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e8fc:	428a      	cmp	r2, r1
 801e8fe:	da07      	bge.n	801e910 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e900:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e904:	4288      	cmp	r0, r1
 801e906:	d329      	bcc.n	801e95c <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 801e908:	f04f 0201 	mov.w	r2, #1
 801e90c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801e910:	9a00      	ldr	r2, [sp, #0]
 801e912:	45ab      	cmp	fp, r5
 801e914:	f8a4 9014 	strh.w	r9, [r4, #20]
 801e918:	82e2      	strh	r2, [r4, #22]
 801e91a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801e91e:	f8a4 801a 	strh.w	r8, [r4, #26]
 801e922:	d1c8      	bne.n	801e8b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 801e924:	9b03      	ldr	r3, [sp, #12]
 801e926:	9a01      	ldr	r2, [sp, #4]
 801e928:	1b9e      	subs	r6, r3, r6
 801e92a:	9b05      	ldr	r3, [sp, #20]
 801e92c:	3320      	adds	r3, #32
 801e92e:	8326      	strh	r6, [r4, #24]
 801e930:	1a9b      	subs	r3, r3, r2
 801e932:	435e      	muls	r6, r3
 801e934:	8366      	strh	r6, [r4, #26]
 801e936:	b015      	add	sp, #84	; 0x54
 801e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e93c:	f104 0714 	add.w	r7, r4, #20
 801e940:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801e944:	cf03      	ldmia	r7!, {r0, r1}
 801e946:	f8c8 0000 	str.w	r0, [r8]
 801e94a:	f8c8 1004 	str.w	r1, [r8, #4]
 801e94e:	6921      	ldr	r1, [r4, #16]
 801e950:	3108      	adds	r1, #8
 801e952:	6121      	str	r1, [r4, #16]
 801e954:	68a1      	ldr	r1, [r4, #8]
 801e956:	3101      	adds	r1, #1
 801e958:	60a1      	str	r1, [r4, #8]
 801e95a:	e78d      	b.n	801e878 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e95c:	f104 0e14 	add.w	lr, r4, #20
 801e960:	6922      	ldr	r2, [r4, #16]
 801e962:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801e966:	9206      	str	r2, [sp, #24]
 801e968:	6010      	str	r0, [r2, #0]
 801e96a:	6051      	str	r1, [r2, #4]
 801e96c:	6921      	ldr	r1, [r4, #16]
 801e96e:	3108      	adds	r1, #8
 801e970:	6121      	str	r1, [r4, #16]
 801e972:	68a1      	ldr	r1, [r4, #8]
 801e974:	3101      	adds	r1, #1
 801e976:	60a1      	str	r1, [r4, #8]
 801e978:	e7ca      	b.n	801e910 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e97a:	eba0 0b02 	sub.w	fp, r0, r2
 801e97e:	f1ba 0f00 	cmp.w	sl, #0
 801e982:	f040 80a3 	bne.w	801eacc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801e986:	f1bb 0f00 	cmp.w	fp, #0
 801e98a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e98e:	8b62      	ldrh	r2, [r4, #26]
 801e990:	b22d      	sxth	r5, r5
 801e992:	bfa8      	it	ge
 801e994:	f04f 0a20 	movge.w	sl, #32
 801e998:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 801e99c:	8b21      	ldrh	r1, [r4, #24]
 801e99e:	bfb8      	it	lt
 801e9a0:	f04f 39ff 	movlt.w	r9, #4294967295
 801e9a4:	ebaa 0606 	sub.w	r6, sl, r6
 801e9a8:	bfa8      	it	ge
 801e9aa:	f04f 0901 	movge.w	r9, #1
 801e9ae:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801e9b2:	4431      	add	r1, r6
 801e9b4:	fb06 2603 	mla	r6, r6, r3, r2
 801e9b8:	9a00      	ldr	r2, [sp, #0]
 801e9ba:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 801e9be:	b209      	sxth	r1, r1
 801e9c0:	444a      	add	r2, r9
 801e9c2:	b236      	sxth	r6, r6
 801e9c4:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 801e9c8:	8321      	strh	r1, [r4, #24]
 801e9ca:	b217      	sxth	r7, r2
 801e9cc:	8366      	strh	r6, [r4, #26]
 801e9ce:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 801e9d2:	45f4      	cmp	ip, lr
 801e9d4:	f43f af32 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801e9d8:	4331      	orrs	r1, r6
 801e9da:	d00b      	beq.n	801e9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e9dc:	2800      	cmp	r0, #0
 801e9de:	db09      	blt.n	801e9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e9e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e9e2:	4288      	cmp	r0, r1
 801e9e4:	da06      	bge.n	801e9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e9e6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e9ea:	4288      	cmp	r0, r1
 801e9ec:	d33b      	bcc.n	801ea66 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 801e9ee:	2101      	movs	r1, #1
 801e9f0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e9f4:	f1aa 0610 	sub.w	r6, sl, #16
 801e9f8:	82e7      	strh	r7, [r4, #22]
 801e9fa:	2700      	movs	r7, #0
 801e9fc:	82a5      	strh	r5, [r4, #20]
 801e9fe:	0076      	lsls	r6, r6, #1
 801ea00:	8327      	strh	r7, [r4, #24]
 801ea02:	fb06 fc03 	mul.w	ip, r6, r3
 801ea06:	b236      	sxth	r6, r6
 801ea08:	8367      	strh	r7, [r4, #26]
 801ea0a:	fa0f fc8c 	sxth.w	ip, ip
 801ea0e:	ea46 010c 	orr.w	r1, r6, ip
 801ea12:	9100      	str	r1, [sp, #0]
 801ea14:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ea16:	428a      	cmp	r2, r1
 801ea18:	d046      	beq.n	801eaa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 801ea1a:	444a      	add	r2, r9
 801ea1c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801ea20:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801ea24:	fa0f f882 	sxth.w	r8, r2
 801ea28:	8326      	strh	r6, [r4, #24]
 801ea2a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 801ea2e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801ea32:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 801ea36:	4570      	cmp	r0, lr
 801ea38:	f43f af00 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ea3c:	9800      	ldr	r0, [sp, #0]
 801ea3e:	b160      	cbz	r0, 801ea5a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801ea40:	2900      	cmp	r1, #0
 801ea42:	db0a      	blt.n	801ea5a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801ea44:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ea46:	4281      	cmp	r1, r0
 801ea48:	da07      	bge.n	801ea5a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801ea4a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ea4e:	4288      	cmp	r0, r1
 801ea50:	d319      	bcc.n	801ea86 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 801ea52:	f04f 0101 	mov.w	r1, #1
 801ea56:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ea5a:	82a5      	strh	r5, [r4, #20]
 801ea5c:	f8a4 8016 	strh.w	r8, [r4, #22]
 801ea60:	8327      	strh	r7, [r4, #24]
 801ea62:	8367      	strh	r7, [r4, #26]
 801ea64:	e7d6      	b.n	801ea14 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 801ea66:	f104 0614 	add.w	r6, r4, #20
 801ea6a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801ea6e:	ce03      	ldmia	r6!, {r0, r1}
 801ea70:	f8cc 0000 	str.w	r0, [ip]
 801ea74:	f8cc 1004 	str.w	r1, [ip, #4]
 801ea78:	6921      	ldr	r1, [r4, #16]
 801ea7a:	3108      	adds	r1, #8
 801ea7c:	6121      	str	r1, [r4, #16]
 801ea7e:	68a1      	ldr	r1, [r4, #8]
 801ea80:	3101      	adds	r1, #1
 801ea82:	60a1      	str	r1, [r4, #8]
 801ea84:	e7b6      	b.n	801e9f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801ea86:	f104 0e14 	add.w	lr, r4, #20
 801ea8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ea8e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801ea92:	f8cb 0000 	str.w	r0, [fp]
 801ea96:	f8cb 1004 	str.w	r1, [fp, #4]
 801ea9a:	6921      	ldr	r1, [r4, #16]
 801ea9c:	3108      	adds	r1, #8
 801ea9e:	6121      	str	r1, [r4, #16]
 801eaa0:	68a1      	ldr	r1, [r4, #8]
 801eaa2:	3101      	adds	r1, #1
 801eaa4:	60a1      	str	r1, [r4, #8]
 801eaa6:	e7d8      	b.n	801ea5a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801eaa8:	9a03      	ldr	r2, [sp, #12]
 801eaaa:	8b61      	ldrh	r1, [r4, #26]
 801eaac:	f1a2 0e20 	sub.w	lr, r2, #32
 801eab0:	8b22      	ldrh	r2, [r4, #24]
 801eab2:	44d6      	add	lr, sl
 801eab4:	4472      	add	r2, lr
 801eab6:	fb0e 1303 	mla	r3, lr, r3, r1
 801eaba:	8322      	strh	r2, [r4, #24]
 801eabc:	e68b      	b.n	801e7d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801eabe:	bf00      	nop
 801eac0:	08024d73 	.word	0x08024d73
 801eac4:	08024df4 	.word	0x08024df4
 801eac8:	08024da4 	.word	0x08024da4
 801eacc:	f1bb 0f00 	cmp.w	fp, #0
 801ead0:	f2c0 8124 	blt.w	801ed1c <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 801ead4:	2201      	movs	r2, #1
 801ead6:	f1c6 0320 	rsb	r3, r6, #32
 801eada:	920b      	str	r2, [sp, #44]	; 0x2c
 801eadc:	2220      	movs	r2, #32
 801eade:	fb0a f303 	mul.w	r3, sl, r3
 801eae2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801eae6:	9202      	str	r2, [sp, #8]
 801eae8:	fb93 fcfb 	sdiv	ip, r3, fp
 801eaec:	fb0b 331c 	mls	r3, fp, ip, r3
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	9308      	str	r3, [sp, #32]
 801eaf4:	bfbe      	ittt	lt
 801eaf6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801eafa:	445b      	addlt	r3, fp
 801eafc:	9308      	strlt	r3, [sp, #32]
 801eafe:	eb0c 0301 	add.w	r3, ip, r1
 801eb02:	9301      	str	r3, [sp, #4]
 801eb04:	115b      	asrs	r3, r3, #5
 801eb06:	9305      	str	r3, [sp, #20]
 801eb08:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801eb0c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 801eb10:	461f      	mov	r7, r3
 801eb12:	9b02      	ldr	r3, [sp, #8]
 801eb14:	42b3      	cmp	r3, r6
 801eb16:	f040 8117 	bne.w	801ed48 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801eb1a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801eb1e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801eb22:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801eb26:	42b9      	cmp	r1, r7
 801eb28:	d016      	beq.n	801eb58 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801eb2a:	8b60      	ldrh	r0, [r4, #26]
 801eb2c:	8b21      	ldrh	r1, [r4, #24]
 801eb2e:	4301      	orrs	r1, r0
 801eb30:	d00d      	beq.n	801eb4e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801eb32:	f1b8 0f00 	cmp.w	r8, #0
 801eb36:	db0a      	blt.n	801eb4e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801eb38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801eb3a:	4541      	cmp	r1, r8
 801eb3c:	dd07      	ble.n	801eb4e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801eb3e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801eb42:	4288      	cmp	r0, r1
 801eb44:	f0c0 80f3 	bcc.w	801ed2e <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 801eb48:	2101      	movs	r1, #1
 801eb4a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801eb4e:	82e3      	strh	r3, [r4, #22]
 801eb50:	2300      	movs	r3, #0
 801eb52:	82a2      	strh	r2, [r4, #20]
 801eb54:	8323      	strh	r3, [r4, #24]
 801eb56:	8363      	strh	r3, [r4, #26]
 801eb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb5a:	9a00      	ldr	r2, [sp, #0]
 801eb5c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801eb60:	441a      	add	r2, r3
 801eb62:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801eb66:	4691      	mov	r9, r2
 801eb68:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801eb6c:	fa0f f589 	sxth.w	r5, r9
 801eb70:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801eb74:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801eb78:	4281      	cmp	r1, r0
 801eb7a:	d015      	beq.n	801eba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 801eb7c:	8b60      	ldrh	r0, [r4, #26]
 801eb7e:	8b21      	ldrh	r1, [r4, #24]
 801eb80:	4301      	orrs	r1, r0
 801eb82:	d00c      	beq.n	801eb9e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801eb84:	2a00      	cmp	r2, #0
 801eb86:	db0a      	blt.n	801eb9e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801eb88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801eb8a:	428a      	cmp	r2, r1
 801eb8c:	da07      	bge.n	801eb9e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801eb8e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801eb92:	4291      	cmp	r1, r2
 801eb94:	f0c0 81ae 	bcc.w	801eef4 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 801eb98:	2201      	movs	r2, #1
 801eb9a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801eb9e:	82a3      	strh	r3, [r4, #20]
 801eba0:	2300      	movs	r3, #0
 801eba2:	82e5      	strh	r5, [r4, #22]
 801eba4:	8323      	strh	r3, [r4, #24]
 801eba6:	8363      	strh	r3, [r4, #26]
 801eba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebaa:	454b      	cmp	r3, r9
 801ebac:	f000 808a 	beq.w	801ecc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 801ebb0:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801ebb4:	fb93 f2fb 	sdiv	r2, r3, fp
 801ebb8:	fb0b 3312 	mls	r3, fp, r2, r3
 801ebbc:	9205      	str	r2, [sp, #20]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	9307      	str	r3, [sp, #28]
 801ebc2:	da04      	bge.n	801ebce <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 801ebc4:	1e53      	subs	r3, r2, #1
 801ebc6:	9305      	str	r3, [sp, #20]
 801ebc8:	9b07      	ldr	r3, [sp, #28]
 801ebca:	445b      	add	r3, fp
 801ebcc:	9307      	str	r3, [sp, #28]
 801ebce:	9b08      	ldr	r3, [sp, #32]
 801ebd0:	f04f 0a00 	mov.w	sl, #0
 801ebd4:	eba3 030b 	sub.w	r3, r3, fp
 801ebd8:	9308      	str	r3, [sp, #32]
 801ebda:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 801ebde:	f1c3 0320 	rsb	r3, r3, #32
 801ebe2:	930a      	str	r3, [sp, #40]	; 0x28
 801ebe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebe6:	9b02      	ldr	r3, [sp, #8]
 801ebe8:	1a9b      	subs	r3, r3, r2
 801ebea:	9309      	str	r3, [sp, #36]	; 0x24
 801ebec:	9902      	ldr	r1, [sp, #8]
 801ebee:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801ebf2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801ebf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ebfa:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 801ebfe:	189b      	adds	r3, r3, r2
 801ec00:	9308      	str	r3, [sp, #32]
 801ec02:	bf57      	itett	pl
 801ec04:	eba3 030b 	subpl.w	r3, r3, fp
 801ec08:	9b05      	ldrmi	r3, [sp, #20]
 801ec0a:	9308      	strpl	r3, [sp, #32]
 801ec0c:	9b05      	ldrpl	r3, [sp, #20]
 801ec0e:	bf58      	it	pl
 801ec10:	3301      	addpl	r3, #1
 801ec12:	9300      	str	r3, [sp, #0]
 801ec14:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec18:	4413      	add	r3, r2
 801ec1a:	9301      	str	r3, [sp, #4]
 801ec1c:	115b      	asrs	r3, r3, #5
 801ec1e:	9306      	str	r3, [sp, #24]
 801ec20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec22:	428b      	cmp	r3, r1
 801ec24:	f040 8180 	bne.w	801ef28 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 801ec28:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ec2c:	fa0f f389 	sxth.w	r3, r9
 801ec30:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801ec34:	4541      	cmp	r1, r8
 801ec36:	d017      	beq.n	801ec68 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801ec38:	8b60      	ldrh	r0, [r4, #26]
 801ec3a:	8b21      	ldrh	r1, [r4, #24]
 801ec3c:	4301      	orrs	r1, r0
 801ec3e:	d00d      	beq.n	801ec5c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ec40:	2e00      	cmp	r6, #0
 801ec42:	db0b      	blt.n	801ec5c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ec44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ec46:	42b1      	cmp	r1, r6
 801ec48:	dd08      	ble.n	801ec5c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ec4a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ec4e:	4288      	cmp	r0, r1
 801ec50:	f0c0 815d 	bcc.w	801ef0e <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 801ec54:	f04f 0101 	mov.w	r1, #1
 801ec58:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ec5c:	82a2      	strh	r2, [r4, #20]
 801ec5e:	82e3      	strh	r3, [r4, #22]
 801ec60:	f8a4 a018 	strh.w	sl, [r4, #24]
 801ec64:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801ec68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec6a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801ec6e:	4499      	add	r9, r3
 801ec70:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801ec74:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ec78:	fa0f f589 	sxth.w	r5, r9
 801ec7c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801ec80:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801ec84:	4281      	cmp	r1, r0
 801ec86:	f43f add9 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ec8a:	8b60      	ldrh	r0, [r4, #26]
 801ec8c:	8b21      	ldrh	r1, [r4, #24]
 801ec8e:	4301      	orrs	r1, r0
 801ec90:	d00d      	beq.n	801ecae <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ec92:	2a00      	cmp	r2, #0
 801ec94:	db0b      	blt.n	801ecae <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ec96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ec98:	428a      	cmp	r2, r1
 801ec9a:	da08      	bge.n	801ecae <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ec9c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801eca0:	4291      	cmp	r1, r2
 801eca2:	f0c0 8228 	bcc.w	801f0f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 801eca6:	f04f 0201 	mov.w	r2, #1
 801ecaa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801ecae:	82a3      	strh	r3, [r4, #20]
 801ecb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ecb2:	82e5      	strh	r5, [r4, #22]
 801ecb4:	454b      	cmp	r3, r9
 801ecb6:	f8a4 a018 	strh.w	sl, [r4, #24]
 801ecba:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801ecbe:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ecc2:	d193      	bne.n	801ebec <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 801ecc4:	9b02      	ldr	r3, [sp, #8]
 801ecc6:	f1c3 0e20 	rsb	lr, r3, #32
 801ecca:	9b04      	ldr	r3, [sp, #16]
 801eccc:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801ecd0:	9b03      	ldr	r3, [sp, #12]
 801ecd2:	459e      	cmp	lr, r3
 801ecd4:	f040 8229 	bne.w	801f12a <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 801ecd8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801ecdc:	fa0f f58b 	sxth.w	r5, fp
 801ece0:	fa0f f289 	sxth.w	r2, r9
 801ece4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801ece8:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 801ecec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ecf0:	4281      	cmp	r1, r0
 801ecf2:	f43f ae20 	beq.w	801e936 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801ecf6:	8b60      	ldrh	r0, [r4, #26]
 801ecf8:	8b21      	ldrh	r1, [r4, #24]
 801ecfa:	4301      	orrs	r1, r0
 801ecfc:	d00c      	beq.n	801ed18 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	db0a      	blt.n	801ed18 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801ed02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ed04:	428b      	cmp	r3, r1
 801ed06:	da07      	bge.n	801ed18 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801ed08:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801ed0c:	4299      	cmp	r1, r3
 801ed0e:	f0c0 81ff 	bcc.w	801f110 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 801ed12:	2301      	movs	r3, #1
 801ed14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801ed18:	82a5      	strh	r5, [r4, #20]
 801ed1a:	e538      	b.n	801e78e <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801ed1c:	f04f 32ff 	mov.w	r2, #4294967295
 801ed20:	fb0a f306 	mul.w	r3, sl, r6
 801ed24:	f1cb 0b00 	rsb	fp, fp, #0
 801ed28:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	e6d9      	b.n	801eae2 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 801ed2e:	f104 0514 	add.w	r5, r4, #20
 801ed32:	6926      	ldr	r6, [r4, #16]
 801ed34:	cd03      	ldmia	r5!, {r0, r1}
 801ed36:	6030      	str	r0, [r6, #0]
 801ed38:	6071      	str	r1, [r6, #4]
 801ed3a:	6921      	ldr	r1, [r4, #16]
 801ed3c:	3108      	adds	r1, #8
 801ed3e:	6121      	str	r1, [r4, #16]
 801ed40:	68a1      	ldr	r1, [r4, #8]
 801ed42:	3101      	adds	r1, #1
 801ed44:	60a1      	str	r1, [r4, #8]
 801ed46:	e702      	b.n	801eb4e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801ed48:	9b01      	ldr	r3, [sp, #4]
 801ed4a:	f001 011f 	and.w	r1, r1, #31
 801ed4e:	8b20      	ldrh	r0, [r4, #24]
 801ed50:	f003 031f 	and.w	r3, r3, #31
 801ed54:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 801ed58:	930d      	str	r3, [sp, #52]	; 0x34
 801ed5a:	9b02      	ldr	r3, [sp, #8]
 801ed5c:	1b9a      	subs	r2, r3, r6
 801ed5e:	9b05      	ldr	r3, [sp, #20]
 801ed60:	42ab      	cmp	r3, r5
 801ed62:	d107      	bne.n	801ed74 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 801ed64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed66:	4410      	add	r0, r2
 801ed68:	4419      	add	r1, r3
 801ed6a:	8320      	strh	r0, [r4, #24]
 801ed6c:	fb02 9201 	mla	r2, r2, r1, r9
 801ed70:	8362      	strh	r2, [r4, #26]
 801ed72:	e6f1      	b.n	801eb58 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801ed74:	f1bc 0f00 	cmp.w	ip, #0
 801ed78:	f2c0 8093 	blt.w	801eea2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 801ed7c:	f1c1 0320 	rsb	r3, r1, #32
 801ed80:	435a      	muls	r2, r3
 801ed82:	2301      	movs	r3, #1
 801ed84:	9309      	str	r3, [sp, #36]	; 0x24
 801ed86:	2320      	movs	r3, #32
 801ed88:	9307      	str	r3, [sp, #28]
 801ed8a:	9b07      	ldr	r3, [sp, #28]
 801ed8c:	fb92 fefc 	sdiv	lr, r2, ip
 801ed90:	fb0c 221e 	mls	r2, ip, lr, r2
 801ed94:	4419      	add	r1, r3
 801ed96:	2a00      	cmp	r2, #0
 801ed98:	bfbc      	itt	lt
 801ed9a:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801ed9e:	4462      	addlt	r2, ip
 801eda0:	fb0e 9101 	mla	r1, lr, r1, r9
 801eda4:	4470      	add	r0, lr
 801eda6:	b20b      	sxth	r3, r1
 801eda8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801edaa:	b200      	sxth	r0, r0
 801edac:	440d      	add	r5, r1
 801edae:	f9bd 1000 	ldrsh.w	r1, [sp]
 801edb2:	8320      	strh	r0, [r4, #24]
 801edb4:	fa0f f985 	sxth.w	r9, r5
 801edb8:	9106      	str	r1, [sp, #24]
 801edba:	0409      	lsls	r1, r1, #16
 801edbc:	8363      	strh	r3, [r4, #26]
 801edbe:	910a      	str	r1, [sp, #40]	; 0x28
 801edc0:	4449      	add	r1, r9
 801edc2:	42b9      	cmp	r1, r7
 801edc4:	f43f ad3a 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801edc8:	4303      	orrs	r3, r0
 801edca:	d00c      	beq.n	801ede6 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801edcc:	f1b8 0f00 	cmp.w	r8, #0
 801edd0:	db09      	blt.n	801ede6 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801edd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801edd4:	4543      	cmp	r3, r8
 801edd6:	dd06      	ble.n	801ede6 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801edd8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801eddc:	4299      	cmp	r1, r3
 801edde:	d368      	bcc.n	801eeb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 801ede0:	2301      	movs	r3, #1
 801ede2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801ede6:	9b06      	ldr	r3, [sp, #24]
 801ede8:	4476      	add	r6, lr
 801edea:	f8a4 9014 	strh.w	r9, [r4, #20]
 801edee:	82e3      	strh	r3, [r4, #22]
 801edf0:	2300      	movs	r3, #0
 801edf2:	8323      	strh	r3, [r4, #24]
 801edf4:	8363      	strh	r3, [r4, #26]
 801edf6:	9b05      	ldr	r3, [sp, #20]
 801edf8:	42ab      	cmp	r3, r5
 801edfa:	d048      	beq.n	801ee8e <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 801edfc:	9b02      	ldr	r3, [sp, #8]
 801edfe:	eba2 020c 	sub.w	r2, r2, ip
 801ee02:	1b9b      	subs	r3, r3, r6
 801ee04:	4473      	add	r3, lr
 801ee06:	015b      	lsls	r3, r3, #5
 801ee08:	fb93 f8fc 	sdiv	r8, r3, ip
 801ee0c:	fb0c 3318 	mls	r3, ip, r8, r3
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	bfbc      	itt	lt
 801ee14:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801ee18:	4463      	addlt	r3, ip
 801ee1a:	f108 0101 	add.w	r1, r8, #1
 801ee1e:	910f      	str	r1, [sp, #60]	; 0x3c
 801ee20:	18d2      	adds	r2, r2, r3
 801ee22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ee24:	bf56      	itet	pl
 801ee26:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 801ee28:	4640      	movmi	r0, r8
 801ee2a:	eba2 020c 	subpl.w	r2, r2, ip
 801ee2e:	fa0f fe80 	sxth.w	lr, r0
 801ee32:	4406      	add	r6, r0
 801ee34:	0141      	lsls	r1, r0, #5
 801ee36:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee38:	f8a4 e018 	strh.w	lr, [r4, #24]
 801ee3c:	4405      	add	r5, r0
 801ee3e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801ee42:	b209      	sxth	r1, r1
 801ee44:	fa0f f985 	sxth.w	r9, r5
 801ee48:	4438      	add	r0, r7
 801ee4a:	8361      	strh	r1, [r4, #26]
 801ee4c:	444f      	add	r7, r9
 801ee4e:	42b8      	cmp	r0, r7
 801ee50:	f43f acf4 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ee54:	ea5e 0101 	orrs.w	r1, lr, r1
 801ee58:	d00e      	beq.n	801ee78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ee5a:	9906      	ldr	r1, [sp, #24]
 801ee5c:	2900      	cmp	r1, #0
 801ee5e:	db0b      	blt.n	801ee78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ee60:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ee62:	9806      	ldr	r0, [sp, #24]
 801ee64:	4288      	cmp	r0, r1
 801ee66:	da07      	bge.n	801ee78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ee68:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ee6c:	4288      	cmp	r0, r1
 801ee6e:	d330      	bcc.n	801eed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 801ee70:	f04f 0101 	mov.w	r1, #1
 801ee74:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ee78:	9906      	ldr	r1, [sp, #24]
 801ee7a:	f8a4 9014 	strh.w	r9, [r4, #20]
 801ee7e:	82e1      	strh	r1, [r4, #22]
 801ee80:	f04f 0100 	mov.w	r1, #0
 801ee84:	8321      	strh	r1, [r4, #24]
 801ee86:	8361      	strh	r1, [r4, #26]
 801ee88:	9905      	ldr	r1, [sp, #20]
 801ee8a:	42a9      	cmp	r1, r5
 801ee8c:	d1c8      	bne.n	801ee20 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 801ee8e:	9b02      	ldr	r3, [sp, #8]
 801ee90:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ee92:	1b9e      	subs	r6, r3, r6
 801ee94:	9b07      	ldr	r3, [sp, #28]
 801ee96:	3120      	adds	r1, #32
 801ee98:	8326      	strh	r6, [r4, #24]
 801ee9a:	1ac9      	subs	r1, r1, r3
 801ee9c:	434e      	muls	r6, r1
 801ee9e:	8366      	strh	r6, [r4, #26]
 801eea0:	e65a      	b.n	801eb58 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801eea2:	f04f 33ff 	mov.w	r3, #4294967295
 801eea6:	434a      	muls	r2, r1
 801eea8:	f1cc 0c00 	rsb	ip, ip, #0
 801eeac:	9309      	str	r3, [sp, #36]	; 0x24
 801eeae:	2300      	movs	r3, #0
 801eeb0:	e76a      	b.n	801ed88 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 801eeb2:	f104 0314 	add.w	r3, r4, #20
 801eeb6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801eeba:	cb03      	ldmia	r3!, {r0, r1}
 801eebc:	f8c8 0000 	str.w	r0, [r8]
 801eec0:	f8c8 1004 	str.w	r1, [r8, #4]
 801eec4:	6923      	ldr	r3, [r4, #16]
 801eec6:	3308      	adds	r3, #8
 801eec8:	6123      	str	r3, [r4, #16]
 801eeca:	68a3      	ldr	r3, [r4, #8]
 801eecc:	3301      	adds	r3, #1
 801eece:	60a3      	str	r3, [r4, #8]
 801eed0:	e789      	b.n	801ede6 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801eed2:	6921      	ldr	r1, [r4, #16]
 801eed4:	f104 0e14 	add.w	lr, r4, #20
 801eed8:	910e      	str	r1, [sp, #56]	; 0x38
 801eeda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801eedc:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801eee0:	6038      	str	r0, [r7, #0]
 801eee2:	4638      	mov	r0, r7
 801eee4:	6079      	str	r1, [r7, #4]
 801eee6:	6921      	ldr	r1, [r4, #16]
 801eee8:	3108      	adds	r1, #8
 801eeea:	6121      	str	r1, [r4, #16]
 801eeec:	68a1      	ldr	r1, [r4, #8]
 801eeee:	3101      	adds	r1, #1
 801eef0:	60a1      	str	r1, [r4, #8]
 801eef2:	e7c1      	b.n	801ee78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801eef4:	f104 0214 	add.w	r2, r4, #20
 801eef8:	6926      	ldr	r6, [r4, #16]
 801eefa:	ca03      	ldmia	r2!, {r0, r1}
 801eefc:	6030      	str	r0, [r6, #0]
 801eefe:	6071      	str	r1, [r6, #4]
 801ef00:	6922      	ldr	r2, [r4, #16]
 801ef02:	3208      	adds	r2, #8
 801ef04:	6122      	str	r2, [r4, #16]
 801ef06:	68a2      	ldr	r2, [r4, #8]
 801ef08:	3201      	adds	r2, #1
 801ef0a:	60a2      	str	r2, [r4, #8]
 801ef0c:	e647      	b.n	801eb9e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801ef0e:	f104 0514 	add.w	r5, r4, #20
 801ef12:	6926      	ldr	r6, [r4, #16]
 801ef14:	cd03      	ldmia	r5!, {r0, r1}
 801ef16:	6030      	str	r0, [r6, #0]
 801ef18:	6071      	str	r1, [r6, #4]
 801ef1a:	6921      	ldr	r1, [r4, #16]
 801ef1c:	3108      	adds	r1, #8
 801ef1e:	6121      	str	r1, [r4, #16]
 801ef20:	68a1      	ldr	r1, [r4, #8]
 801ef22:	3101      	adds	r1, #1
 801ef24:	60a1      	str	r1, [r4, #8]
 801ef26:	e699      	b.n	801ec5c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ef28:	9b01      	ldr	r3, [sp, #4]
 801ef2a:	ea4f 176c 	mov.w	r7, ip, asr #5
 801ef2e:	8b20      	ldrh	r0, [r4, #24]
 801ef30:	f00c 0c1f 	and.w	ip, ip, #31
 801ef34:	f003 031f 	and.w	r3, r3, #31
 801ef38:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 801ef3c:	9310      	str	r3, [sp, #64]	; 0x40
 801ef3e:	9b06      	ldr	r3, [sp, #24]
 801ef40:	429f      	cmp	r7, r3
 801ef42:	d10a      	bne.n	801ef5a <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 801ef44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef46:	4418      	add	r0, r3
 801ef48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef4a:	449c      	add	ip, r3
 801ef4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef4e:	8320      	strh	r0, [r4, #24]
 801ef50:	fb03 ee0c 	mla	lr, r3, ip, lr
 801ef54:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801ef58:	e686      	b.n	801ec68 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801ef5a:	9b00      	ldr	r3, [sp, #0]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f2c0 80a0 	blt.w	801f0a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 801ef62:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ef64:	f1cc 0320 	rsb	r3, ip, #32
 801ef68:	434b      	muls	r3, r1
 801ef6a:	2101      	movs	r1, #1
 801ef6c:	910e      	str	r1, [sp, #56]	; 0x38
 801ef6e:	2120      	movs	r1, #32
 801ef70:	9a00      	ldr	r2, [sp, #0]
 801ef72:	910d      	str	r1, [sp, #52]	; 0x34
 801ef74:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ef76:	fb93 f5f2 	sdiv	r5, r3, r2
 801ef7a:	fb02 3315 	mls	r3, r2, r5, r3
 801ef7e:	448c      	add	ip, r1
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	bfbc      	itt	lt
 801ef84:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801ef88:	189b      	addlt	r3, r3, r2
 801ef8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef8c:	fb05 ec0c 	mla	ip, r5, ip, lr
 801ef90:	4428      	add	r0, r5
 801ef92:	4417      	add	r7, r2
 801ef94:	fa0f f18c 	sxth.w	r1, ip
 801ef98:	fa0f fc89 	sxth.w	ip, r9
 801ef9c:	fa0f fe87 	sxth.w	lr, r7
 801efa0:	8361      	strh	r1, [r4, #26]
 801efa2:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801efa6:	b200      	sxth	r0, r0
 801efa8:	920f      	str	r2, [sp, #60]	; 0x3c
 801efaa:	4472      	add	r2, lr
 801efac:	8320      	strh	r0, [r4, #24]
 801efae:	4542      	cmp	r2, r8
 801efb0:	f43f ac44 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801efb4:	ea50 0201 	orrs.w	r2, r0, r1
 801efb8:	d00c      	beq.n	801efd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801efba:	2e00      	cmp	r6, #0
 801efbc:	db0a      	blt.n	801efd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801efbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801efc0:	42b1      	cmp	r1, r6
 801efc2:	dd07      	ble.n	801efd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801efc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801efc8:	4288      	cmp	r0, r1
 801efca:	d375      	bcc.n	801f0b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 801efcc:	f04f 0201 	mov.w	r2, #1
 801efd0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801efd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801efd6:	f8a4 e014 	strh.w	lr, [r4, #20]
 801efda:	1956      	adds	r6, r2, r5
 801efdc:	9a06      	ldr	r2, [sp, #24]
 801efde:	f8a4 c016 	strh.w	ip, [r4, #22]
 801efe2:	42ba      	cmp	r2, r7
 801efe4:	f8a4 a018 	strh.w	sl, [r4, #24]
 801efe8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801efec:	d04c      	beq.n	801f088 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 801efee:	9a02      	ldr	r2, [sp, #8]
 801eff0:	1b91      	subs	r1, r2, r6
 801eff2:	9a00      	ldr	r2, [sp, #0]
 801eff4:	440d      	add	r5, r1
 801eff6:	016d      	lsls	r5, r5, #5
 801eff8:	fb95 fef2 	sdiv	lr, r5, r2
 801effc:	fb02 551e 	mls	r5, r2, lr, r5
 801f000:	2d00      	cmp	r5, #0
 801f002:	bfbc      	itt	lt
 801f004:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801f008:	18ad      	addlt	r5, r5, r2
 801f00a:	9a00      	ldr	r2, [sp, #0]
 801f00c:	1a9b      	subs	r3, r3, r2
 801f00e:	f10e 0201 	add.w	r2, lr, #1
 801f012:	9213      	str	r2, [sp, #76]	; 0x4c
 801f014:	195b      	adds	r3, r3, r5
 801f016:	bf57      	itett	pl
 801f018:	9a00      	ldrpl	r2, [sp, #0]
 801f01a:	4670      	movmi	r0, lr
 801f01c:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 801f01e:	1a9b      	subpl	r3, r3, r2
 801f020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f022:	fa0f f880 	sxth.w	r8, r0
 801f026:	4406      	add	r6, r0
 801f028:	4417      	add	r7, r2
 801f02a:	0141      	lsls	r1, r0, #5
 801f02c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801f030:	b23a      	sxth	r2, r7
 801f032:	f8a4 8018 	strh.w	r8, [r4, #24]
 801f036:	b209      	sxth	r1, r1
 801f038:	9211      	str	r2, [sp, #68]	; 0x44
 801f03a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f03c:	8361      	strh	r1, [r4, #26]
 801f03e:	1882      	adds	r2, r0, r2
 801f040:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f042:	9212      	str	r2, [sp, #72]	; 0x48
 801f044:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f046:	4402      	add	r2, r0
 801f048:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f04a:	4290      	cmp	r0, r2
 801f04c:	f43f abf6 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801f050:	ea58 0201 	orrs.w	r2, r8, r1
 801f054:	d00d      	beq.n	801f072 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801f056:	f1bc 0f00 	cmp.w	ip, #0
 801f05a:	db0a      	blt.n	801f072 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801f05c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f05e:	458c      	cmp	ip, r1
 801f060:	da07      	bge.n	801f072 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801f062:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801f066:	4288      	cmp	r0, r1
 801f068:	d336      	bcc.n	801f0d8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 801f06a:	f04f 0201 	mov.w	r2, #1
 801f06e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801f072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f074:	f8a4 c016 	strh.w	ip, [r4, #22]
 801f078:	82a2      	strh	r2, [r4, #20]
 801f07a:	9a06      	ldr	r2, [sp, #24]
 801f07c:	f8a4 a018 	strh.w	sl, [r4, #24]
 801f080:	42ba      	cmp	r2, r7
 801f082:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801f086:	d1c5      	bne.n	801f014 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 801f088:	9b02      	ldr	r3, [sp, #8]
 801f08a:	1b9e      	subs	r6, r3, r6
 801f08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f08e:	f103 0c20 	add.w	ip, r3, #32
 801f092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f094:	8326      	strh	r6, [r4, #24]
 801f096:	ebac 0c03 	sub.w	ip, ip, r3
 801f09a:	fb06 f60c 	mul.w	r6, r6, ip
 801f09e:	8366      	strh	r6, [r4, #26]
 801f0a0:	e5e2      	b.n	801ec68 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801f0a2:	9a00      	ldr	r2, [sp, #0]
 801f0a4:	f04f 31ff 	mov.w	r1, #4294967295
 801f0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0aa:	4252      	negs	r2, r2
 801f0ac:	910e      	str	r1, [sp, #56]	; 0x38
 801f0ae:	fb03 f30c 	mul.w	r3, r3, ip
 801f0b2:	2100      	movs	r1, #0
 801f0b4:	9200      	str	r2, [sp, #0]
 801f0b6:	e75b      	b.n	801ef70 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 801f0b8:	f104 0614 	add.w	r6, r4, #20
 801f0bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801f0c0:	ce03      	ldmia	r6!, {r0, r1}
 801f0c2:	f8c8 0000 	str.w	r0, [r8]
 801f0c6:	f8c8 1004 	str.w	r1, [r8, #4]
 801f0ca:	6921      	ldr	r1, [r4, #16]
 801f0cc:	3108      	adds	r1, #8
 801f0ce:	6121      	str	r1, [r4, #16]
 801f0d0:	68a1      	ldr	r1, [r4, #8]
 801f0d2:	3101      	adds	r1, #1
 801f0d4:	60a1      	str	r1, [r4, #8]
 801f0d6:	e77d      	b.n	801efd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801f0d8:	f104 0814 	add.w	r8, r4, #20
 801f0dc:	6922      	ldr	r2, [r4, #16]
 801f0de:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801f0e2:	9212      	str	r2, [sp, #72]	; 0x48
 801f0e4:	6010      	str	r0, [r2, #0]
 801f0e6:	6051      	str	r1, [r2, #4]
 801f0e8:	6921      	ldr	r1, [r4, #16]
 801f0ea:	3108      	adds	r1, #8
 801f0ec:	6121      	str	r1, [r4, #16]
 801f0ee:	68a1      	ldr	r1, [r4, #8]
 801f0f0:	3101      	adds	r1, #1
 801f0f2:	60a1      	str	r1, [r4, #8]
 801f0f4:	e7bd      	b.n	801f072 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801f0f6:	f104 0214 	add.w	r2, r4, #20
 801f0fa:	6926      	ldr	r6, [r4, #16]
 801f0fc:	ca03      	ldmia	r2!, {r0, r1}
 801f0fe:	6030      	str	r0, [r6, #0]
 801f100:	6071      	str	r1, [r6, #4]
 801f102:	6922      	ldr	r2, [r4, #16]
 801f104:	3208      	adds	r2, #8
 801f106:	6122      	str	r2, [r4, #16]
 801f108:	68a2      	ldr	r2, [r4, #8]
 801f10a:	3201      	adds	r2, #1
 801f10c:	60a2      	str	r2, [r4, #8]
 801f10e:	e5ce      	b.n	801ecae <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801f110:	f104 0314 	add.w	r3, r4, #20
 801f114:	6926      	ldr	r6, [r4, #16]
 801f116:	cb03      	ldmia	r3!, {r0, r1}
 801f118:	6030      	str	r0, [r6, #0]
 801f11a:	6071      	str	r1, [r6, #4]
 801f11c:	6923      	ldr	r3, [r4, #16]
 801f11e:	3308      	adds	r3, #8
 801f120:	6123      	str	r3, [r4, #16]
 801f122:	68a3      	ldr	r3, [r4, #8]
 801f124:	3301      	adds	r3, #1
 801f126:	60a3      	str	r3, [r4, #8]
 801f128:	e5f6      	b.n	801ed18 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801f12a:	9b01      	ldr	r3, [sp, #4]
 801f12c:	8b20      	ldrh	r0, [r4, #24]
 801f12e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 801f132:	f003 021f 	and.w	r2, r3, #31
 801f136:	9b04      	ldr	r3, [sp, #16]
 801f138:	45dc      	cmp	ip, fp
 801f13a:	8b66      	ldrh	r6, [r4, #26]
 801f13c:	f003 031f 	and.w	r3, r3, #31
 801f140:	9305      	str	r3, [sp, #20]
 801f142:	9b03      	ldr	r3, [sp, #12]
 801f144:	eba3 050e 	sub.w	r5, r3, lr
 801f148:	d108      	bne.n	801f15c <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 801f14a:	9b05      	ldr	r3, [sp, #20]
 801f14c:	4428      	add	r0, r5
 801f14e:	441a      	add	r2, r3
 801f150:	8320      	strh	r0, [r4, #24]
 801f152:	fb05 6502 	mla	r5, r5, r2, r6
 801f156:	8365      	strh	r5, [r4, #26]
 801f158:	f7ff bbed 	b.w	801e936 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801f15c:	9b04      	ldr	r3, [sp, #16]
 801f15e:	9901      	ldr	r1, [sp, #4]
 801f160:	1a5b      	subs	r3, r3, r1
 801f162:	9300      	str	r3, [sp, #0]
 801f164:	f100 809c 	bmi.w	801f2a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 801f168:	f1c2 0120 	rsb	r1, r2, #32
 801f16c:	434d      	muls	r5, r1
 801f16e:	2101      	movs	r1, #1
 801f170:	9102      	str	r1, [sp, #8]
 801f172:	2120      	movs	r1, #32
 801f174:	9b00      	ldr	r3, [sp, #0]
 801f176:	9101      	str	r1, [sp, #4]
 801f178:	9901      	ldr	r1, [sp, #4]
 801f17a:	fb95 f7f3 	sdiv	r7, r5, r3
 801f17e:	fb03 5517 	mls	r5, r3, r7, r5
 801f182:	440a      	add	r2, r1
 801f184:	2d00      	cmp	r5, #0
 801f186:	bfbc      	itt	lt
 801f188:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801f18c:	18ed      	addlt	r5, r5, r3
 801f18e:	fb07 6202 	mla	r2, r7, r2, r6
 801f192:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801f196:	4438      	add	r0, r7
 801f198:	b211      	sxth	r1, r2
 801f19a:	9a02      	ldr	r2, [sp, #8]
 801f19c:	b200      	sxth	r0, r0
 801f19e:	4494      	add	ip, r2
 801f1a0:	fa0f f289 	sxth.w	r2, r9
 801f1a4:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801f1a8:	0413      	lsls	r3, r2, #16
 801f1aa:	8320      	strh	r0, [r4, #24]
 801f1ac:	fa0f f88c 	sxth.w	r8, ip
 801f1b0:	8361      	strh	r1, [r4, #26]
 801f1b2:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 801f1b6:	9304      	str	r3, [sp, #16]
 801f1b8:	eb08 0a03 	add.w	sl, r8, r3
 801f1bc:	45d1      	cmp	r9, sl
 801f1be:	f43f ab3d 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801f1c2:	ea50 0301 	orrs.w	r3, r0, r1
 801f1c6:	d00b      	beq.n	801f1e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801f1c8:	2e00      	cmp	r6, #0
 801f1ca:	db09      	blt.n	801f1e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801f1cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f1ce:	428e      	cmp	r6, r1
 801f1d0:	da06      	bge.n	801f1e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801f1d2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801f1d6:	4288      	cmp	r0, r1
 801f1d8:	d36b      	bcc.n	801f2b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 801f1da:	2101      	movs	r1, #1
 801f1dc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801f1e0:	2100      	movs	r1, #0
 801f1e2:	45e3      	cmp	fp, ip
 801f1e4:	f8a4 8014 	strh.w	r8, [r4, #20]
 801f1e8:	44be      	add	lr, r7
 801f1ea:	82e2      	strh	r2, [r4, #22]
 801f1ec:	8321      	strh	r1, [r4, #24]
 801f1ee:	8361      	strh	r1, [r4, #26]
 801f1f0:	d047      	beq.n	801f282 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 801f1f2:	9b03      	ldr	r3, [sp, #12]
 801f1f4:	f04f 0900 	mov.w	r9, #0
 801f1f8:	eba3 060e 	sub.w	r6, r3, lr
 801f1fc:	9b00      	ldr	r3, [sp, #0]
 801f1fe:	443e      	add	r6, r7
 801f200:	0176      	lsls	r6, r6, #5
 801f202:	fb96 f7f3 	sdiv	r7, r6, r3
 801f206:	fb03 6617 	mls	r6, r3, r7, r6
 801f20a:	428e      	cmp	r6, r1
 801f20c:	bfbc      	itt	lt
 801f20e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801f212:	18f6      	addlt	r6, r6, r3
 801f214:	9b00      	ldr	r3, [sp, #0]
 801f216:	1aed      	subs	r5, r5, r3
 801f218:	1c7b      	adds	r3, r7, #1
 801f21a:	9307      	str	r3, [sp, #28]
 801f21c:	19ad      	adds	r5, r5, r6
 801f21e:	bf57      	itett	pl
 801f220:	9b00      	ldrpl	r3, [sp, #0]
 801f222:	4638      	movmi	r0, r7
 801f224:	9807      	ldrpl	r0, [sp, #28]
 801f226:	1aed      	subpl	r5, r5, r3
 801f228:	9b02      	ldr	r3, [sp, #8]
 801f22a:	fa0f f880 	sxth.w	r8, r0
 801f22e:	4486      	add	lr, r0
 801f230:	449c      	add	ip, r3
 801f232:	0141      	lsls	r1, r0, #5
 801f234:	9b04      	ldr	r3, [sp, #16]
 801f236:	fa0f fa8c 	sxth.w	sl, ip
 801f23a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801f23e:	b209      	sxth	r1, r1
 801f240:	f8a4 8018 	strh.w	r8, [r4, #24]
 801f244:	4418      	add	r0, r3
 801f246:	4453      	add	r3, sl
 801f248:	8361      	strh	r1, [r4, #26]
 801f24a:	4298      	cmp	r0, r3
 801f24c:	f43f aaf6 	beq.w	801e83c <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801f250:	ea58 0301 	orrs.w	r3, r8, r1
 801f254:	d00c      	beq.n	801f270 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f256:	2a00      	cmp	r2, #0
 801f258:	db0a      	blt.n	801f270 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f25a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f25c:	428a      	cmp	r2, r1
 801f25e:	da07      	bge.n	801f270 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f260:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801f264:	4288      	cmp	r0, r1
 801f266:	d334      	bcc.n	801f2d2 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 801f268:	f04f 0301 	mov.w	r3, #1
 801f26c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f270:	45e3      	cmp	fp, ip
 801f272:	f8a4 a014 	strh.w	sl, [r4, #20]
 801f276:	82e2      	strh	r2, [r4, #22]
 801f278:	f8a4 9018 	strh.w	r9, [r4, #24]
 801f27c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f280:	d1cc      	bne.n	801f21c <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 801f282:	9b03      	ldr	r3, [sp, #12]
 801f284:	9e05      	ldr	r6, [sp, #20]
 801f286:	eba3 0e0e 	sub.w	lr, r3, lr
 801f28a:	9b01      	ldr	r3, [sp, #4]
 801f28c:	3620      	adds	r6, #32
 801f28e:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f292:	1af6      	subs	r6, r6, r3
 801f294:	fb0e fe06 	mul.w	lr, lr, r6
 801f298:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f29c:	f7ff bb4b 	b.w	801e936 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801f2a0:	9b00      	ldr	r3, [sp, #0]
 801f2a2:	f04f 31ff 	mov.w	r1, #4294967295
 801f2a6:	4355      	muls	r5, r2
 801f2a8:	425b      	negs	r3, r3
 801f2aa:	9102      	str	r1, [sp, #8]
 801f2ac:	2100      	movs	r1, #0
 801f2ae:	9300      	str	r3, [sp, #0]
 801f2b0:	e760      	b.n	801f174 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 801f2b2:	f104 0614 	add.w	r6, r4, #20
 801f2b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f2ba:	ce03      	ldmia	r6!, {r0, r1}
 801f2bc:	f8c9 0000 	str.w	r0, [r9]
 801f2c0:	f8c9 1004 	str.w	r1, [r9, #4]
 801f2c4:	6921      	ldr	r1, [r4, #16]
 801f2c6:	3108      	adds	r1, #8
 801f2c8:	6121      	str	r1, [r4, #16]
 801f2ca:	68a1      	ldr	r1, [r4, #8]
 801f2cc:	3101      	adds	r1, #1
 801f2ce:	60a1      	str	r1, [r4, #8]
 801f2d0:	e786      	b.n	801f1e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801f2d2:	f104 0814 	add.w	r8, r4, #20
 801f2d6:	6923      	ldr	r3, [r4, #16]
 801f2d8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801f2dc:	9306      	str	r3, [sp, #24]
 801f2de:	6018      	str	r0, [r3, #0]
 801f2e0:	6059      	str	r1, [r3, #4]
 801f2e2:	6921      	ldr	r1, [r4, #16]
 801f2e4:	3108      	adds	r1, #8
 801f2e6:	6121      	str	r1, [r4, #16]
 801f2e8:	68a1      	ldr	r1, [r4, #8]
 801f2ea:	3101      	adds	r1, #1
 801f2ec:	60a1      	str	r1, [r4, #8]
 801f2ee:	e7bf      	b.n	801f270 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0801f2f0 <_ZN8touchgfx7Outline6lineToEii>:
 801f2f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f2f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f2f4:	4604      	mov	r4, r0
 801f2f6:	460d      	mov	r5, r1
 801f2f8:	4616      	mov	r6, r2
 801f2fa:	079b      	lsls	r3, r3, #30
 801f2fc:	d526      	bpl.n	801f34c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f2fe:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801f302:	ea85 0001 	eor.w	r0, r5, r1
 801f306:	ea86 0302 	eor.w	r3, r6, r2
 801f30a:	4303      	orrs	r3, r0
 801f30c:	d01e      	beq.n	801f34c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f30e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f310:	114b      	asrs	r3, r1, #5
 801f312:	9600      	str	r6, [sp, #0]
 801f314:	4283      	cmp	r3, r0
 801f316:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f318:	bfb8      	it	lt
 801f31a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f31c:	3301      	adds	r3, #1
 801f31e:	4283      	cmp	r3, r0
 801f320:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f322:	bfc8      	it	gt
 801f324:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f326:	116b      	asrs	r3, r5, #5
 801f328:	4283      	cmp	r3, r0
 801f32a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f32c:	bfb8      	it	lt
 801f32e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f330:	3301      	adds	r3, #1
 801f332:	4283      	cmp	r3, r0
 801f334:	4620      	mov	r0, r4
 801f336:	bfc8      	it	gt
 801f338:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f33a:	462b      	mov	r3, r5
 801f33c:	f7ff f9c6 	bl	801e6cc <_ZN8touchgfx7Outline10renderLineEiiii>
 801f340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f342:	f043 0301 	orr.w	r3, r3, #1
 801f346:	e9c4 5607 	strd	r5, r6, [r4, #28]
 801f34a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f34c:	b002      	add	sp, #8
 801f34e:	bd70      	pop	{r4, r5, r6, pc}

0801f350 <_ZN8touchgfx7Outline6moveToEii>:
 801f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f352:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f354:	4615      	mov	r5, r2
 801f356:	4604      	mov	r4, r0
 801f358:	460e      	mov	r6, r1
 801f35a:	079a      	lsls	r2, r3, #30
 801f35c:	d401      	bmi.n	801f362 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801f35e:	f7ff f96e 	bl	801e63e <_ZN8touchgfx7Outline5resetEv>
 801f362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f364:	07db      	lsls	r3, r3, #31
 801f366:	d504      	bpl.n	801f372 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801f368:	4620      	mov	r0, r4
 801f36a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 801f36e:	f7ff ffbf 	bl	801f2f0 <_ZN8touchgfx7Outline6lineToEii>
 801f372:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801f376:	f346 1c4f 	sbfx	ip, r6, #5, #16
 801f37a:	f345 174f 	sbfx	r7, r5, #5, #16
 801f37e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801f382:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 801f386:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 801f38a:	428a      	cmp	r2, r1
 801f38c:	d015      	beq.n	801f3ba <_ZN8touchgfx7Outline6moveToEii+0x6a>
 801f38e:	8b61      	ldrh	r1, [r4, #26]
 801f390:	8b22      	ldrh	r2, [r4, #24]
 801f392:	430a      	orrs	r2, r1
 801f394:	d00b      	beq.n	801f3ae <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f396:	2b00      	cmp	r3, #0
 801f398:	db09      	blt.n	801f3ae <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f39a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f39c:	4293      	cmp	r3, r2
 801f39e:	da06      	bge.n	801f3ae <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f3a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 801f3a4:	429a      	cmp	r2, r3
 801f3a6:	d30d      	bcc.n	801f3c4 <_ZN8touchgfx7Outline6moveToEii+0x74>
 801f3a8:	2301      	movs	r3, #1
 801f3aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f3ae:	2300      	movs	r3, #0
 801f3b0:	f8a4 c014 	strh.w	ip, [r4, #20]
 801f3b4:	82e7      	strh	r7, [r4, #22]
 801f3b6:	8323      	strh	r3, [r4, #24]
 801f3b8:	8363      	strh	r3, [r4, #26]
 801f3ba:	61e6      	str	r6, [r4, #28]
 801f3bc:	62a5      	str	r5, [r4, #40]	; 0x28
 801f3be:	e9c4 5608 	strd	r5, r6, [r4, #32]
 801f3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3c4:	f104 0314 	add.w	r3, r4, #20
 801f3c8:	6922      	ldr	r2, [r4, #16]
 801f3ca:	cb03      	ldmia	r3!, {r0, r1}
 801f3cc:	6010      	str	r0, [r2, #0]
 801f3ce:	6051      	str	r1, [r2, #4]
 801f3d0:	6923      	ldr	r3, [r4, #16]
 801f3d2:	3308      	adds	r3, #8
 801f3d4:	6123      	str	r3, [r4, #16]
 801f3d6:	68a3      	ldr	r3, [r4, #8]
 801f3d8:	3301      	adds	r3, #1
 801f3da:	60a3      	str	r3, [r4, #8]
 801f3dc:	e7e7      	b.n	801f3ae <_ZN8touchgfx7Outline6moveToEii+0x5e>

0801f3de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801f3de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3e2:	b0d1      	sub	sp, #324	; 0x144
 801f3e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801f3e8:	466c      	mov	r4, sp
 801f3ea:	1a0d      	subs	r5, r1, r0
 801f3ec:	f100 0208 	add.w	r2, r0, #8
 801f3f0:	2d48      	cmp	r5, #72	; 0x48
 801f3f2:	f340 80ba 	ble.w	801f56a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801f3f6:	112d      	asrs	r5, r5, #4
 801f3f8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801f3fc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801f400:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801f404:	f9b0 8000 	ldrsh.w	r8, [r0]
 801f408:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801f40c:	681e      	ldr	r6, [r3, #0]
 801f40e:	6006      	str	r6, [r0, #0]
 801f410:	685e      	ldr	r6, [r3, #4]
 801f412:	6046      	str	r6, [r0, #4]
 801f414:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 801f418:	f8a3 e002 	strh.w	lr, [r3, #2]
 801f41c:	f8a3 c004 	strh.w	ip, [r3, #4]
 801f420:	80df      	strh	r7, [r3, #6]
 801f422:	f1a1 0308 	sub.w	r3, r1, #8
 801f426:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801f42a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801f42e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801f432:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801f436:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801f43a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f43e:	4565      	cmp	r5, ip
 801f440:	da0f      	bge.n	801f462 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801f442:	681d      	ldr	r5, [r3, #0]
 801f444:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 801f448:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 801f44c:	6015      	str	r5, [r2, #0]
 801f44e:	685d      	ldr	r5, [r3, #4]
 801f450:	6055      	str	r5, [r2, #4]
 801f452:	f821 7c08 	strh.w	r7, [r1, #-8]
 801f456:	f821 6c06 	strh.w	r6, [r1, #-6]
 801f45a:	f821 ec04 	strh.w	lr, [r1, #-4]
 801f45e:	f821 cc02 	strh.w	ip, [r1, #-2]
 801f462:	f9b0 7000 	ldrsh.w	r7, [r0]
 801f466:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801f46a:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801f46e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f472:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f476:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801f47a:	45ac      	cmp	ip, r5
 801f47c:	da0d      	bge.n	801f49a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 801f47e:	6815      	ldr	r5, [r2, #0]
 801f480:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801f484:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801f488:	6005      	str	r5, [r0, #0]
 801f48a:	6855      	ldr	r5, [r2, #4]
 801f48c:	8107      	strh	r7, [r0, #8]
 801f48e:	6045      	str	r5, [r0, #4]
 801f490:	8146      	strh	r6, [r0, #10]
 801f492:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801f496:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801f49a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801f49e:	f9b0 7000 	ldrsh.w	r7, [r0]
 801f4a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801f4a6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801f4aa:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801f4ae:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f4b2:	4565      	cmp	r5, ip
 801f4b4:	da0f      	bge.n	801f4d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801f4b6:	681d      	ldr	r5, [r3, #0]
 801f4b8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801f4bc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801f4c0:	6005      	str	r5, [r0, #0]
 801f4c2:	685d      	ldr	r5, [r3, #4]
 801f4c4:	6045      	str	r5, [r0, #4]
 801f4c6:	f821 7c08 	strh.w	r7, [r1, #-8]
 801f4ca:	f821 6c06 	strh.w	r6, [r1, #-6]
 801f4ce:	f821 ec04 	strh.w	lr, [r1, #-4]
 801f4d2:	f821 cc02 	strh.w	ip, [r1, #-2]
 801f4d6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 801f4da:	f102 0508 	add.w	r5, r2, #8
 801f4de:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801f4e2:	f9b0 e000 	ldrsh.w	lr, [r0]
 801f4e6:	462f      	mov	r7, r5
 801f4e8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801f4ec:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 801f4f0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 801f4f4:	4556      	cmp	r6, sl
 801f4f6:	db18      	blt.n	801f52a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 801f4f8:	3b08      	subs	r3, #8
 801f4fa:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 801f4fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f502:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801f506:	45b2      	cmp	sl, r6
 801f508:	dbf6      	blt.n	801f4f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 801f50a:	42ab      	cmp	r3, r5
 801f50c:	681e      	ldr	r6, [r3, #0]
 801f50e:	d30e      	bcc.n	801f52e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 801f510:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801f514:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801f518:	602e      	str	r6, [r5, #0]
 801f51a:	685e      	ldr	r6, [r3, #4]
 801f51c:	606e      	str	r6, [r5, #4]
 801f51e:	f8a3 9000 	strh.w	r9, [r3]
 801f522:	f8a3 8002 	strh.w	r8, [r3, #2]
 801f526:	809f      	strh	r7, [r3, #4]
 801f528:	80da      	strh	r2, [r3, #6]
 801f52a:	462a      	mov	r2, r5
 801f52c:	e7d3      	b.n	801f4d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801f52e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801f532:	6006      	str	r6, [r0, #0]
 801f534:	685e      	ldr	r6, [r3, #4]
 801f536:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801f53a:	6046      	str	r6, [r0, #4]
 801f53c:	1a1e      	subs	r6, r3, r0
 801f53e:	80da      	strh	r2, [r3, #6]
 801f540:	1b4a      	subs	r2, r1, r5
 801f542:	f8a3 e000 	strh.w	lr, [r3]
 801f546:	10d2      	asrs	r2, r2, #3
 801f548:	f8a3 c002 	strh.w	ip, [r3, #2]
 801f54c:	f8a3 8004 	strh.w	r8, [r3, #4]
 801f550:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801f554:	bfb5      	itete	lt
 801f556:	e9c4 0300 	strdlt	r0, r3, [r4]
 801f55a:	4607      	movge	r7, r0
 801f55c:	460b      	movlt	r3, r1
 801f55e:	e9c4 5100 	strdge	r5, r1, [r4]
 801f562:	4638      	mov	r0, r7
 801f564:	3408      	adds	r4, #8
 801f566:	4619      	mov	r1, r3
 801f568:	e73f      	b.n	801f3ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801f56a:	4291      	cmp	r1, r2
 801f56c:	d925      	bls.n	801f5ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 801f56e:	f1a2 0310 	sub.w	r3, r2, #16
 801f572:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 801f576:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 801f57a:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 801f57e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801f582:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 801f586:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801f58a:	42ae      	cmp	r6, r5
 801f58c:	da13      	bge.n	801f5b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 801f58e:	461d      	mov	r5, r3
 801f590:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 801f594:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 801f598:	3b08      	subs	r3, #8
 801f59a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801f59e:	619e      	str	r6, [r3, #24]
 801f5a0:	42a8      	cmp	r0, r5
 801f5a2:	686e      	ldr	r6, [r5, #4]
 801f5a4:	f8a3 c010 	strh.w	ip, [r3, #16]
 801f5a8:	61de      	str	r6, [r3, #28]
 801f5aa:	825f      	strh	r7, [r3, #18]
 801f5ac:	f8a3 8014 	strh.w	r8, [r3, #20]
 801f5b0:	f8a3 e016 	strh.w	lr, [r3, #22]
 801f5b4:	d1dd      	bne.n	801f572 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 801f5b6:	3208      	adds	r2, #8
 801f5b8:	e7d7      	b.n	801f56a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801f5ba:	466b      	mov	r3, sp
 801f5bc:	429c      	cmp	r4, r3
 801f5be:	d903      	bls.n	801f5c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 801f5c0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801f5c4:	3c08      	subs	r4, #8
 801f5c6:	e710      	b.n	801f3ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801f5c8:	b051      	add	sp, #324	; 0x144
 801f5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5ce <_ZN8touchgfx7Outline9sortCellsEv>:
 801f5ce:	6881      	ldr	r1, [r0, #8]
 801f5d0:	b111      	cbz	r1, 801f5d8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 801f5d2:	68c0      	ldr	r0, [r0, #12]
 801f5d4:	f7ff bf03 	b.w	801f3de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801f5d8:	4770      	bx	lr

0801f5da <_ZN8touchgfx7Outline8getCellsEv>:
 801f5da:	b510      	push	{r4, lr}
 801f5dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f5de:	4604      	mov	r4, r0
 801f5e0:	07da      	lsls	r2, r3, #31
 801f5e2:	d507      	bpl.n	801f5f4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 801f5e4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 801f5e8:	f7ff fe82 	bl	801f2f0 <_ZN8touchgfx7Outline6lineToEii>
 801f5ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f5ee:	f023 0301 	bic.w	r3, r3, #1
 801f5f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f5f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f5f6:	079b      	lsls	r3, r3, #30
 801f5f8:	d51a      	bpl.n	801f630 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 801f5fa:	8b62      	ldrh	r2, [r4, #26]
 801f5fc:	8b23      	ldrh	r3, [r4, #24]
 801f5fe:	4313      	orrs	r3, r2
 801f600:	d00d      	beq.n	801f61e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f602:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801f606:	2b00      	cmp	r3, #0
 801f608:	db09      	blt.n	801f61e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f60a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f60c:	4293      	cmp	r3, r2
 801f60e:	da06      	bge.n	801f61e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f610:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801f614:	429a      	cmp	r2, r3
 801f616:	d80d      	bhi.n	801f634 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 801f618:	2301      	movs	r3, #1
 801f61a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f61e:	68a0      	ldr	r0, [r4, #8]
 801f620:	b138      	cbz	r0, 801f632 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 801f622:	4620      	mov	r0, r4
 801f624:	f7ff ffd3 	bl	801f5ce <_ZN8touchgfx7Outline9sortCellsEv>
 801f628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f62a:	f023 0302 	bic.w	r3, r3, #2
 801f62e:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f630:	68e0      	ldr	r0, [r4, #12]
 801f632:	bd10      	pop	{r4, pc}
 801f634:	f104 0314 	add.w	r3, r4, #20
 801f638:	6922      	ldr	r2, [r4, #16]
 801f63a:	cb03      	ldmia	r3!, {r0, r1}
 801f63c:	6010      	str	r0, [r2, #0]
 801f63e:	6051      	str	r1, [r2, #4]
 801f640:	6923      	ldr	r3, [r4, #16]
 801f642:	3308      	adds	r3, #8
 801f644:	6123      	str	r3, [r4, #16]
 801f646:	68a3      	ldr	r3, [r4, #8]
 801f648:	3301      	adds	r3, #1
 801f64a:	60a3      	str	r3, [r4, #8]
 801f64c:	e7e7      	b.n	801f61e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0801f64e <_ZN8touchgfx8ScanlineD1Ev>:
 801f64e:	4770      	bx	lr

0801f650 <_ZN8touchgfx8ScanlineD0Ev>:
 801f650:	b510      	push	{r4, lr}
 801f652:	4604      	mov	r4, r0
 801f654:	2124      	movs	r1, #36	; 0x24
 801f656:	f000 f888 	bl	801f76a <_ZdlPvj>
 801f65a:	4620      	mov	r0, r4
 801f65c:	bd10      	pop	{r4, pc}

0801f65e <_ZN8touchgfx8Scanline5resetEv>:
 801f65e:	b510      	push	{r4, lr}
 801f660:	4604      	mov	r4, r0
 801f662:	f7f1 fc09 	bl	8010e78 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 801f666:	61a0      	str	r0, [r4, #24]
 801f668:	f7f1 fc0c 	bl	8010e84 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 801f66c:	61e0      	str	r0, [r4, #28]
 801f66e:	f7f1 fc0f 	bl	8010e90 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 801f672:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f676:	6220      	str	r0, [r4, #32]
 801f678:	6160      	str	r0, [r4, #20]
 801f67a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801f67e:	69e3      	ldr	r3, [r4, #28]
 801f680:	6123      	str	r3, [r4, #16]
 801f682:	2300      	movs	r3, #0
 801f684:	60e3      	str	r3, [r4, #12]
 801f686:	bd10      	pop	{r4, pc}

0801f688 <_ZN8touchgfx8ScanlineC1Ev>:
 801f688:	4b09      	ldr	r3, [pc, #36]	; (801f6b0 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 801f68a:	b510      	push	{r4, lr}
 801f68c:	6003      	str	r3, [r0, #0]
 801f68e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f692:	4604      	mov	r4, r0
 801f694:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801f698:	2300      	movs	r3, #0
 801f69a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f69e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801f6a2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801f6a6:	f7ff ffda 	bl	801f65e <_ZN8touchgfx8Scanline5resetEv>
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	bd10      	pop	{r4, pc}
 801f6ae:	bf00      	nop
 801f6b0:	08024e2c 	.word	0x08024e2c

0801f6b4 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 801f6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6b8:	1e0c      	subs	r4, r1, #0
 801f6ba:	4605      	mov	r5, r0
 801f6bc:	4617      	mov	r7, r2
 801f6be:	461e      	mov	r6, r3
 801f6c0:	da03      	bge.n	801f6ca <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 801f6c2:	4426      	add	r6, r4
 801f6c4:	2e01      	cmp	r6, #1
 801f6c6:	d421      	bmi.n	801f70c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801f6c8:	2400      	movs	r4, #0
 801f6ca:	f7f1 fbcf 	bl	8010e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f6ce:	42a0      	cmp	r0, r4
 801f6d0:	dd1c      	ble.n	801f70c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801f6d2:	eb04 0806 	add.w	r8, r4, r6
 801f6d6:	f7f1 fbc9 	bl	8010e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f6da:	4580      	cmp	r8, r0
 801f6dc:	d902      	bls.n	801f6e4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 801f6de:	f7f1 fbc5 	bl	8010e6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f6e2:	1b06      	subs	r6, r0, r4
 801f6e4:	69a8      	ldr	r0, [r5, #24]
 801f6e6:	4632      	mov	r2, r6
 801f6e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801f6ec:	4420      	add	r0, r4
 801f6ee:	f7f4 f969 	bl	80139c4 <_ZN8touchgfx6memsetEPvhm>
 801f6f2:	686b      	ldr	r3, [r5, #4]
 801f6f4:	b2b2      	uxth	r2, r6
 801f6f6:	3301      	adds	r3, #1
 801f6f8:	42a3      	cmp	r3, r4
 801f6fa:	696b      	ldr	r3, [r5, #20]
 801f6fc:	d108      	bne.n	801f710 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 801f6fe:	8819      	ldrh	r1, [r3, #0]
 801f700:	440a      	add	r2, r1
 801f702:	801a      	strh	r2, [r3, #0]
 801f704:	3c01      	subs	r4, #1
 801f706:	4434      	add	r4, r6
 801f708:	e9c5 4701 	strd	r4, r7, [r5, #4]
 801f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f710:	1c99      	adds	r1, r3, #2
 801f712:	6169      	str	r1, [r5, #20]
 801f714:	805a      	strh	r2, [r3, #2]
 801f716:	692b      	ldr	r3, [r5, #16]
 801f718:	1c9a      	adds	r2, r3, #2
 801f71a:	612a      	str	r2, [r5, #16]
 801f71c:	805c      	strh	r4, [r3, #2]
 801f71e:	68eb      	ldr	r3, [r5, #12]
 801f720:	3301      	adds	r3, #1
 801f722:	60eb      	str	r3, [r5, #12]
 801f724:	e7ee      	b.n	801f704 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0801f726 <_ZN8touchgfx15RenderingBufferD1Ev>:
 801f726:	4770      	bx	lr

0801f728 <_ZN8touchgfx15RenderingBufferD0Ev>:
 801f728:	b510      	push	{r4, lr}
 801f72a:	4604      	mov	r4, r0
 801f72c:	2118      	movs	r1, #24
 801f72e:	f000 f81c 	bl	801f76a <_ZdlPvj>
 801f732:	4620      	mov	r0, r4
 801f734:	bd10      	pop	{r4, pc}
	...

0801f738 <_ZN8touchgfx15RenderingBufferC1Ev>:
 801f738:	4a04      	ldr	r2, [pc, #16]	; (801f74c <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 801f73a:	6002      	str	r2, [r0, #0]
 801f73c:	2200      	movs	r2, #0
 801f73e:	6042      	str	r2, [r0, #4]
 801f740:	7202      	strb	r2, [r0, #8]
 801f742:	6142      	str	r2, [r0, #20]
 801f744:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801f748:	4770      	bx	lr
 801f74a:	bf00      	nop
 801f74c:	08024e3c 	.word	0x08024e3c

0801f750 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 801f750:	60c3      	str	r3, [r0, #12]
 801f752:	9b00      	ldr	r3, [sp, #0]
 801f754:	6041      	str	r1, [r0, #4]
 801f756:	6103      	str	r3, [r0, #16]
 801f758:	9b01      	ldr	r3, [sp, #4]
 801f75a:	7202      	strb	r2, [r0, #8]
 801f75c:	6143      	str	r3, [r0, #20]
 801f75e:	4770      	bx	lr

0801f760 <__aeabi_atexit>:
 801f760:	460b      	mov	r3, r1
 801f762:	4601      	mov	r1, r0
 801f764:	4618      	mov	r0, r3
 801f766:	f000 b857 	b.w	801f818 <__cxa_atexit>

0801f76a <_ZdlPvj>:
 801f76a:	f000 b812 	b.w	801f792 <_ZdlPv>

0801f76e <__cxa_guard_acquire>:
 801f76e:	6803      	ldr	r3, [r0, #0]
 801f770:	07db      	lsls	r3, r3, #31
 801f772:	d406      	bmi.n	801f782 <__cxa_guard_acquire+0x14>
 801f774:	7843      	ldrb	r3, [r0, #1]
 801f776:	b103      	cbz	r3, 801f77a <__cxa_guard_acquire+0xc>
 801f778:	deff      	udf	#255	; 0xff
 801f77a:	2301      	movs	r3, #1
 801f77c:	7043      	strb	r3, [r0, #1]
 801f77e:	4618      	mov	r0, r3
 801f780:	4770      	bx	lr
 801f782:	2000      	movs	r0, #0
 801f784:	4770      	bx	lr

0801f786 <__cxa_guard_release>:
 801f786:	2301      	movs	r3, #1
 801f788:	6003      	str	r3, [r0, #0]
 801f78a:	4770      	bx	lr

0801f78c <__cxa_pure_virtual>:
 801f78c:	b508      	push	{r3, lr}
 801f78e:	f000 f80f 	bl	801f7b0 <_ZSt9terminatev>

0801f792 <_ZdlPv>:
 801f792:	f000 b893 	b.w	801f8bc <free>

0801f796 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f796:	b508      	push	{r3, lr}
 801f798:	4780      	blx	r0
 801f79a:	f000 f80e 	bl	801f7ba <abort>
	...

0801f7a0 <_ZSt13get_terminatev>:
 801f7a0:	4b02      	ldr	r3, [pc, #8]	; (801f7ac <_ZSt13get_terminatev+0xc>)
 801f7a2:	6818      	ldr	r0, [r3, #0]
 801f7a4:	f3bf 8f5b 	dmb	ish
 801f7a8:	4770      	bx	lr
 801f7aa:	bf00      	nop
 801f7ac:	240000c8 	.word	0x240000c8

0801f7b0 <_ZSt9terminatev>:
 801f7b0:	b508      	push	{r3, lr}
 801f7b2:	f7ff fff5 	bl	801f7a0 <_ZSt13get_terminatev>
 801f7b6:	f7ff ffee 	bl	801f796 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f7ba <abort>:
 801f7ba:	b508      	push	{r3, lr}
 801f7bc:	2006      	movs	r0, #6
 801f7be:	f000 fc6b 	bl	8020098 <raise>
 801f7c2:	2001      	movs	r0, #1
 801f7c4:	f7e1 ff70 	bl	80016a8 <_exit>

0801f7c8 <__assert_func>:
 801f7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f7ca:	4614      	mov	r4, r2
 801f7cc:	461a      	mov	r2, r3
 801f7ce:	4b09      	ldr	r3, [pc, #36]	; (801f7f4 <__assert_func+0x2c>)
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	4605      	mov	r5, r0
 801f7d4:	68d8      	ldr	r0, [r3, #12]
 801f7d6:	b14c      	cbz	r4, 801f7ec <__assert_func+0x24>
 801f7d8:	4b07      	ldr	r3, [pc, #28]	; (801f7f8 <__assert_func+0x30>)
 801f7da:	9100      	str	r1, [sp, #0]
 801f7dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f7e0:	4906      	ldr	r1, [pc, #24]	; (801f7fc <__assert_func+0x34>)
 801f7e2:	462b      	mov	r3, r5
 801f7e4:	f000 f82c 	bl	801f840 <fiprintf>
 801f7e8:	f7ff ffe7 	bl	801f7ba <abort>
 801f7ec:	4b04      	ldr	r3, [pc, #16]	; (801f800 <__assert_func+0x38>)
 801f7ee:	461c      	mov	r4, r3
 801f7f0:	e7f3      	b.n	801f7da <__assert_func+0x12>
 801f7f2:	bf00      	nop
 801f7f4:	240000cc 	.word	0x240000cc
 801f7f8:	08024e44 	.word	0x08024e44
 801f7fc:	08024e51 	.word	0x08024e51
 801f800:	08024e7f 	.word	0x08024e7f

0801f804 <atexit>:
 801f804:	2300      	movs	r3, #0
 801f806:	4601      	mov	r1, r0
 801f808:	461a      	mov	r2, r3
 801f80a:	4618      	mov	r0, r3
 801f80c:	f000 bdae 	b.w	802036c <__register_exitproc>

0801f810 <atoi>:
 801f810:	220a      	movs	r2, #10
 801f812:	2100      	movs	r1, #0
 801f814:	f000 bce0 	b.w	80201d8 <strtol>

0801f818 <__cxa_atexit>:
 801f818:	b510      	push	{r4, lr}
 801f81a:	4c05      	ldr	r4, [pc, #20]	; (801f830 <__cxa_atexit+0x18>)
 801f81c:	4613      	mov	r3, r2
 801f81e:	b12c      	cbz	r4, 801f82c <__cxa_atexit+0x14>
 801f820:	460a      	mov	r2, r1
 801f822:	4601      	mov	r1, r0
 801f824:	2002      	movs	r0, #2
 801f826:	f000 fda1 	bl	802036c <__register_exitproc>
 801f82a:	bd10      	pop	{r4, pc}
 801f82c:	4620      	mov	r0, r4
 801f82e:	e7fc      	b.n	801f82a <__cxa_atexit+0x12>
 801f830:	0802036d 	.word	0x0802036d

0801f834 <__errno>:
 801f834:	4b01      	ldr	r3, [pc, #4]	; (801f83c <__errno+0x8>)
 801f836:	6818      	ldr	r0, [r3, #0]
 801f838:	4770      	bx	lr
 801f83a:	bf00      	nop
 801f83c:	240000cc 	.word	0x240000cc

0801f840 <fiprintf>:
 801f840:	b40e      	push	{r1, r2, r3}
 801f842:	b503      	push	{r0, r1, lr}
 801f844:	4601      	mov	r1, r0
 801f846:	ab03      	add	r3, sp, #12
 801f848:	4805      	ldr	r0, [pc, #20]	; (801f860 <fiprintf+0x20>)
 801f84a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f84e:	6800      	ldr	r0, [r0, #0]
 801f850:	9301      	str	r3, [sp, #4]
 801f852:	f000 f925 	bl	801faa0 <_vfiprintf_r>
 801f856:	b002      	add	sp, #8
 801f858:	f85d eb04 	ldr.w	lr, [sp], #4
 801f85c:	b003      	add	sp, #12
 801f85e:	4770      	bx	lr
 801f860:	240000cc 	.word	0x240000cc

0801f864 <__libc_init_array>:
 801f864:	b570      	push	{r4, r5, r6, lr}
 801f866:	4d0d      	ldr	r5, [pc, #52]	; (801f89c <__libc_init_array+0x38>)
 801f868:	4c0d      	ldr	r4, [pc, #52]	; (801f8a0 <__libc_init_array+0x3c>)
 801f86a:	1b64      	subs	r4, r4, r5
 801f86c:	10a4      	asrs	r4, r4, #2
 801f86e:	2600      	movs	r6, #0
 801f870:	42a6      	cmp	r6, r4
 801f872:	d109      	bne.n	801f888 <__libc_init_array+0x24>
 801f874:	4d0b      	ldr	r5, [pc, #44]	; (801f8a4 <__libc_init_array+0x40>)
 801f876:	4c0c      	ldr	r4, [pc, #48]	; (801f8a8 <__libc_init_array+0x44>)
 801f878:	f001 f8b2 	bl	80209e0 <_init>
 801f87c:	1b64      	subs	r4, r4, r5
 801f87e:	10a4      	asrs	r4, r4, #2
 801f880:	2600      	movs	r6, #0
 801f882:	42a6      	cmp	r6, r4
 801f884:	d105      	bne.n	801f892 <__libc_init_array+0x2e>
 801f886:	bd70      	pop	{r4, r5, r6, pc}
 801f888:	f855 3b04 	ldr.w	r3, [r5], #4
 801f88c:	4798      	blx	r3
 801f88e:	3601      	adds	r6, #1
 801f890:	e7ee      	b.n	801f870 <__libc_init_array+0xc>
 801f892:	f855 3b04 	ldr.w	r3, [r5], #4
 801f896:	4798      	blx	r3
 801f898:	3601      	adds	r6, #1
 801f89a:	e7f2      	b.n	801f882 <__libc_init_array+0x1e>
 801f89c:	0802667c 	.word	0x0802667c
 801f8a0:	0802667c 	.word	0x0802667c
 801f8a4:	0802667c 	.word	0x0802667c
 801f8a8:	08026694 	.word	0x08026694

0801f8ac <malloc>:
 801f8ac:	4b02      	ldr	r3, [pc, #8]	; (801f8b8 <malloc+0xc>)
 801f8ae:	4601      	mov	r1, r0
 801f8b0:	6818      	ldr	r0, [r3, #0]
 801f8b2:	f000 b871 	b.w	801f998 <_malloc_r>
 801f8b6:	bf00      	nop
 801f8b8:	240000cc 	.word	0x240000cc

0801f8bc <free>:
 801f8bc:	4b02      	ldr	r3, [pc, #8]	; (801f8c8 <free+0xc>)
 801f8be:	4601      	mov	r1, r0
 801f8c0:	6818      	ldr	r0, [r3, #0]
 801f8c2:	f000 b819 	b.w	801f8f8 <_free_r>
 801f8c6:	bf00      	nop
 801f8c8:	240000cc 	.word	0x240000cc

0801f8cc <memcpy>:
 801f8cc:	440a      	add	r2, r1
 801f8ce:	4291      	cmp	r1, r2
 801f8d0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f8d4:	d100      	bne.n	801f8d8 <memcpy+0xc>
 801f8d6:	4770      	bx	lr
 801f8d8:	b510      	push	{r4, lr}
 801f8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f8de:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f8e2:	4291      	cmp	r1, r2
 801f8e4:	d1f9      	bne.n	801f8da <memcpy+0xe>
 801f8e6:	bd10      	pop	{r4, pc}

0801f8e8 <memset>:
 801f8e8:	4402      	add	r2, r0
 801f8ea:	4603      	mov	r3, r0
 801f8ec:	4293      	cmp	r3, r2
 801f8ee:	d100      	bne.n	801f8f2 <memset+0xa>
 801f8f0:	4770      	bx	lr
 801f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 801f8f6:	e7f9      	b.n	801f8ec <memset+0x4>

0801f8f8 <_free_r>:
 801f8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f8fa:	2900      	cmp	r1, #0
 801f8fc:	d048      	beq.n	801f990 <_free_r+0x98>
 801f8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f902:	9001      	str	r0, [sp, #4]
 801f904:	2b00      	cmp	r3, #0
 801f906:	f1a1 0404 	sub.w	r4, r1, #4
 801f90a:	bfb8      	it	lt
 801f90c:	18e4      	addlt	r4, r4, r3
 801f90e:	f000 ffaf 	bl	8020870 <__malloc_lock>
 801f912:	4a20      	ldr	r2, [pc, #128]	; (801f994 <_free_r+0x9c>)
 801f914:	9801      	ldr	r0, [sp, #4]
 801f916:	6813      	ldr	r3, [r2, #0]
 801f918:	4615      	mov	r5, r2
 801f91a:	b933      	cbnz	r3, 801f92a <_free_r+0x32>
 801f91c:	6063      	str	r3, [r4, #4]
 801f91e:	6014      	str	r4, [r2, #0]
 801f920:	b003      	add	sp, #12
 801f922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f926:	f000 bfa9 	b.w	802087c <__malloc_unlock>
 801f92a:	42a3      	cmp	r3, r4
 801f92c:	d90b      	bls.n	801f946 <_free_r+0x4e>
 801f92e:	6821      	ldr	r1, [r4, #0]
 801f930:	1862      	adds	r2, r4, r1
 801f932:	4293      	cmp	r3, r2
 801f934:	bf04      	itt	eq
 801f936:	681a      	ldreq	r2, [r3, #0]
 801f938:	685b      	ldreq	r3, [r3, #4]
 801f93a:	6063      	str	r3, [r4, #4]
 801f93c:	bf04      	itt	eq
 801f93e:	1852      	addeq	r2, r2, r1
 801f940:	6022      	streq	r2, [r4, #0]
 801f942:	602c      	str	r4, [r5, #0]
 801f944:	e7ec      	b.n	801f920 <_free_r+0x28>
 801f946:	461a      	mov	r2, r3
 801f948:	685b      	ldr	r3, [r3, #4]
 801f94a:	b10b      	cbz	r3, 801f950 <_free_r+0x58>
 801f94c:	42a3      	cmp	r3, r4
 801f94e:	d9fa      	bls.n	801f946 <_free_r+0x4e>
 801f950:	6811      	ldr	r1, [r2, #0]
 801f952:	1855      	adds	r5, r2, r1
 801f954:	42a5      	cmp	r5, r4
 801f956:	d10b      	bne.n	801f970 <_free_r+0x78>
 801f958:	6824      	ldr	r4, [r4, #0]
 801f95a:	4421      	add	r1, r4
 801f95c:	1854      	adds	r4, r2, r1
 801f95e:	42a3      	cmp	r3, r4
 801f960:	6011      	str	r1, [r2, #0]
 801f962:	d1dd      	bne.n	801f920 <_free_r+0x28>
 801f964:	681c      	ldr	r4, [r3, #0]
 801f966:	685b      	ldr	r3, [r3, #4]
 801f968:	6053      	str	r3, [r2, #4]
 801f96a:	4421      	add	r1, r4
 801f96c:	6011      	str	r1, [r2, #0]
 801f96e:	e7d7      	b.n	801f920 <_free_r+0x28>
 801f970:	d902      	bls.n	801f978 <_free_r+0x80>
 801f972:	230c      	movs	r3, #12
 801f974:	6003      	str	r3, [r0, #0]
 801f976:	e7d3      	b.n	801f920 <_free_r+0x28>
 801f978:	6825      	ldr	r5, [r4, #0]
 801f97a:	1961      	adds	r1, r4, r5
 801f97c:	428b      	cmp	r3, r1
 801f97e:	bf04      	itt	eq
 801f980:	6819      	ldreq	r1, [r3, #0]
 801f982:	685b      	ldreq	r3, [r3, #4]
 801f984:	6063      	str	r3, [r4, #4]
 801f986:	bf04      	itt	eq
 801f988:	1949      	addeq	r1, r1, r5
 801f98a:	6021      	streq	r1, [r4, #0]
 801f98c:	6054      	str	r4, [r2, #4]
 801f98e:	e7c7      	b.n	801f920 <_free_r+0x28>
 801f990:	b003      	add	sp, #12
 801f992:	bd30      	pop	{r4, r5, pc}
 801f994:	2400eaec 	.word	0x2400eaec

0801f998 <_malloc_r>:
 801f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f99a:	1ccd      	adds	r5, r1, #3
 801f99c:	f025 0503 	bic.w	r5, r5, #3
 801f9a0:	3508      	adds	r5, #8
 801f9a2:	2d0c      	cmp	r5, #12
 801f9a4:	bf38      	it	cc
 801f9a6:	250c      	movcc	r5, #12
 801f9a8:	2d00      	cmp	r5, #0
 801f9aa:	4606      	mov	r6, r0
 801f9ac:	db01      	blt.n	801f9b2 <_malloc_r+0x1a>
 801f9ae:	42a9      	cmp	r1, r5
 801f9b0:	d903      	bls.n	801f9ba <_malloc_r+0x22>
 801f9b2:	230c      	movs	r3, #12
 801f9b4:	6033      	str	r3, [r6, #0]
 801f9b6:	2000      	movs	r0, #0
 801f9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9ba:	f000 ff59 	bl	8020870 <__malloc_lock>
 801f9be:	4921      	ldr	r1, [pc, #132]	; (801fa44 <_malloc_r+0xac>)
 801f9c0:	680a      	ldr	r2, [r1, #0]
 801f9c2:	4614      	mov	r4, r2
 801f9c4:	b99c      	cbnz	r4, 801f9ee <_malloc_r+0x56>
 801f9c6:	4f20      	ldr	r7, [pc, #128]	; (801fa48 <_malloc_r+0xb0>)
 801f9c8:	683b      	ldr	r3, [r7, #0]
 801f9ca:	b923      	cbnz	r3, 801f9d6 <_malloc_r+0x3e>
 801f9cc:	4621      	mov	r1, r4
 801f9ce:	4630      	mov	r0, r6
 801f9d0:	f000 fb2a 	bl	8020028 <_sbrk_r>
 801f9d4:	6038      	str	r0, [r7, #0]
 801f9d6:	4629      	mov	r1, r5
 801f9d8:	4630      	mov	r0, r6
 801f9da:	f000 fb25 	bl	8020028 <_sbrk_r>
 801f9de:	1c43      	adds	r3, r0, #1
 801f9e0:	d123      	bne.n	801fa2a <_malloc_r+0x92>
 801f9e2:	230c      	movs	r3, #12
 801f9e4:	6033      	str	r3, [r6, #0]
 801f9e6:	4630      	mov	r0, r6
 801f9e8:	f000 ff48 	bl	802087c <__malloc_unlock>
 801f9ec:	e7e3      	b.n	801f9b6 <_malloc_r+0x1e>
 801f9ee:	6823      	ldr	r3, [r4, #0]
 801f9f0:	1b5b      	subs	r3, r3, r5
 801f9f2:	d417      	bmi.n	801fa24 <_malloc_r+0x8c>
 801f9f4:	2b0b      	cmp	r3, #11
 801f9f6:	d903      	bls.n	801fa00 <_malloc_r+0x68>
 801f9f8:	6023      	str	r3, [r4, #0]
 801f9fa:	441c      	add	r4, r3
 801f9fc:	6025      	str	r5, [r4, #0]
 801f9fe:	e004      	b.n	801fa0a <_malloc_r+0x72>
 801fa00:	6863      	ldr	r3, [r4, #4]
 801fa02:	42a2      	cmp	r2, r4
 801fa04:	bf0c      	ite	eq
 801fa06:	600b      	streq	r3, [r1, #0]
 801fa08:	6053      	strne	r3, [r2, #4]
 801fa0a:	4630      	mov	r0, r6
 801fa0c:	f000 ff36 	bl	802087c <__malloc_unlock>
 801fa10:	f104 000b 	add.w	r0, r4, #11
 801fa14:	1d23      	adds	r3, r4, #4
 801fa16:	f020 0007 	bic.w	r0, r0, #7
 801fa1a:	1ac2      	subs	r2, r0, r3
 801fa1c:	d0cc      	beq.n	801f9b8 <_malloc_r+0x20>
 801fa1e:	1a1b      	subs	r3, r3, r0
 801fa20:	50a3      	str	r3, [r4, r2]
 801fa22:	e7c9      	b.n	801f9b8 <_malloc_r+0x20>
 801fa24:	4622      	mov	r2, r4
 801fa26:	6864      	ldr	r4, [r4, #4]
 801fa28:	e7cc      	b.n	801f9c4 <_malloc_r+0x2c>
 801fa2a:	1cc4      	adds	r4, r0, #3
 801fa2c:	f024 0403 	bic.w	r4, r4, #3
 801fa30:	42a0      	cmp	r0, r4
 801fa32:	d0e3      	beq.n	801f9fc <_malloc_r+0x64>
 801fa34:	1a21      	subs	r1, r4, r0
 801fa36:	4630      	mov	r0, r6
 801fa38:	f000 faf6 	bl	8020028 <_sbrk_r>
 801fa3c:	3001      	adds	r0, #1
 801fa3e:	d1dd      	bne.n	801f9fc <_malloc_r+0x64>
 801fa40:	e7cf      	b.n	801f9e2 <_malloc_r+0x4a>
 801fa42:	bf00      	nop
 801fa44:	2400eaec 	.word	0x2400eaec
 801fa48:	2400eaf0 	.word	0x2400eaf0

0801fa4c <__sfputc_r>:
 801fa4c:	6893      	ldr	r3, [r2, #8]
 801fa4e:	3b01      	subs	r3, #1
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	b410      	push	{r4}
 801fa54:	6093      	str	r3, [r2, #8]
 801fa56:	da08      	bge.n	801fa6a <__sfputc_r+0x1e>
 801fa58:	6994      	ldr	r4, [r2, #24]
 801fa5a:	42a3      	cmp	r3, r4
 801fa5c:	db01      	blt.n	801fa62 <__sfputc_r+0x16>
 801fa5e:	290a      	cmp	r1, #10
 801fa60:	d103      	bne.n	801fa6a <__sfputc_r+0x1e>
 801fa62:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa66:	f000 bbc1 	b.w	80201ec <__swbuf_r>
 801fa6a:	6813      	ldr	r3, [r2, #0]
 801fa6c:	1c58      	adds	r0, r3, #1
 801fa6e:	6010      	str	r0, [r2, #0]
 801fa70:	7019      	strb	r1, [r3, #0]
 801fa72:	4608      	mov	r0, r1
 801fa74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa78:	4770      	bx	lr

0801fa7a <__sfputs_r>:
 801fa7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa7c:	4606      	mov	r6, r0
 801fa7e:	460f      	mov	r7, r1
 801fa80:	4614      	mov	r4, r2
 801fa82:	18d5      	adds	r5, r2, r3
 801fa84:	42ac      	cmp	r4, r5
 801fa86:	d101      	bne.n	801fa8c <__sfputs_r+0x12>
 801fa88:	2000      	movs	r0, #0
 801fa8a:	e007      	b.n	801fa9c <__sfputs_r+0x22>
 801fa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa90:	463a      	mov	r2, r7
 801fa92:	4630      	mov	r0, r6
 801fa94:	f7ff ffda 	bl	801fa4c <__sfputc_r>
 801fa98:	1c43      	adds	r3, r0, #1
 801fa9a:	d1f3      	bne.n	801fa84 <__sfputs_r+0xa>
 801fa9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801faa0 <_vfiprintf_r>:
 801faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa4:	460d      	mov	r5, r1
 801faa6:	b09d      	sub	sp, #116	; 0x74
 801faa8:	4614      	mov	r4, r2
 801faaa:	4698      	mov	r8, r3
 801faac:	4606      	mov	r6, r0
 801faae:	b118      	cbz	r0, 801fab8 <_vfiprintf_r+0x18>
 801fab0:	6983      	ldr	r3, [r0, #24]
 801fab2:	b90b      	cbnz	r3, 801fab8 <_vfiprintf_r+0x18>
 801fab4:	f000 fdd6 	bl	8020664 <__sinit>
 801fab8:	4b89      	ldr	r3, [pc, #548]	; (801fce0 <_vfiprintf_r+0x240>)
 801faba:	429d      	cmp	r5, r3
 801fabc:	d11b      	bne.n	801faf6 <_vfiprintf_r+0x56>
 801fabe:	6875      	ldr	r5, [r6, #4]
 801fac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fac2:	07d9      	lsls	r1, r3, #31
 801fac4:	d405      	bmi.n	801fad2 <_vfiprintf_r+0x32>
 801fac6:	89ab      	ldrh	r3, [r5, #12]
 801fac8:	059a      	lsls	r2, r3, #22
 801faca:	d402      	bmi.n	801fad2 <_vfiprintf_r+0x32>
 801facc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801face:	f000 fe67 	bl	80207a0 <__retarget_lock_acquire_recursive>
 801fad2:	89ab      	ldrh	r3, [r5, #12]
 801fad4:	071b      	lsls	r3, r3, #28
 801fad6:	d501      	bpl.n	801fadc <_vfiprintf_r+0x3c>
 801fad8:	692b      	ldr	r3, [r5, #16]
 801fada:	b9eb      	cbnz	r3, 801fb18 <_vfiprintf_r+0x78>
 801fadc:	4629      	mov	r1, r5
 801fade:	4630      	mov	r0, r6
 801fae0:	f000 fbd6 	bl	8020290 <__swsetup_r>
 801fae4:	b1c0      	cbz	r0, 801fb18 <_vfiprintf_r+0x78>
 801fae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fae8:	07dc      	lsls	r4, r3, #31
 801faea:	d50e      	bpl.n	801fb0a <_vfiprintf_r+0x6a>
 801faec:	f04f 30ff 	mov.w	r0, #4294967295
 801faf0:	b01d      	add	sp, #116	; 0x74
 801faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf6:	4b7b      	ldr	r3, [pc, #492]	; (801fce4 <_vfiprintf_r+0x244>)
 801faf8:	429d      	cmp	r5, r3
 801fafa:	d101      	bne.n	801fb00 <_vfiprintf_r+0x60>
 801fafc:	68b5      	ldr	r5, [r6, #8]
 801fafe:	e7df      	b.n	801fac0 <_vfiprintf_r+0x20>
 801fb00:	4b79      	ldr	r3, [pc, #484]	; (801fce8 <_vfiprintf_r+0x248>)
 801fb02:	429d      	cmp	r5, r3
 801fb04:	bf08      	it	eq
 801fb06:	68f5      	ldreq	r5, [r6, #12]
 801fb08:	e7da      	b.n	801fac0 <_vfiprintf_r+0x20>
 801fb0a:	89ab      	ldrh	r3, [r5, #12]
 801fb0c:	0598      	lsls	r0, r3, #22
 801fb0e:	d4ed      	bmi.n	801faec <_vfiprintf_r+0x4c>
 801fb10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fb12:	f000 fe47 	bl	80207a4 <__retarget_lock_release_recursive>
 801fb16:	e7e9      	b.n	801faec <_vfiprintf_r+0x4c>
 801fb18:	2300      	movs	r3, #0
 801fb1a:	9309      	str	r3, [sp, #36]	; 0x24
 801fb1c:	2320      	movs	r3, #32
 801fb1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb22:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb26:	2330      	movs	r3, #48	; 0x30
 801fb28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fcec <_vfiprintf_r+0x24c>
 801fb2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb30:	f04f 0901 	mov.w	r9, #1
 801fb34:	4623      	mov	r3, r4
 801fb36:	469a      	mov	sl, r3
 801fb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb3c:	b10a      	cbz	r2, 801fb42 <_vfiprintf_r+0xa2>
 801fb3e:	2a25      	cmp	r2, #37	; 0x25
 801fb40:	d1f9      	bne.n	801fb36 <_vfiprintf_r+0x96>
 801fb42:	ebba 0b04 	subs.w	fp, sl, r4
 801fb46:	d00b      	beq.n	801fb60 <_vfiprintf_r+0xc0>
 801fb48:	465b      	mov	r3, fp
 801fb4a:	4622      	mov	r2, r4
 801fb4c:	4629      	mov	r1, r5
 801fb4e:	4630      	mov	r0, r6
 801fb50:	f7ff ff93 	bl	801fa7a <__sfputs_r>
 801fb54:	3001      	adds	r0, #1
 801fb56:	f000 80aa 	beq.w	801fcae <_vfiprintf_r+0x20e>
 801fb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fb5c:	445a      	add	r2, fp
 801fb5e:	9209      	str	r2, [sp, #36]	; 0x24
 801fb60:	f89a 3000 	ldrb.w	r3, [sl]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	f000 80a2 	beq.w	801fcae <_vfiprintf_r+0x20e>
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	f04f 32ff 	mov.w	r2, #4294967295
 801fb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fb74:	f10a 0a01 	add.w	sl, sl, #1
 801fb78:	9304      	str	r3, [sp, #16]
 801fb7a:	9307      	str	r3, [sp, #28]
 801fb7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fb80:	931a      	str	r3, [sp, #104]	; 0x68
 801fb82:	4654      	mov	r4, sl
 801fb84:	2205      	movs	r2, #5
 801fb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb8a:	4858      	ldr	r0, [pc, #352]	; (801fcec <_vfiprintf_r+0x24c>)
 801fb8c:	f7e0 fba8 	bl	80002e0 <memchr>
 801fb90:	9a04      	ldr	r2, [sp, #16]
 801fb92:	b9d8      	cbnz	r0, 801fbcc <_vfiprintf_r+0x12c>
 801fb94:	06d1      	lsls	r1, r2, #27
 801fb96:	bf44      	itt	mi
 801fb98:	2320      	movmi	r3, #32
 801fb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fb9e:	0713      	lsls	r3, r2, #28
 801fba0:	bf44      	itt	mi
 801fba2:	232b      	movmi	r3, #43	; 0x2b
 801fba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fba8:	f89a 3000 	ldrb.w	r3, [sl]
 801fbac:	2b2a      	cmp	r3, #42	; 0x2a
 801fbae:	d015      	beq.n	801fbdc <_vfiprintf_r+0x13c>
 801fbb0:	9a07      	ldr	r2, [sp, #28]
 801fbb2:	4654      	mov	r4, sl
 801fbb4:	2000      	movs	r0, #0
 801fbb6:	f04f 0c0a 	mov.w	ip, #10
 801fbba:	4621      	mov	r1, r4
 801fbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fbc0:	3b30      	subs	r3, #48	; 0x30
 801fbc2:	2b09      	cmp	r3, #9
 801fbc4:	d94e      	bls.n	801fc64 <_vfiprintf_r+0x1c4>
 801fbc6:	b1b0      	cbz	r0, 801fbf6 <_vfiprintf_r+0x156>
 801fbc8:	9207      	str	r2, [sp, #28]
 801fbca:	e014      	b.n	801fbf6 <_vfiprintf_r+0x156>
 801fbcc:	eba0 0308 	sub.w	r3, r0, r8
 801fbd0:	fa09 f303 	lsl.w	r3, r9, r3
 801fbd4:	4313      	orrs	r3, r2
 801fbd6:	9304      	str	r3, [sp, #16]
 801fbd8:	46a2      	mov	sl, r4
 801fbda:	e7d2      	b.n	801fb82 <_vfiprintf_r+0xe2>
 801fbdc:	9b03      	ldr	r3, [sp, #12]
 801fbde:	1d19      	adds	r1, r3, #4
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	9103      	str	r1, [sp, #12]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	bfbb      	ittet	lt
 801fbe8:	425b      	neglt	r3, r3
 801fbea:	f042 0202 	orrlt.w	r2, r2, #2
 801fbee:	9307      	strge	r3, [sp, #28]
 801fbf0:	9307      	strlt	r3, [sp, #28]
 801fbf2:	bfb8      	it	lt
 801fbf4:	9204      	strlt	r2, [sp, #16]
 801fbf6:	7823      	ldrb	r3, [r4, #0]
 801fbf8:	2b2e      	cmp	r3, #46	; 0x2e
 801fbfa:	d10c      	bne.n	801fc16 <_vfiprintf_r+0x176>
 801fbfc:	7863      	ldrb	r3, [r4, #1]
 801fbfe:	2b2a      	cmp	r3, #42	; 0x2a
 801fc00:	d135      	bne.n	801fc6e <_vfiprintf_r+0x1ce>
 801fc02:	9b03      	ldr	r3, [sp, #12]
 801fc04:	1d1a      	adds	r2, r3, #4
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	9203      	str	r2, [sp, #12]
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	bfb8      	it	lt
 801fc0e:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc12:	3402      	adds	r4, #2
 801fc14:	9305      	str	r3, [sp, #20]
 801fc16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fcfc <_vfiprintf_r+0x25c>
 801fc1a:	7821      	ldrb	r1, [r4, #0]
 801fc1c:	2203      	movs	r2, #3
 801fc1e:	4650      	mov	r0, sl
 801fc20:	f7e0 fb5e 	bl	80002e0 <memchr>
 801fc24:	b140      	cbz	r0, 801fc38 <_vfiprintf_r+0x198>
 801fc26:	2340      	movs	r3, #64	; 0x40
 801fc28:	eba0 000a 	sub.w	r0, r0, sl
 801fc2c:	fa03 f000 	lsl.w	r0, r3, r0
 801fc30:	9b04      	ldr	r3, [sp, #16]
 801fc32:	4303      	orrs	r3, r0
 801fc34:	3401      	adds	r4, #1
 801fc36:	9304      	str	r3, [sp, #16]
 801fc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc3c:	482c      	ldr	r0, [pc, #176]	; (801fcf0 <_vfiprintf_r+0x250>)
 801fc3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fc42:	2206      	movs	r2, #6
 801fc44:	f7e0 fb4c 	bl	80002e0 <memchr>
 801fc48:	2800      	cmp	r0, #0
 801fc4a:	d03f      	beq.n	801fccc <_vfiprintf_r+0x22c>
 801fc4c:	4b29      	ldr	r3, [pc, #164]	; (801fcf4 <_vfiprintf_r+0x254>)
 801fc4e:	bb1b      	cbnz	r3, 801fc98 <_vfiprintf_r+0x1f8>
 801fc50:	9b03      	ldr	r3, [sp, #12]
 801fc52:	3307      	adds	r3, #7
 801fc54:	f023 0307 	bic.w	r3, r3, #7
 801fc58:	3308      	adds	r3, #8
 801fc5a:	9303      	str	r3, [sp, #12]
 801fc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc5e:	443b      	add	r3, r7
 801fc60:	9309      	str	r3, [sp, #36]	; 0x24
 801fc62:	e767      	b.n	801fb34 <_vfiprintf_r+0x94>
 801fc64:	fb0c 3202 	mla	r2, ip, r2, r3
 801fc68:	460c      	mov	r4, r1
 801fc6a:	2001      	movs	r0, #1
 801fc6c:	e7a5      	b.n	801fbba <_vfiprintf_r+0x11a>
 801fc6e:	2300      	movs	r3, #0
 801fc70:	3401      	adds	r4, #1
 801fc72:	9305      	str	r3, [sp, #20]
 801fc74:	4619      	mov	r1, r3
 801fc76:	f04f 0c0a 	mov.w	ip, #10
 801fc7a:	4620      	mov	r0, r4
 801fc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fc80:	3a30      	subs	r2, #48	; 0x30
 801fc82:	2a09      	cmp	r2, #9
 801fc84:	d903      	bls.n	801fc8e <_vfiprintf_r+0x1ee>
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d0c5      	beq.n	801fc16 <_vfiprintf_r+0x176>
 801fc8a:	9105      	str	r1, [sp, #20]
 801fc8c:	e7c3      	b.n	801fc16 <_vfiprintf_r+0x176>
 801fc8e:	fb0c 2101 	mla	r1, ip, r1, r2
 801fc92:	4604      	mov	r4, r0
 801fc94:	2301      	movs	r3, #1
 801fc96:	e7f0      	b.n	801fc7a <_vfiprintf_r+0x1da>
 801fc98:	ab03      	add	r3, sp, #12
 801fc9a:	9300      	str	r3, [sp, #0]
 801fc9c:	462a      	mov	r2, r5
 801fc9e:	4b16      	ldr	r3, [pc, #88]	; (801fcf8 <_vfiprintf_r+0x258>)
 801fca0:	a904      	add	r1, sp, #16
 801fca2:	4630      	mov	r0, r6
 801fca4:	f3af 8000 	nop.w
 801fca8:	4607      	mov	r7, r0
 801fcaa:	1c78      	adds	r0, r7, #1
 801fcac:	d1d6      	bne.n	801fc5c <_vfiprintf_r+0x1bc>
 801fcae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fcb0:	07d9      	lsls	r1, r3, #31
 801fcb2:	d405      	bmi.n	801fcc0 <_vfiprintf_r+0x220>
 801fcb4:	89ab      	ldrh	r3, [r5, #12]
 801fcb6:	059a      	lsls	r2, r3, #22
 801fcb8:	d402      	bmi.n	801fcc0 <_vfiprintf_r+0x220>
 801fcba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcbc:	f000 fd72 	bl	80207a4 <__retarget_lock_release_recursive>
 801fcc0:	89ab      	ldrh	r3, [r5, #12]
 801fcc2:	065b      	lsls	r3, r3, #25
 801fcc4:	f53f af12 	bmi.w	801faec <_vfiprintf_r+0x4c>
 801fcc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fcca:	e711      	b.n	801faf0 <_vfiprintf_r+0x50>
 801fccc:	ab03      	add	r3, sp, #12
 801fcce:	9300      	str	r3, [sp, #0]
 801fcd0:	462a      	mov	r2, r5
 801fcd2:	4b09      	ldr	r3, [pc, #36]	; (801fcf8 <_vfiprintf_r+0x258>)
 801fcd4:	a904      	add	r1, sp, #16
 801fcd6:	4630      	mov	r0, r6
 801fcd8:	f000 f880 	bl	801fddc <_printf_i>
 801fcdc:	e7e4      	b.n	801fca8 <_vfiprintf_r+0x208>
 801fcde:	bf00      	nop
 801fce0:	08024fe0 	.word	0x08024fe0
 801fce4:	08025000 	.word	0x08025000
 801fce8:	08024fc0 	.word	0x08024fc0
 801fcec:	08024e84 	.word	0x08024e84
 801fcf0:	08024e8e 	.word	0x08024e8e
 801fcf4:	00000000 	.word	0x00000000
 801fcf8:	0801fa7b 	.word	0x0801fa7b
 801fcfc:	08024e8a 	.word	0x08024e8a

0801fd00 <_printf_common>:
 801fd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd04:	4616      	mov	r6, r2
 801fd06:	4699      	mov	r9, r3
 801fd08:	688a      	ldr	r2, [r1, #8]
 801fd0a:	690b      	ldr	r3, [r1, #16]
 801fd0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fd10:	4293      	cmp	r3, r2
 801fd12:	bfb8      	it	lt
 801fd14:	4613      	movlt	r3, r2
 801fd16:	6033      	str	r3, [r6, #0]
 801fd18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fd1c:	4607      	mov	r7, r0
 801fd1e:	460c      	mov	r4, r1
 801fd20:	b10a      	cbz	r2, 801fd26 <_printf_common+0x26>
 801fd22:	3301      	adds	r3, #1
 801fd24:	6033      	str	r3, [r6, #0]
 801fd26:	6823      	ldr	r3, [r4, #0]
 801fd28:	0699      	lsls	r1, r3, #26
 801fd2a:	bf42      	ittt	mi
 801fd2c:	6833      	ldrmi	r3, [r6, #0]
 801fd2e:	3302      	addmi	r3, #2
 801fd30:	6033      	strmi	r3, [r6, #0]
 801fd32:	6825      	ldr	r5, [r4, #0]
 801fd34:	f015 0506 	ands.w	r5, r5, #6
 801fd38:	d106      	bne.n	801fd48 <_printf_common+0x48>
 801fd3a:	f104 0a19 	add.w	sl, r4, #25
 801fd3e:	68e3      	ldr	r3, [r4, #12]
 801fd40:	6832      	ldr	r2, [r6, #0]
 801fd42:	1a9b      	subs	r3, r3, r2
 801fd44:	42ab      	cmp	r3, r5
 801fd46:	dc26      	bgt.n	801fd96 <_printf_common+0x96>
 801fd48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fd4c:	1e13      	subs	r3, r2, #0
 801fd4e:	6822      	ldr	r2, [r4, #0]
 801fd50:	bf18      	it	ne
 801fd52:	2301      	movne	r3, #1
 801fd54:	0692      	lsls	r2, r2, #26
 801fd56:	d42b      	bmi.n	801fdb0 <_printf_common+0xb0>
 801fd58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fd5c:	4649      	mov	r1, r9
 801fd5e:	4638      	mov	r0, r7
 801fd60:	47c0      	blx	r8
 801fd62:	3001      	adds	r0, #1
 801fd64:	d01e      	beq.n	801fda4 <_printf_common+0xa4>
 801fd66:	6823      	ldr	r3, [r4, #0]
 801fd68:	68e5      	ldr	r5, [r4, #12]
 801fd6a:	6832      	ldr	r2, [r6, #0]
 801fd6c:	f003 0306 	and.w	r3, r3, #6
 801fd70:	2b04      	cmp	r3, #4
 801fd72:	bf08      	it	eq
 801fd74:	1aad      	subeq	r5, r5, r2
 801fd76:	68a3      	ldr	r3, [r4, #8]
 801fd78:	6922      	ldr	r2, [r4, #16]
 801fd7a:	bf0c      	ite	eq
 801fd7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fd80:	2500      	movne	r5, #0
 801fd82:	4293      	cmp	r3, r2
 801fd84:	bfc4      	itt	gt
 801fd86:	1a9b      	subgt	r3, r3, r2
 801fd88:	18ed      	addgt	r5, r5, r3
 801fd8a:	2600      	movs	r6, #0
 801fd8c:	341a      	adds	r4, #26
 801fd8e:	42b5      	cmp	r5, r6
 801fd90:	d11a      	bne.n	801fdc8 <_printf_common+0xc8>
 801fd92:	2000      	movs	r0, #0
 801fd94:	e008      	b.n	801fda8 <_printf_common+0xa8>
 801fd96:	2301      	movs	r3, #1
 801fd98:	4652      	mov	r2, sl
 801fd9a:	4649      	mov	r1, r9
 801fd9c:	4638      	mov	r0, r7
 801fd9e:	47c0      	blx	r8
 801fda0:	3001      	adds	r0, #1
 801fda2:	d103      	bne.n	801fdac <_printf_common+0xac>
 801fda4:	f04f 30ff 	mov.w	r0, #4294967295
 801fda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdac:	3501      	adds	r5, #1
 801fdae:	e7c6      	b.n	801fd3e <_printf_common+0x3e>
 801fdb0:	18e1      	adds	r1, r4, r3
 801fdb2:	1c5a      	adds	r2, r3, #1
 801fdb4:	2030      	movs	r0, #48	; 0x30
 801fdb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fdba:	4422      	add	r2, r4
 801fdbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fdc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fdc4:	3302      	adds	r3, #2
 801fdc6:	e7c7      	b.n	801fd58 <_printf_common+0x58>
 801fdc8:	2301      	movs	r3, #1
 801fdca:	4622      	mov	r2, r4
 801fdcc:	4649      	mov	r1, r9
 801fdce:	4638      	mov	r0, r7
 801fdd0:	47c0      	blx	r8
 801fdd2:	3001      	adds	r0, #1
 801fdd4:	d0e6      	beq.n	801fda4 <_printf_common+0xa4>
 801fdd6:	3601      	adds	r6, #1
 801fdd8:	e7d9      	b.n	801fd8e <_printf_common+0x8e>
	...

0801fddc <_printf_i>:
 801fddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fde0:	460c      	mov	r4, r1
 801fde2:	4691      	mov	r9, r2
 801fde4:	7e27      	ldrb	r7, [r4, #24]
 801fde6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fde8:	2f78      	cmp	r7, #120	; 0x78
 801fdea:	4680      	mov	r8, r0
 801fdec:	469a      	mov	sl, r3
 801fdee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fdf2:	d807      	bhi.n	801fe04 <_printf_i+0x28>
 801fdf4:	2f62      	cmp	r7, #98	; 0x62
 801fdf6:	d80a      	bhi.n	801fe0e <_printf_i+0x32>
 801fdf8:	2f00      	cmp	r7, #0
 801fdfa:	f000 80d8 	beq.w	801ffae <_printf_i+0x1d2>
 801fdfe:	2f58      	cmp	r7, #88	; 0x58
 801fe00:	f000 80a3 	beq.w	801ff4a <_printf_i+0x16e>
 801fe04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fe08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fe0c:	e03a      	b.n	801fe84 <_printf_i+0xa8>
 801fe0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fe12:	2b15      	cmp	r3, #21
 801fe14:	d8f6      	bhi.n	801fe04 <_printf_i+0x28>
 801fe16:	a001      	add	r0, pc, #4	; (adr r0, 801fe1c <_printf_i+0x40>)
 801fe18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fe1c:	0801fe75 	.word	0x0801fe75
 801fe20:	0801fe89 	.word	0x0801fe89
 801fe24:	0801fe05 	.word	0x0801fe05
 801fe28:	0801fe05 	.word	0x0801fe05
 801fe2c:	0801fe05 	.word	0x0801fe05
 801fe30:	0801fe05 	.word	0x0801fe05
 801fe34:	0801fe89 	.word	0x0801fe89
 801fe38:	0801fe05 	.word	0x0801fe05
 801fe3c:	0801fe05 	.word	0x0801fe05
 801fe40:	0801fe05 	.word	0x0801fe05
 801fe44:	0801fe05 	.word	0x0801fe05
 801fe48:	0801ff95 	.word	0x0801ff95
 801fe4c:	0801feb9 	.word	0x0801feb9
 801fe50:	0801ff77 	.word	0x0801ff77
 801fe54:	0801fe05 	.word	0x0801fe05
 801fe58:	0801fe05 	.word	0x0801fe05
 801fe5c:	0801ffb7 	.word	0x0801ffb7
 801fe60:	0801fe05 	.word	0x0801fe05
 801fe64:	0801feb9 	.word	0x0801feb9
 801fe68:	0801fe05 	.word	0x0801fe05
 801fe6c:	0801fe05 	.word	0x0801fe05
 801fe70:	0801ff7f 	.word	0x0801ff7f
 801fe74:	680b      	ldr	r3, [r1, #0]
 801fe76:	1d1a      	adds	r2, r3, #4
 801fe78:	681b      	ldr	r3, [r3, #0]
 801fe7a:	600a      	str	r2, [r1, #0]
 801fe7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fe80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fe84:	2301      	movs	r3, #1
 801fe86:	e0a3      	b.n	801ffd0 <_printf_i+0x1f4>
 801fe88:	6825      	ldr	r5, [r4, #0]
 801fe8a:	6808      	ldr	r0, [r1, #0]
 801fe8c:	062e      	lsls	r6, r5, #24
 801fe8e:	f100 0304 	add.w	r3, r0, #4
 801fe92:	d50a      	bpl.n	801feaa <_printf_i+0xce>
 801fe94:	6805      	ldr	r5, [r0, #0]
 801fe96:	600b      	str	r3, [r1, #0]
 801fe98:	2d00      	cmp	r5, #0
 801fe9a:	da03      	bge.n	801fea4 <_printf_i+0xc8>
 801fe9c:	232d      	movs	r3, #45	; 0x2d
 801fe9e:	426d      	negs	r5, r5
 801fea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fea4:	485e      	ldr	r0, [pc, #376]	; (8020020 <_printf_i+0x244>)
 801fea6:	230a      	movs	r3, #10
 801fea8:	e019      	b.n	801fede <_printf_i+0x102>
 801feaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 801feae:	6805      	ldr	r5, [r0, #0]
 801feb0:	600b      	str	r3, [r1, #0]
 801feb2:	bf18      	it	ne
 801feb4:	b22d      	sxthne	r5, r5
 801feb6:	e7ef      	b.n	801fe98 <_printf_i+0xbc>
 801feb8:	680b      	ldr	r3, [r1, #0]
 801feba:	6825      	ldr	r5, [r4, #0]
 801febc:	1d18      	adds	r0, r3, #4
 801febe:	6008      	str	r0, [r1, #0]
 801fec0:	0628      	lsls	r0, r5, #24
 801fec2:	d501      	bpl.n	801fec8 <_printf_i+0xec>
 801fec4:	681d      	ldr	r5, [r3, #0]
 801fec6:	e002      	b.n	801fece <_printf_i+0xf2>
 801fec8:	0669      	lsls	r1, r5, #25
 801feca:	d5fb      	bpl.n	801fec4 <_printf_i+0xe8>
 801fecc:	881d      	ldrh	r5, [r3, #0]
 801fece:	4854      	ldr	r0, [pc, #336]	; (8020020 <_printf_i+0x244>)
 801fed0:	2f6f      	cmp	r7, #111	; 0x6f
 801fed2:	bf0c      	ite	eq
 801fed4:	2308      	moveq	r3, #8
 801fed6:	230a      	movne	r3, #10
 801fed8:	2100      	movs	r1, #0
 801feda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fede:	6866      	ldr	r6, [r4, #4]
 801fee0:	60a6      	str	r6, [r4, #8]
 801fee2:	2e00      	cmp	r6, #0
 801fee4:	bfa2      	ittt	ge
 801fee6:	6821      	ldrge	r1, [r4, #0]
 801fee8:	f021 0104 	bicge.w	r1, r1, #4
 801feec:	6021      	strge	r1, [r4, #0]
 801feee:	b90d      	cbnz	r5, 801fef4 <_printf_i+0x118>
 801fef0:	2e00      	cmp	r6, #0
 801fef2:	d04d      	beq.n	801ff90 <_printf_i+0x1b4>
 801fef4:	4616      	mov	r6, r2
 801fef6:	fbb5 f1f3 	udiv	r1, r5, r3
 801fefa:	fb03 5711 	mls	r7, r3, r1, r5
 801fefe:	5dc7      	ldrb	r7, [r0, r7]
 801ff00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ff04:	462f      	mov	r7, r5
 801ff06:	42bb      	cmp	r3, r7
 801ff08:	460d      	mov	r5, r1
 801ff0a:	d9f4      	bls.n	801fef6 <_printf_i+0x11a>
 801ff0c:	2b08      	cmp	r3, #8
 801ff0e:	d10b      	bne.n	801ff28 <_printf_i+0x14c>
 801ff10:	6823      	ldr	r3, [r4, #0]
 801ff12:	07df      	lsls	r7, r3, #31
 801ff14:	d508      	bpl.n	801ff28 <_printf_i+0x14c>
 801ff16:	6923      	ldr	r3, [r4, #16]
 801ff18:	6861      	ldr	r1, [r4, #4]
 801ff1a:	4299      	cmp	r1, r3
 801ff1c:	bfde      	ittt	le
 801ff1e:	2330      	movle	r3, #48	; 0x30
 801ff20:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ff24:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ff28:	1b92      	subs	r2, r2, r6
 801ff2a:	6122      	str	r2, [r4, #16]
 801ff2c:	f8cd a000 	str.w	sl, [sp]
 801ff30:	464b      	mov	r3, r9
 801ff32:	aa03      	add	r2, sp, #12
 801ff34:	4621      	mov	r1, r4
 801ff36:	4640      	mov	r0, r8
 801ff38:	f7ff fee2 	bl	801fd00 <_printf_common>
 801ff3c:	3001      	adds	r0, #1
 801ff3e:	d14c      	bne.n	801ffda <_printf_i+0x1fe>
 801ff40:	f04f 30ff 	mov.w	r0, #4294967295
 801ff44:	b004      	add	sp, #16
 801ff46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff4a:	4835      	ldr	r0, [pc, #212]	; (8020020 <_printf_i+0x244>)
 801ff4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ff50:	6823      	ldr	r3, [r4, #0]
 801ff52:	680e      	ldr	r6, [r1, #0]
 801ff54:	061f      	lsls	r7, r3, #24
 801ff56:	f856 5b04 	ldr.w	r5, [r6], #4
 801ff5a:	600e      	str	r6, [r1, #0]
 801ff5c:	d514      	bpl.n	801ff88 <_printf_i+0x1ac>
 801ff5e:	07d9      	lsls	r1, r3, #31
 801ff60:	bf44      	itt	mi
 801ff62:	f043 0320 	orrmi.w	r3, r3, #32
 801ff66:	6023      	strmi	r3, [r4, #0]
 801ff68:	b91d      	cbnz	r5, 801ff72 <_printf_i+0x196>
 801ff6a:	6823      	ldr	r3, [r4, #0]
 801ff6c:	f023 0320 	bic.w	r3, r3, #32
 801ff70:	6023      	str	r3, [r4, #0]
 801ff72:	2310      	movs	r3, #16
 801ff74:	e7b0      	b.n	801fed8 <_printf_i+0xfc>
 801ff76:	6823      	ldr	r3, [r4, #0]
 801ff78:	f043 0320 	orr.w	r3, r3, #32
 801ff7c:	6023      	str	r3, [r4, #0]
 801ff7e:	2378      	movs	r3, #120	; 0x78
 801ff80:	4828      	ldr	r0, [pc, #160]	; (8020024 <_printf_i+0x248>)
 801ff82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ff86:	e7e3      	b.n	801ff50 <_printf_i+0x174>
 801ff88:	065e      	lsls	r6, r3, #25
 801ff8a:	bf48      	it	mi
 801ff8c:	b2ad      	uxthmi	r5, r5
 801ff8e:	e7e6      	b.n	801ff5e <_printf_i+0x182>
 801ff90:	4616      	mov	r6, r2
 801ff92:	e7bb      	b.n	801ff0c <_printf_i+0x130>
 801ff94:	680b      	ldr	r3, [r1, #0]
 801ff96:	6826      	ldr	r6, [r4, #0]
 801ff98:	6960      	ldr	r0, [r4, #20]
 801ff9a:	1d1d      	adds	r5, r3, #4
 801ff9c:	600d      	str	r5, [r1, #0]
 801ff9e:	0635      	lsls	r5, r6, #24
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	d501      	bpl.n	801ffa8 <_printf_i+0x1cc>
 801ffa4:	6018      	str	r0, [r3, #0]
 801ffa6:	e002      	b.n	801ffae <_printf_i+0x1d2>
 801ffa8:	0671      	lsls	r1, r6, #25
 801ffaa:	d5fb      	bpl.n	801ffa4 <_printf_i+0x1c8>
 801ffac:	8018      	strh	r0, [r3, #0]
 801ffae:	2300      	movs	r3, #0
 801ffb0:	6123      	str	r3, [r4, #16]
 801ffb2:	4616      	mov	r6, r2
 801ffb4:	e7ba      	b.n	801ff2c <_printf_i+0x150>
 801ffb6:	680b      	ldr	r3, [r1, #0]
 801ffb8:	1d1a      	adds	r2, r3, #4
 801ffba:	600a      	str	r2, [r1, #0]
 801ffbc:	681e      	ldr	r6, [r3, #0]
 801ffbe:	6862      	ldr	r2, [r4, #4]
 801ffc0:	2100      	movs	r1, #0
 801ffc2:	4630      	mov	r0, r6
 801ffc4:	f7e0 f98c 	bl	80002e0 <memchr>
 801ffc8:	b108      	cbz	r0, 801ffce <_printf_i+0x1f2>
 801ffca:	1b80      	subs	r0, r0, r6
 801ffcc:	6060      	str	r0, [r4, #4]
 801ffce:	6863      	ldr	r3, [r4, #4]
 801ffd0:	6123      	str	r3, [r4, #16]
 801ffd2:	2300      	movs	r3, #0
 801ffd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ffd8:	e7a8      	b.n	801ff2c <_printf_i+0x150>
 801ffda:	6923      	ldr	r3, [r4, #16]
 801ffdc:	4632      	mov	r2, r6
 801ffde:	4649      	mov	r1, r9
 801ffe0:	4640      	mov	r0, r8
 801ffe2:	47d0      	blx	sl
 801ffe4:	3001      	adds	r0, #1
 801ffe6:	d0ab      	beq.n	801ff40 <_printf_i+0x164>
 801ffe8:	6823      	ldr	r3, [r4, #0]
 801ffea:	079b      	lsls	r3, r3, #30
 801ffec:	d413      	bmi.n	8020016 <_printf_i+0x23a>
 801ffee:	68e0      	ldr	r0, [r4, #12]
 801fff0:	9b03      	ldr	r3, [sp, #12]
 801fff2:	4298      	cmp	r0, r3
 801fff4:	bfb8      	it	lt
 801fff6:	4618      	movlt	r0, r3
 801fff8:	e7a4      	b.n	801ff44 <_printf_i+0x168>
 801fffa:	2301      	movs	r3, #1
 801fffc:	4632      	mov	r2, r6
 801fffe:	4649      	mov	r1, r9
 8020000:	4640      	mov	r0, r8
 8020002:	47d0      	blx	sl
 8020004:	3001      	adds	r0, #1
 8020006:	d09b      	beq.n	801ff40 <_printf_i+0x164>
 8020008:	3501      	adds	r5, #1
 802000a:	68e3      	ldr	r3, [r4, #12]
 802000c:	9903      	ldr	r1, [sp, #12]
 802000e:	1a5b      	subs	r3, r3, r1
 8020010:	42ab      	cmp	r3, r5
 8020012:	dcf2      	bgt.n	801fffa <_printf_i+0x21e>
 8020014:	e7eb      	b.n	801ffee <_printf_i+0x212>
 8020016:	2500      	movs	r5, #0
 8020018:	f104 0619 	add.w	r6, r4, #25
 802001c:	e7f5      	b.n	802000a <_printf_i+0x22e>
 802001e:	bf00      	nop
 8020020:	08024e95 	.word	0x08024e95
 8020024:	08024ea6 	.word	0x08024ea6

08020028 <_sbrk_r>:
 8020028:	b538      	push	{r3, r4, r5, lr}
 802002a:	4d06      	ldr	r5, [pc, #24]	; (8020044 <_sbrk_r+0x1c>)
 802002c:	2300      	movs	r3, #0
 802002e:	4604      	mov	r4, r0
 8020030:	4608      	mov	r0, r1
 8020032:	602b      	str	r3, [r5, #0]
 8020034:	f7e1 fb64 	bl	8001700 <_sbrk>
 8020038:	1c43      	adds	r3, r0, #1
 802003a:	d102      	bne.n	8020042 <_sbrk_r+0x1a>
 802003c:	682b      	ldr	r3, [r5, #0]
 802003e:	b103      	cbz	r3, 8020042 <_sbrk_r+0x1a>
 8020040:	6023      	str	r3, [r4, #0]
 8020042:	bd38      	pop	{r3, r4, r5, pc}
 8020044:	2400f088 	.word	0x2400f088

08020048 <_raise_r>:
 8020048:	291f      	cmp	r1, #31
 802004a:	b538      	push	{r3, r4, r5, lr}
 802004c:	4604      	mov	r4, r0
 802004e:	460d      	mov	r5, r1
 8020050:	d904      	bls.n	802005c <_raise_r+0x14>
 8020052:	2316      	movs	r3, #22
 8020054:	6003      	str	r3, [r0, #0]
 8020056:	f04f 30ff 	mov.w	r0, #4294967295
 802005a:	bd38      	pop	{r3, r4, r5, pc}
 802005c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802005e:	b112      	cbz	r2, 8020066 <_raise_r+0x1e>
 8020060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020064:	b94b      	cbnz	r3, 802007a <_raise_r+0x32>
 8020066:	4620      	mov	r0, r4
 8020068:	f000 f830 	bl	80200cc <_getpid_r>
 802006c:	462a      	mov	r2, r5
 802006e:	4601      	mov	r1, r0
 8020070:	4620      	mov	r0, r4
 8020072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020076:	f000 b817 	b.w	80200a8 <_kill_r>
 802007a:	2b01      	cmp	r3, #1
 802007c:	d00a      	beq.n	8020094 <_raise_r+0x4c>
 802007e:	1c59      	adds	r1, r3, #1
 8020080:	d103      	bne.n	802008a <_raise_r+0x42>
 8020082:	2316      	movs	r3, #22
 8020084:	6003      	str	r3, [r0, #0]
 8020086:	2001      	movs	r0, #1
 8020088:	e7e7      	b.n	802005a <_raise_r+0x12>
 802008a:	2400      	movs	r4, #0
 802008c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020090:	4628      	mov	r0, r5
 8020092:	4798      	blx	r3
 8020094:	2000      	movs	r0, #0
 8020096:	e7e0      	b.n	802005a <_raise_r+0x12>

08020098 <raise>:
 8020098:	4b02      	ldr	r3, [pc, #8]	; (80200a4 <raise+0xc>)
 802009a:	4601      	mov	r1, r0
 802009c:	6818      	ldr	r0, [r3, #0]
 802009e:	f7ff bfd3 	b.w	8020048 <_raise_r>
 80200a2:	bf00      	nop
 80200a4:	240000cc 	.word	0x240000cc

080200a8 <_kill_r>:
 80200a8:	b538      	push	{r3, r4, r5, lr}
 80200aa:	4d07      	ldr	r5, [pc, #28]	; (80200c8 <_kill_r+0x20>)
 80200ac:	2300      	movs	r3, #0
 80200ae:	4604      	mov	r4, r0
 80200b0:	4608      	mov	r0, r1
 80200b2:	4611      	mov	r1, r2
 80200b4:	602b      	str	r3, [r5, #0]
 80200b6:	f7e1 faef 	bl	8001698 <_kill>
 80200ba:	1c43      	adds	r3, r0, #1
 80200bc:	d102      	bne.n	80200c4 <_kill_r+0x1c>
 80200be:	682b      	ldr	r3, [r5, #0]
 80200c0:	b103      	cbz	r3, 80200c4 <_kill_r+0x1c>
 80200c2:	6023      	str	r3, [r4, #0]
 80200c4:	bd38      	pop	{r3, r4, r5, pc}
 80200c6:	bf00      	nop
 80200c8:	2400f088 	.word	0x2400f088

080200cc <_getpid_r>:
 80200cc:	f7e1 bae2 	b.w	8001694 <_getpid>

080200d0 <_strtol_l.isra.0>:
 80200d0:	2b01      	cmp	r3, #1
 80200d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200d6:	d001      	beq.n	80200dc <_strtol_l.isra.0+0xc>
 80200d8:	2b24      	cmp	r3, #36	; 0x24
 80200da:	d906      	bls.n	80200ea <_strtol_l.isra.0+0x1a>
 80200dc:	f7ff fbaa 	bl	801f834 <__errno>
 80200e0:	2316      	movs	r3, #22
 80200e2:	6003      	str	r3, [r0, #0]
 80200e4:	2000      	movs	r0, #0
 80200e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200ea:	4f3a      	ldr	r7, [pc, #232]	; (80201d4 <_strtol_l.isra.0+0x104>)
 80200ec:	468e      	mov	lr, r1
 80200ee:	4676      	mov	r6, lr
 80200f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80200f4:	5de5      	ldrb	r5, [r4, r7]
 80200f6:	f015 0508 	ands.w	r5, r5, #8
 80200fa:	d1f8      	bne.n	80200ee <_strtol_l.isra.0+0x1e>
 80200fc:	2c2d      	cmp	r4, #45	; 0x2d
 80200fe:	d134      	bne.n	802016a <_strtol_l.isra.0+0x9a>
 8020100:	f89e 4000 	ldrb.w	r4, [lr]
 8020104:	f04f 0801 	mov.w	r8, #1
 8020108:	f106 0e02 	add.w	lr, r6, #2
 802010c:	2b00      	cmp	r3, #0
 802010e:	d05c      	beq.n	80201ca <_strtol_l.isra.0+0xfa>
 8020110:	2b10      	cmp	r3, #16
 8020112:	d10c      	bne.n	802012e <_strtol_l.isra.0+0x5e>
 8020114:	2c30      	cmp	r4, #48	; 0x30
 8020116:	d10a      	bne.n	802012e <_strtol_l.isra.0+0x5e>
 8020118:	f89e 4000 	ldrb.w	r4, [lr]
 802011c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020120:	2c58      	cmp	r4, #88	; 0x58
 8020122:	d14d      	bne.n	80201c0 <_strtol_l.isra.0+0xf0>
 8020124:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020128:	2310      	movs	r3, #16
 802012a:	f10e 0e02 	add.w	lr, lr, #2
 802012e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020132:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020136:	2600      	movs	r6, #0
 8020138:	fbbc f9f3 	udiv	r9, ip, r3
 802013c:	4635      	mov	r5, r6
 802013e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020142:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020146:	2f09      	cmp	r7, #9
 8020148:	d818      	bhi.n	802017c <_strtol_l.isra.0+0xac>
 802014a:	463c      	mov	r4, r7
 802014c:	42a3      	cmp	r3, r4
 802014e:	dd24      	ble.n	802019a <_strtol_l.isra.0+0xca>
 8020150:	2e00      	cmp	r6, #0
 8020152:	db1f      	blt.n	8020194 <_strtol_l.isra.0+0xc4>
 8020154:	45a9      	cmp	r9, r5
 8020156:	d31d      	bcc.n	8020194 <_strtol_l.isra.0+0xc4>
 8020158:	d101      	bne.n	802015e <_strtol_l.isra.0+0x8e>
 802015a:	45a2      	cmp	sl, r4
 802015c:	db1a      	blt.n	8020194 <_strtol_l.isra.0+0xc4>
 802015e:	fb05 4503 	mla	r5, r5, r3, r4
 8020162:	2601      	movs	r6, #1
 8020164:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020168:	e7eb      	b.n	8020142 <_strtol_l.isra.0+0x72>
 802016a:	2c2b      	cmp	r4, #43	; 0x2b
 802016c:	bf08      	it	eq
 802016e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020172:	46a8      	mov	r8, r5
 8020174:	bf08      	it	eq
 8020176:	f106 0e02 	addeq.w	lr, r6, #2
 802017a:	e7c7      	b.n	802010c <_strtol_l.isra.0+0x3c>
 802017c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020180:	2f19      	cmp	r7, #25
 8020182:	d801      	bhi.n	8020188 <_strtol_l.isra.0+0xb8>
 8020184:	3c37      	subs	r4, #55	; 0x37
 8020186:	e7e1      	b.n	802014c <_strtol_l.isra.0+0x7c>
 8020188:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802018c:	2f19      	cmp	r7, #25
 802018e:	d804      	bhi.n	802019a <_strtol_l.isra.0+0xca>
 8020190:	3c57      	subs	r4, #87	; 0x57
 8020192:	e7db      	b.n	802014c <_strtol_l.isra.0+0x7c>
 8020194:	f04f 36ff 	mov.w	r6, #4294967295
 8020198:	e7e4      	b.n	8020164 <_strtol_l.isra.0+0x94>
 802019a:	2e00      	cmp	r6, #0
 802019c:	da05      	bge.n	80201aa <_strtol_l.isra.0+0xda>
 802019e:	2322      	movs	r3, #34	; 0x22
 80201a0:	6003      	str	r3, [r0, #0]
 80201a2:	4665      	mov	r5, ip
 80201a4:	b942      	cbnz	r2, 80201b8 <_strtol_l.isra.0+0xe8>
 80201a6:	4628      	mov	r0, r5
 80201a8:	e79d      	b.n	80200e6 <_strtol_l.isra.0+0x16>
 80201aa:	f1b8 0f00 	cmp.w	r8, #0
 80201ae:	d000      	beq.n	80201b2 <_strtol_l.isra.0+0xe2>
 80201b0:	426d      	negs	r5, r5
 80201b2:	2a00      	cmp	r2, #0
 80201b4:	d0f7      	beq.n	80201a6 <_strtol_l.isra.0+0xd6>
 80201b6:	b10e      	cbz	r6, 80201bc <_strtol_l.isra.0+0xec>
 80201b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80201bc:	6011      	str	r1, [r2, #0]
 80201be:	e7f2      	b.n	80201a6 <_strtol_l.isra.0+0xd6>
 80201c0:	2430      	movs	r4, #48	; 0x30
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d1b3      	bne.n	802012e <_strtol_l.isra.0+0x5e>
 80201c6:	2308      	movs	r3, #8
 80201c8:	e7b1      	b.n	802012e <_strtol_l.isra.0+0x5e>
 80201ca:	2c30      	cmp	r4, #48	; 0x30
 80201cc:	d0a4      	beq.n	8020118 <_strtol_l.isra.0+0x48>
 80201ce:	230a      	movs	r3, #10
 80201d0:	e7ad      	b.n	802012e <_strtol_l.isra.0+0x5e>
 80201d2:	bf00      	nop
 80201d4:	08024ebd 	.word	0x08024ebd

080201d8 <strtol>:
 80201d8:	4613      	mov	r3, r2
 80201da:	460a      	mov	r2, r1
 80201dc:	4601      	mov	r1, r0
 80201de:	4802      	ldr	r0, [pc, #8]	; (80201e8 <strtol+0x10>)
 80201e0:	6800      	ldr	r0, [r0, #0]
 80201e2:	f7ff bf75 	b.w	80200d0 <_strtol_l.isra.0>
 80201e6:	bf00      	nop
 80201e8:	240000cc 	.word	0x240000cc

080201ec <__swbuf_r>:
 80201ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201ee:	460e      	mov	r6, r1
 80201f0:	4614      	mov	r4, r2
 80201f2:	4605      	mov	r5, r0
 80201f4:	b118      	cbz	r0, 80201fe <__swbuf_r+0x12>
 80201f6:	6983      	ldr	r3, [r0, #24]
 80201f8:	b90b      	cbnz	r3, 80201fe <__swbuf_r+0x12>
 80201fa:	f000 fa33 	bl	8020664 <__sinit>
 80201fe:	4b21      	ldr	r3, [pc, #132]	; (8020284 <__swbuf_r+0x98>)
 8020200:	429c      	cmp	r4, r3
 8020202:	d12b      	bne.n	802025c <__swbuf_r+0x70>
 8020204:	686c      	ldr	r4, [r5, #4]
 8020206:	69a3      	ldr	r3, [r4, #24]
 8020208:	60a3      	str	r3, [r4, #8]
 802020a:	89a3      	ldrh	r3, [r4, #12]
 802020c:	071a      	lsls	r2, r3, #28
 802020e:	d52f      	bpl.n	8020270 <__swbuf_r+0x84>
 8020210:	6923      	ldr	r3, [r4, #16]
 8020212:	b36b      	cbz	r3, 8020270 <__swbuf_r+0x84>
 8020214:	6923      	ldr	r3, [r4, #16]
 8020216:	6820      	ldr	r0, [r4, #0]
 8020218:	1ac0      	subs	r0, r0, r3
 802021a:	6963      	ldr	r3, [r4, #20]
 802021c:	b2f6      	uxtb	r6, r6
 802021e:	4283      	cmp	r3, r0
 8020220:	4637      	mov	r7, r6
 8020222:	dc04      	bgt.n	802022e <__swbuf_r+0x42>
 8020224:	4621      	mov	r1, r4
 8020226:	4628      	mov	r0, r5
 8020228:	f000 f988 	bl	802053c <_fflush_r>
 802022c:	bb30      	cbnz	r0, 802027c <__swbuf_r+0x90>
 802022e:	68a3      	ldr	r3, [r4, #8]
 8020230:	3b01      	subs	r3, #1
 8020232:	60a3      	str	r3, [r4, #8]
 8020234:	6823      	ldr	r3, [r4, #0]
 8020236:	1c5a      	adds	r2, r3, #1
 8020238:	6022      	str	r2, [r4, #0]
 802023a:	701e      	strb	r6, [r3, #0]
 802023c:	6963      	ldr	r3, [r4, #20]
 802023e:	3001      	adds	r0, #1
 8020240:	4283      	cmp	r3, r0
 8020242:	d004      	beq.n	802024e <__swbuf_r+0x62>
 8020244:	89a3      	ldrh	r3, [r4, #12]
 8020246:	07db      	lsls	r3, r3, #31
 8020248:	d506      	bpl.n	8020258 <__swbuf_r+0x6c>
 802024a:	2e0a      	cmp	r6, #10
 802024c:	d104      	bne.n	8020258 <__swbuf_r+0x6c>
 802024e:	4621      	mov	r1, r4
 8020250:	4628      	mov	r0, r5
 8020252:	f000 f973 	bl	802053c <_fflush_r>
 8020256:	b988      	cbnz	r0, 802027c <__swbuf_r+0x90>
 8020258:	4638      	mov	r0, r7
 802025a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802025c:	4b0a      	ldr	r3, [pc, #40]	; (8020288 <__swbuf_r+0x9c>)
 802025e:	429c      	cmp	r4, r3
 8020260:	d101      	bne.n	8020266 <__swbuf_r+0x7a>
 8020262:	68ac      	ldr	r4, [r5, #8]
 8020264:	e7cf      	b.n	8020206 <__swbuf_r+0x1a>
 8020266:	4b09      	ldr	r3, [pc, #36]	; (802028c <__swbuf_r+0xa0>)
 8020268:	429c      	cmp	r4, r3
 802026a:	bf08      	it	eq
 802026c:	68ec      	ldreq	r4, [r5, #12]
 802026e:	e7ca      	b.n	8020206 <__swbuf_r+0x1a>
 8020270:	4621      	mov	r1, r4
 8020272:	4628      	mov	r0, r5
 8020274:	f000 f80c 	bl	8020290 <__swsetup_r>
 8020278:	2800      	cmp	r0, #0
 802027a:	d0cb      	beq.n	8020214 <__swbuf_r+0x28>
 802027c:	f04f 37ff 	mov.w	r7, #4294967295
 8020280:	e7ea      	b.n	8020258 <__swbuf_r+0x6c>
 8020282:	bf00      	nop
 8020284:	08024fe0 	.word	0x08024fe0
 8020288:	08025000 	.word	0x08025000
 802028c:	08024fc0 	.word	0x08024fc0

08020290 <__swsetup_r>:
 8020290:	4b32      	ldr	r3, [pc, #200]	; (802035c <__swsetup_r+0xcc>)
 8020292:	b570      	push	{r4, r5, r6, lr}
 8020294:	681d      	ldr	r5, [r3, #0]
 8020296:	4606      	mov	r6, r0
 8020298:	460c      	mov	r4, r1
 802029a:	b125      	cbz	r5, 80202a6 <__swsetup_r+0x16>
 802029c:	69ab      	ldr	r3, [r5, #24]
 802029e:	b913      	cbnz	r3, 80202a6 <__swsetup_r+0x16>
 80202a0:	4628      	mov	r0, r5
 80202a2:	f000 f9df 	bl	8020664 <__sinit>
 80202a6:	4b2e      	ldr	r3, [pc, #184]	; (8020360 <__swsetup_r+0xd0>)
 80202a8:	429c      	cmp	r4, r3
 80202aa:	d10f      	bne.n	80202cc <__swsetup_r+0x3c>
 80202ac:	686c      	ldr	r4, [r5, #4]
 80202ae:	89a3      	ldrh	r3, [r4, #12]
 80202b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80202b4:	0719      	lsls	r1, r3, #28
 80202b6:	d42c      	bmi.n	8020312 <__swsetup_r+0x82>
 80202b8:	06dd      	lsls	r5, r3, #27
 80202ba:	d411      	bmi.n	80202e0 <__swsetup_r+0x50>
 80202bc:	2309      	movs	r3, #9
 80202be:	6033      	str	r3, [r6, #0]
 80202c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80202c4:	81a3      	strh	r3, [r4, #12]
 80202c6:	f04f 30ff 	mov.w	r0, #4294967295
 80202ca:	e03e      	b.n	802034a <__swsetup_r+0xba>
 80202cc:	4b25      	ldr	r3, [pc, #148]	; (8020364 <__swsetup_r+0xd4>)
 80202ce:	429c      	cmp	r4, r3
 80202d0:	d101      	bne.n	80202d6 <__swsetup_r+0x46>
 80202d2:	68ac      	ldr	r4, [r5, #8]
 80202d4:	e7eb      	b.n	80202ae <__swsetup_r+0x1e>
 80202d6:	4b24      	ldr	r3, [pc, #144]	; (8020368 <__swsetup_r+0xd8>)
 80202d8:	429c      	cmp	r4, r3
 80202da:	bf08      	it	eq
 80202dc:	68ec      	ldreq	r4, [r5, #12]
 80202de:	e7e6      	b.n	80202ae <__swsetup_r+0x1e>
 80202e0:	0758      	lsls	r0, r3, #29
 80202e2:	d512      	bpl.n	802030a <__swsetup_r+0x7a>
 80202e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80202e6:	b141      	cbz	r1, 80202fa <__swsetup_r+0x6a>
 80202e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80202ec:	4299      	cmp	r1, r3
 80202ee:	d002      	beq.n	80202f6 <__swsetup_r+0x66>
 80202f0:	4630      	mov	r0, r6
 80202f2:	f7ff fb01 	bl	801f8f8 <_free_r>
 80202f6:	2300      	movs	r3, #0
 80202f8:	6363      	str	r3, [r4, #52]	; 0x34
 80202fa:	89a3      	ldrh	r3, [r4, #12]
 80202fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020300:	81a3      	strh	r3, [r4, #12]
 8020302:	2300      	movs	r3, #0
 8020304:	6063      	str	r3, [r4, #4]
 8020306:	6923      	ldr	r3, [r4, #16]
 8020308:	6023      	str	r3, [r4, #0]
 802030a:	89a3      	ldrh	r3, [r4, #12]
 802030c:	f043 0308 	orr.w	r3, r3, #8
 8020310:	81a3      	strh	r3, [r4, #12]
 8020312:	6923      	ldr	r3, [r4, #16]
 8020314:	b94b      	cbnz	r3, 802032a <__swsetup_r+0x9a>
 8020316:	89a3      	ldrh	r3, [r4, #12]
 8020318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802031c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020320:	d003      	beq.n	802032a <__swsetup_r+0x9a>
 8020322:	4621      	mov	r1, r4
 8020324:	4630      	mov	r0, r6
 8020326:	f000 fa63 	bl	80207f0 <__smakebuf_r>
 802032a:	89a0      	ldrh	r0, [r4, #12]
 802032c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020330:	f010 0301 	ands.w	r3, r0, #1
 8020334:	d00a      	beq.n	802034c <__swsetup_r+0xbc>
 8020336:	2300      	movs	r3, #0
 8020338:	60a3      	str	r3, [r4, #8]
 802033a:	6963      	ldr	r3, [r4, #20]
 802033c:	425b      	negs	r3, r3
 802033e:	61a3      	str	r3, [r4, #24]
 8020340:	6923      	ldr	r3, [r4, #16]
 8020342:	b943      	cbnz	r3, 8020356 <__swsetup_r+0xc6>
 8020344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020348:	d1ba      	bne.n	80202c0 <__swsetup_r+0x30>
 802034a:	bd70      	pop	{r4, r5, r6, pc}
 802034c:	0781      	lsls	r1, r0, #30
 802034e:	bf58      	it	pl
 8020350:	6963      	ldrpl	r3, [r4, #20]
 8020352:	60a3      	str	r3, [r4, #8]
 8020354:	e7f4      	b.n	8020340 <__swsetup_r+0xb0>
 8020356:	2000      	movs	r0, #0
 8020358:	e7f7      	b.n	802034a <__swsetup_r+0xba>
 802035a:	bf00      	nop
 802035c:	240000cc 	.word	0x240000cc
 8020360:	08024fe0 	.word	0x08024fe0
 8020364:	08025000 	.word	0x08025000
 8020368:	08024fc0 	.word	0x08024fc0

0802036c <__register_exitproc>:
 802036c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020370:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802042c <__register_exitproc+0xc0>
 8020374:	4606      	mov	r6, r0
 8020376:	f8d8 0000 	ldr.w	r0, [r8]
 802037a:	461f      	mov	r7, r3
 802037c:	460d      	mov	r5, r1
 802037e:	4691      	mov	r9, r2
 8020380:	f000 fa0e 	bl	80207a0 <__retarget_lock_acquire_recursive>
 8020384:	4b25      	ldr	r3, [pc, #148]	; (802041c <__register_exitproc+0xb0>)
 8020386:	681c      	ldr	r4, [r3, #0]
 8020388:	b934      	cbnz	r4, 8020398 <__register_exitproc+0x2c>
 802038a:	4c25      	ldr	r4, [pc, #148]	; (8020420 <__register_exitproc+0xb4>)
 802038c:	601c      	str	r4, [r3, #0]
 802038e:	4b25      	ldr	r3, [pc, #148]	; (8020424 <__register_exitproc+0xb8>)
 8020390:	b113      	cbz	r3, 8020398 <__register_exitproc+0x2c>
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8020398:	6863      	ldr	r3, [r4, #4]
 802039a:	2b1f      	cmp	r3, #31
 802039c:	dd07      	ble.n	80203ae <__register_exitproc+0x42>
 802039e:	f8d8 0000 	ldr.w	r0, [r8]
 80203a2:	f000 f9ff 	bl	80207a4 <__retarget_lock_release_recursive>
 80203a6:	f04f 30ff 	mov.w	r0, #4294967295
 80203aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203ae:	b34e      	cbz	r6, 8020404 <__register_exitproc+0x98>
 80203b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80203b4:	b988      	cbnz	r0, 80203da <__register_exitproc+0x6e>
 80203b6:	4b1c      	ldr	r3, [pc, #112]	; (8020428 <__register_exitproc+0xbc>)
 80203b8:	b923      	cbnz	r3, 80203c4 <__register_exitproc+0x58>
 80203ba:	f8d8 0000 	ldr.w	r0, [r8]
 80203be:	f000 f9f0 	bl	80207a2 <__retarget_lock_release>
 80203c2:	e7f0      	b.n	80203a6 <__register_exitproc+0x3a>
 80203c4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80203c8:	f7ff fa70 	bl	801f8ac <malloc>
 80203cc:	2800      	cmp	r0, #0
 80203ce:	d0f4      	beq.n	80203ba <__register_exitproc+0x4e>
 80203d0:	2300      	movs	r3, #0
 80203d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80203d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80203da:	6863      	ldr	r3, [r4, #4]
 80203dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80203e0:	2201      	movs	r2, #1
 80203e2:	409a      	lsls	r2, r3
 80203e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80203e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80203ec:	4313      	orrs	r3, r2
 80203ee:	2e02      	cmp	r6, #2
 80203f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80203f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80203f8:	bf02      	ittt	eq
 80203fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80203fe:	431a      	orreq	r2, r3
 8020400:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8020404:	6863      	ldr	r3, [r4, #4]
 8020406:	f8d8 0000 	ldr.w	r0, [r8]
 802040a:	1c5a      	adds	r2, r3, #1
 802040c:	3302      	adds	r3, #2
 802040e:	6062      	str	r2, [r4, #4]
 8020410:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8020414:	f000 f9c6 	bl	80207a4 <__retarget_lock_release_recursive>
 8020418:	2000      	movs	r0, #0
 802041a:	e7c6      	b.n	80203aa <__register_exitproc+0x3e>
 802041c:	2400ec88 	.word	0x2400ec88
 8020420:	2400ebfc 	.word	0x2400ebfc
 8020424:	08024eb8 	.word	0x08024eb8
 8020428:	0801f8ad 	.word	0x0801f8ad
 802042c:	24000130 	.word	0x24000130

08020430 <__sflush_r>:
 8020430:	898a      	ldrh	r2, [r1, #12]
 8020432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020436:	4605      	mov	r5, r0
 8020438:	0710      	lsls	r0, r2, #28
 802043a:	460c      	mov	r4, r1
 802043c:	d458      	bmi.n	80204f0 <__sflush_r+0xc0>
 802043e:	684b      	ldr	r3, [r1, #4]
 8020440:	2b00      	cmp	r3, #0
 8020442:	dc05      	bgt.n	8020450 <__sflush_r+0x20>
 8020444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020446:	2b00      	cmp	r3, #0
 8020448:	dc02      	bgt.n	8020450 <__sflush_r+0x20>
 802044a:	2000      	movs	r0, #0
 802044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020452:	2e00      	cmp	r6, #0
 8020454:	d0f9      	beq.n	802044a <__sflush_r+0x1a>
 8020456:	2300      	movs	r3, #0
 8020458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802045c:	682f      	ldr	r7, [r5, #0]
 802045e:	602b      	str	r3, [r5, #0]
 8020460:	d032      	beq.n	80204c8 <__sflush_r+0x98>
 8020462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020464:	89a3      	ldrh	r3, [r4, #12]
 8020466:	075a      	lsls	r2, r3, #29
 8020468:	d505      	bpl.n	8020476 <__sflush_r+0x46>
 802046a:	6863      	ldr	r3, [r4, #4]
 802046c:	1ac0      	subs	r0, r0, r3
 802046e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020470:	b10b      	cbz	r3, 8020476 <__sflush_r+0x46>
 8020472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020474:	1ac0      	subs	r0, r0, r3
 8020476:	2300      	movs	r3, #0
 8020478:	4602      	mov	r2, r0
 802047a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802047c:	6a21      	ldr	r1, [r4, #32]
 802047e:	4628      	mov	r0, r5
 8020480:	47b0      	blx	r6
 8020482:	1c43      	adds	r3, r0, #1
 8020484:	89a3      	ldrh	r3, [r4, #12]
 8020486:	d106      	bne.n	8020496 <__sflush_r+0x66>
 8020488:	6829      	ldr	r1, [r5, #0]
 802048a:	291d      	cmp	r1, #29
 802048c:	d82c      	bhi.n	80204e8 <__sflush_r+0xb8>
 802048e:	4a2a      	ldr	r2, [pc, #168]	; (8020538 <__sflush_r+0x108>)
 8020490:	40ca      	lsrs	r2, r1
 8020492:	07d6      	lsls	r6, r2, #31
 8020494:	d528      	bpl.n	80204e8 <__sflush_r+0xb8>
 8020496:	2200      	movs	r2, #0
 8020498:	6062      	str	r2, [r4, #4]
 802049a:	04d9      	lsls	r1, r3, #19
 802049c:	6922      	ldr	r2, [r4, #16]
 802049e:	6022      	str	r2, [r4, #0]
 80204a0:	d504      	bpl.n	80204ac <__sflush_r+0x7c>
 80204a2:	1c42      	adds	r2, r0, #1
 80204a4:	d101      	bne.n	80204aa <__sflush_r+0x7a>
 80204a6:	682b      	ldr	r3, [r5, #0]
 80204a8:	b903      	cbnz	r3, 80204ac <__sflush_r+0x7c>
 80204aa:	6560      	str	r0, [r4, #84]	; 0x54
 80204ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80204ae:	602f      	str	r7, [r5, #0]
 80204b0:	2900      	cmp	r1, #0
 80204b2:	d0ca      	beq.n	802044a <__sflush_r+0x1a>
 80204b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80204b8:	4299      	cmp	r1, r3
 80204ba:	d002      	beq.n	80204c2 <__sflush_r+0x92>
 80204bc:	4628      	mov	r0, r5
 80204be:	f7ff fa1b 	bl	801f8f8 <_free_r>
 80204c2:	2000      	movs	r0, #0
 80204c4:	6360      	str	r0, [r4, #52]	; 0x34
 80204c6:	e7c1      	b.n	802044c <__sflush_r+0x1c>
 80204c8:	6a21      	ldr	r1, [r4, #32]
 80204ca:	2301      	movs	r3, #1
 80204cc:	4628      	mov	r0, r5
 80204ce:	47b0      	blx	r6
 80204d0:	1c41      	adds	r1, r0, #1
 80204d2:	d1c7      	bne.n	8020464 <__sflush_r+0x34>
 80204d4:	682b      	ldr	r3, [r5, #0]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d0c4      	beq.n	8020464 <__sflush_r+0x34>
 80204da:	2b1d      	cmp	r3, #29
 80204dc:	d001      	beq.n	80204e2 <__sflush_r+0xb2>
 80204de:	2b16      	cmp	r3, #22
 80204e0:	d101      	bne.n	80204e6 <__sflush_r+0xb6>
 80204e2:	602f      	str	r7, [r5, #0]
 80204e4:	e7b1      	b.n	802044a <__sflush_r+0x1a>
 80204e6:	89a3      	ldrh	r3, [r4, #12]
 80204e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204ec:	81a3      	strh	r3, [r4, #12]
 80204ee:	e7ad      	b.n	802044c <__sflush_r+0x1c>
 80204f0:	690f      	ldr	r7, [r1, #16]
 80204f2:	2f00      	cmp	r7, #0
 80204f4:	d0a9      	beq.n	802044a <__sflush_r+0x1a>
 80204f6:	0793      	lsls	r3, r2, #30
 80204f8:	680e      	ldr	r6, [r1, #0]
 80204fa:	bf08      	it	eq
 80204fc:	694b      	ldreq	r3, [r1, #20]
 80204fe:	600f      	str	r7, [r1, #0]
 8020500:	bf18      	it	ne
 8020502:	2300      	movne	r3, #0
 8020504:	eba6 0807 	sub.w	r8, r6, r7
 8020508:	608b      	str	r3, [r1, #8]
 802050a:	f1b8 0f00 	cmp.w	r8, #0
 802050e:	dd9c      	ble.n	802044a <__sflush_r+0x1a>
 8020510:	6a21      	ldr	r1, [r4, #32]
 8020512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020514:	4643      	mov	r3, r8
 8020516:	463a      	mov	r2, r7
 8020518:	4628      	mov	r0, r5
 802051a:	47b0      	blx	r6
 802051c:	2800      	cmp	r0, #0
 802051e:	dc06      	bgt.n	802052e <__sflush_r+0xfe>
 8020520:	89a3      	ldrh	r3, [r4, #12]
 8020522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020526:	81a3      	strh	r3, [r4, #12]
 8020528:	f04f 30ff 	mov.w	r0, #4294967295
 802052c:	e78e      	b.n	802044c <__sflush_r+0x1c>
 802052e:	4407      	add	r7, r0
 8020530:	eba8 0800 	sub.w	r8, r8, r0
 8020534:	e7e9      	b.n	802050a <__sflush_r+0xda>
 8020536:	bf00      	nop
 8020538:	20400001 	.word	0x20400001

0802053c <_fflush_r>:
 802053c:	b538      	push	{r3, r4, r5, lr}
 802053e:	690b      	ldr	r3, [r1, #16]
 8020540:	4605      	mov	r5, r0
 8020542:	460c      	mov	r4, r1
 8020544:	b913      	cbnz	r3, 802054c <_fflush_r+0x10>
 8020546:	2500      	movs	r5, #0
 8020548:	4628      	mov	r0, r5
 802054a:	bd38      	pop	{r3, r4, r5, pc}
 802054c:	b118      	cbz	r0, 8020556 <_fflush_r+0x1a>
 802054e:	6983      	ldr	r3, [r0, #24]
 8020550:	b90b      	cbnz	r3, 8020556 <_fflush_r+0x1a>
 8020552:	f000 f887 	bl	8020664 <__sinit>
 8020556:	4b14      	ldr	r3, [pc, #80]	; (80205a8 <_fflush_r+0x6c>)
 8020558:	429c      	cmp	r4, r3
 802055a:	d11b      	bne.n	8020594 <_fflush_r+0x58>
 802055c:	686c      	ldr	r4, [r5, #4]
 802055e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020562:	2b00      	cmp	r3, #0
 8020564:	d0ef      	beq.n	8020546 <_fflush_r+0xa>
 8020566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020568:	07d0      	lsls	r0, r2, #31
 802056a:	d404      	bmi.n	8020576 <_fflush_r+0x3a>
 802056c:	0599      	lsls	r1, r3, #22
 802056e:	d402      	bmi.n	8020576 <_fflush_r+0x3a>
 8020570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020572:	f000 f915 	bl	80207a0 <__retarget_lock_acquire_recursive>
 8020576:	4628      	mov	r0, r5
 8020578:	4621      	mov	r1, r4
 802057a:	f7ff ff59 	bl	8020430 <__sflush_r>
 802057e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020580:	07da      	lsls	r2, r3, #31
 8020582:	4605      	mov	r5, r0
 8020584:	d4e0      	bmi.n	8020548 <_fflush_r+0xc>
 8020586:	89a3      	ldrh	r3, [r4, #12]
 8020588:	059b      	lsls	r3, r3, #22
 802058a:	d4dd      	bmi.n	8020548 <_fflush_r+0xc>
 802058c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802058e:	f000 f909 	bl	80207a4 <__retarget_lock_release_recursive>
 8020592:	e7d9      	b.n	8020548 <_fflush_r+0xc>
 8020594:	4b05      	ldr	r3, [pc, #20]	; (80205ac <_fflush_r+0x70>)
 8020596:	429c      	cmp	r4, r3
 8020598:	d101      	bne.n	802059e <_fflush_r+0x62>
 802059a:	68ac      	ldr	r4, [r5, #8]
 802059c:	e7df      	b.n	802055e <_fflush_r+0x22>
 802059e:	4b04      	ldr	r3, [pc, #16]	; (80205b0 <_fflush_r+0x74>)
 80205a0:	429c      	cmp	r4, r3
 80205a2:	bf08      	it	eq
 80205a4:	68ec      	ldreq	r4, [r5, #12]
 80205a6:	e7da      	b.n	802055e <_fflush_r+0x22>
 80205a8:	08024fe0 	.word	0x08024fe0
 80205ac:	08025000 	.word	0x08025000
 80205b0:	08024fc0 	.word	0x08024fc0

080205b4 <std>:
 80205b4:	2300      	movs	r3, #0
 80205b6:	b510      	push	{r4, lr}
 80205b8:	4604      	mov	r4, r0
 80205ba:	e9c0 3300 	strd	r3, r3, [r0]
 80205be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80205c2:	6083      	str	r3, [r0, #8]
 80205c4:	8181      	strh	r1, [r0, #12]
 80205c6:	6643      	str	r3, [r0, #100]	; 0x64
 80205c8:	81c2      	strh	r2, [r0, #14]
 80205ca:	6183      	str	r3, [r0, #24]
 80205cc:	4619      	mov	r1, r3
 80205ce:	2208      	movs	r2, #8
 80205d0:	305c      	adds	r0, #92	; 0x5c
 80205d2:	f7ff f989 	bl	801f8e8 <memset>
 80205d6:	4b05      	ldr	r3, [pc, #20]	; (80205ec <std+0x38>)
 80205d8:	6263      	str	r3, [r4, #36]	; 0x24
 80205da:	4b05      	ldr	r3, [pc, #20]	; (80205f0 <std+0x3c>)
 80205dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80205de:	4b05      	ldr	r3, [pc, #20]	; (80205f4 <std+0x40>)
 80205e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80205e2:	4b05      	ldr	r3, [pc, #20]	; (80205f8 <std+0x44>)
 80205e4:	6224      	str	r4, [r4, #32]
 80205e6:	6323      	str	r3, [r4, #48]	; 0x30
 80205e8:	bd10      	pop	{r4, pc}
 80205ea:	bf00      	nop
 80205ec:	08020889 	.word	0x08020889
 80205f0:	080208ab 	.word	0x080208ab
 80205f4:	080208e3 	.word	0x080208e3
 80205f8:	08020907 	.word	0x08020907

080205fc <_cleanup_r>:
 80205fc:	4901      	ldr	r1, [pc, #4]	; (8020604 <_cleanup_r+0x8>)
 80205fe:	f000 b8af 	b.w	8020760 <_fwalk_reent>
 8020602:	bf00      	nop
 8020604:	0802053d 	.word	0x0802053d

08020608 <__sfmoreglue>:
 8020608:	b570      	push	{r4, r5, r6, lr}
 802060a:	1e4a      	subs	r2, r1, #1
 802060c:	2568      	movs	r5, #104	; 0x68
 802060e:	4355      	muls	r5, r2
 8020610:	460e      	mov	r6, r1
 8020612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020616:	f7ff f9bf 	bl	801f998 <_malloc_r>
 802061a:	4604      	mov	r4, r0
 802061c:	b140      	cbz	r0, 8020630 <__sfmoreglue+0x28>
 802061e:	2100      	movs	r1, #0
 8020620:	e9c0 1600 	strd	r1, r6, [r0]
 8020624:	300c      	adds	r0, #12
 8020626:	60a0      	str	r0, [r4, #8]
 8020628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802062c:	f7ff f95c 	bl	801f8e8 <memset>
 8020630:	4620      	mov	r0, r4
 8020632:	bd70      	pop	{r4, r5, r6, pc}

08020634 <__sfp_lock_acquire>:
 8020634:	4801      	ldr	r0, [pc, #4]	; (802063c <__sfp_lock_acquire+0x8>)
 8020636:	f000 b8b3 	b.w	80207a0 <__retarget_lock_acquire_recursive>
 802063a:	bf00      	nop
 802063c:	2400f084 	.word	0x2400f084

08020640 <__sfp_lock_release>:
 8020640:	4801      	ldr	r0, [pc, #4]	; (8020648 <__sfp_lock_release+0x8>)
 8020642:	f000 b8af 	b.w	80207a4 <__retarget_lock_release_recursive>
 8020646:	bf00      	nop
 8020648:	2400f084 	.word	0x2400f084

0802064c <__sinit_lock_acquire>:
 802064c:	4801      	ldr	r0, [pc, #4]	; (8020654 <__sinit_lock_acquire+0x8>)
 802064e:	f000 b8a7 	b.w	80207a0 <__retarget_lock_acquire_recursive>
 8020652:	bf00      	nop
 8020654:	2400f07f 	.word	0x2400f07f

08020658 <__sinit_lock_release>:
 8020658:	4801      	ldr	r0, [pc, #4]	; (8020660 <__sinit_lock_release+0x8>)
 802065a:	f000 b8a3 	b.w	80207a4 <__retarget_lock_release_recursive>
 802065e:	bf00      	nop
 8020660:	2400f07f 	.word	0x2400f07f

08020664 <__sinit>:
 8020664:	b510      	push	{r4, lr}
 8020666:	4604      	mov	r4, r0
 8020668:	f7ff fff0 	bl	802064c <__sinit_lock_acquire>
 802066c:	69a3      	ldr	r3, [r4, #24]
 802066e:	b11b      	cbz	r3, 8020678 <__sinit+0x14>
 8020670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020674:	f7ff bff0 	b.w	8020658 <__sinit_lock_release>
 8020678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802067c:	6523      	str	r3, [r4, #80]	; 0x50
 802067e:	4b13      	ldr	r3, [pc, #76]	; (80206cc <__sinit+0x68>)
 8020680:	4a13      	ldr	r2, [pc, #76]	; (80206d0 <__sinit+0x6c>)
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	62a2      	str	r2, [r4, #40]	; 0x28
 8020686:	42a3      	cmp	r3, r4
 8020688:	bf04      	itt	eq
 802068a:	2301      	moveq	r3, #1
 802068c:	61a3      	streq	r3, [r4, #24]
 802068e:	4620      	mov	r0, r4
 8020690:	f000 f820 	bl	80206d4 <__sfp>
 8020694:	6060      	str	r0, [r4, #4]
 8020696:	4620      	mov	r0, r4
 8020698:	f000 f81c 	bl	80206d4 <__sfp>
 802069c:	60a0      	str	r0, [r4, #8]
 802069e:	4620      	mov	r0, r4
 80206a0:	f000 f818 	bl	80206d4 <__sfp>
 80206a4:	2200      	movs	r2, #0
 80206a6:	60e0      	str	r0, [r4, #12]
 80206a8:	2104      	movs	r1, #4
 80206aa:	6860      	ldr	r0, [r4, #4]
 80206ac:	f7ff ff82 	bl	80205b4 <std>
 80206b0:	68a0      	ldr	r0, [r4, #8]
 80206b2:	2201      	movs	r2, #1
 80206b4:	2109      	movs	r1, #9
 80206b6:	f7ff ff7d 	bl	80205b4 <std>
 80206ba:	68e0      	ldr	r0, [r4, #12]
 80206bc:	2202      	movs	r2, #2
 80206be:	2112      	movs	r1, #18
 80206c0:	f7ff ff78 	bl	80205b4 <std>
 80206c4:	2301      	movs	r3, #1
 80206c6:	61a3      	str	r3, [r4, #24]
 80206c8:	e7d2      	b.n	8020670 <__sinit+0xc>
 80206ca:	bf00      	nop
 80206cc:	08024e80 	.word	0x08024e80
 80206d0:	080205fd 	.word	0x080205fd

080206d4 <__sfp>:
 80206d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206d6:	4607      	mov	r7, r0
 80206d8:	f7ff ffac 	bl	8020634 <__sfp_lock_acquire>
 80206dc:	4b1e      	ldr	r3, [pc, #120]	; (8020758 <__sfp+0x84>)
 80206de:	681e      	ldr	r6, [r3, #0]
 80206e0:	69b3      	ldr	r3, [r6, #24]
 80206e2:	b913      	cbnz	r3, 80206ea <__sfp+0x16>
 80206e4:	4630      	mov	r0, r6
 80206e6:	f7ff ffbd 	bl	8020664 <__sinit>
 80206ea:	3648      	adds	r6, #72	; 0x48
 80206ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80206f0:	3b01      	subs	r3, #1
 80206f2:	d503      	bpl.n	80206fc <__sfp+0x28>
 80206f4:	6833      	ldr	r3, [r6, #0]
 80206f6:	b30b      	cbz	r3, 802073c <__sfp+0x68>
 80206f8:	6836      	ldr	r6, [r6, #0]
 80206fa:	e7f7      	b.n	80206ec <__sfp+0x18>
 80206fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020700:	b9d5      	cbnz	r5, 8020738 <__sfp+0x64>
 8020702:	4b16      	ldr	r3, [pc, #88]	; (802075c <__sfp+0x88>)
 8020704:	60e3      	str	r3, [r4, #12]
 8020706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802070a:	6665      	str	r5, [r4, #100]	; 0x64
 802070c:	f000 f847 	bl	802079e <__retarget_lock_init_recursive>
 8020710:	f7ff ff96 	bl	8020640 <__sfp_lock_release>
 8020714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802071c:	6025      	str	r5, [r4, #0]
 802071e:	61a5      	str	r5, [r4, #24]
 8020720:	2208      	movs	r2, #8
 8020722:	4629      	mov	r1, r5
 8020724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020728:	f7ff f8de 	bl	801f8e8 <memset>
 802072c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020734:	4620      	mov	r0, r4
 8020736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020738:	3468      	adds	r4, #104	; 0x68
 802073a:	e7d9      	b.n	80206f0 <__sfp+0x1c>
 802073c:	2104      	movs	r1, #4
 802073e:	4638      	mov	r0, r7
 8020740:	f7ff ff62 	bl	8020608 <__sfmoreglue>
 8020744:	4604      	mov	r4, r0
 8020746:	6030      	str	r0, [r6, #0]
 8020748:	2800      	cmp	r0, #0
 802074a:	d1d5      	bne.n	80206f8 <__sfp+0x24>
 802074c:	f7ff ff78 	bl	8020640 <__sfp_lock_release>
 8020750:	230c      	movs	r3, #12
 8020752:	603b      	str	r3, [r7, #0]
 8020754:	e7ee      	b.n	8020734 <__sfp+0x60>
 8020756:	bf00      	nop
 8020758:	08024e80 	.word	0x08024e80
 802075c:	ffff0001 	.word	0xffff0001

08020760 <_fwalk_reent>:
 8020760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020764:	4606      	mov	r6, r0
 8020766:	4688      	mov	r8, r1
 8020768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802076c:	2700      	movs	r7, #0
 802076e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020772:	f1b9 0901 	subs.w	r9, r9, #1
 8020776:	d505      	bpl.n	8020784 <_fwalk_reent+0x24>
 8020778:	6824      	ldr	r4, [r4, #0]
 802077a:	2c00      	cmp	r4, #0
 802077c:	d1f7      	bne.n	802076e <_fwalk_reent+0xe>
 802077e:	4638      	mov	r0, r7
 8020780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020784:	89ab      	ldrh	r3, [r5, #12]
 8020786:	2b01      	cmp	r3, #1
 8020788:	d907      	bls.n	802079a <_fwalk_reent+0x3a>
 802078a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802078e:	3301      	adds	r3, #1
 8020790:	d003      	beq.n	802079a <_fwalk_reent+0x3a>
 8020792:	4629      	mov	r1, r5
 8020794:	4630      	mov	r0, r6
 8020796:	47c0      	blx	r8
 8020798:	4307      	orrs	r7, r0
 802079a:	3568      	adds	r5, #104	; 0x68
 802079c:	e7e9      	b.n	8020772 <_fwalk_reent+0x12>

0802079e <__retarget_lock_init_recursive>:
 802079e:	4770      	bx	lr

080207a0 <__retarget_lock_acquire_recursive>:
 80207a0:	4770      	bx	lr

080207a2 <__retarget_lock_release>:
 80207a2:	4770      	bx	lr

080207a4 <__retarget_lock_release_recursive>:
 80207a4:	4770      	bx	lr

080207a6 <__swhatbuf_r>:
 80207a6:	b570      	push	{r4, r5, r6, lr}
 80207a8:	460e      	mov	r6, r1
 80207aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80207ae:	2900      	cmp	r1, #0
 80207b0:	b096      	sub	sp, #88	; 0x58
 80207b2:	4614      	mov	r4, r2
 80207b4:	461d      	mov	r5, r3
 80207b6:	da07      	bge.n	80207c8 <__swhatbuf_r+0x22>
 80207b8:	2300      	movs	r3, #0
 80207ba:	602b      	str	r3, [r5, #0]
 80207bc:	89b3      	ldrh	r3, [r6, #12]
 80207be:	061a      	lsls	r2, r3, #24
 80207c0:	d410      	bmi.n	80207e4 <__swhatbuf_r+0x3e>
 80207c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80207c6:	e00e      	b.n	80207e6 <__swhatbuf_r+0x40>
 80207c8:	466a      	mov	r2, sp
 80207ca:	f000 f8c3 	bl	8020954 <_fstat_r>
 80207ce:	2800      	cmp	r0, #0
 80207d0:	dbf2      	blt.n	80207b8 <__swhatbuf_r+0x12>
 80207d2:	9a01      	ldr	r2, [sp, #4]
 80207d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80207d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80207dc:	425a      	negs	r2, r3
 80207de:	415a      	adcs	r2, r3
 80207e0:	602a      	str	r2, [r5, #0]
 80207e2:	e7ee      	b.n	80207c2 <__swhatbuf_r+0x1c>
 80207e4:	2340      	movs	r3, #64	; 0x40
 80207e6:	2000      	movs	r0, #0
 80207e8:	6023      	str	r3, [r4, #0]
 80207ea:	b016      	add	sp, #88	; 0x58
 80207ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080207f0 <__smakebuf_r>:
 80207f0:	898b      	ldrh	r3, [r1, #12]
 80207f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80207f4:	079d      	lsls	r5, r3, #30
 80207f6:	4606      	mov	r6, r0
 80207f8:	460c      	mov	r4, r1
 80207fa:	d507      	bpl.n	802080c <__smakebuf_r+0x1c>
 80207fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020800:	6023      	str	r3, [r4, #0]
 8020802:	6123      	str	r3, [r4, #16]
 8020804:	2301      	movs	r3, #1
 8020806:	6163      	str	r3, [r4, #20]
 8020808:	b002      	add	sp, #8
 802080a:	bd70      	pop	{r4, r5, r6, pc}
 802080c:	ab01      	add	r3, sp, #4
 802080e:	466a      	mov	r2, sp
 8020810:	f7ff ffc9 	bl	80207a6 <__swhatbuf_r>
 8020814:	9900      	ldr	r1, [sp, #0]
 8020816:	4605      	mov	r5, r0
 8020818:	4630      	mov	r0, r6
 802081a:	f7ff f8bd 	bl	801f998 <_malloc_r>
 802081e:	b948      	cbnz	r0, 8020834 <__smakebuf_r+0x44>
 8020820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020824:	059a      	lsls	r2, r3, #22
 8020826:	d4ef      	bmi.n	8020808 <__smakebuf_r+0x18>
 8020828:	f023 0303 	bic.w	r3, r3, #3
 802082c:	f043 0302 	orr.w	r3, r3, #2
 8020830:	81a3      	strh	r3, [r4, #12]
 8020832:	e7e3      	b.n	80207fc <__smakebuf_r+0xc>
 8020834:	4b0d      	ldr	r3, [pc, #52]	; (802086c <__smakebuf_r+0x7c>)
 8020836:	62b3      	str	r3, [r6, #40]	; 0x28
 8020838:	89a3      	ldrh	r3, [r4, #12]
 802083a:	6020      	str	r0, [r4, #0]
 802083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020840:	81a3      	strh	r3, [r4, #12]
 8020842:	9b00      	ldr	r3, [sp, #0]
 8020844:	6163      	str	r3, [r4, #20]
 8020846:	9b01      	ldr	r3, [sp, #4]
 8020848:	6120      	str	r0, [r4, #16]
 802084a:	b15b      	cbz	r3, 8020864 <__smakebuf_r+0x74>
 802084c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020850:	4630      	mov	r0, r6
 8020852:	f000 f891 	bl	8020978 <_isatty_r>
 8020856:	b128      	cbz	r0, 8020864 <__smakebuf_r+0x74>
 8020858:	89a3      	ldrh	r3, [r4, #12]
 802085a:	f023 0303 	bic.w	r3, r3, #3
 802085e:	f043 0301 	orr.w	r3, r3, #1
 8020862:	81a3      	strh	r3, [r4, #12]
 8020864:	89a0      	ldrh	r0, [r4, #12]
 8020866:	4305      	orrs	r5, r0
 8020868:	81a5      	strh	r5, [r4, #12]
 802086a:	e7cd      	b.n	8020808 <__smakebuf_r+0x18>
 802086c:	080205fd 	.word	0x080205fd

08020870 <__malloc_lock>:
 8020870:	4801      	ldr	r0, [pc, #4]	; (8020878 <__malloc_lock+0x8>)
 8020872:	f7ff bf95 	b.w	80207a0 <__retarget_lock_acquire_recursive>
 8020876:	bf00      	nop
 8020878:	2400f080 	.word	0x2400f080

0802087c <__malloc_unlock>:
 802087c:	4801      	ldr	r0, [pc, #4]	; (8020884 <__malloc_unlock+0x8>)
 802087e:	f7ff bf91 	b.w	80207a4 <__retarget_lock_release_recursive>
 8020882:	bf00      	nop
 8020884:	2400f080 	.word	0x2400f080

08020888 <__sread>:
 8020888:	b510      	push	{r4, lr}
 802088a:	460c      	mov	r4, r1
 802088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020890:	f000 f894 	bl	80209bc <_read_r>
 8020894:	2800      	cmp	r0, #0
 8020896:	bfab      	itete	ge
 8020898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802089a:	89a3      	ldrhlt	r3, [r4, #12]
 802089c:	181b      	addge	r3, r3, r0
 802089e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80208a2:	bfac      	ite	ge
 80208a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80208a6:	81a3      	strhlt	r3, [r4, #12]
 80208a8:	bd10      	pop	{r4, pc}

080208aa <__swrite>:
 80208aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208ae:	461f      	mov	r7, r3
 80208b0:	898b      	ldrh	r3, [r1, #12]
 80208b2:	05db      	lsls	r3, r3, #23
 80208b4:	4605      	mov	r5, r0
 80208b6:	460c      	mov	r4, r1
 80208b8:	4616      	mov	r6, r2
 80208ba:	d505      	bpl.n	80208c8 <__swrite+0x1e>
 80208bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208c0:	2302      	movs	r3, #2
 80208c2:	2200      	movs	r2, #0
 80208c4:	f000 f868 	bl	8020998 <_lseek_r>
 80208c8:	89a3      	ldrh	r3, [r4, #12]
 80208ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80208d2:	81a3      	strh	r3, [r4, #12]
 80208d4:	4632      	mov	r2, r6
 80208d6:	463b      	mov	r3, r7
 80208d8:	4628      	mov	r0, r5
 80208da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208de:	f000 b817 	b.w	8020910 <_write_r>

080208e2 <__sseek>:
 80208e2:	b510      	push	{r4, lr}
 80208e4:	460c      	mov	r4, r1
 80208e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208ea:	f000 f855 	bl	8020998 <_lseek_r>
 80208ee:	1c43      	adds	r3, r0, #1
 80208f0:	89a3      	ldrh	r3, [r4, #12]
 80208f2:	bf15      	itete	ne
 80208f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80208f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80208fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80208fe:	81a3      	strheq	r3, [r4, #12]
 8020900:	bf18      	it	ne
 8020902:	81a3      	strhne	r3, [r4, #12]
 8020904:	bd10      	pop	{r4, pc}

08020906 <__sclose>:
 8020906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802090a:	f000 b813 	b.w	8020934 <_close_r>
	...

08020910 <_write_r>:
 8020910:	b538      	push	{r3, r4, r5, lr}
 8020912:	4d07      	ldr	r5, [pc, #28]	; (8020930 <_write_r+0x20>)
 8020914:	4604      	mov	r4, r0
 8020916:	4608      	mov	r0, r1
 8020918:	4611      	mov	r1, r2
 802091a:	2200      	movs	r2, #0
 802091c:	602a      	str	r2, [r5, #0]
 802091e:	461a      	mov	r2, r3
 8020920:	f7e0 fed5 	bl	80016ce <_write>
 8020924:	1c43      	adds	r3, r0, #1
 8020926:	d102      	bne.n	802092e <_write_r+0x1e>
 8020928:	682b      	ldr	r3, [r5, #0]
 802092a:	b103      	cbz	r3, 802092e <_write_r+0x1e>
 802092c:	6023      	str	r3, [r4, #0]
 802092e:	bd38      	pop	{r3, r4, r5, pc}
 8020930:	2400f088 	.word	0x2400f088

08020934 <_close_r>:
 8020934:	b538      	push	{r3, r4, r5, lr}
 8020936:	4d06      	ldr	r5, [pc, #24]	; (8020950 <_close_r+0x1c>)
 8020938:	2300      	movs	r3, #0
 802093a:	4604      	mov	r4, r0
 802093c:	4608      	mov	r0, r1
 802093e:	602b      	str	r3, [r5, #0]
 8020940:	f7e0 fed2 	bl	80016e8 <_close>
 8020944:	1c43      	adds	r3, r0, #1
 8020946:	d102      	bne.n	802094e <_close_r+0x1a>
 8020948:	682b      	ldr	r3, [r5, #0]
 802094a:	b103      	cbz	r3, 802094e <_close_r+0x1a>
 802094c:	6023      	str	r3, [r4, #0]
 802094e:	bd38      	pop	{r3, r4, r5, pc}
 8020950:	2400f088 	.word	0x2400f088

08020954 <_fstat_r>:
 8020954:	b538      	push	{r3, r4, r5, lr}
 8020956:	4d07      	ldr	r5, [pc, #28]	; (8020974 <_fstat_r+0x20>)
 8020958:	2300      	movs	r3, #0
 802095a:	4604      	mov	r4, r0
 802095c:	4608      	mov	r0, r1
 802095e:	4611      	mov	r1, r2
 8020960:	602b      	str	r3, [r5, #0]
 8020962:	f7e0 fec4 	bl	80016ee <_fstat>
 8020966:	1c43      	adds	r3, r0, #1
 8020968:	d102      	bne.n	8020970 <_fstat_r+0x1c>
 802096a:	682b      	ldr	r3, [r5, #0]
 802096c:	b103      	cbz	r3, 8020970 <_fstat_r+0x1c>
 802096e:	6023      	str	r3, [r4, #0]
 8020970:	bd38      	pop	{r3, r4, r5, pc}
 8020972:	bf00      	nop
 8020974:	2400f088 	.word	0x2400f088

08020978 <_isatty_r>:
 8020978:	b538      	push	{r3, r4, r5, lr}
 802097a:	4d06      	ldr	r5, [pc, #24]	; (8020994 <_isatty_r+0x1c>)
 802097c:	2300      	movs	r3, #0
 802097e:	4604      	mov	r4, r0
 8020980:	4608      	mov	r0, r1
 8020982:	602b      	str	r3, [r5, #0]
 8020984:	f7e0 feb8 	bl	80016f8 <_isatty>
 8020988:	1c43      	adds	r3, r0, #1
 802098a:	d102      	bne.n	8020992 <_isatty_r+0x1a>
 802098c:	682b      	ldr	r3, [r5, #0]
 802098e:	b103      	cbz	r3, 8020992 <_isatty_r+0x1a>
 8020990:	6023      	str	r3, [r4, #0]
 8020992:	bd38      	pop	{r3, r4, r5, pc}
 8020994:	2400f088 	.word	0x2400f088

08020998 <_lseek_r>:
 8020998:	b538      	push	{r3, r4, r5, lr}
 802099a:	4d07      	ldr	r5, [pc, #28]	; (80209b8 <_lseek_r+0x20>)
 802099c:	4604      	mov	r4, r0
 802099e:	4608      	mov	r0, r1
 80209a0:	4611      	mov	r1, r2
 80209a2:	2200      	movs	r2, #0
 80209a4:	602a      	str	r2, [r5, #0]
 80209a6:	461a      	mov	r2, r3
 80209a8:	f7e0 fea8 	bl	80016fc <_lseek>
 80209ac:	1c43      	adds	r3, r0, #1
 80209ae:	d102      	bne.n	80209b6 <_lseek_r+0x1e>
 80209b0:	682b      	ldr	r3, [r5, #0]
 80209b2:	b103      	cbz	r3, 80209b6 <_lseek_r+0x1e>
 80209b4:	6023      	str	r3, [r4, #0]
 80209b6:	bd38      	pop	{r3, r4, r5, pc}
 80209b8:	2400f088 	.word	0x2400f088

080209bc <_read_r>:
 80209bc:	b538      	push	{r3, r4, r5, lr}
 80209be:	4d07      	ldr	r5, [pc, #28]	; (80209dc <_read_r+0x20>)
 80209c0:	4604      	mov	r4, r0
 80209c2:	4608      	mov	r0, r1
 80209c4:	4611      	mov	r1, r2
 80209c6:	2200      	movs	r2, #0
 80209c8:	602a      	str	r2, [r5, #0]
 80209ca:	461a      	mov	r2, r3
 80209cc:	f7e0 fe72 	bl	80016b4 <_read>
 80209d0:	1c43      	adds	r3, r0, #1
 80209d2:	d102      	bne.n	80209da <_read_r+0x1e>
 80209d4:	682b      	ldr	r3, [r5, #0]
 80209d6:	b103      	cbz	r3, 80209da <_read_r+0x1e>
 80209d8:	6023      	str	r3, [r4, #0]
 80209da:	bd38      	pop	{r3, r4, r5, pc}
 80209dc:	2400f088 	.word	0x2400f088

080209e0 <_init>:
 80209e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209e2:	bf00      	nop
 80209e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209e6:	bc08      	pop	{r3}
 80209e8:	469e      	mov	lr, r3
 80209ea:	4770      	bx	lr

080209ec <_fini>:
 80209ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ee:	bf00      	nop
 80209f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209f2:	bc08      	pop	{r3}
 80209f4:	469e      	mov	lr, r3
 80209f6:	4770      	bx	lr

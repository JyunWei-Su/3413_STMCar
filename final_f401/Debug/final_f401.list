
final_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009270  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094ac  080094ac  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b4  080094b4  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080094bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  200000e4  080095a0  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080095a0  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018eca  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003113  00000000  00000000  00038fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187e4  00000000  00000000  0003eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b50  00000000  00000000  000572cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2446  00000000  00000000  0006fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112262  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  001122b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e4 	.word	0x200000e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093f8 	.word	0x080093f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	080093f8 	.word	0x080093f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000e22:	f001 fecf 	bl	8002bc4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000e2c:	f107 030f 	add.w	r3, r7, #15
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 ff0f 	bl	8002c58 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000e44:	f107 030f 	add.w	r3, r7, #15
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2123      	movs	r1, #35	; 0x23
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 ff03 	bl	8002c58 <GYRO_IO_Write>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000e6e:	f001 fea9 	bl	8002bc4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	2201      	movs	r2, #1
 8000e76:	210f      	movs	r1, #15
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 ff1f 	bl	8002cbc <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2201      	movs	r2, #1
 8000e92:	2124      	movs	r1, #36	; 0x24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 ff11 	bl	8002cbc <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2124      	movs	r1, #36	; 0x24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fed4 	bl	8002c58 <GYRO_IO_Write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000ecc:	f107 030f 	add.w	r3, r7, #15
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 febf 	bl	8002c58 <GYRO_IO_Write>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000ef4:	f107 030f 	add.w	r3, r7, #15
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2130      	movs	r1, #48	; 0x30
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fedd 	bl	8002cbc <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f02:	f107 030e 	add.w	r3, r7, #14
 8000f06:	2201      	movs	r2, #1
 8000f08:	2122      	movs	r1, #34	; 0x22
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fed6 	bl	8002cbc <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	121b      	asrs	r3, r3, #8
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	f023 0320 	bic.w	r3, r3, #32
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2130      	movs	r1, #48	; 0x30
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fe83 	bl	8002c58 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f52:	f107 030e 	add.w	r3, r7, #14
 8000f56:	2201      	movs	r2, #1
 8000f58:	2122      	movs	r1, #34	; 0x22
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fe7c 	bl	8002c58 <GYRO_IO_Write>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000f72:	f107 030f 	add.w	r3, r7, #15
 8000f76:	2201      	movs	r2, #1
 8000f78:	2122      	movs	r1, #34	; 0x22
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fe9e 	bl	8002cbc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e00c      	b.n	8000fb6 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d109      	bne.n	8000fb6 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f023 0308 	bic.w	r3, r3, #8
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2122      	movs	r1, #34	; 0x22
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fe4a 	bl	8002c58 <GYRO_IO_Write>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000fd6:	f107 030f 	add.w	r3, r7, #15
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2122      	movs	r1, #34	; 0x22
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fe6c 	bl	8002cbc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d107      	bne.n	8000ffa <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e009      	b.n	800100e <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f023 0308 	bic.w	r3, r3, #8
 8001006:	b2db      	uxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800100e:	f107 030f 	add.w	r3, r7, #15
 8001012:	2201      	movs	r2, #1
 8001014:	2122      	movs	r1, #34	; 0x22
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fe1e 	bl	8002c58 <GYRO_IO_Write>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800102e:	f107 030f 	add.w	r3, r7, #15
 8001032:	2201      	movs	r2, #1
 8001034:	2121      	movs	r1, #33	; 0x21
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fe40 	bl	8002cbc <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001042:	b2db      	uxtb	r3, r3
 8001044:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4313      	orrs	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001050:	f107 030f 	add.w	r3, r7, #15
 8001054:	2201      	movs	r2, #1
 8001056:	2121      	movs	r1, #33	; 0x21
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fdfd 	bl	8002c58 <GYRO_IO_Write>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	2201      	movs	r2, #1
 8001076:	2124      	movs	r1, #36	; 0x24
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fe1f 	bl	8002cbc <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f023 0310 	bic.w	r3, r3, #16
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	2201      	movs	r2, #1
 8001098:	2124      	movs	r1, #36	; 0x24
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fddc 	bl	8002c58 <GYRO_IO_Write>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	2300      	movs	r3, #0
 80010b6:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	2123      	movs	r1, #35	; 0x23
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fdef 	bl	8002cbc <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2206      	movs	r2, #6
 80010e4:	2128      	movs	r1, #40	; 0x28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fde8 	bl	8002cbc <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d126      	bne.n	8001144 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	e01f      	b.n	800113c <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3301      	adds	r3, #1
 8001102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001106:	4413      	add	r3, r2
 8001108:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800110c:	b29b      	uxth	r3, r3
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b29a      	uxth	r2, r3
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800111a:	440b      	add	r3, r1
 800111c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001120:	b29b      	uxth	r3, r3
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	b21a      	sxth	r2, r3
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001130:	440b      	add	r3, r1
 8001132:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	3301      	adds	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	2b02      	cmp	r3, #2
 8001140:	dddc      	ble.n	80010fc <L3GD20_ReadXYZAngRate+0x54>
 8001142:	e025      	b.n	8001190 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	e01f      	b.n	800118a <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001152:	4413      	add	r3, r2
 8001154:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001158:	b29b      	uxth	r3, r3
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b29a      	uxth	r2, r3
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	3301      	adds	r3, #1
 8001164:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001168:	440b      	add	r3, r1
 800116a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21a      	sxth	r2, r3
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800117e:	440b      	add	r3, r1
 8001180:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	3301      	adds	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	2b02      	cmp	r3, #2
 800118e:	dddc      	ble.n	800114a <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001196:	2b20      	cmp	r3, #32
 8001198:	d00c      	beq.n	80011b4 <L3GD20_ReadXYZAngRate+0x10c>
 800119a:	2b20      	cmp	r3, #32
 800119c:	dc0d      	bgt.n	80011ba <L3GD20_ReadXYZAngRate+0x112>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <L3GD20_ReadXYZAngRate+0x100>
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d003      	beq.n	80011ae <L3GD20_ReadXYZAngRate+0x106>
 80011a6:	e008      	b.n	80011ba <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <L3GD20_ReadXYZAngRate+0x158>)
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80011ac:	e005      	b.n	80011ba <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <L3GD20_ReadXYZAngRate+0x15c>)
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80011b2:	e002      	b.n	80011ba <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <L3GD20_ReadXYZAngRate+0x160>)
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80011b8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	e017      	b.n	80011f0 <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011c8:	4413      	add	r3, r2
 80011ca:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	3301      	adds	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	dde4      	ble.n	80011c0 <L3GD20_ReadXYZAngRate+0x118>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	410c0000 	.word	0x410c0000
 8001204:	418c0000 	.word	0x418c0000
 8001208:	428c0000 	.word	0x428c0000

0800120c <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800121a:	f001 fd89 	bl	8002d30 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	461a      	mov	r2, r3
 8001226:	2120      	movs	r1, #32
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f001 fdd9 	bl	8002de0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	461a      	mov	r2, r3
 8001236:	2123      	movs	r1, #35	; 0x23
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f001 fdd1 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800125e:	f001 fd67 	bl	8002d30 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001262:	210f      	movs	r1, #15
 8001264:	2032      	movs	r0, #50	; 0x32
 8001266:	f001 fdce 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800126e:	79fb      	ldrb	r3, [r7, #7]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800127e:	2124      	movs	r1, #36	; 0x24
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f001 fdc0 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001290:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	461a      	mov	r2, r3
 8001296:	2124      	movs	r1, #36	; 0x24
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f001 fda1 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80012b0:	2121      	movs	r1, #33	; 0x21
 80012b2:	2032      	movs	r0, #50	; 0x32
 80012b4:	f001 fda7 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2121      	movs	r1, #33	; 0x21
 80012d2:	2032      	movs	r0, #50	; 0x32
 80012d4:	f001 fd84 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80012ea:	2121      	movs	r1, #33	; 0x21
 80012ec:	2032      	movs	r0, #50	; 0x32
 80012ee:	f001 fd8a 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f023 0308 	bic.w	r3, r3, #8
 80012fc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4313      	orrs	r3, r2
 8001304:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	461a      	mov	r2, r3
 800130a:	2121      	movs	r1, #33	; 0x21
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f001 fd67 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b088      	sub	sp, #32
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001322:	2300      	movs	r3, #0
 8001324:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800132a:	2301      	movs	r3, #1
 800132c:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800132e:	2123      	movs	r1, #35	; 0x23
 8001330:	2032      	movs	r0, #50	; 0x32
 8001332:	f001 fd68 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001336:	4603      	mov	r3, r0
 8001338:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800133a:	2124      	movs	r1, #36	; 0x24
 800133c:	2032      	movs	r0, #50	; 0x32
 800133e:	f001 fd62 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001346:	2128      	movs	r1, #40	; 0x28
 8001348:	2032      	movs	r0, #50	; 0x32
 800134a:	f001 fd5c 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	b25b      	sxtb	r3, r3
 8001352:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001354:	2129      	movs	r1, #41	; 0x29
 8001356:	2032      	movs	r0, #50	; 0x32
 8001358:	f001 fd55 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 800135c:	4603      	mov	r3, r0
 800135e:	b25b      	sxtb	r3, r3
 8001360:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001362:	212a      	movs	r1, #42	; 0x2a
 8001364:	2032      	movs	r0, #50	; 0x32
 8001366:	f001 fd4e 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 800136a:	4603      	mov	r3, r0
 800136c:	b25b      	sxtb	r3, r3
 800136e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001370:	212b      	movs	r1, #43	; 0x2b
 8001372:	2032      	movs	r0, #50	; 0x32
 8001374:	f001 fd47 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001378:	4603      	mov	r3, r0
 800137a:	b25b      	sxtb	r3, r3
 800137c:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	2032      	movs	r0, #50	; 0x32
 8001382:	f001 fd40 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001386:	4603      	mov	r3, r0
 8001388:	b25b      	sxtb	r3, r3
 800138a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800138c:	212d      	movs	r1, #45	; 0x2d
 800138e:	2032      	movs	r0, #50	; 0x32
 8001390:	f001 fd39 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001394:	4603      	mov	r3, r0
 8001396:	b25b      	sxtb	r3, r3
 8001398:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800139a:	7d3b      	ldrb	r3, [r7, #20]
 800139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d126      	bne.n	80013f2 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
 80013a8:	e01f      	b.n	80013ea <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	3301      	adds	r3, #1
 80013b0:	f107 0220 	add.w	r2, r7, #32
 80013b4:	4413      	add	r3, r2
 80013b6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b29a      	uxth	r2, r3
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	f107 0120 	add.w	r1, r7, #32
 80013c8:	440b      	add	r3, r1
 80013ca:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	b212      	sxth	r2, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	f107 0120 	add.w	r1, r7, #32
 80013de:	440b      	add	r3, r1
 80013e0:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80013e4:	7ffb      	ldrb	r3, [r7, #31]
 80013e6:	3301      	adds	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d9dc      	bls.n	80013aa <LSM303DLHC_AccReadXYZ+0x90>
 80013f0:	e025      	b.n	800143e <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	77fb      	strb	r3, [r7, #31]
 80013f6:	e01f      	b.n	8001438 <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	f107 0220 	add.w	r2, r7, #32
 8001400:	4413      	add	r3, r2
 8001402:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001406:	b29b      	uxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	3301      	adds	r3, #1
 8001412:	f107 0120 	add.w	r1, r7, #32
 8001416:	440b      	add	r3, r1
 8001418:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b29a      	uxth	r2, r3
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	b212      	sxth	r2, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	f107 0120 	add.w	r1, r7, #32
 800142c:	440b      	add	r3, r1
 800142e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	3301      	adds	r3, #1
 8001436:	77fb      	strb	r3, [r7, #31]
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d9dc      	bls.n	80013f8 <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800143e:	7d3b      	ldrb	r3, [r7, #20]
 8001440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001444:	2b30      	cmp	r3, #48	; 0x30
 8001446:	d013      	beq.n	8001470 <LSM303DLHC_AccReadXYZ+0x156>
 8001448:	2b30      	cmp	r3, #48	; 0x30
 800144a:	dc14      	bgt.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
 800144c:	2b20      	cmp	r3, #32
 800144e:	d00c      	beq.n	800146a <LSM303DLHC_AccReadXYZ+0x150>
 8001450:	2b20      	cmp	r3, #32
 8001452:	dc10      	bgt.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <LSM303DLHC_AccReadXYZ+0x144>
 8001458:	2b10      	cmp	r3, #16
 800145a:	d003      	beq.n	8001464 <LSM303DLHC_AccReadXYZ+0x14a>
 800145c:	e00b      	b.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800145e:	2301      	movs	r3, #1
 8001460:	77bb      	strb	r3, [r7, #30]
    break;
 8001462:	e008      	b.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001464:	2302      	movs	r3, #2
 8001466:	77bb      	strb	r3, [r7, #30]
    break;
 8001468:	e005      	b.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800146a:	2304      	movs	r3, #4
 800146c:	77bb      	strb	r3, [r7, #30]
    break;
 800146e:	e002      	b.n	8001476 <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001470:	230c      	movs	r3, #12
 8001472:	77bb      	strb	r3, [r7, #30]
    break;
 8001474:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	77fb      	strb	r3, [r7, #31]
 800147a:	e015      	b.n	80014a8 <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800147c:	7ffb      	ldrb	r3, [r7, #31]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	f107 0220 	add.w	r2, r7, #32
 8001484:	4413      	add	r3, r2
 8001486:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800148a:	b29a      	uxth	r2, r3
 800148c:	7fbb      	ldrb	r3, [r7, #30]
 800148e:	b29b      	uxth	r3, r3
 8001490:	fb12 f303 	smulbb	r3, r2, r3
 8001494:	b299      	uxth	r1, r3
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	b20a      	sxth	r2, r1
 80014a0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	3301      	adds	r3, #1
 80014a6:	77fb      	strb	r3, [r7, #31]
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d9e6      	bls.n	800147c <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80014c6:	2121      	movs	r1, #33	; 0x21
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f001 fc9c 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4313      	orrs	r3, r2
 80014e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2121      	movs	r1, #33	; 0x21
 80014e8:	2032      	movs	r0, #50	; 0x32
 80014ea:	f001 fc79 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001504:	2122      	movs	r1, #34	; 0x22
 8001506:	2032      	movs	r0, #50	; 0x32
 8001508:	f001 fc7d 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4313      	orrs	r3, r2
 8001516:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	461a      	mov	r2, r3
 800151c:	2122      	movs	r1, #34	; 0x22
 800151e:	2032      	movs	r0, #50	; 0x32
 8001520:	f001 fc5e 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800153a:	2138      	movs	r1, #56	; 0x38
 800153c:	2032      	movs	r0, #50	; 0x32
 800153e:	f001 fc62 	bl	8002e06 <COMPASSACCELERO_IO_Read>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4313      	orrs	r3, r2
 800154c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	461a      	mov	r2, r3
 8001552:	2138      	movs	r1, #56	; 0x38
 8001554:	2032      	movs	r0, #50	; 0x32
 8001556:	f001 fc43 	bl	8002de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 800155a:	230a      	movs	r3, #10
 800155c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	461a      	mov	r2, r3
 8001562:	213a      	movs	r1, #58	; 0x3a
 8001564:	2032      	movs	r0, #50	; 0x32
 8001566:	f001 fc3b 	bl	8002de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 800156a:	2305      	movs	r3, #5
 800156c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	461a      	mov	r2, r3
 8001572:	213b      	movs	r1, #59	; 0x3b
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f001 fc33 	bl	8002de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	461a      	mov	r2, r3
 800157e:	213c      	movs	r1, #60	; 0x3c
 8001580:	2032      	movs	r0, #50	; 0x32
 8001582:	f001 fc2d 	bl	8002de0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001586:	2332      	movs	r3, #50	; 0x32
 8001588:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	461a      	mov	r2, r3
 800158e:	213d      	movs	r1, #61	; 0x3d
 8001590:	2032      	movs	r0, #50	; 0x32
 8001592:	f001 fc25 	bl	8002de0 <COMPASSACCELERO_IO_Write>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80015a2:	f001 fbed 	bl	8002d80 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80015a6:	2080      	movs	r0, #128	; 0x80
 80015a8:	f7ff ffa5 	bl	80014f6 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff ff83 	bl	80014b8 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80015b2:	2010      	movs	r0, #16
 80015b4:	f7ff ffba 	bl	800152c <LSM303DLHC_AccClickITEnable>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <lcd16x2_i2c_sendCommand>:
#include <string.h>
#include <stdarg.h>

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f023 030f 	bic.w	r3, r3, #15
 80015d2:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	f043 030c 	orr.w	r3, r3, #12
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	723b      	strb	r3, [r7, #8]
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	727b      	strb	r3, [r7, #9]
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	f043 030c 	orr.w	r3, r3, #12
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	72bb      	strb	r3, [r7, #10]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <lcd16x2_i2c_sendCommand+0x60>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <lcd16x2_i2c_sendCommand+0x64>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b299      	uxth	r1, r3
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	23c8      	movs	r3, #200	; 0xc8
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2304      	movs	r3, #4
 8001610:	f003 faf6 	bl	8004c00 <HAL_I2C_Master_Transmit>
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000100 	.word	0x20000100
 8001620:	20000104 	.word	0x20000104

08001624 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f023 030f 	bic.w	r3, r3, #15
 800163a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	f043 030d 	orr.w	r3, r3, #13
 8001642:	b2db      	uxtb	r3, r3
 8001644:	723b      	strb	r3, [r7, #8]
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	f043 0309 	orr.w	r3, r3, #9
 800164c:	b2db      	uxtb	r3, r3
 800164e:	727b      	strb	r3, [r7, #9]
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	f043 030d 	orr.w	r3, r3, #13
 8001656:	b2db      	uxtb	r3, r3
 8001658:	72bb      	strb	r3, [r7, #10]
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	f043 0309 	orr.w	r3, r3, #9
 8001660:	b2db      	uxtb	r3, r3
 8001662:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <lcd16x2_i2c_sendData+0x60>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <lcd16x2_i2c_sendData+0x64>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b299      	uxth	r1, r3
 800166e:	f107 0208 	add.w	r2, r7, #8
 8001672:	23c8      	movs	r3, #200	; 0xc8
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2304      	movs	r3, #4
 8001678:	f003 fac2 	bl	8004c00 <HAL_I2C_Master_Transmit>
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000100 	.word	0x20000100
 8001688:	20000104 	.word	0x20000104

0800168c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8001694:	2032      	movs	r0, #50	; 0x32
 8001696:	f002 f915 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800169a:	4a30      	ldr	r2, [pc, #192]	; (800175c <lcd16x2_i2c_init+0xd0>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <lcd16x2_i2c_init+0xd0>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a8:	2205      	movs	r2, #5
 80016aa:	214e      	movs	r1, #78	; 0x4e
 80016ac:	f003 fec6 	bl	800543c <HAL_I2C_IsDeviceReady>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <lcd16x2_i2c_init+0xd0>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016be:	2205      	movs	r2, #5
 80016c0:	217e      	movs	r1, #126	; 0x7e
 80016c2:	f003 febb 	bl	800543c <HAL_I2C_IsDeviceReady>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <lcd16x2_i2c_init+0x44>
    {
      return false;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e040      	b.n	8001752 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <lcd16x2_i2c_init+0xd4>)
 80016d2:	227e      	movs	r2, #126	; 0x7e
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e002      	b.n	80016de <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <lcd16x2_i2c_init+0xd4>)
 80016da:	224e      	movs	r2, #78	; 0x4e
 80016dc:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80016de:	202d      	movs	r0, #45	; 0x2d
 80016e0:	f002 f8f0 	bl	80038c4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	f7ff ff69 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80016ea:	2005      	movs	r0, #5
 80016ec:	f002 f8ea 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80016f0:	2030      	movs	r0, #48	; 0x30
 80016f2:	f7ff ff63 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f002 f8e4 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80016fc:	2030      	movs	r0, #48	; 0x30
 80016fe:	f7ff ff5d 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001702:	2008      	movs	r0, #8
 8001704:	f002 f8de 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001708:	2020      	movs	r0, #32
 800170a:	f7ff ff57 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800170e:	2008      	movs	r0, #8
 8001710:	f002 f8d8 	bl	80038c4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001714:	2028      	movs	r0, #40	; 0x28
 8001716:	f7ff ff51 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f002 f8d2 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001720:	2008      	movs	r0, #8
 8001722:	f7ff ff4b 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f002 f8cc 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ff45 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001732:	2003      	movs	r0, #3
 8001734:	f002 f8c6 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001738:	2006      	movs	r0, #6
 800173a:	f7ff ff3f 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f002 f8c0 	bl	80038c4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001744:	200c      	movs	r0, #12
 8001746:	f7ff ff39 	bl	80015bc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800174a:	2003      	movs	r0, #3
 800174c:	f002 f8ba 	bl	80038c4 <HAL_Delay>

  return true;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000100 	.word	0x20000100
 8001760:	20000104 	.word	0x20000104

08001764 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d108      	bne.n	8001794 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001788:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff15 	bl	80015bc <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001792:	e007      	b.n	80017a4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800179a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff0c 	bl	80015bc <lcd16x2_i2c_sendCommand>
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80017ac:	b40f      	push	{r0, r1, r2, r3}
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80017b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b8:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c2:	4618      	mov	r0, r3
 80017c4:	f007 fa00 	bl	8008bc8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	77fb      	strb	r3, [r7, #31]
 80017cc:	e00b      	b.n	80017e6 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	f107 0220 	add.w	r2, r7, #32
 80017d4:	4413      	add	r3, r2
 80017d6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff22 	bl	8001624 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	3301      	adds	r3, #1
 80017e4:	77fb      	strb	r3, [r7, #31]
 80017e6:	7ffc      	ldrb	r4, [r7, #31]
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcf7 	bl	80001e0 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	429c      	cmp	r4, r3
 80017f6:	d202      	bcs.n	80017fe <lcd16x2_i2c_printf+0x52>
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d9e7      	bls.n	80017ce <lcd16x2_i2c_printf+0x22>
  }
 80017fe:	bf00      	nop
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001808:	b004      	add	sp, #16
 800180a:	4770      	bx	lr

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f001 ffe6 	bl	80037e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f858 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f000 fb1e 	bl	8001e58 <MX_GPIO_Init>
  MX_TIM3_Init();
 800181c:	f000 f9f0 	bl	8001c00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001820:	f000 fa7a 	bl	8001d18 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001824:	f000 faee 	bl	8001e04 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001828:	f000 f90a 	bl	8001a40 <MX_I2C1_Init>
  MX_SPI1_Init();
 800182c:	f000 f964 	bl	8001af8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001830:	f000 f8b4 	bl	800199c <MX_ADC1_Init>
  MX_I2C3_Init();
 8001834:	f000 f932 	bl	8001a9c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001838:	f000 faba 	bl	8001db0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800183c:	f000 f992 	bl	8001b64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // ================================================================================================= begin 2
  BSP_GYRO_Init();
 8001840:	f001 fb8c 	bl	8002f5c <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8001844:	f001 faf2 	bl	8002e2c <BSP_ACCELERO_Init>

  HAL_UART_Receive_IT(&huart2, &uRx_byte, 1);
 8001848:	2201      	movs	r2, #1
 800184a:	4916      	ldr	r1, [pc, #88]	; (80018a4 <main+0x98>)
 800184c:	4816      	ldr	r0, [pc, #88]	; (80018a8 <main+0x9c>)
 800184e:	f006 fad9 	bl	8007e04 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &uRx_byte, 1);
 8001852:	2201      	movs	r2, #1
 8001854:	4913      	ldr	r1, [pc, #76]	; (80018a4 <main+0x98>)
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <main+0xa0>)
 8001858:	f006 fad4 	bl	8007e04 <HAL_UART_Receive_IT>

  // for motor pwm
  HAL_TIM_Base_Start_IT(&htim2);
 800185c:	4814      	ldr	r0, [pc, #80]	; (80018b0 <main+0xa4>)
 800185e:	f005 facb 	bl	8006df8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001862:	2100      	movs	r1, #0
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <main+0xa8>)
 8001866:	f005 fb83 	bl	8006f70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800186a:	2104      	movs	r1, #4
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <main+0xa8>)
 800186e:	f005 fb7f 	bl	8006f70 <HAL_TIM_PWM_Start>
  // for buzzer pwm
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001872:	2108      	movs	r1, #8
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <main+0xa8>)
 8001876:	f005 fb7b 	bl	8006f70 <HAL_TIM_PWM_Start>

  // for 16x2 lcd
  lcd16x2_i2c_init(&hi2c3);
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <main+0xac>)
 800187c:	f7ff ff06 	bl	800168c <lcd16x2_i2c_init>
  lcd16x2_i2c_printf("PRINT_TEST");
 8001880:	480e      	ldr	r0, [pc, #56]	; (80018bc <main+0xb0>)
 8001882:	f7ff ff93 	bl	80017ac <lcd16x2_i2c_printf>

  setMotor(0, 0);
 8001886:	2100      	movs	r1, #0
 8001888:	2000      	movs	r0, #0
 800188a:	f000 fe49 	bl	8002520 <setMotor>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// ================================================================================================= begin 3
	  //getDistance();
	  checkSaveDistance();
 800188e:	f000 fe1f 	bl	80024d0 <checkSaveDistance>
	  setMotor(Speed_L, Speed_R);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <main+0xb4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <main+0xb8>)
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fe3f 	bl	8002520 <setMotor>
	  checkSaveDistance();
 80018a2:	e7f4      	b.n	800188e <main+0x82>
 80018a4:	200002d4 	.word	0x200002d4
 80018a8:	20000478 	.word	0x20000478
 80018ac:	20000394 	.word	0x20000394
 80018b0:	20000430 	.word	0x20000430
 80018b4:	200002dc 	.word	0x200002dc
 80018b8:	200001e4 	.word	0x200001e4
 80018bc:	08009410 	.word	0x08009410
 80018c0:	20000110 	.word	0x20000110
 80018c4:	20000114 	.word	0x20000114

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 f938 	bl	8008b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <SystemClock_Config+0xd0>)
 8001916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <SystemClock_Config+0xd0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001930:	2310      	movs	r3, #16
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001934:	2302      	movs	r3, #2
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001938:	2300      	movs	r3, #0
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800193c:	2308      	movs	r3, #8
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001940:	2348      	movs	r3, #72	; 0x48
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001948:	2304      	movs	r3, #4
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fa8d 	bl	8005e70 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800195c:	f000 ffa6 	bl	80028ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fcef 	bl	8006360 <HAL_RCC_ClockConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001988:	f000 ff90 	bl	80028ac <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	; 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <MX_ADC1_Init+0x9c>)
 80019b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <MX_ADC1_Init+0xa0>)
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MX_ADC1_Init+0x98>)
 80019fc:	f001 ff86 	bl	800390c <HAL_ADC_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a06:	f000 ff51 	bl	80028ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_ADC1_Init+0x98>)
 8001a1c:	f002 f906 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a26:	f000 ff41 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000034c 	.word	0x2000034c
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	0f000001 	.word	0x0f000001

08001a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <MX_I2C1_Init+0x54>)
 8001a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x58>)
 8001a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_I2C1_Init+0x50>)
 8001a7e:	f002 ff4b 	bl	8004918 <HAL_I2C_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a88:	f000 ff10 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000280 	.word	0x20000280
 8001a94:	40005400 	.word	0x40005400
 8001a98:	000186a0 	.word	0x000186a0

08001a9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C3_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C3_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C3_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C3_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C3_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C3_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C3_Init+0x50>)
 8001ada:	f002 ff1d 	bl	8004918 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f000 fee2 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200001e4 	.word	0x200001e4
 8001af0:	40005c00 	.word	0x40005c00
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <MX_SPI1_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_SPI1_Init+0x64>)
 8001b4a:	f004 fdd9 	bl	8006700 <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b54:	f000 feaa 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200003d8 	.word	0x200003d8
 8001b60:	40013000 	.word	0x40013000

08001b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bac:	f005 f8d4 	bl	8006d58 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bb6:	f000 fe79 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bc8:	f005 fc4c 	bl	8007464 <HAL_TIM_ConfigClockSource>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bd2:	f000 fe6b 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001be4:	f005 fffa 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bee:	f000 fe5d 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000430 	.word	0x20000430

08001c00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08e      	sub	sp, #56	; 0x38
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c32:	4a38      	ldr	r2, [pc, #224]	; (8001d14 <MX_TIM3_Init+0x114>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 360-1;
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c38:	f240 1267 	movw	r2, #359	; 0x167
 8001c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c46:	22c8      	movs	r2, #200	; 0xc8
 8001c48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c56:	482e      	ldr	r0, [pc, #184]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c58:	f005 f87e 	bl	8006d58 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c62:	f000 fe23 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4827      	ldr	r0, [pc, #156]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c74:	f005 fbf6 	bl	8007464 <HAL_TIM_ConfigClockSource>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c7e:	f000 fe15 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c82:	4823      	ldr	r0, [pc, #140]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001c84:	f005 f91a 	bl	8006ebc <HAL_TIM_PWM_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c8e:	f000 fe0d 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481b      	ldr	r0, [pc, #108]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001ca2:	f005 ff9b 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cac:	f000 fdfe 	bl	80028ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb0:	2360      	movs	r3, #96	; 0x60
 8001cb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4812      	ldr	r0, [pc, #72]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001cc8:	f005 fb0a 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cd2:	f000 fdeb 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2204      	movs	r2, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001cde:	f005 faff 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ce8:	f000 fde0 	bl	80028ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001cf4:	f005 faf4 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001cfe:	f000 fdd5 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM3_Init+0x110>)
 8001d04:	f001 fbb6 	bl	8003474 <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3738      	adds	r7, #56	; 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200002dc 	.word	0x200002dc
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <MX_TIM4_Init+0x94>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d3c:	2247      	movs	r2, #71	; 0x47
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d5a:	f004 fffd 	bl	8006d58 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001d64:	f000 fda2 	bl	80028ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d76:	f005 fb75 	bl	8007464 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001d80:	f000 fd94 	bl	80028ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM4_Init+0x90>)
 8001d92:	f005 ff23 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001d9c:	f000 fd86 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000238 	.word	0x20000238
 8001dac:	40000800 	.word	0x40000800

08001db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_USART2_UART_Init+0x50>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001de8:	f005 ff7a 	bl	8007ce0 <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001df2:	f000 fd5b 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000478 	.word	0x20000478
 8001e00:	40004400 	.word	0x40004400

08001e04 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_USART6_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART6_UART_Init+0x4c>)
 8001e3c:	f005 ff50 	bl	8007ce0 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 fd31 	bl	80028ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000394 	.word	0x20000394
 8001e54:	40011400 	.word	0x40011400

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a43      	ldr	r2, [pc, #268]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <MX_GPIO_Init+0x180>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2108      	movs	r1, #8
 8001f1a:	4830      	ldr	r0, [pc, #192]	; (8001fdc <MX_GPIO_Init+0x184>)
 8001f1c:	f002 fcc8 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001f20:	2200      	movs	r2, #0
 8001f22:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001f26:	482e      	ldr	r0, [pc, #184]	; (8001fe0 <MX_GPIO_Init+0x188>)
 8001f28:	f002 fcc2 	bl	80048b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f32:	482c      	ldr	r0, [pc, #176]	; (8001fe4 <MX_GPIO_Init+0x18c>)
 8001f34:	f002 fcbc 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <MX_GPIO_Init+0x190>)
 8001f3e:	f002 fcb7 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f42:	2308      	movs	r3, #8
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4820      	ldr	r0, [pc, #128]	; (8001fdc <MX_GPIO_Init+0x184>)
 8001f5a:	f002 fa29 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001f5e:	f24f 0380 	movw	r3, #61568	; 0xf080
 8001f62:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	481a      	ldr	r0, [pc, #104]	; (8001fe0 <MX_GPIO_Init+0x188>)
 8001f78:	f002 fa1a 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <MX_GPIO_Init+0x18c>)
 8001f96:	f002 fa0b 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_GPIO_Init+0x18c>)
 8001fb0:	f002 f9fe 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <MX_GPIO_Init+0x190>)
 8001fcc:	f002 f9f0 	bl	80043b0 <HAL_GPIO_Init>

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	; 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400

08001fec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ================================================================================================= begin 4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a83      	ldr	r2, [pc, #524]	; (8002208 <HAL_UART_RxCpltCallback+0x21c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10e      	bne.n	800201c <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Transmit_IT(&huart2, &uRx_byte, 1);
 8001ffe:	2201      	movs	r2, #1
 8002000:	4982      	ldr	r1, [pc, #520]	; (800220c <HAL_UART_RxCpltCallback+0x220>)
 8002002:	4883      	ldr	r0, [pc, #524]	; (8002210 <HAL_UART_RxCpltCallback+0x224>)
 8002004:	f005 feb9 	bl	8007d7a <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &uRx_byte, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	4980      	ldr	r1, [pc, #512]	; (800220c <HAL_UART_RxCpltCallback+0x220>)
 800200c:	4880      	ldr	r0, [pc, #512]	; (8002210 <HAL_UART_RxCpltCallback+0x224>)
 800200e:	f005 fef9 	bl	8007e04 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart6, &uRx_byte, 1);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // red
 8002012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002016:	487f      	ldr	r0, [pc, #508]	; (8002214 <HAL_UART_RxCpltCallback+0x228>)
 8002018:	f002 fc63 	bl	80048e2 <HAL_GPIO_TogglePin>
	}
	if(huart->Instance == USART6) // BT
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <HAL_UART_RxCpltCallback+0x22c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 80eb 	bne.w	80021fe <HAL_UART_RxCpltCallback+0x212>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); // blue
 8002028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202c:	4879      	ldr	r0, [pc, #484]	; (8002214 <HAL_UART_RxCpltCallback+0x228>)
 800202e:	f002 fc58 	bl	80048e2 <HAL_GPIO_TogglePin>
		// HAL_UART_Transmit_IT(&huart2, &uRx_byte, 1);
		HAL_UART_Transmit_IT(&huart2, &uRx_byte, 1); // trans to debug
 8002032:	2201      	movs	r2, #1
 8002034:	4975      	ldr	r1, [pc, #468]	; (800220c <HAL_UART_RxCpltCallback+0x220>)
 8002036:	4876      	ldr	r0, [pc, #472]	; (8002210 <HAL_UART_RxCpltCallback+0x224>)
 8002038:	f005 fe9f 	bl	8007d7a <HAL_UART_Transmit_IT>
		switch(uRx_byte)
 800203c:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_UART_RxCpltCallback+0x220>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3b30      	subs	r3, #48	; 0x30
 8002042:	2b33      	cmp	r3, #51	; 0x33
 8002044:	f200 80cf 	bhi.w	80021e6 <HAL_UART_RxCpltCallback+0x1fa>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_UART_RxCpltCallback+0x64>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	08002121 	.word	0x08002121
 8002054:	0800212f 	.word	0x0800212f
 8002058:	0800213d 	.word	0x0800213d
 800205c:	0800214b 	.word	0x0800214b
 8002060:	0800215d 	.word	0x0800215d
 8002064:	0800216f 	.word	0x0800216f
 8002068:	0800217d 	.word	0x0800217d
 800206c:	0800218b 	.word	0x0800218b
 8002070:	08002199 	.word	0x08002199
 8002074:	080021ab 	.word	0x080021ab
 8002078:	080021e7 	.word	0x080021e7
 800207c:	080021e7 	.word	0x080021e7
 8002080:	080021e7 	.word	0x080021e7
 8002084:	080021e7 	.word	0x080021e7
 8002088:	080021e7 	.word	0x080021e7
 800208c:	080021e7 	.word	0x080021e7
 8002090:	080021e7 	.word	0x080021e7
 8002094:	080021e7 	.word	0x080021e7
 8002098:	080021e7 	.word	0x080021e7
 800209c:	080021e7 	.word	0x080021e7
 80020a0:	080021e7 	.word	0x080021e7
 80020a4:	080021e7 	.word	0x080021e7
 80020a8:	080021e7 	.word	0x080021e7
 80020ac:	080021e7 	.word	0x080021e7
 80020b0:	080021e7 	.word	0x080021e7
 80020b4:	080021e7 	.word	0x080021e7
 80020b8:	080021e7 	.word	0x080021e7
 80020bc:	080021e7 	.word	0x080021e7
 80020c0:	080021e7 	.word	0x080021e7
 80020c4:	080021e7 	.word	0x080021e7
 80020c8:	080021e7 	.word	0x080021e7
 80020cc:	080021e7 	.word	0x080021e7
 80020d0:	080021e7 	.word	0x080021e7
 80020d4:	080021e7 	.word	0x080021e7
 80020d8:	080021e7 	.word	0x080021e7
 80020dc:	080021e7 	.word	0x080021e7
 80020e0:	080021e7 	.word	0x080021e7
 80020e4:	080021e7 	.word	0x080021e7
 80020e8:	080021e7 	.word	0x080021e7
 80020ec:	080021e7 	.word	0x080021e7
 80020f0:	080021e7 	.word	0x080021e7
 80020f4:	080021e7 	.word	0x080021e7
 80020f8:	080021e7 	.word	0x080021e7
 80020fc:	080021e7 	.word	0x080021e7
 8002100:	080021e7 	.word	0x080021e7
 8002104:	080021e7 	.word	0x080021e7
 8002108:	080021e7 	.word	0x080021e7
 800210c:	080021e7 	.word	0x080021e7
 8002110:	080021e7 	.word	0x080021e7
 8002114:	080021b9 	.word	0x080021b9
 8002118:	080021c7 	.word	0x080021c7
 800211c:	080021d5 	.word	0x080021d5
		{
		  case '0': Speed_L =  0; Speed_R =  0; break;
 8002120:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e062      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '1': Speed_L =  1; Speed_R =  1; break;
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e05b      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '2': Speed_L =  2; Speed_R =  2; break;
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e054      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '3': Speed_L = -1; Speed_R = -1; break;
 800214a:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e04b      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '4': Speed_L = -2; Speed_R = -2; break;
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800215e:	f06f 0201 	mvn.w	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002166:	f06f 0201 	mvn.w	r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e042      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '5': Speed_L =  1; Speed_R =  0; break;
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e03b      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '6': Speed_L =  2; Speed_R =  0; break;
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e034      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '7': Speed_L =  2; Speed_R =  1; break;
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e02d      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '8': Speed_L = -2; Speed_R = -1; break;
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 800219a:	f06f 0201 	mvn.w	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021a2:	f04f 32ff 	mov.w	r2, #4294967295
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e024      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case '9': Speed_L =  0; Speed_R =  1; break;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case 'a': Speed_L =  0; Speed_R =  2; break;
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e016      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case 'b': Speed_L =  1; Speed_R =  2; break;
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e00f      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  case 'c': Speed_L = -1; Speed_R = -2; break;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021de:	f06f 0201 	mvn.w	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e006      	b.n	80021f4 <HAL_UART_RxCpltCallback+0x208>
		  default : Speed_L =  0; Speed_R =  0; break;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_UART_RxCpltCallback+0x230>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_UART_RxCpltCallback+0x234>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart6, &uRx_byte, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	4905      	ldr	r1, [pc, #20]	; (800220c <HAL_UART_RxCpltCallback+0x220>)
 80021f8:	480a      	ldr	r0, [pc, #40]	; (8002224 <HAL_UART_RxCpltCallback+0x238>)
 80021fa:	f005 fe03 	bl	8007e04 <HAL_UART_Receive_IT>
		//checkSaveDistance();
		//setMotor(Speed_L, Speed_R);
	}
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40004400 	.word	0x40004400
 800220c:	200002d4 	.word	0x200002d4
 8002210:	20000478 	.word	0x20000478
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40011400 	.word	0x40011400
 800221c:	20000110 	.word	0x20000110
 8002220:	20000114 	.word	0x20000114
 8002224:	20000394 	.word	0x20000394

08002228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  count_tim2++;
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002238:	6013      	str	r3, [r2, #0]
  // Check which version of the timer triggered this callback and toggle LED

  if (htim == &htim2 ) // 25 round per 1 sec
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d147      	bne.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
  {
	if(count_tim2 % 5 == 0)
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002248:	fb83 2301 	smull	r2, r3, r3, r1
 800224c:	105a      	asrs	r2, r3, #1
 800224e:	17cb      	asrs	r3, r1, #31
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	1aca      	subs	r2, r1, r3
 800225a:	2a00      	cmp	r2, #0
 800225c:	d104      	bne.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		getADCValue();
 800225e:	f000 f90d 	bl	800247c <getADCValue>
		getGYROandACCR();
 8002262:	f000 fb15 	bl	8002890 <getGYROandACCR>
		setBuzzer();
	}
    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // red

  }
}
 8002266:	e034      	b.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	else if(count_tim2 % 5 == 1)
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800226e:	fb83 2301 	smull	r2, r3, r3, r1
 8002272:	105a      	asrs	r2, r3, #1
 8002274:	17cb      	asrs	r3, r1, #31
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	1aca      	subs	r2, r1, r3
 8002280:	2a01      	cmp	r2, #1
 8002282:	d102      	bne.n	800228a <HAL_TIM_PeriodElapsedCallback+0x62>
	  printLcd();
 8002284:	f000 f8b2 	bl	80023ec <printLcd>
}
 8002288:	e023      	b.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	else if(count_tim2 % 5 == 2)
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002290:	fb83 2301 	smull	r2, r3, r3, r1
 8002294:	105a      	asrs	r2, r3, #1
 8002296:	17cb      	asrs	r3, r1, #31
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	1aca      	subs	r2, r1, r3
 80022a2:	2a02      	cmp	r2, #2
 80022a4:	d102      	bne.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x84>
	  transmitData();
 80022a6:	f000 f81f 	bl	80022e8 <transmitData>
}
 80022aa:	e012      	b.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	else if(count_tim2 % 5 == 3)
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80022b2:	fb83 2301 	smull	r2, r3, r3, r1
 80022b6:	105a      	asrs	r2, r3, #1
 80022b8:	17cb      	asrs	r3, r1, #31
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	1aca      	subs	r2, r1, r3
 80022c4:	2a03      	cmp	r2, #3
 80022c6:	d102      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0xa6>
	  getDistance();
 80022c8:	f000 fa46 	bl	8002758 <getDistance>
}
 80022cc:	e001      	b.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		setBuzzer();
 80022ce:	f000 f99f 	bl	8002610 <setBuzzer>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000010c 	.word	0x2000010c
 80022e0:	20000430 	.word	0x20000430
 80022e4:	66666667 	.word	0x66666667

080022e8 <transmitData>:

// ================================================================================================= transmit data
void transmitData()
{
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b08f      	sub	sp, #60	; 0x3c
 80022ec:	af06      	add	r7, sp, #24
	int temp_G[3], temp_A[3];
	int i;
	for(i = 0; i < 3; i++) temp_G[i] = map((int)(pfData[i] * 1), -30000, 30000, 0, 32675);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e01d      	b.n	8002330 <transmitData+0x48>
 80022f4:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <transmitData+0xdc>)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002304:	f647 73a3 	movw	r3, #32675	; 0x7fa3
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002310:	492d      	ldr	r1, [pc, #180]	; (80023c8 <transmitData+0xe0>)
 8002312:	ee17 0a90 	vmov	r0, s15
 8002316:	f000 f9cb 	bl	80026b0 <map>
 800231a:	4602      	mov	r2, r0
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	f107 0120 	add.w	r1, r7, #32
 8002324:	440b      	add	r3, r1
 8002326:	f843 2c10 	str.w	r2, [r3, #-16]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b02      	cmp	r3, #2
 8002334:	ddde      	ble.n	80022f4 <transmitData+0xc>
	for(i = 0; i < 3; i++) temp_A[i] = map((int)(pDataXYZ[i] ), -20000, 20000, 0, 32675);
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e018      	b.n	800236e <transmitData+0x86>
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <transmitData+0xe4>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002344:	4618      	mov	r0, r3
 8002346:	f647 73a3 	movw	r3, #32675	; 0x7fa3
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002352:	491f      	ldr	r1, [pc, #124]	; (80023d0 <transmitData+0xe8>)
 8002354:	f000 f9ac 	bl	80026b0 <map>
 8002358:	4602      	mov	r2, r0
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	f107 0120 	add.w	r1, r7, #32
 8002362:	440b      	add	r3, r1
 8002364:	f843 2c1c 	str.w	r2, [r3, #-28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3301      	adds	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b02      	cmp	r3, #2
 8002372:	dde3      	ble.n	800233c <transmitData+0x54>
	sprintf(uTx_data, "=%d%d%05d%05d%05d%05d%05d%05d@\0", Speed_L + 2, Speed_R + 2, temp_G[0], temp_G[1], temp_G[2], temp_A[0], temp_A[1], temp_A[2]);
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <transmitData+0xec>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c9e      	adds	r6, r3, #2
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <transmitData+0xf0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f103 0c02 	add.w	ip, r3, #2
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	68bc      	ldr	r4, [r7, #8]
 800238c:	68fd      	ldr	r5, [r7, #12]
 800238e:	9505      	str	r5, [sp, #20]
 8002390:	9404      	str	r4, [sp, #16]
 8002392:	9003      	str	r0, [sp, #12]
 8002394:	9102      	str	r1, [sp, #8]
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4663      	mov	r3, ip
 800239c:	4632      	mov	r2, r6
 800239e:	490f      	ldr	r1, [pc, #60]	; (80023dc <transmitData+0xf4>)
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <transmitData+0xf8>)
 80023a2:	f006 fbdb 	bl	8008b5c <siprintf>
	HAL_UART_Transmit_IT(&huart2, &uTx_data, sizeof(uTx_data)); // for debug
 80023a6:	2228      	movs	r2, #40	; 0x28
 80023a8:	490d      	ldr	r1, [pc, #52]	; (80023e0 <transmitData+0xf8>)
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <transmitData+0xfc>)
 80023ac:	f005 fce5 	bl	8007d7a <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart6, &uTx_data, sizeof(uTx_data)); // gor BT
 80023b0:	2228      	movs	r2, #40	; 0x28
 80023b2:	490b      	ldr	r1, [pc, #44]	; (80023e0 <transmitData+0xf8>)
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <transmitData+0x100>)
 80023b6:	f005 fce0 	bl	8007d7a <HAL_UART_Transmit_IT>
}
 80023ba:	bf00      	nop
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200004bc 	.word	0x200004bc
 80023c8:	ffff8ad0 	.word	0xffff8ad0
 80023cc:	200001dc 	.word	0x200001dc
 80023d0:	ffffb1e0 	.word	0xffffb1e0
 80023d4:	20000110 	.word	0x20000110
 80023d8:	20000114 	.word	0x20000114
 80023dc:	0800941c 	.word	0x0800941c
 80023e0:	20000324 	.word	0x20000324
 80023e4:	20000478 	.word	0x20000478
 80023e8:	20000394 	.word	0x20000394

080023ec <printLcd>:

// ================================================================================================= print_lcd
void printLcd()
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af02      	add	r7, sp, #8
	//unsigned char line1[20];
	// speed add 2 to trans from [-2, 2] to [0, 4]
	//sprintf(line1, "%c%d SET:%2dcm R%c%d", );
	lcd16x2_i2c_setCursor(0, 0);
 80023f2:	2100      	movs	r1, #0
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff f9b5 	bl	8001764 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("%c%dL SET:%2dcm R%c%d",
			            (Speed_L >= 0 ? '+' : '-'), (Speed_L >= 0 ? Speed_L : -Speed_L),
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <printLcd+0x78>)
 80023fc:	681b      	ldr	r3, [r3, #0]
	lcd16x2_i2c_printf("%c%dL SET:%2dcm R%c%d",
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db01      	blt.n	8002406 <printLcd+0x1a>
 8002402:	212b      	movs	r1, #43	; 0x2b
 8002404:	e000      	b.n	8002408 <printLcd+0x1c>
 8002406:	212d      	movs	r1, #45	; 0x2d
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <printLcd+0x78>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002410:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <printLcd+0x7c>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	461c      	mov	r4, r3
			            limit_range_cm,
			            (Speed_R >= 0 ? '+' : '-'), (Speed_R >= 0 ? Speed_R : -Speed_R)
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <printLcd+0x80>)
 800241c:	681b      	ldr	r3, [r3, #0]
	lcd16x2_i2c_printf("%c%dL SET:%2dcm R%c%d",
 800241e:	2b00      	cmp	r3, #0
 8002420:	db01      	blt.n	8002426 <printLcd+0x3a>
 8002422:	232b      	movs	r3, #43	; 0x2b
 8002424:	e000      	b.n	8002428 <printLcd+0x3c>
 8002426:	232d      	movs	r3, #45	; 0x2d
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <printLcd+0x80>)
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	2a00      	cmp	r2, #0
 800242e:	bfb8      	it	lt
 8002430:	4252      	neglt	r2, r2
 8002432:	9201      	str	r2, [sp, #4]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4623      	mov	r3, r4
 8002438:	4602      	mov	r2, r0
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <printLcd+0x84>)
 800243c:	f7ff f9b6 	bl	80017ac <lcd16x2_i2c_printf>
			          );
	lcd16x2_i2c_setCursor(1, 0);
 8002440:	2100      	movs	r1, #0
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff f98e 	bl	8001764 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf(" GET:%5dcm", (int)distance);
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <printLcd+0x88>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002452:	ee17 1a90 	vmov	r1, s15
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <printLcd+0x8c>)
 8002458:	f7ff f9a8 	bl	80017ac <lcd16x2_i2c_printf>
	//lcd16x2_i2c_printf("bzr_value:%5d ", pwmVal);
}
 800245c:	bf00      	nop
 800245e:	3704      	adds	r7, #4
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}
 8002464:	20000110 	.word	0x20000110
 8002468:	20000068 	.word	0x20000068
 800246c:	20000114 	.word	0x20000114
 8002470:	0800943c 	.word	0x0800943c
 8002474:	200002d8 	.word	0x200002d8
 8002478:	08009454 	.word	0x08009454

0800247c <getADCValue>:

// ================================================================================================= adc vaule
void getADCValue()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af02      	add	r7, sp, #8
  HAL_ADC_Start(&hadc1);
 8002482:	4810      	ldr	r0, [pc, #64]	; (80024c4 <getADCValue+0x48>)
 8002484:	f001 fa86 	bl	8003994 <HAL_ADC_Start>
  // Poll ADC1 Perihperal & TimeOut = 1mSec
  HAL_ADC_PollForConversion(&hadc1, 1);
 8002488:	2101      	movs	r1, #1
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <getADCValue+0x48>)
 800248c:	f001 fb36 	bl	8003afc <HAL_ADC_PollForConversion>
  // Read The ADC Conversion Result
  adc_value = HAL_ADC_GetValue(&hadc1);
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <getADCValue+0x48>)
 8002492:	f001 fbbe 	bl	8003c12 <HAL_ADC_GetValue>
 8002496:	4603      	mov	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <getADCValue+0x4c>)
 800249c:	801a      	strh	r2, [r3, #0]
  //unsigned char test[50];
  //sprintf((char *)test, "ADC:%d\n\r", adc_value); //GYRO
  //HAL_UART_Transmit_IT(&huart2, (unsigned char *)&test, strlen((const char *)test));
  limit_range_cm = map(adc_value, 0, 4096, 10, 50);
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <getADCValue+0x4c>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	2332      	movs	r3, #50	; 0x32
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	230a      	movs	r3, #10
 80024aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ae:	2100      	movs	r1, #0
 80024b0:	f000 f8fe 	bl	80026b0 <map>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <getADCValue+0x50>)
 80024ba:	801a      	strh	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000034c 	.word	0x2000034c
 80024c8:	20000118 	.word	0x20000118
 80024cc:	20000068 	.word	0x20000068

080024d0 <checkSaveDistance>:

void checkSaveDistance()
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	if((int)distance <= (int)limit_range_cm)
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <checkSaveDistance+0x40>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024de:	ee17 2a90 	vmov	r2, s15
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <checkSaveDistance+0x44>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dc0d      	bgt.n	8002506 <checkSaveDistance+0x36>
	{
		if(Speed_R > 0) Speed_R = 0;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <checkSaveDistance+0x48>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dd02      	ble.n	80024f8 <checkSaveDistance+0x28>
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <checkSaveDistance+0x48>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
		if(Speed_L > 0) Speed_L = 0;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <checkSaveDistance+0x4c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	dd02      	ble.n	8002506 <checkSaveDistance+0x36>
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <checkSaveDistance+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
	}
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	200002d8 	.word	0x200002d8
 8002514:	20000068 	.word	0x20000068
 8002518:	20000114 	.word	0x20000114
 800251c:	20000110 	.word	0x20000110

08002520 <setMotor>:

// ================================================================================================= set motor
void setMotor(int Speed_L, int Speed_R) // setting motor
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  // PWM Timer: TIM3
  // speed from -2 to +2


  // set left motor  ==> B
  if(Speed_L > 0)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	dd11      	ble.n	8002554 <setMotor+0x34>
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2108      	movs	r1, #8
 8002534:	4833      	ldr	r0, [pc, #204]	; (8002604 <setMotor+0xe4>)
 8002536:	f002 f9bb 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, map(Speed_L, 0, 2, 50, 180));
 800253a:	23b4      	movs	r3, #180	; 0xb4
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2332      	movs	r3, #50	; 0x32
 8002540:	2202      	movs	r2, #2
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8b3 	bl	80026b0 <map>
 800254a:	4602      	mov	r2, r0
 800254c:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <setMotor+0xe8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
 8002552:	e01e      	b.n	8002592 <setMotor+0x72>
  }
  else if(Speed_L < 0)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da12      	bge.n	8002580 <setMotor+0x60>
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800255a:	2201      	movs	r2, #1
 800255c:	2108      	movs	r1, #8
 800255e:	4829      	ldr	r0, [pc, #164]	; (8002604 <setMotor+0xe4>)
 8002560:	f002 f9a6 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, map(Speed_L, -2, 0, 20, 150));
 8002564:	2396      	movs	r3, #150	; 0x96
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2314      	movs	r3, #20
 800256a:	2200      	movs	r2, #0
 800256c:	f06f 0101 	mvn.w	r1, #1
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f89d 	bl	80026b0 <map>
 8002576:	4602      	mov	r2, r0
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <setMotor+0xe8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
 800257e:	e008      	b.n	8002592 <setMotor+0x72>
  }
  else // (Speed_L == 0)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	2108      	movs	r1, #8
 8002584:	481f      	ldr	r0, [pc, #124]	; (8002604 <setMotor+0xe4>)
 8002586:	f002 f993 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <setMotor+0xe8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  // set right motor  ==> A
  if(Speed_R > 0)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	dd11      	ble.n	80025bc <setMotor+0x9c>
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	481b      	ldr	r0, [pc, #108]	; (800260c <setMotor+0xec>)
 800259e:	f002 f987 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, map(Speed_R, 0, 2, 50, 180));
 80025a2:	23b4      	movs	r3, #180	; 0xb4
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2332      	movs	r3, #50	; 0x32
 80025a8:	2202      	movs	r2, #2
 80025aa:	2100      	movs	r1, #0
 80025ac:	6838      	ldr	r0, [r7, #0]
 80025ae:	f000 f87f 	bl	80026b0 <map>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <setMotor+0xe8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34
  else // (Speed_R == 0)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
  }
}
 80025ba:	e01e      	b.n	80025fa <setMotor+0xda>
  else if(Speed_R < 0)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da12      	bge.n	80025e8 <setMotor+0xc8>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	4811      	ldr	r0, [pc, #68]	; (800260c <setMotor+0xec>)
 80025c8:	f002 f972 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, map(Speed_R, -2, 0, 20, 150));
 80025cc:	2396      	movs	r3, #150	; 0x96
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2314      	movs	r3, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	f06f 0101 	mvn.w	r1, #1
 80025d8:	6838      	ldr	r0, [r7, #0]
 80025da:	f000 f869 	bl	80026b0 <map>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <setMotor+0xe8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025e6:	e008      	b.n	80025fa <setMotor+0xda>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <setMotor+0xec>)
 80025ee:	f002 f95f 	bl	80048b0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <setMotor+0xe8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40020400 	.word	0x40020400
 8002608:	200002dc 	.word	0x200002dc
 800260c:	40020c00 	.word	0x40020c00

08002610 <setBuzzer>:

void setBuzzer()
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af02      	add	r7, sp, #8
	// beep range form limit distance to limit distance + 30
	if((int)distance > limit_range_cm + 30)
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <setBuzzer+0x90>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002620:	ee17 2a90 	vmov	r2, s15
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <setBuzzer+0x94>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	331e      	adds	r3, #30
 800262a:	429a      	cmp	r2, r3
 800262c:	dd07      	ble.n	800263e <setBuzzer+0x2e>
	{
		pwmVal = 0;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <setBuzzer+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 0);
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <setBuzzer+0x9c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwmVal);
	}
	//lcd16x2_i2c_printf("bzr_value:%6d", pwmVal);


}
 800263c:	e02d      	b.n	800269a <setBuzzer+0x8a>
	else if ((int)distance < limit_range_cm)
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <setBuzzer+0x90>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002648:	ee17 2a90 	vmov	r2, s15
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <setBuzzer+0x94>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	da07      	bge.n	8002664 <setBuzzer+0x54>
		pwmVal = 200;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <setBuzzer+0x98>)
 8002656:	22c8      	movs	r2, #200	; 0xc8
 8002658:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 200);
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <setBuzzer+0x9c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	22c8      	movs	r2, #200	; 0xc8
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002662:	e01a      	b.n	800269a <setBuzzer+0x8a>
		pwmVal = map((int)distance, (int)limit_range_cm + 30, (int)limit_range_cm, 0, 100);
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <setBuzzer+0x90>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <setBuzzer+0x94>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f103 011e 	add.w	r1, r3, #30
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <setBuzzer+0x94>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	2364      	movs	r3, #100	; 0x64
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f000 f813 	bl	80026b0 <map>
 800268a:	4603      	mov	r3, r0
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <setBuzzer+0x98>)
 800268e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwmVal);
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <setBuzzer+0x98>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <setBuzzer+0x9c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200002d8 	.word	0x200002d8
 80026a4:	20000068 	.word	0x20000068
 80026a8:	20000108 	.word	0x20000108
 80026ac:	200002dc 	.word	0x200002dc

080026b0 <map>:

// ========================================================================================== map function
int map(int src, int a_1, int a_2, int b_1, int b_2)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
	if(a_1 == a_2) return 0;
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d101      	bne.n	80026ca <map+0x1a>
 80026c6:	2300      	movs	r3, #0
 80026c8:	e03d      	b.n	8002746 <map+0x96>
	float m = 1.0 * (b_2 - b_1) / (a_2 - a_1);
 80026ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff2f 	bl	8000534 <__aeabi_i2d>
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff27 	bl	8000534 <__aeabi_i2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fe f8b5 	bl	800085c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f9bf 	bl	8000a7c <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	617b      	str	r3, [r7, #20]
	return (int)(m * (src- a_1) + b_1 + 0.5); // 4 out 5 in
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002710:	edd7 7a05 	vldr	s15, [r7, #20]
 8002714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	ee17 0a90 	vmov	r0, s15
 800272a:	f7fd ff15 	bl	8000558 <__aeabi_f2d>
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <map+0xa0>)
 8002734:	f7fd fdb2 	bl	800029c <__adddf3>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe f974 	bl	8000a2c <__aeabi_d2iz>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bdb0      	pop	{r4, r5, r7, pc}
 800274e:	bf00      	nop
 8002750:	3fe00000 	.word	0x3fe00000
 8002754:	00000000 	.word	0x00000000

08002758 <getDistance>:

// ========================================================================================== get distance
void getDistance()
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

	uint32_t numTicks = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002768:	482d      	ldr	r0, [pc, #180]	; (8002820 <getDistance+0xc8>)
 800276a:	f002 f8a1 	bl	80048b0 <HAL_GPIO_WritePin>
	usDelay(3);
 800276e:	2003      	movs	r0, #3
 8002770:	f000 f85c 	bl	800282c <usDelay>

    // START Ultrasonic measure routine
	//1. Output 10 usec TRIG
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <getDistance+0xc8>)
 800277c:	f002 f898 	bl	80048b0 <HAL_GPIO_WritePin>
	usDelay(10);
 8002780:	200a      	movs	r0, #10
 8002782:	f000 f853 	bl	800282c <usDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800278c:	4824      	ldr	r0, [pc, #144]	; (8002820 <getDistance+0xc8>)
 800278e:	f002 f88f 	bl	80048b0 <HAL_GPIO_WritePin>

	//2. Wait for ECHO pin rising edge
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_RESET) usDelay(1);
 8002792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002796:	4822      	ldr	r0, [pc, #136]	; (8002820 <getDistance+0xc8>)
 8002798:	f002 f872 	bl	8004880 <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <getDistance+0x52>
 80027a2:	2001      	movs	r0, #1
 80027a4:	f000 f842 	bl	800282c <usDelay>
 80027a8:	e7f3      	b.n	8002792 <getDistance+0x3a>
		else break;
 80027aa:	bf00      	nop
	}

	//3. Start measuring ECHO pulse width in usec
	numTicks = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	607b      	str	r3, [r7, #4]
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET)
 80027b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b4:	481a      	ldr	r0, [pc, #104]	; (8002820 <getDistance+0xc8>)
 80027b6:	f002 f863 	bl	8004880 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <getDistance+0x76>
		{
			numTicks++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
			usDelay(2); //2.8usec
 80027c6:	2002      	movs	r0, #2
 80027c8:	f000 f830 	bl	800282c <usDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET)
 80027cc:	e7f0      	b.n	80027b0 <getDistance+0x58>
		}
		else break;
 80027ce:	bf00      	nop
	}

	//4. Estimate distance in cm
	distance = numTicks * 2.8 * speedOfSound;
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fe9f 	bl	8000514 <__aeabi_ui2d>
 80027d6:	a310      	add	r3, pc, #64	; (adr r3, 8002818 <getDistance+0xc0>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fd ff14 	bl	8000608 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	461d      	mov	r5, r3
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <getDistance+0xcc>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd feb4 	bl	8000558 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4620      	mov	r0, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7fd ff06 	bl	8000608 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f93a 	bl	8000a7c <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	4a07      	ldr	r2, [pc, #28]	; (8002828 <getDistance+0xd0>)
 800280c:	6013      	str	r3, [r2, #0]

	//lcd16x2_i2c_setCursor(1, 0);
	//lcd16x2_i2c_printf("GET:");
	//lcd16x2_i2c_printf(" GET:%5dcm", (int)distance);

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	66666666 	.word	0x66666666
 800281c:	40066666 	.word	0x40066666
 8002820:	40020000 	.word	0x40020000
 8002824:	3c8c7e28 	.word	0x3c8c7e28
 8002828:	200002d8 	.word	0x200002d8

0800282c <usDelay>:

// ===================================================================================================== delay us
void usDelay(uint32_t uSec)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d801      	bhi.n	800283e <usDelay+0x12>
 800283a:	2302      	movs	r3, #2
 800283c:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <usDelay+0x60>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <usDelay+0x60>)
 8002848:	2201      	movs	r2, #1
 800284a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <usDelay+0x60>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <usDelay+0x60>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <usDelay+0x60>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	; (800288c <usDelay+0x60>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8002864:	bf00      	nop
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <usDelay+0x60>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d1f9      	bne.n	8002866 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <usDelay+0x60>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <usDelay+0x60>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6113      	str	r3, [r2, #16]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40000800 	.word	0x40000800

08002890 <getGYROandACCR>:

// ===================================================================================================== get gyro and accer
void getGYROandACCR()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	BSP_GYRO_GetXYZ(pfData);
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <getGYROandACCR+0x14>)
 8002896:	f000 fbc7 	bl	8003028 <BSP_GYRO_GetXYZ>
	BSP_ACCELERO_GetXYZ(pDataXYZ);
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <getGYROandACCR+0x18>)
 800289c:	f000 fb32 	bl	8002f04 <BSP_ACCELERO_GetXYZ>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200004bc 	.word	0x200004bc
 80028a8:	200001dc 	.word	0x200001dc

080028ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b0:	b672      	cpsid	i
}
 80028b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <Error_Handler+0x8>
	...

080028b8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <I2Cx_Init+0x58>)
 80028be:	f002 feeb 	bl	8005698 <HAL_I2C_GetState>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d121      	bne.n	800290c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <I2Cx_Init+0x58>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <I2Cx_Init+0x5c>)
 80028cc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <I2Cx_Init+0x58>)
 80028d0:	2243      	movs	r2, #67	; 0x43
 80028d2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <I2Cx_Init+0x58>)
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <I2Cx_Init+0x60>)
 80028d8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <I2Cx_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <I2Cx_Init+0x58>)
 80028e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <I2Cx_Init+0x58>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <I2Cx_Init+0x58>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <I2Cx_Init+0x58>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <I2Cx_Init+0x58>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <I2Cx_Init+0x58>)
 8002902:	f000 f86b 	bl	80029dc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002906:	4802      	ldr	r0, [pc, #8]	; (8002910 <I2Cx_Init+0x58>)
 8002908:	f002 f806 	bl	8004918 <HAL_I2C_Init>
  }
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000011c 	.word	0x2000011c
 8002914:	40005400 	.word	0x40005400
 8002918:	000186a0 	.word	0x000186a0

0800291c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af04      	add	r7, sp, #16
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
 8002926:	460b      	mov	r3, r1
 8002928:	717b      	strb	r3, [r7, #5]
 800292a:	4613      	mov	r3, r2
 800292c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8002932:	797b      	ldrb	r3, [r7, #5]
 8002934:	b29a      	uxth	r2, r3
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <I2Cx_WriteData+0x48>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	88f9      	ldrh	r1, [r7, #6]
 800293c:	9302      	str	r3, [sp, #8]
 800293e:	2301      	movs	r3, #1
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2301      	movs	r3, #1
 8002948:	4807      	ldr	r0, [pc, #28]	; (8002968 <I2Cx_WriteData+0x4c>)
 800294a:	f002 fa57 	bl	8004dfc <HAL_I2C_Mem_Write>
 800294e:	4603      	mov	r3, r0
 8002950:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8002958:	f000 f834 	bl	80029c4 <I2Cx_Error>
  }
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000006c 	.word	0x2000006c
 8002968:	2000011c 	.word	0x2000011c

0800296c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af04      	add	r7, sp, #16
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	80fb      	strh	r3, [r7, #6]
 8002978:	4613      	mov	r3, r2
 800297a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002984:	797b      	ldrb	r3, [r7, #5]
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <I2Cx_ReadData+0x50>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	88f9      	ldrh	r1, [r7, #6]
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	2301      	movs	r3, #1
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	f107 030e 	add.w	r3, r7, #14
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2301      	movs	r3, #1
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <I2Cx_ReadData+0x54>)
 800299e:	f002 fb27 	bl	8004ff0 <HAL_I2C_Mem_Read>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80029ac:	f000 f80a 	bl	80029c4 <I2Cx_Error>
  }
  return value;
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000006c 	.word	0x2000006c
 80029c0:	2000011c 	.word	0x2000011c

080029c4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <I2Cx_Error+0x14>)
 80029ca:	f002 f8e9 	bl	8004ba0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80029ce:	f7ff ff73 	bl	80028b8 <I2Cx_Init>
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000011c 	.word	0x2000011c

080029dc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <I2Cx_MspInit+0xa4>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <I2Cx_MspInit+0xa4>)
 80029ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <I2Cx_MspInit+0xa4>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8002a1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4812      	ldr	r0, [pc, #72]	; (8002a84 <I2Cx_MspInit+0xa8>)
 8002a3a:	f001 fcb9 	bl	80043b0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a48:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <I2Cx_MspInit+0xa4>)
 8002a50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a54:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	201f      	movs	r0, #31
 8002a5c:	f001 fbdf 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002a60:	201f      	movs	r0, #31
 8002a62:	f001 fbf8 	bl	8004256 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2020      	movs	r0, #32
 8002a6c:	f001 fbd7 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8002a70:	2020      	movs	r0, #32
 8002a72:	f001 fbf0 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020400 	.word	0x40020400

08002a88 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002a8c:	4819      	ldr	r0, [pc, #100]	; (8002af4 <SPIx_Init+0x6c>)
 8002a8e:	f004 f88a 	bl	8006ba6 <HAL_SPI_GetState>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d12b      	bne.n	8002af0 <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <SPIx_Init+0x6c>)
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <SPIx_Init+0x70>)
 8002a9c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <SPIx_Init+0x6c>)
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <SPIx_Init+0x6c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SPIx_Init+0x6c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <SPIx_Init+0x6c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <SPIx_Init+0x6c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <SPIx_Init+0x6c>)
 8002abe:	2207      	movs	r2, #7
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <SPIx_Init+0x6c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <SPIx_Init+0x6c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <SPIx_Init+0x6c>)
 8002ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <SPIx_Init+0x6c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <SPIx_Init+0x6c>)
 8002ade:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ae2:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <SPIx_Init+0x6c>)
 8002ae6:	f000 f835 	bl	8002b54 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002aea:	4802      	ldr	r0, [pc, #8]	; (8002af4 <SPIx_Init+0x6c>)
 8002aec:	f003 fe08 	bl	8006700 <HAL_SPI_Init>
  }
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000170 	.word	0x20000170
 8002af8:	40013000 	.word	0x40013000

08002afc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <SPIx_WriteRead+0x38>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f107 020f 	add.w	r2, r7, #15
 8002b12:	1df9      	adds	r1, r7, #7
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	4807      	ldr	r0, [pc, #28]	; (8002b38 <SPIx_WriteRead+0x3c>)
 8002b1a:	f003 fea2 	bl	8006862 <HAL_SPI_TransmitReceive>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002b24:	f000 f80a 	bl	8002b3c <SPIx_Error>
  }
  
  return receivedbyte;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000070 	.word	0x20000070
 8002b38:	20000170 	.word	0x20000170

08002b3c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002b40:	4803      	ldr	r0, [pc, #12]	; (8002b50 <SPIx_Error+0x14>)
 8002b42:	f003 fe66 	bl	8006812 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8002b46:	f7ff ff9f 	bl	8002a88 <SPIx_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000170 	.word	0x20000170

08002b54 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <SPIx_MspInit+0x68>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002b94:	23e0      	movs	r3, #224	; 0xe0
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4804      	ldr	r0, [pc, #16]	; (8002bc0 <SPIx_MspInit+0x6c>)
 8002bb0:	f001 fbfe 	bl	80043b0 <HAL_GPIO_Init>
}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002bd4:	f043 0310 	orr.w	r3, r3, #16
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002be6:	2308      	movs	r3, #8
 8002be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002bf6:	f107 030c 	add.w	r3, r7, #12
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4815      	ldr	r0, [pc, #84]	; (8002c54 <GYRO_IO_Init+0x90>)
 8002bfe:	f001 fbd7 	bl	80043b0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002c02:	2201      	movs	r2, #1
 8002c04:	2108      	movs	r1, #8
 8002c06:	4813      	ldr	r0, [pc, #76]	; (8002c54 <GYRO_IO_Init+0x90>)
 8002c08:	f001 fe52 	bl	80048b0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002c16:	f043 0310 	orr.w	r3, r3, #16
 8002c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <GYRO_IO_Init+0x8c>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <GYRO_IO_Init+0x90>)
 8002c40:	f001 fbb6 	bl	80043b0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8002c44:	f7ff ff20 	bl	8002a88 <SPIx_Init>
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40021000 	.word	0x40021000

08002c58 <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
 8002c64:	4613      	mov	r3, r2
 8002c66:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002c68:	883b      	ldrh	r3, [r7, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d903      	bls.n	8002c76 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c74:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002c76:	2200      	movs	r2, #0
 8002c78:	2108      	movs	r1, #8
 8002c7a:	480f      	ldr	r0, [pc, #60]	; (8002cb8 <GYRO_IO_Write+0x60>)
 8002c7c:	f001 fe18 	bl	80048b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff3a 	bl	8002afc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002c88:	e00a      	b.n	8002ca0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff34 	bl	8002afc <SPIx_WriteRead>
    NumByteToWrite--;
 8002c94:	883b      	ldrh	r3, [r7, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002ca0:	883b      	ldrh	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f1      	bne.n	8002c8a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <GYRO_IO_Write+0x60>)
 8002cac:	f001 fe00 	bl	80048b0 <HAL_GPIO_WritePin>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000

08002cbc <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002ccc:	883b      	ldrh	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d904      	bls.n	8002cdc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002cd8:	70fb      	strb	r3, [r7, #3]
 8002cda:	e003      	b.n	8002ce4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce2:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	4810      	ldr	r0, [pc, #64]	; (8002d2c <GYRO_IO_Read+0x70>)
 8002cea:	f001 fde1 	bl	80048b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff03 	bl	8002afc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002cf6:	e00c      	b.n	8002d12 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff feff 	bl	8002afc <SPIx_WriteRead>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002d06:	883b      	ldrh	r3, [r7, #0]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002d12:	883b      	ldrh	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ef      	bne.n	8002cf8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002d18:	2201      	movs	r2, #1
 8002d1a:	2108      	movs	r1, #8
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <GYRO_IO_Read+0x70>)
 8002d1e:	f001 fdc7 	bl	80048b0 <HAL_GPIO_WritePin>
}  
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <COMPASSACCELERO_IO_Init+0x48>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <COMPASSACCELERO_IO_Init+0x48>)
 8002d40:	f043 0310 	orr.w	r3, r3, #16
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <COMPASSACCELERO_IO_Init+0x48>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002d52:	2304      	movs	r3, #4
 8002d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <COMPASSACCELERO_IO_Init+0x4c>)
 8002d68:	f001 fb22 	bl	80043b0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002d6c:	f7ff fda4 	bl	80028b8 <I2Cx_Init>
}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40021000 	.word	0x40021000

08002d80 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002da2:	2330      	movs	r3, #48	; 0x30
 8002da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002da6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4808      	ldr	r0, [pc, #32]	; (8002ddc <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8002dba:	f001 faf9 	bl	80043b0 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the highest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f001 fa2b 	bl	800421e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002dc8:	200a      	movs	r0, #10
 8002dca:	f001 fa44 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40021000 	.word	0x40021000

08002de0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
 8002dea:	460b      	mov	r3, r1
 8002dec:	717b      	strb	r3, [r7, #5]
 8002dee:	4613      	mov	r3, r2
 8002df0:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002df2:	793a      	ldrb	r2, [r7, #4]
 8002df4:	7979      	ldrb	r1, [r7, #5]
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fd8f 	bl	800291c <I2Cx_WriteData>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460a      	mov	r2, r1
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	4613      	mov	r3, r2
 8002e14:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002e16:	797a      	ldrb	r2, [r7, #5]
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fda5 	bl	800296c <I2Cx_ReadData>
 8002e22:	4603      	mov	r3, r0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <BSP_ACCELERO_Init>:
/**
  * @brief  Set Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8002e36:	2300      	movs	r3, #0
 8002e38:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = {0,0,0,0};
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	809a      	strh	r2, [r3, #4]
  
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <BSP_ACCELERO_Init+0xd0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4798      	blx	r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b33      	cmp	r3, #51	; 0x33
 8002e4c:	d14f      	bne.n	8002eee <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the Accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <BSP_ACCELERO_Init+0xd4>)
 8002e50:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <BSP_ACCELERO_Init+0xd0>)
 8002e52:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Accelerometer structure */
    LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	733b      	strb	r3, [r7, #12]
    LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	737b      	strb	r3, [r7, #13]
    LSM303DLHC_InitStructure.Axes_Enable = LSM303DLHC_AXES_ENABLE;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	73bb      	strb	r3, [r7, #14]
    LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 8002e60:	2300      	movs	r3, #0
 8002e62:	74bb      	strb	r3, [r7, #18]
    LSM303DLHC_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 8002e64:	2300      	movs	r3, #0
 8002e66:	743b      	strb	r3, [r7, #16]
    LSM303DLHC_InitStructure.Endianness = LSM303DLHC_BLE_LSB;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	747b      	strb	r3, [r7, #17]
    LSM303DLHC_InitStructure.High_Resolution = LSM303DLHC_HR_ENABLE;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	73fb      	strb	r3, [r7, #15]
    
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8002e70:	7b3a      	ldrb	r2, [r7, #12]
 8002e72:	7b7b      	ldrb	r3, [r7, #13]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b2da      	uxtb	r2, r3
                       LSM303DLHC_InitStructure.Axes_Enable);
 8002e78:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	8abb      	ldrh	r3, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	82bb      	strh	r3, [r7, #20]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8002e86:	7c3a      	ldrb	r2, [r7, #16]
 8002e88:	7c7b      	ldrb	r3, [r7, #17]
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	7cbb      	ldrb	r3, [r7, #18]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	021b      	lsls	r3, r3, #8
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the Accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <BSP_ACCELERO_Init+0xd4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	8aba      	ldrh	r2, [r7, #20]
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
    
    /* Fill the Accelerometer LPF structure */
    LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	713b      	strb	r3, [r7, #4]
    LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002eb8:	2310      	movs	r3, #16
 8002eba:	717b      	strb	r3, [r7, #5]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	71bb      	strb	r3, [r7, #6]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	71fb      	strb	r3, [r7, #7]
    
    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ec4:	793a      	ldrb	r2, [r7, #4]
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
 8002ec6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
 8002ecc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	82bb      	strh	r3, [r7, #20]

    /* Configure the Accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <BSP_ACCELERO_Init+0xd4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	8aba      	ldrh	r2, [r7, #20]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
 8002eec:	e001      	b.n	8002ef2 <BSP_ACCELERO_Init+0xc6>
  }
  else
  {
    ret = ACCELERO_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000034 	.word	0x20000034
 8002f00:	200001c8 	.word	0x200001c8

08002f04 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	81fb      	strh	r3, [r7, #14]
  
  if(AccelerometerDrv->GetXYZ!= NULL)
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <BSP_ACCELERO_GetXYZ+0x50>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <BSP_ACCELERO_GetXYZ+0x50>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <BSP_ACCELERO_GetXYZ+0x50>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <BSP_ACCELERO_GetXYZ+0x54>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10e      	bne.n	8002f4c <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	801a      	strh	r2, [r3, #0]
      
      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	425b      	negs	r3, r3
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3302      	adds	r3, #2
 8002f48:	b212      	sxth	r2, r2
 8002f4a:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200001c8 	.word	0x200001c8
 8002f58:	20000034 	.word	0x20000034

08002f5c <BSP_GYRO_Init>:
/**
  * @brief  Set Gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002f66:	2300      	movs	r3, #0
 8002f68:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0,0};
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	703b      	strb	r3, [r7, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	707b      	strb	r3, [r7, #1]
 
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <BSP_GYRO_Init+0xc4>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4798      	blx	r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2bd4      	cmp	r3, #212	; 0xd4
 8002f7c:	d005      	beq.n	8002f8a <BSP_GYRO_Init+0x2e>
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <BSP_GYRO_Init+0xc4>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4798      	blx	r3
 8002f84:	4603      	mov	r3, r0
 8002f86:	2bd5      	cmp	r3, #213	; 0xd5
 8002f88:	d145      	bne.n	8003016 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <BSP_GYRO_Init+0xc8>)
 8002f8c:	4a24      	ldr	r2, [pc, #144]	; (8003020 <BSP_GYRO_Init+0xc4>)
 8002f8e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8002f90:	2308      	movs	r3, #8
 8002f92:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8002f94:	2300      	movs	r3, #0
 8002f96:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8002f9c:	2330      	movs	r3, #48	; 0x30
 8002f9e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8002fa8:	2310      	movs	r3, #16
 8002faa:	72bb      	strb	r3, [r7, #10]
  
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002fac:	793a      	ldrb	r2, [r7, #4]
 8002fae:	797b      	ldrb	r3, [r7, #5]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002fb4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	81bb      	strh	r3, [r7, #12]
  
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002fc2:	7a3a      	ldrb	r2, [r7, #8]
 8002fc4:	7a7b      	ldrb	r3, [r7, #9]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002fca:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	89bb      	ldrh	r3, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->Init(ctrl);
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <BSP_GYRO_Init+0xc8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	89ba      	ldrh	r2, [r7, #12]
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
  
    L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	707b      	strb	r3, [r7, #1]
  
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ff0:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));    
 8002ff2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	81bb      	strh	r3, [r7, #12]
  
    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <BSP_GYRO_Init+0xc8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	89ba      	ldrh	r2, [r7, #12]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <BSP_GYRO_Init+0xc8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	2010      	movs	r0, #16
 8003010:	4798      	blx	r3
  
    ret = GYRO_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000000 	.word	0x20000000
 8003024:	200001cc 	.word	0x200001cc

08003028 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <BSP_GYRO_GetXYZ+0x24>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <BSP_GYRO_GetXYZ+0x1c>
  {   
    GyroscopeDrv->GetXYZ(pfData);
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <BSP_GYRO_GetXYZ+0x24>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
  }
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200001cc 	.word	0x200001cc

08003050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_MspInit+0x4c>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_MspInit+0x4c>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_MspInit+0x4c>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_MspInit+0x4c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_MspInit+0x4c>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_MspInit+0x4c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_ADC_MspInit+0x7c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d127      	bne.n	8003112 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_ADC_MspInit+0x80>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030fa:	2310      	movs	r3, #16
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030fe:	2303      	movs	r3, #3
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4619      	mov	r1, r3
 800310c:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_ADC_MspInit+0x84>)
 800310e:	f001 f94f 	bl	80043b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40012000 	.word	0x40012000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000

08003128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a42      	ldr	r2, [pc, #264]	; (8003250 <HAL_I2C_MspInit+0x128>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12c      	bne.n	80031a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316a:	2312      	movs	r3, #18
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003176:	2304      	movs	r3, #4
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4835      	ldr	r0, [pc, #212]	; (8003258 <HAL_I2C_MspInit+0x130>)
 8003182:	f001 f915 	bl	80043b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a31      	ldr	r2, [pc, #196]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80031a2:	e050      	b.n	8003246 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <HAL_I2C_MspInit+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d14b      	bne.n	8003246 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a27      	ldr	r2, [pc, #156]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ec:	2312      	movs	r3, #18
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031f8:	2304      	movs	r3, #4
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4817      	ldr	r0, [pc, #92]	; (8003260 <HAL_I2C_MspInit+0x138>)
 8003204:	f001 f8d4 	bl	80043b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800320e:	2312      	movs	r3, #18
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800321a:	2304      	movs	r3, #4
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	4619      	mov	r1, r3
 8003224:	480f      	ldr	r0, [pc, #60]	; (8003264 <HAL_I2C_MspInit+0x13c>)
 8003226:	f001 f8c3 	bl	80043b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 8003234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_I2C_MspInit+0x12c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
}
 8003246:	bf00      	nop
 8003248:	3730      	adds	r7, #48	; 0x30
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40005400 	.word	0x40005400
 8003254:	40023800 	.word	0x40023800
 8003258:	40020400 	.word	0x40020400
 800325c:	40005c00 	.word	0x40005c00
 8003260:	40020800 	.word	0x40020800
 8003264:	40020000 	.word	0x40020000

08003268 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_I2C_MspDeInit+0x64>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10e      	bne.n	8003298 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_I2C_MspDeInit+0x68>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_I2C_MspDeInit+0x68>)
 8003280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003286:	2140      	movs	r1, #64	; 0x40
 8003288:	4812      	ldr	r0, [pc, #72]	; (80032d4 <HAL_I2C_MspDeInit+0x6c>)
 800328a:	f001 fa15 	bl	80046b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	4810      	ldr	r0, [pc, #64]	; (80032d4 <HAL_I2C_MspDeInit+0x6c>)
 8003292:	f001 fa11 	bl	80046b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003296:	e014      	b.n	80032c2 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <HAL_I2C_MspDeInit+0x70>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10f      	bne.n	80032c2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_I2C_MspDeInit+0x68>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_I2C_MspDeInit+0x68>)
 80032a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80032ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032b2:	480a      	ldr	r0, [pc, #40]	; (80032dc <HAL_I2C_MspDeInit+0x74>)
 80032b4:	f001 fa00 	bl	80046b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80032b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032bc:	4808      	ldr	r0, [pc, #32]	; (80032e0 <HAL_I2C_MspDeInit+0x78>)
 80032be:	f001 f9fb 	bl	80046b8 <HAL_GPIO_DeInit>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40005400 	.word	0x40005400
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40005c00 	.word	0x40005c00
 80032dc:	40020800 	.word	0x40020800
 80032e0:	40020000 	.word	0x40020000

080032e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <HAL_SPI_MspInit+0x84>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d12b      	bne.n	800335e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_SPI_MspInit+0x88>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <HAL_SPI_MspInit+0x88>)
 8003310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003314:	6453      	str	r3, [r2, #68]	; 0x44
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_SPI_MspInit+0x88>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_SPI_MspInit+0x88>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_SPI_MspInit+0x88>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <HAL_SPI_MspInit+0x88>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800333e:	23e0      	movs	r3, #224	; 0xe0
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800334e:	2305      	movs	r3, #5
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <HAL_SPI_MspInit+0x8c>)
 800335a:	f001 f829 	bl	80043b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800335e:	bf00      	nop
 8003360:	3728      	adds	r7, #40	; 0x28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40013000 	.word	0x40013000
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000

08003374 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_SPI_MspDeInit+0x30>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d109      	bne.n	800339a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_SPI_MspDeInit+0x34>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_SPI_MspDeInit+0x34>)
 800338c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003392:	21e0      	movs	r1, #224	; 0xe0
 8003394:	4805      	ldr	r0, [pc, #20]	; (80033ac <HAL_SPI_MspDeInit+0x38>)
 8003396:	f001 f98f 	bl	80046b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40013000 	.word	0x40013000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020000 	.word	0x40020000

080033b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d116      	bne.n	80033f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a27      	ldr	r2, [pc, #156]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	201c      	movs	r0, #28
 80033e4:	f000 ff1b 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033e8:	201c      	movs	r0, #28
 80033ea:	f000 ff34 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033ee:	e036      	b.n	800345e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_TIM_Base_MspInit+0xbc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d116      	bne.n	8003428 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	201d      	movs	r0, #29
 800341c:	f000 feff 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003420:	201d      	movs	r0, #29
 8003422:	f000 ff18 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 8003426:	e01a      	b.n	800345e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_TIM_Base_MspInit+0xc0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d115      	bne.n	800345e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_TIM_Base_MspInit+0xb8>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	201e      	movs	r0, #30
 8003454:	f000 fee3 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003458:	201e      	movs	r0, #30
 800345a:	f000 fefc 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_TIM_MspPostInit+0xa4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d13c      	bne.n	8003510 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_TIM_MspPostInit+0xa8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2300      	movs	r3, #0
 80034de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034e0:	2302      	movs	r3, #2
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	480d      	ldr	r0, [pc, #52]	; (8003520 <HAL_TIM_MspPostInit+0xac>)
 80034ec:	f000 ff60 	bl	80043b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034f0:	2330      	movs	r3, #48	; 0x30
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003500:	2302      	movs	r3, #2
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4619      	mov	r1, r3
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <HAL_TIM_MspPostInit+0xb0>)
 800350c:	f000 ff50 	bl	80043b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40000400 	.word	0x40000400
 800351c:	40023800 	.word	0x40023800
 8003520:	40020800 	.word	0x40020800
 8003524:	40020400 	.word	0x40020400

08003528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_UART_MspInit+0x108>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d134      	bne.n	80035b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_UART_MspInit+0x10c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_UART_MspInit+0x10c>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_UART_MspInit+0x10c>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_UART_MspInit+0x10c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_UART_MspInit+0x10c>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_UART_MspInit+0x10c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003582:	230c      	movs	r3, #12
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358e:	2303      	movs	r3, #3
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003592:	2307      	movs	r3, #7
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	f107 031c 	add.w	r3, r7, #28
 800359a:	4619      	mov	r1, r3
 800359c:	4826      	ldr	r0, [pc, #152]	; (8003638 <HAL_UART_MspInit+0x110>)
 800359e:	f000 ff07 	bl	80043b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2026      	movs	r0, #38	; 0x26
 80035a8:	f000 fe39 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ac:	2026      	movs	r0, #38	; 0x26
 80035ae:	f000 fe52 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035b2:	e038      	b.n	8003626 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_UART_MspInit+0x114>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d133      	bne.n	8003626 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	6453      	str	r3, [r2, #68]	; 0x44
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_UART_MspInit+0x10c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003606:	2308      	movs	r3, #8
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	480b      	ldr	r0, [pc, #44]	; (8003640 <HAL_UART_MspInit+0x118>)
 8003612:	f000 fecd 	bl	80043b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2047      	movs	r0, #71	; 0x47
 800361c:	f000 fdff 	bl	800421e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003620:	2047      	movs	r0, #71	; 0x47
 8003622:	f000 fe18 	bl	8004256 <HAL_NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40004400 	.word	0x40004400
 8003634:	40023800 	.word	0x40023800
 8003638:	40020000 	.word	0x40020000
 800363c:	40011400 	.word	0x40011400
 8003640:	40020800 	.word	0x40020800

08003644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003648:	e7fe      	b.n	8003648 <NMI_Handler+0x4>

0800364a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800364e:	e7fe      	b.n	800364e <HardFault_Handler+0x4>

08003650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003654:	e7fe      	b.n	8003654 <MemManage_Handler+0x4>

08003656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800365a:	e7fe      	b.n	800365a <BusFault_Handler+0x4>

0800365c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003660:	e7fe      	b.n	8003660 <UsageFault_Handler+0x4>

08003662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003662:	b480      	push	{r7}
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003690:	f000 f8f8 	bl	8003884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}

08003698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM2_IRQHandler+0x10>)
 800369e:	f003 fd17 	bl	80070d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000430 	.word	0x20000430

080036ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <TIM3_IRQHandler+0x10>)
 80036b2:	f003 fd0d 	bl	80070d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200002dc 	.word	0x200002dc

080036c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <TIM4_IRQHandler+0x10>)
 80036c6:	f003 fd03 	bl	80070d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000238 	.word	0x20000238

080036d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <USART2_IRQHandler+0x10>)
 80036da:	f004 fbc3 	bl	8007e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000478 	.word	0x20000478

080036e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <USART6_IRQHandler+0x10>)
 80036ee:	f004 fbb9 	bl	8007e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000394 	.word	0x20000394

080036fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <_sbrk+0x5c>)
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <_sbrk+0x60>)
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <_sbrk+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <_sbrk+0x64>)
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <_sbrk+0x68>)
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <_sbrk+0x64>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	429a      	cmp	r2, r3
 800372a:	d207      	bcs.n	800373c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800372c:	f005 f9e4 	bl	8008af8 <__errno>
 8003730:	4603      	mov	r3, r0
 8003732:	220c      	movs	r2, #12
 8003734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	e009      	b.n	8003750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <_sbrk+0x64>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <_sbrk+0x64>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <_sbrk+0x64>)
 800374c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20010000 	.word	0x20010000
 800375c:	00000400 	.word	0x00000400
 8003760:	200001d0 	.word	0x200001d0
 8003764:	200004e0 	.word	0x200004e0

08003768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <SystemInit+0x20>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <SystemInit+0x20>)
 8003774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003790:	480d      	ldr	r0, [pc, #52]	; (80037c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003792:	490e      	ldr	r1, [pc, #56]	; (80037cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003798:	e002      	b.n	80037a0 <LoopCopyDataInit>

0800379a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800379c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379e:	3304      	adds	r3, #4

080037a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a4:	d3f9      	bcc.n	800379a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037a8:	4c0b      	ldr	r4, [pc, #44]	; (80037d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ac:	e001      	b.n	80037b2 <LoopFillZerobss>

080037ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b0:	3204      	adds	r2, #4

080037b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b4:	d3fb      	bcc.n	80037ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037b6:	f7ff ffd7 	bl	8003768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ba:	f005 f9a3 	bl	8008b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037be:	f7fe f825 	bl	800180c <main>
  bx  lr    
 80037c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80037d0:	080094bc 	.word	0x080094bc
  ldr r2, =_sbss
 80037d4:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80037d8:	200004dc 	.word	0x200004dc

080037dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <ADC_IRQHandler>
	...

080037e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_Init+0x40>)
 80037ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_Init+0x40>)
 80037f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_Init+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_Init+0x40>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003808:	2003      	movs	r0, #3
 800380a:	f000 fcfd 	bl	8004208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380e:	200f      	movs	r0, #15
 8003810:	f000 f808 	bl	8003824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003814:	f7ff fc1c 	bl	8003050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00

08003824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_InitTick+0x54>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0x58>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383a:	fbb3 f3f1 	udiv	r3, r3, r1
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fd15 	bl	8004272 <HAL_SYSTICK_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e00e      	b.n	8003870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d80a      	bhi.n	800386e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003858:	2200      	movs	r2, #0
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f000 fcdd 	bl	800421e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003864:	4a06      	ldr	r2, [pc, #24]	; (8003880 <HAL_InitTick+0x5c>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000074 	.word	0x20000074
 800387c:	2000007c 	.word	0x2000007c
 8003880:	20000078 	.word	0x20000078

08003884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x20>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x24>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_IncTick+0x24>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000007c 	.word	0x2000007c
 80038a8:	200004c8 	.word	0x200004c8

080038ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_GetTick+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200004c8 	.word	0x200004c8

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff ffee 	bl	80038ac <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d005      	beq.n	80038ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Delay+0x44>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ea:	bf00      	nop
 80038ec:	f7ff ffde 	bl	80038ac <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8f7      	bhi.n	80038ec <HAL_Delay+0x28>
  {
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000007c 	.word	0x2000007c

0800390c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e033      	b.n	800398a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fbb8 	bl	80030a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003952:	f023 0302 	bic.w	r3, r3, #2
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa86 	bl	8003e70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
 800397a:	e001      	b.n	8003980 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_Start+0x1a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e097      	b.n	8003ade <HAL_ADC_Start+0x14a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d018      	beq.n	80039f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <HAL_ADC_Start+0x158>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_ADC_Start+0x15c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9a      	lsrs	r2, r3, #18
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039e8:	e002      	b.n	80039f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f9      	bne.n	80039ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d15f      	bne.n	8003ac4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d106      	bne.n	8003a52 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	f023 0206 	bic.w	r2, r3, #6
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8003a50:	e002      	b.n	8003a58 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_ADC_Start+0x160>)
 8003a62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a6c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d129      	bne.n	8003adc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e020      	b.n	8003adc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <HAL_ADC_Start+0x164>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d11b      	bne.n	8003adc <HAL_ADC_Start+0x148>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	e00b      	b.n	8003adc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0210 	orr.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000074 	.word	0x20000074
 8003af0:	431bde83 	.word	0x431bde83
 8003af4:	40012300 	.word	0x40012300
 8003af8:	40012000 	.word	0x40012000

08003afc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b18:	d113      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b28:	d10b      	bne.n	8003b42 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e063      	b.n	8003c0a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b42:	f7ff feb3 	bl	80038ac <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b48:	e021      	b.n	8003b8e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d01d      	beq.n	8003b8e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_ADC_PollForConversion+0x6c>
 8003b58:	f7ff fea8 	bl	80038ac <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d212      	bcs.n	8003b8e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d00b      	beq.n	8003b8e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03d      	b.n	8003c0a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d1d6      	bne.n	8003b4a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0212 	mvn.w	r2, #18
 8003ba4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d123      	bne.n	8003c08 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11f      	bne.n	8003c08 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x1c>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e105      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x228>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d925      	bls.n	8003ca4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68d9      	ldr	r1, [r3, #12]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3b1e      	subs	r3, #30
 8003c6e:	2207      	movs	r2, #7
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43da      	mvns	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68d9      	ldr	r1, [r3, #12]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	4603      	mov	r3, r0
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4403      	add	r3, r0
 8003c96:	3b1e      	subs	r3, #30
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	e022      	b.n	8003cea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6919      	ldr	r1, [r3, #16]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	2207      	movs	r2, #7
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6919      	ldr	r1, [r3, #16]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4403      	add	r3, r0
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d824      	bhi.n	8003d3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	3b05      	subs	r3, #5
 8003d04:	221f      	movs	r2, #31
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	400a      	ands	r2, r1
 8003d12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3b05      	subs	r3, #5
 8003d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3a:	e04c      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d824      	bhi.n	8003d8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	3b23      	subs	r3, #35	; 0x23
 8003d56:	221f      	movs	r2, #31
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	400a      	ands	r2, r1
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3b23      	subs	r3, #35	; 0x23
 8003d80:	fa00 f203 	lsl.w	r2, r0, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d8c:	e023      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b41      	subs	r3, #65	; 0x41
 8003da0:	221f      	movs	r2, #31
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	400a      	ands	r2, r1
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b41      	subs	r3, #65	; 0x41
 8003dca:	fa00 f203 	lsl.w	r2, r0, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_ADC_ConfigChannel+0x234>)
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <HAL_ADC_ConfigChannel+0x238>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d109      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1cc>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b12      	cmp	r3, #18
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_ADC_ConfigChannel+0x238>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d123      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x21e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d003      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x1e6>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b11      	cmp	r3, #17
 8003e10:	d11b      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d111      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_ADC_ConfigChannel+0x23c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_ADC_ConfigChannel+0x240>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	0c9a      	lsrs	r2, r3, #18
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e3c:	e002      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f9      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012300 	.word	0x40012300
 8003e64:	40012000 	.word	0x40012000
 8003e68:	20000074 	.word	0x20000074
 8003e6c:	431bde83 	.word	0x431bde83

08003e70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <ADC_Init+0x1f0>)
 8003e7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	4a58      	ldr	r2, [pc, #352]	; (8004064 <ADC_Init+0x1f4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e00f      	b.n	8003f6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0202 	bic.w	r2, r2, #2
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7e1b      	ldrb	r3, [r3, #24]
 8003f88:	005a      	lsls	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003faa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	035a      	lsls	r2, r3, #13
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e007      	b.n	8003fe4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	051a      	lsls	r2, r3, #20
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6899      	ldr	r1, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004026:	025a      	lsls	r2, r3, #9
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	029a      	lsls	r2, r3, #10
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012300 	.word	0x40012300
 8004064:	0f000001 	.word	0x0f000001

08004068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <__NVIC_SetPriorityGrouping+0x44>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004084:	4013      	ands	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800409a:	4a04      	ldr	r2, [pc, #16]	; (80040ac <__NVIC_SetPriorityGrouping+0x44>)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	60d3      	str	r3, [r2, #12]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <__NVIC_GetPriorityGrouping+0x18>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 0307 	and.w	r3, r3, #7
}
 80040be:	4618      	mov	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	db0b      	blt.n	80040f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	4907      	ldr	r1, [pc, #28]	; (8004104 <__NVIC_EnableIRQ+0x38>)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2001      	movs	r0, #1
 80040ee:	fa00 f202 	lsl.w	r2, r0, r2
 80040f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000e100 	.word	0xe000e100

08004108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db0a      	blt.n	8004132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	490c      	ldr	r1, [pc, #48]	; (8004154 <__NVIC_SetPriority+0x4c>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	0112      	lsls	r2, r2, #4
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	440b      	add	r3, r1
 800412c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004130:	e00a      	b.n	8004148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4908      	ldr	r1, [pc, #32]	; (8004158 <__NVIC_SetPriority+0x50>)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	3b04      	subs	r3, #4
 8004140:	0112      	lsls	r2, r2, #4
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	440b      	add	r3, r1
 8004146:	761a      	strb	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000e100 	.word	0xe000e100
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f1c3 0307 	rsb	r3, r3, #7
 8004176:	2b04      	cmp	r3, #4
 8004178:	bf28      	it	cs
 800417a:	2304      	movcs	r3, #4
 800417c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3304      	adds	r3, #4
 8004182:	2b06      	cmp	r3, #6
 8004184:	d902      	bls.n	800418c <NVIC_EncodePriority+0x30>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3b03      	subs	r3, #3
 800418a:	e000      	b.n	800418e <NVIC_EncodePriority+0x32>
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	f04f 32ff 	mov.w	r2, #4294967295
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	401a      	ands	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a4:	f04f 31ff 	mov.w	r1, #4294967295
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	4313      	orrs	r3, r2
         );
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3724      	adds	r7, #36	; 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d4:	d301      	bcc.n	80041da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041d6:	2301      	movs	r3, #1
 80041d8:	e00f      	b.n	80041fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <SysTick_Config+0x40>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041e2:	210f      	movs	r1, #15
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	f7ff ff8e 	bl	8004108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <SysTick_Config+0x40>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <SysTick_Config+0x40>)
 80041f4:	2207      	movs	r2, #7
 80041f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000e010 	.word	0xe000e010

08004208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff29 	bl	8004068 <__NVIC_SetPriorityGrouping>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004230:	f7ff ff3e 	bl	80040b0 <__NVIC_GetPriorityGrouping>
 8004234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff ff8e 	bl	800415c <NVIC_EncodePriority>
 8004240:	4602      	mov	r2, r0
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff5d 	bl	8004108 <__NVIC_SetPriority>
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff ff31 	bl	80040cc <__NVIC_EnableIRQ>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ffa2 	bl	80041c4 <SysTick_Config>
 8004280:	4603      	mov	r3, r0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004298:	f7ff fb08 	bl	80038ac <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d008      	beq.n	80042bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e052      	b.n	8004362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0216 	bic.w	r2, r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_DMA_Abort+0x62>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0208 	bic.w	r2, r2, #8
 80042fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430c:	e013      	b.n	8004336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800430e:	f7ff facd 	bl	80038ac <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b05      	cmp	r3, #5
 800431a:	d90c      	bls.n	8004336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e015      	b.n	8004362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e4      	bne.n	800430e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	223f      	movs	r2, #63	; 0x3f
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e00c      	b.n	80043a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2205      	movs	r2, #5
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e159      	b.n	8004680 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 8148 	bne.w	800467a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d005      	beq.n	8004402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d130      	bne.n	8004464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004438:	2201      	movs	r2, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 0201 	and.w	r2, r3, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b03      	cmp	r3, #3
 800446e:	d017      	beq.n	80044a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d123      	bne.n	80044f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	69b9      	ldr	r1, [r7, #24]
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0203 	and.w	r2, r3, #3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a2 	beq.w	800467a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b57      	ldr	r3, [pc, #348]	; (8004698 <HAL_GPIO_Init+0x2e8>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	4a56      	ldr	r2, [pc, #344]	; (8004698 <HAL_GPIO_Init+0x2e8>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004544:	6453      	str	r3, [r2, #68]	; 0x44
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_GPIO_Init+0x2e8>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004552:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_GPIO_Init+0x2ec>)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	3302      	adds	r3, #2
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a49      	ldr	r2, [pc, #292]	; (80046a0 <HAL_GPIO_Init+0x2f0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d019      	beq.n	80045b2 <HAL_GPIO_Init+0x202>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a48      	ldr	r2, [pc, #288]	; (80046a4 <HAL_GPIO_Init+0x2f4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_GPIO_Init+0x1fe>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a47      	ldr	r2, [pc, #284]	; (80046a8 <HAL_GPIO_Init+0x2f8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00d      	beq.n	80045aa <HAL_GPIO_Init+0x1fa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a46      	ldr	r2, [pc, #280]	; (80046ac <HAL_GPIO_Init+0x2fc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <HAL_GPIO_Init+0x1f6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a45      	ldr	r2, [pc, #276]	; (80046b0 <HAL_GPIO_Init+0x300>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_GPIO_Init+0x1f2>
 800459e:	2304      	movs	r3, #4
 80045a0:	e008      	b.n	80045b4 <HAL_GPIO_Init+0x204>
 80045a2:	2307      	movs	r3, #7
 80045a4:	e006      	b.n	80045b4 <HAL_GPIO_Init+0x204>
 80045a6:	2303      	movs	r3, #3
 80045a8:	e004      	b.n	80045b4 <HAL_GPIO_Init+0x204>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e002      	b.n	80045b4 <HAL_GPIO_Init+0x204>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_GPIO_Init+0x204>
 80045b2:	2300      	movs	r3, #0
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	f002 0203 	and.w	r2, r2, #3
 80045ba:	0092      	lsls	r2, r2, #2
 80045bc:	4093      	lsls	r3, r2
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045c4:	4935      	ldr	r1, [pc, #212]	; (800469c <HAL_GPIO_Init+0x2ec>)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	3302      	adds	r3, #2
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d2:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <HAL_GPIO_Init+0x304>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045f6:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <HAL_GPIO_Init+0x304>)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_GPIO_Init+0x304>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004620:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <HAL_GPIO_Init+0x304>)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_GPIO_Init+0x304>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800464a:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_GPIO_Init+0x304>)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_GPIO_Init+0x304>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <HAL_GPIO_Init+0x304>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3301      	adds	r3, #1
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	f67f aea2 	bls.w	80043cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40013800 	.word	0x40013800
 80046a0:	40020000 	.word	0x40020000
 80046a4:	40020400 	.word	0x40020400
 80046a8:	40020800 	.word	0x40020800
 80046ac:	40020c00 	.word	0x40020c00
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40013c00 	.word	0x40013c00

080046b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e0bb      	b.n	800484c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d4:	2201      	movs	r2, #1
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	f040 80ab 	bne.w	8004846 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046f0:	4a5c      	ldr	r2, [pc, #368]	; (8004864 <HAL_GPIO_DeInit+0x1ac>)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	3302      	adds	r3, #2
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	220f      	movs	r2, #15
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a54      	ldr	r2, [pc, #336]	; (8004868 <HAL_GPIO_DeInit+0x1b0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d019      	beq.n	800474e <HAL_GPIO_DeInit+0x96>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a53      	ldr	r2, [pc, #332]	; (800486c <HAL_GPIO_DeInit+0x1b4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_GPIO_DeInit+0x92>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_GPIO_DeInit+0x1b8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00d      	beq.n	8004746 <HAL_GPIO_DeInit+0x8e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_GPIO_DeInit+0x1bc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_DeInit+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a50      	ldr	r2, [pc, #320]	; (8004878 <HAL_GPIO_DeInit+0x1c0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <HAL_GPIO_DeInit+0x86>
 800473a:	2304      	movs	r3, #4
 800473c:	e008      	b.n	8004750 <HAL_GPIO_DeInit+0x98>
 800473e:	2307      	movs	r3, #7
 8004740:	e006      	b.n	8004750 <HAL_GPIO_DeInit+0x98>
 8004742:	2303      	movs	r3, #3
 8004744:	e004      	b.n	8004750 <HAL_GPIO_DeInit+0x98>
 8004746:	2302      	movs	r3, #2
 8004748:	e002      	b.n	8004750 <HAL_GPIO_DeInit+0x98>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_GPIO_DeInit+0x98>
 800474e:	2300      	movs	r3, #0
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	f002 0203 	and.w	r2, r2, #3
 8004756:	0092      	lsls	r2, r2, #2
 8004758:	4093      	lsls	r3, r2
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	429a      	cmp	r2, r3
 800475e:	d132      	bne.n	80047c6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	4944      	ldr	r1, [pc, #272]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 800476a:	4013      	ands	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800476e:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	43db      	mvns	r3, r3
 8004776:	4941      	ldr	r1, [pc, #260]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 8004778:	4013      	ands	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800477c:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	493d      	ldr	r1, [pc, #244]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 8004786:	4013      	ands	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800478a:	4b3c      	ldr	r3, [pc, #240]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43db      	mvns	r3, r3
 8004792:	493a      	ldr	r1, [pc, #232]	; (800487c <HAL_GPIO_DeInit+0x1c4>)
 8004794:	4013      	ands	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047a8:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <HAL_GPIO_DeInit+0x1ac>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	3302      	adds	r3, #2
 80047b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	43da      	mvns	r2, r3
 80047b8:	482a      	ldr	r0, [pc, #168]	; (8004864 <HAL_GPIO_DeInit+0x1ac>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	400a      	ands	r2, r1
 80047c0:	3302      	adds	r3, #2
 80047c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	2103      	movs	r1, #3
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	08da      	lsrs	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3208      	adds	r2, #8
 80047e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	08d2      	lsrs	r2, r2, #3
 80047fc:	4019      	ands	r1, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3208      	adds	r2, #8
 8004802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2103      	movs	r1, #3
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	2101      	movs	r1, #1
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	401a      	ands	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	2103      	movs	r1, #3
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	401a      	ands	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3301      	adds	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	f67f af40 	bls.w	80046d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40013800 	.word	0x40013800
 8004868:	40020000 	.word	0x40020000
 800486c:	40020400 	.word	0x40020400
 8004870:	40020800 	.word	0x40020800
 8004874:	40020c00 	.word	0x40020c00
 8004878:	40021000 	.word	0x40021000
 800487c:	40013c00 	.word	0x40013c00

08004880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	887b      	ldrh	r3, [r7, #2]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e001      	b.n	80048a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048f4:	887a      	ldrh	r2, [r7, #2]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	041a      	lsls	r2, r3, #16
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43d9      	mvns	r1, r3
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	400b      	ands	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	619a      	str	r2, [r3, #24]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e12b      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe fbf2 	bl	8003128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800496a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800497c:	f001 fe98 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 8004980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a81      	ldr	r2, [pc, #516]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d807      	bhi.n	800499c <HAL_I2C_Init+0x84>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a80      	ldr	r2, [pc, #512]	; (8004b90 <HAL_I2C_Init+0x278>)
 8004990:	4293      	cmp	r3, r2
 8004992:	bf94      	ite	ls
 8004994:	2301      	movls	r3, #1
 8004996:	2300      	movhi	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e006      	b.n	80049aa <HAL_I2C_Init+0x92>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a7d      	ldr	r2, [pc, #500]	; (8004b94 <HAL_I2C_Init+0x27c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0e7      	b.n	8004b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a78      	ldr	r2, [pc, #480]	; (8004b98 <HAL_I2C_Init+0x280>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0c9b      	lsrs	r3, r3, #18
 80049bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_I2C_Init+0x274>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d802      	bhi.n	80049ec <HAL_I2C_Init+0xd4>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	e009      	b.n	8004a00 <HAL_I2C_Init+0xe8>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_I2C_Init+0x284>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	099b      	lsrs	r3, r3, #6
 80049fe:	3301      	adds	r3, #1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	495c      	ldr	r1, [pc, #368]	; (8004b8c <HAL_I2C_Init+0x274>)
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	d819      	bhi.n	8004a54 <HAL_I2C_Init+0x13c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e59      	subs	r1, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a34:	400b      	ands	r3, r1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_I2C_Init+0x138>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e59      	subs	r1, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4e:	e051      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e04f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d111      	bne.n	8004a80 <HAL_I2C_Init+0x168>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1e58      	subs	r0, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e012      	b.n	8004aa6 <HAL_I2C_Init+0x18e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e58      	subs	r0, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	0099      	lsls	r1, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Init+0x196>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e022      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10e      	bne.n	8004ad4 <HAL_I2C_Init+0x1bc>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e58      	subs	r0, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	440b      	add	r3, r1
 8004ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	e00f      	b.n	8004af4 <HAL_I2C_Init+0x1dc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	6809      	ldr	r1, [r1, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6911      	ldr	r1, [r2, #16]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	000186a0 	.word	0x000186a0
 8004b90:	001e847f 	.word	0x001e847f
 8004b94:	003d08ff 	.word	0x003d08ff
 8004b98:	431bde83 	.word	0x431bde83
 8004b9c:	10624dd3 	.word	0x10624dd3

08004ba0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e021      	b.n	8004bf6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe fb4c 	bl	8003268 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
 8004c10:	4613      	mov	r3, r2
 8004c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7fe fe4a 	bl	80038ac <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	f040 80e0 	bne.w	8004de8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2319      	movs	r3, #25
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4970      	ldr	r1, [pc, #448]	; (8004df4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 ff3e 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e0d3      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_Master_Transmit+0x50>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0cc      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d007      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2221      	movs	r2, #33	; 0x21
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2210      	movs	r2, #16
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a50      	ldr	r2, [pc, #320]	; (8004df8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fcf8 	bl	80056b4 <I2C_MasterRequestWrite>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e08d      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ce4:	e066      	b.n	8004db4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6a39      	ldr	r1, [r7, #32]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 ffb8 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d107      	bne.n	8004d0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06b      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d11b      	bne.n	8004d88 <HAL_I2C_Master_Transmit+0x188>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d017      	beq.n	8004d88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	6a39      	ldr	r1, [r7, #32]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 ffa8 	bl	8005ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d107      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e01a      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d194      	bne.n	8004ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	00100002 	.word	0x00100002
 8004df8:	ffff0000 	.word	0xffff0000

08004dfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e16:	f7fe fd49 	bl	80038ac <HAL_GetTick>
 8004e1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	f040 80d9 	bne.w	8004fdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2319      	movs	r3, #25
 8004e30:	2201      	movs	r2, #1
 8004e32:	496d      	ldr	r1, [pc, #436]	; (8004fe8 <HAL_I2C_Mem_Write+0x1ec>)
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fe3d 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e0cc      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2C_Mem_Write+0x56>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e0c5      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d007      	beq.n	8004e78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2221      	movs	r2, #33	; 0x21
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2240      	movs	r2, #64	; 0x40
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a4d      	ldr	r2, [pc, #308]	; (8004fec <HAL_I2C_Mem_Write+0x1f0>)
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eba:	88f8      	ldrh	r0, [r7, #6]
 8004ebc:	893a      	ldrh	r2, [r7, #8]
 8004ebe:	8979      	ldrh	r1, [r7, #10]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4603      	mov	r3, r0
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fc74 	bl	80057b8 <I2C_RequestMemoryWrite>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d052      	beq.n	8004f7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e081      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 febe 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d107      	bne.n	8004f02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e06b      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d11b      	bne.n	8004f7c <HAL_I2C_Mem_Write+0x180>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d017      	beq.n	8004f7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1aa      	bne.n	8004eda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 feaa 	bl	8005ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d107      	bne.n	8004fac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004faa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e016      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	00100002 	.word	0x00100002
 8004fec:	ffff0000 	.word	0xffff0000

08004ff0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800500a:	f7fe fc4f 	bl	80038ac <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b20      	cmp	r3, #32
 800501a:	f040 8208 	bne.w	800542e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2319      	movs	r3, #25
 8005024:	2201      	movs	r2, #1
 8005026:	497b      	ldr	r1, [pc, #492]	; (8005214 <HAL_I2C_Mem_Read+0x224>)
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fd43 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
 8005036:	e1fb      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Mem_Read+0x56>
 8005042:	2302      	movs	r3, #2
 8005044:	e1f4      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d007      	beq.n	800506c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2222      	movs	r2, #34	; 0x22
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a5b      	ldr	r2, [pc, #364]	; (8005218 <HAL_I2C_Mem_Read+0x228>)
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ae:	88f8      	ldrh	r0, [r7, #6]
 80050b0:	893a      	ldrh	r2, [r7, #8]
 80050b2:	8979      	ldrh	r1, [r7, #10]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4603      	mov	r3, r0
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fc10 	bl	80058e4 <I2C_RequestMemoryRead>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1b0      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d113      	bne.n	80050fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e184      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b01      	cmp	r3, #1
 8005104:	d11b      	bne.n	800513e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e164      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	2b02      	cmp	r3, #2
 8005144:	d11b      	bne.n	800517e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	e144      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005194:	e138      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	2b03      	cmp	r3, #3
 800519c:	f200 80f1 	bhi.w	8005382 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d123      	bne.n	80051f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fdd9 	bl	8005d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e139      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ee:	e10b      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d14e      	bne.n	8005296 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	2200      	movs	r2, #0
 8005200:	4906      	ldr	r1, [pc, #24]	; (800521c <HAL_I2C_Mem_Read+0x22c>)
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fc56 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e10e      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
 8005212:	bf00      	nop
 8005214:	00100002 	.word	0x00100002
 8005218:	ffff0000 	.word	0xffff0000
 800521c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005294:	e0b8      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2200      	movs	r2, #0
 800529e:	4966      	ldr	r1, [pc, #408]	; (8005438 <HAL_I2C_Mem_Read+0x448>)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fc07 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0bf      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2200      	movs	r2, #0
 80052fa:	494f      	ldr	r1, [pc, #316]	; (8005438 <HAL_I2C_Mem_Read+0x448>)
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fbd9 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e091      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005380:	e042      	b.n	8005408 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fcec 	bl	8005d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e04c      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d118      	bne.n	8005408 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	f47f aec2 	bne.w	8005196 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	e000      	b.n	8005430 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	; 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	00010004 	.word	0x00010004

0800543c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	460b      	mov	r3, r1
 800544a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800544c:	f7fe fa2e 	bl	80038ac <HAL_GetTick>
 8005450:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005452:	2301      	movs	r3, #1
 8005454:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b20      	cmp	r3, #32
 8005460:	f040 8111 	bne.w	8005686 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2319      	movs	r3, #25
 800546a:	2201      	movs	r2, #1
 800546c:	4988      	ldr	r1, [pc, #544]	; (8005690 <HAL_I2C_IsDeviceReady+0x254>)
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fb20 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	e104      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_I2C_IsDeviceReady+0x50>
 8005488:	2302      	movs	r3, #2
 800548a:	e0fd      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d007      	beq.n	80054b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a70      	ldr	r2, [pc, #448]	; (8005694 <HAL_I2C_IsDeviceReady+0x258>)
 80054d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fade 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550c:	d103      	bne.n	8005516 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e0b6      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800551a:	897b      	ldrh	r3, [r7, #10]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005528:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800552a:	f7fe f9bf 	bl	80038ac <HAL_GetTick>
 800552e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800555e:	e025      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005560:	f7fe f9a4 	bl	80038ac <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d302      	bcc.n	8005576 <HAL_I2C_IsDeviceReady+0x13a>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22a0      	movs	r2, #160	; 0xa0
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2ba0      	cmp	r3, #160	; 0xa0
 80055b6:	d005      	beq.n	80055c4 <HAL_I2C_IsDeviceReady+0x188>
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <HAL_I2C_IsDeviceReady+0x188>
 80055be:	7dbb      	ldrb	r3, [r7, #22]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0cd      	beq.n	8005560 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d129      	bne.n	800562e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2319      	movs	r3, #25
 8005606:	2201      	movs	r2, #1
 8005608:	4921      	ldr	r1, [pc, #132]	; (8005690 <HAL_I2C_IsDeviceReady+0x254>)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa52 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e036      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e02c      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005646:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	2319      	movs	r3, #25
 800564e:	2201      	movs	r2, #1
 8005650:	490f      	ldr	r1, [pc, #60]	; (8005690 <HAL_I2C_IsDeviceReady+0x254>)
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa2e 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e012      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3301      	adds	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	f4ff af32 	bcc.w	80054d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000

08005698 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	460b      	mov	r3, r1
 80056c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d006      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d003      	beq.n	80056de <I2C_MasterRequestWrite+0x2a>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056dc:	d108      	bne.n	80056f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e00b      	b.n	8005708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	2b12      	cmp	r3, #18
 80056f6:	d107      	bne.n	8005708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f9cd 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d103      	bne.n	8005738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e035      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005744:	d108      	bne.n	8005758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	e01b      	b.n	8005790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005758:	897b      	ldrh	r3, [r7, #10]
 800575a:	11db      	asrs	r3, r3, #7
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0306 	and.w	r3, r3, #6
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f063 030f 	orn	r3, r3, #15
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	490e      	ldr	r1, [pc, #56]	; (80057b0 <I2C_MasterRequestWrite+0xfc>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f9f3 	bl	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e010      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4907      	ldr	r1, [pc, #28]	; (80057b4 <I2C_MasterRequestWrite+0x100>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f9e3 	bl	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010008 	.word	0x00010008
 80057b4:	00010002 	.word	0x00010002

080057b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	817b      	strh	r3, [r7, #10]
 80057ca:	460b      	mov	r3, r1
 80057cc:	813b      	strh	r3, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f960 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00d      	beq.n	8005816 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005808:	d103      	bne.n	8005812 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e05f      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005816:	897b      	ldrh	r3, [r7, #10]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005824:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	492d      	ldr	r1, [pc, #180]	; (80058e0 <I2C_RequestMemoryWrite+0x128>)
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f998 	bl	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e04c      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa02 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e02b      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d105      	bne.n	8005890 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	e021      	b.n	80058d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005890:	893b      	ldrh	r3, [r7, #8]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	b29b      	uxth	r3, r3
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	6a39      	ldr	r1, [r7, #32]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f9dc 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d107      	bne.n	80058c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e005      	b.n	80058d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	00010002 	.word	0x00010002

080058e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	460b      	mov	r3, r1
 80058f8:	813b      	strh	r3, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800590c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2200      	movs	r2, #0
 8005926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8c2 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d103      	bne.n	800594e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0aa      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	4952      	ldr	r1, [pc, #328]	; (8005ab0 <I2C_RequestMemoryRead+0x1cc>)
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f8fa 	bl	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e097      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	6a39      	ldr	r1, [r7, #32]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f964 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d107      	bne.n	80059b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e076      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c0:	893b      	ldrh	r3, [r7, #8]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	e021      	b.n	8005a10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6a39      	ldr	r1, [r7, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f93e 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d107      	bne.n	8005a02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e050      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a06:	893b      	ldrh	r3, [r7, #8]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	6a39      	ldr	r1, [r7, #32]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f923 	bl	8005c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d107      	bne.n	8005a38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e035      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f82b 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d103      	bne.n	8005a7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e013      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a80:	897b      	ldrh	r3, [r7, #10]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <I2C_RequestMemoryRead+0x1cc>)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f863 	bl	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac4:	e025      	b.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d021      	beq.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fd feed 	bl	80038ac <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d116      	bne.n	8005b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e023      	b.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d10d      	bne.n	8005b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	43da      	mvns	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	e00c      	b.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d0b6      	beq.n	8005ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b70:	e051      	b.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	d123      	bne.n	8005bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0204 	orr.w	r2, r3, #4
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e046      	b.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d021      	beq.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fd fe6b 	bl	80038ac <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d116      	bne.n	8005c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0220 	orr.w	r2, r3, #32
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e020      	b.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10c      	bne.n	8005c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	43da      	mvns	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e00b      	b.n	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	43da      	mvns	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4013      	ands	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d18d      	bne.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c6c:	e02d      	b.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f8ce 	bl	8005e10 <I2C_IsAcknowledgeFailed>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e02d      	b.n	8005cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d021      	beq.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fd fe11 	bl	80038ac <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d116      	bne.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e007      	b.n	8005cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d1ca      	bne.n	8005c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cee:	e02d      	b.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f88d 	bl	8005e10 <I2C_IsAcknowledgeFailed>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e02d      	b.n	8005d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d021      	beq.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d08:	f7fd fdd0 	bl	80038ac <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d302      	bcc.n	8005d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d116      	bne.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e007      	b.n	8005d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d1ca      	bne.n	8005cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d70:	e042      	b.n	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d119      	bne.n	8005db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0210 	mvn.w	r2, #16
 8005d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e029      	b.n	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db4:	f7fd fd7a 	bl	80038ac <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d116      	bne.n	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e007      	b.n	8005e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d1b5      	bne.n	8005d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e26:	d11b      	bne.n	8005e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	f043 0204 	orr.w	r2, r3, #4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e264      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d075      	beq.n	8005f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8e:	4ba3      	ldr	r3, [pc, #652]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d00c      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e9a:	4ba0      	ldr	r3, [pc, #640]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d112      	bne.n	8005ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ea6:	4b9d      	ldr	r3, [pc, #628]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eb2:	d10b      	bne.n	8005ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb4:	4b99      	ldr	r3, [pc, #612]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05b      	beq.n	8005f78 <HAL_RCC_OscConfig+0x108>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d157      	bne.n	8005f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e23f      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d106      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x74>
 8005ed6:	4b91      	ldr	r3, [pc, #580]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a90      	ldr	r2, [pc, #576]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e01d      	b.n	8005f20 <HAL_RCC_OscConfig+0xb0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x98>
 8005eee:	4b8b      	ldr	r3, [pc, #556]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a8a      	ldr	r2, [pc, #552]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a87      	ldr	r2, [pc, #540]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0xb0>
 8005f08:	4b84      	ldr	r3, [pc, #528]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a83      	ldr	r2, [pc, #524]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	4b81      	ldr	r3, [pc, #516]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a80      	ldr	r2, [pc, #512]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d013      	beq.n	8005f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f28:	f7fd fcc0 	bl	80038ac <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fd fcbc 	bl	80038ac <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	; 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e204      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f42:	4b76      	ldr	r3, [pc, #472]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0xc0>
 8005f4e:	e014      	b.n	8005f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f50:	f7fd fcac 	bl	80038ac <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f58:	f7fd fca8 	bl	80038ac <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b64      	cmp	r3, #100	; 0x64
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e1f0      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f6a:	4b6c      	ldr	r3, [pc, #432]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0xe8>
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d063      	beq.n	800604e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f92:	4b62      	ldr	r3, [pc, #392]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d11c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d116      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005faa:	4b5c      	ldr	r3, [pc, #368]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x152>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d001      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e1c4      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc2:	4b56      	ldr	r3, [pc, #344]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4952      	ldr	r1, [pc, #328]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd6:	e03a      	b.n	800604e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe0:	4b4f      	ldr	r3, [pc, #316]	; (8006120 <HAL_RCC_OscConfig+0x2b0>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7fd fc61 	bl	80038ac <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fee:	f7fd fc5d 	bl	80038ac <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e1a5      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006000:	4b46      	ldr	r3, [pc, #280]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0f0      	beq.n	8005fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600c:	4b43      	ldr	r3, [pc, #268]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4940      	ldr	r1, [pc, #256]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]
 8006020:	e015      	b.n	800604e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <HAL_RCC_OscConfig+0x2b0>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fd fc40 	bl	80038ac <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006030:	f7fd fc3c 	bl	80038ac <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e184      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d030      	beq.n	80060bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006062:	4b30      	ldr	r3, [pc, #192]	; (8006124 <HAL_RCC_OscConfig+0x2b4>)
 8006064:	2201      	movs	r2, #1
 8006066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006068:	f7fd fc20 	bl	80038ac <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006070:	f7fd fc1c 	bl	80038ac <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e164      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 8006084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f0      	beq.n	8006070 <HAL_RCC_OscConfig+0x200>
 800608e:	e015      	b.n	80060bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006090:	4b24      	ldr	r3, [pc, #144]	; (8006124 <HAL_RCC_OscConfig+0x2b4>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006096:	f7fd fc09 	bl	80038ac <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800609e:	f7fd fc05 	bl	80038ac <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e14d      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 80060b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80a0 	beq.w	800620a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4a0e      	ldr	r2, [pc, #56]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ea:	4b0c      	ldr	r3, [pc, #48]	; (800611c <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCC_OscConfig+0x2b8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d121      	bne.n	800614a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <HAL_RCC_OscConfig+0x2b8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a07      	ldr	r2, [pc, #28]	; (8006128 <HAL_RCC_OscConfig+0x2b8>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006112:	f7fd fbcb 	bl	80038ac <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	e011      	b.n	800613e <HAL_RCC_OscConfig+0x2ce>
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800
 8006120:	42470000 	.word	0x42470000
 8006124:	42470e80 	.word	0x42470e80
 8006128:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800612c:	f7fd fbbe 	bl	80038ac <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e106      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613e:	4b85      	ldr	r3, [pc, #532]	; (8006354 <HAL_RCC_OscConfig+0x4e4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d106      	bne.n	8006160 <HAL_RCC_OscConfig+0x2f0>
 8006152:	4b81      	ldr	r3, [pc, #516]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	4a80      	ldr	r2, [pc, #512]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
 800615e:	e01c      	b.n	800619a <HAL_RCC_OscConfig+0x32a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b05      	cmp	r3, #5
 8006166:	d10c      	bne.n	8006182 <HAL_RCC_OscConfig+0x312>
 8006168:	4b7b      	ldr	r3, [pc, #492]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	4a7a      	ldr	r2, [pc, #488]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 800616e:	f043 0304 	orr.w	r3, r3, #4
 8006172:	6713      	str	r3, [r2, #112]	; 0x70
 8006174:	4b78      	ldr	r3, [pc, #480]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	4a77      	ldr	r2, [pc, #476]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6713      	str	r3, [r2, #112]	; 0x70
 8006180:	e00b      	b.n	800619a <HAL_RCC_OscConfig+0x32a>
 8006182:	4b75      	ldr	r3, [pc, #468]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	4a74      	ldr	r2, [pc, #464]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	6713      	str	r3, [r2, #112]	; 0x70
 800618e:	4b72      	ldr	r3, [pc, #456]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	4a71      	ldr	r2, [pc, #452]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d015      	beq.n	80061ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a2:	f7fd fb83 	bl	80038ac <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061aa:	f7fd fb7f 	bl	80038ac <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0c5      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c0:	4b65      	ldr	r3, [pc, #404]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ee      	beq.n	80061aa <HAL_RCC_OscConfig+0x33a>
 80061cc:	e014      	b.n	80061f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ce:	f7fd fb6d 	bl	80038ac <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fd fb69 	bl	80038ac <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0af      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ec:	4b5a      	ldr	r3, [pc, #360]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ee      	bne.n	80061d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fe:	4b56      	ldr	r3, [pc, #344]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a55      	ldr	r2, [pc, #340]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 809b 	beq.w	800634a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006214:	4b50      	ldr	r3, [pc, #320]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b08      	cmp	r3, #8
 800621e:	d05c      	beq.n	80062da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d141      	bne.n	80062ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006228:	4b4c      	ldr	r3, [pc, #304]	; (800635c <HAL_RCC_OscConfig+0x4ec>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622e:	f7fd fb3d 	bl	80038ac <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006236:	f7fd fb39 	bl	80038ac <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e081      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006248:	4b43      	ldr	r3, [pc, #268]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	019b      	lsls	r3, r3, #6
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	3b01      	subs	r3, #1
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	4937      	ldr	r1, [pc, #220]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800627e:	4b37      	ldr	r3, [pc, #220]	; (800635c <HAL_RCC_OscConfig+0x4ec>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006284:	f7fd fb12 	bl	80038ac <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628c:	f7fd fb0e 	bl	80038ac <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e056      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629e:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0x41c>
 80062aa:	e04e      	b.n	800634a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ac:	4b2b      	ldr	r3, [pc, #172]	; (800635c <HAL_RCC_OscConfig+0x4ec>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7fd fafb 	bl	80038ac <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ba:	f7fd faf7 	bl	80038ac <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e03f      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f0      	bne.n	80062ba <HAL_RCC_OscConfig+0x44a>
 80062d8:	e037      	b.n	800634a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e032      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <HAL_RCC_OscConfig+0x4e8>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d028      	beq.n	8006346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d121      	bne.n	8006346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d11a      	bne.n	8006346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800631c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800631e:	4293      	cmp	r3, r2
 8006320:	d111      	bne.n	8006346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	3b01      	subs	r3, #1
 8006330:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d107      	bne.n	8006346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006342:	429a      	cmp	r2, r3
 8006344:	d001      	beq.n	800634a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40007000 	.word	0x40007000
 8006358:	40023800 	.word	0x40023800
 800635c:	42470060 	.word	0x42470060

08006360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0cc      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006374:	4b68      	ldr	r3, [pc, #416]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d90c      	bls.n	800639c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b65      	ldr	r3, [pc, #404]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b63      	ldr	r3, [pc, #396]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d001      	beq.n	800639c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0b8      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d020      	beq.n	80063ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b4:	4b59      	ldr	r3, [pc, #356]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4a58      	ldr	r2, [pc, #352]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063cc:	4b53      	ldr	r3, [pc, #332]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4a52      	ldr	r2, [pc, #328]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d8:	4b50      	ldr	r3, [pc, #320]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	494d      	ldr	r1, [pc, #308]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d044      	beq.n	8006480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d107      	bne.n	800640e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fe:	4b47      	ldr	r3, [pc, #284]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d119      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e07f      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d003      	beq.n	800641e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800641a:	2b03      	cmp	r3, #3
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641e:	4b3f      	ldr	r3, [pc, #252]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e06f      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642e:	4b3b      	ldr	r3, [pc, #236]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e067      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800643e:	4b37      	ldr	r3, [pc, #220]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f023 0203 	bic.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4934      	ldr	r1, [pc, #208]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006450:	f7fd fa2c 	bl	80038ac <HAL_GetTick>
 8006454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	e00a      	b.n	800646e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006458:	f7fd fa28 	bl	80038ac <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	; 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e04f      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646e:	4b2b      	ldr	r3, [pc, #172]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 020c 	and.w	r2, r3, #12
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	429a      	cmp	r2, r3
 800647e:	d1eb      	bne.n	8006458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d20c      	bcs.n	80064a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b22      	ldr	r3, [pc, #136]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b20      	ldr	r3, [pc, #128]	; (8006518 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e032      	b.n	800650e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b4:	4b19      	ldr	r3, [pc, #100]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	4916      	ldr	r1, [pc, #88]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	490e      	ldr	r1, [pc, #56]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064e6:	f000 f821 	bl	800652c <HAL_RCC_GetSysClockFreq>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	091b      	lsrs	r3, r3, #4
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	490a      	ldr	r1, [pc, #40]	; (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 80064f8:	5ccb      	ldrb	r3, [r1, r3]
 80064fa:	fa22 f303 	lsr.w	r3, r2, r3
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_RCC_ClockConfig+0x1c8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7fd f98c 	bl	8003824 <HAL_InitTick>

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40023c00 	.word	0x40023c00
 800651c:	40023800 	.word	0x40023800
 8006520:	08009460 	.word	0x08009460
 8006524:	20000074 	.word	0x20000074
 8006528:	20000078 	.word	0x20000078

0800652c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800652c:	b5b0      	push	{r4, r5, r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006532:	2100      	movs	r1, #0
 8006534:	6079      	str	r1, [r7, #4]
 8006536:	2100      	movs	r1, #0
 8006538:	60f9      	str	r1, [r7, #12]
 800653a:	2100      	movs	r1, #0
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800653e:	2100      	movs	r1, #0
 8006540:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006542:	4952      	ldr	r1, [pc, #328]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 8006544:	6889      	ldr	r1, [r1, #8]
 8006546:	f001 010c 	and.w	r1, r1, #12
 800654a:	2908      	cmp	r1, #8
 800654c:	d00d      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x3e>
 800654e:	2908      	cmp	r1, #8
 8006550:	f200 8094 	bhi.w	800667c <HAL_RCC_GetSysClockFreq+0x150>
 8006554:	2900      	cmp	r1, #0
 8006556:	d002      	beq.n	800655e <HAL_RCC_GetSysClockFreq+0x32>
 8006558:	2904      	cmp	r1, #4
 800655a:	d003      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0x38>
 800655c:	e08e      	b.n	800667c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800655e:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <HAL_RCC_GetSysClockFreq+0x164>)
 8006560:	60bb      	str	r3, [r7, #8]
       break;
 8006562:	e08e      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006564:	4b4b      	ldr	r3, [pc, #300]	; (8006694 <HAL_RCC_GetSysClockFreq+0x168>)
 8006566:	60bb      	str	r3, [r7, #8]
      break;
 8006568:	e08b      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800656a:	4948      	ldr	r1, [pc, #288]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 800656c:	6849      	ldr	r1, [r1, #4]
 800656e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006572:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006574:	4945      	ldr	r1, [pc, #276]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 8006576:	6849      	ldr	r1, [r1, #4]
 8006578:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800657c:	2900      	cmp	r1, #0
 800657e:	d024      	beq.n	80065ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006580:	4942      	ldr	r1, [pc, #264]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 8006582:	6849      	ldr	r1, [r1, #4]
 8006584:	0989      	lsrs	r1, r1, #6
 8006586:	4608      	mov	r0, r1
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006590:	f04f 0500 	mov.w	r5, #0
 8006594:	ea00 0204 	and.w	r2, r0, r4
 8006598:	ea01 0305 	and.w	r3, r1, r5
 800659c:	493d      	ldr	r1, [pc, #244]	; (8006694 <HAL_RCC_GetSysClockFreq+0x168>)
 800659e:	fb01 f003 	mul.w	r0, r1, r3
 80065a2:	2100      	movs	r1, #0
 80065a4:	fb01 f102 	mul.w	r1, r1, r2
 80065a8:	1844      	adds	r4, r0, r1
 80065aa:	493a      	ldr	r1, [pc, #232]	; (8006694 <HAL_RCC_GetSysClockFreq+0x168>)
 80065ac:	fba2 0101 	umull	r0, r1, r2, r1
 80065b0:	1863      	adds	r3, r4, r1
 80065b2:	4619      	mov	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	f7fa faae 	bl	8000b1c <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e04a      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	099b      	lsrs	r3, r3, #6
 80065d0:	461a      	mov	r2, r3
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	ea02 0400 	and.w	r4, r2, r0
 80065e2:	ea03 0501 	and.w	r5, r3, r1
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	014b      	lsls	r3, r1, #5
 80065f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065f8:	0142      	lsls	r2, r0, #5
 80065fa:	4610      	mov	r0, r2
 80065fc:	4619      	mov	r1, r3
 80065fe:	1b00      	subs	r0, r0, r4
 8006600:	eb61 0105 	sbc.w	r1, r1, r5
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	018b      	lsls	r3, r1, #6
 800660e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006612:	0182      	lsls	r2, r0, #6
 8006614:	1a12      	subs	r2, r2, r0
 8006616:	eb63 0301 	sbc.w	r3, r3, r1
 800661a:	f04f 0000 	mov.w	r0, #0
 800661e:	f04f 0100 	mov.w	r1, #0
 8006622:	00d9      	lsls	r1, r3, #3
 8006624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006628:	00d0      	lsls	r0, r2, #3
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	1912      	adds	r2, r2, r4
 8006630:	eb45 0303 	adc.w	r3, r5, r3
 8006634:	f04f 0000 	mov.w	r0, #0
 8006638:	f04f 0100 	mov.w	r1, #0
 800663c:	0299      	lsls	r1, r3, #10
 800663e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006642:	0290      	lsls	r0, r2, #10
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4610      	mov	r0, r2
 800664a:	4619      	mov	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	f7fa fa62 	bl	8000b1c <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4613      	mov	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <HAL_RCC_GetSysClockFreq+0x160>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	3301      	adds	r3, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	60bb      	str	r3, [r7, #8]
      break;
 800667a:	e002      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <HAL_RCC_GetSysClockFreq+0x164>)
 800667e:	60bb      	str	r3, [r7, #8]
      break;
 8006680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006682:	68bb      	ldr	r3, [r7, #8]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bdb0      	pop	{r4, r5, r7, pc}
 800668c:	40023800 	.word	0x40023800
 8006690:	00f42400 	.word	0x00f42400
 8006694:	017d7840 	.word	0x017d7840

08006698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCC_GetHCLKFreq+0x14>)
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000074 	.word	0x20000074

080066b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066b4:	f7ff fff0 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0a9b      	lsrs	r3, r3, #10
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	4903      	ldr	r1, [pc, #12]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40023800 	.word	0x40023800
 80066d4:	08009470 	.word	0x08009470

080066d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066dc:	f7ff ffdc 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	0b5b      	lsrs	r3, r3, #13
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	4903      	ldr	r1, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	08009470 	.word	0x08009470

08006700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e07b      	b.n	800680a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d108      	bne.n	800672c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006722:	d009      	beq.n	8006738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	61da      	str	r2, [r3, #28]
 800672a:	e005      	b.n	8006738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fc fdc6 	bl	80032e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	ea42 0103 	orr.w	r1, r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	f003 0104 	and.w	r1, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f003 0210 	and.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e01a      	b.n	800685a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fc fd99 	bl	8003374 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b08c      	sub	sp, #48	; 0x30
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006870:	2301      	movs	r3, #1
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_SPI_TransmitReceive+0x26>
 8006884:	2302      	movs	r3, #2
 8006886:	e18a      	b.n	8006b9e <HAL_SPI_TransmitReceive+0x33c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006890:	f7fd f80c 	bl	80038ac <HAL_GetTick>
 8006894:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068a6:	887b      	ldrh	r3, [r7, #2]
 80068a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d00f      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x70>
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b8:	d107      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <HAL_SPI_TransmitReceive+0x68>
 80068c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
 80068cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068d0:	e15b      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x82>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x82>
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068ea:	e14e      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d003      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2205      	movs	r2, #5
 80068fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	887a      	ldrh	r2, [r7, #2]
 8006916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	887a      	ldrh	r2, [r7, #2]
 8006922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	887a      	ldrh	r2, [r7, #2]
 8006928:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d007      	beq.n	8006954 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695c:	d178      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_SPI_TransmitReceive+0x10a>
 8006966:	8b7b      	ldrh	r3, [r7, #26]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d166      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006990:	e053      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d11b      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x176>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x176>
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d113      	bne.n	80069d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d119      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x1b8>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d014      	beq.n	8006a1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	b292      	uxth	r2, r2
 80069fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a16:	2301      	movs	r3, #1
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a1a:	f7fc ff47 	bl	80038ac <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d807      	bhi.n	8006a3a <HAL_SPI_TransmitReceive+0x1d8>
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d003      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a38:	e0a7      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1a6      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x130>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1a1      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x130>
 8006a4e:	e07c      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x1fc>
 8006a58:	8b7b      	ldrh	r3, [r7, #26]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d16b      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a84:	e057      	b.n	8006b36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d11c      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x26c>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d017      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x26c>
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d114      	bne.n	8006ace <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	7812      	ldrb	r2, [r2, #0]
 8006ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d119      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x2ae>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d014      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b10:	f7fc fecc 	bl	80038ac <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d803      	bhi.n	8006b28 <HAL_SPI_TransmitReceive+0x2c6>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d102      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x2cc>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b34:	e029      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1a2      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x224>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d19d      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f8c0 	bl	8006cd4 <SPI_EndRxTxTransaction>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d006      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b66:	e010      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	e000      	b.n	8006b8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3730      	adds	r7, #48	; 0x30
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb4:	b2db      	uxtb	r3, r3
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bd4:	f7fc fe6a 	bl	80038ac <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006be4:	f7fc fe62 	bl	80038ac <HAL_GetTick>
 8006be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bea:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	015b      	lsls	r3, r3, #5
 8006bf0:	0d1b      	lsrs	r3, r3, #20
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bfa:	e054      	b.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d050      	beq.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c04:	f7fc fe52 	bl	80038ac <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d902      	bls.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d13d      	bne.n	8006c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c32:	d111      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3c:	d004      	beq.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c46:	d107      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c60:	d10f      	bne.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e017      	b.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d19b      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000074 	.word	0x20000074

08006cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <SPI_EndRxTxTransaction+0x7c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <SPI_EndRxTxTransaction+0x80>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	0d5b      	lsrs	r3, r3, #21
 8006cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfe:	d112      	bne.n	8006d26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff ff5a 	bl	8006bc4 <SPI_WaitFlagStateUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d016      	beq.n	8006d44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e00f      	b.n	8006d46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d0f2      	beq.n	8006d26 <SPI_EndRxTxTransaction+0x52>
 8006d40:	e000      	b.n	8006d44 <SPI_EndRxTxTransaction+0x70>
        break;
 8006d42:	bf00      	nop
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000074 	.word	0x20000074
 8006d54:	165e9f81 	.word	0x165e9f81

08006d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e041      	b.n	8006dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fc fb16 	bl	80033b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f000 fc54 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d001      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e044      	b.n	8006e9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ea8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d018      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x6c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3a:	d013      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x6c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1a      	ldr	r2, [pc, #104]	; (8006eac <HAL_TIM_Base_Start_IT+0xb4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00e      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x6c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x6c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d004      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0x6c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d111      	bne.n	8006e88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b06      	cmp	r3, #6
 8006e74:	d010      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	e007      	b.n	8006e98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40014000 	.word	0x40014000

08006ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e041      	b.n	8006f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f839 	bl	8006f5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f000 fba2 	bl	8007644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <HAL_TIM_PWM_Start+0x24>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	e022      	b.n	8006fda <HAL_TIM_PWM_Start+0x6a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d109      	bne.n	8006fae <HAL_TIM_PWM_Start+0x3e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	e015      	b.n	8006fda <HAL_TIM_PWM_Start+0x6a>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d109      	bne.n	8006fc8 <HAL_TIM_PWM_Start+0x58>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	bf14      	ite	ne
 8006fc0:	2301      	movne	r3, #1
 8006fc2:	2300      	moveq	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	e008      	b.n	8006fda <HAL_TIM_PWM_Start+0x6a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	bf14      	ite	ne
 8006fd4:	2301      	movne	r3, #1
 8006fd6:	2300      	moveq	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e068      	b.n	80070b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0x82>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff0:	e013      	b.n	800701a <HAL_TIM_PWM_Start+0xaa>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Start+0x92>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	e00b      	b.n	800701a <HAL_TIM_PWM_Start+0xaa>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Start+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007010:	e003      	b.n	800701a <HAL_TIM_PWM_Start+0xaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fdb4 	bl	8007b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a23      	ldr	r2, [pc, #140]	; (80070bc <HAL_TIM_PWM_Start+0x14c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d107      	bne.n	8007042 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_TIM_PWM_Start+0x14c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <HAL_TIM_PWM_Start+0x10e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007054:	d013      	beq.n	800707e <HAL_TIM_PWM_Start+0x10e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_TIM_PWM_Start+0x150>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <HAL_TIM_PWM_Start+0x10e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <HAL_TIM_PWM_Start+0x154>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <HAL_TIM_PWM_Start+0x10e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <HAL_TIM_PWM_Start+0x158>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <HAL_TIM_PWM_Start+0x10e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a14      	ldr	r2, [pc, #80]	; (80070cc <HAL_TIM_PWM_Start+0x15c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d111      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d010      	beq.n	80070b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e007      	b.n	80070b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40000400 	.word	0x40000400
 80070c4:	40000800 	.word	0x40000800
 80070c8:	40000c00 	.word	0x40000c00
 80070cc:	40014000 	.word	0x40014000

080070d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d122      	bne.n	800712c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d11b      	bne.n	800712c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0202 	mvn.w	r2, #2
 80070fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa77 	bl	8007606 <HAL_TIM_IC_CaptureCallback>
 8007118:	e005      	b.n	8007126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa69 	bl	80075f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa7a 	bl	800761a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d122      	bne.n	8007180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b04      	cmp	r3, #4
 8007146:	d11b      	bne.n	8007180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0204 	mvn.w	r2, #4
 8007150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa4d 	bl	8007606 <HAL_TIM_IC_CaptureCallback>
 800716c:	e005      	b.n	800717a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa3f 	bl	80075f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa50 	bl	800761a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0308 	and.w	r3, r3, #8
 800718a:	2b08      	cmp	r3, #8
 800718c:	d122      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b08      	cmp	r3, #8
 800719a:	d11b      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0208 	mvn.w	r2, #8
 80071a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2204      	movs	r2, #4
 80071aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa23 	bl	8007606 <HAL_TIM_IC_CaptureCallback>
 80071c0:	e005      	b.n	80071ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa15 	bl	80075f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa26 	bl	800761a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d122      	bne.n	8007228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d11b      	bne.n	8007228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9f9 	bl	8007606 <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9eb 	bl	80075f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f9fc 	bl	800761a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10e      	bne.n	8007254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b01      	cmp	r3, #1
 8007242:	d107      	bne.n	8007254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0201 	mvn.w	r2, #1
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fa ffea 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d10e      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d107      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd26 	bl	8007ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f9c1 	bl	800762e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d10e      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0220 	mvn.w	r2, #32
 80072d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fcf0 	bl	8007cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e0ae      	b.n	800745c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b0c      	cmp	r3, #12
 800730a:	f200 809f 	bhi.w	800744c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007349 	.word	0x08007349
 8007318:	0800744d 	.word	0x0800744d
 800731c:	0800744d 	.word	0x0800744d
 8007320:	0800744d 	.word	0x0800744d
 8007324:	08007389 	.word	0x08007389
 8007328:	0800744d 	.word	0x0800744d
 800732c:	0800744d 	.word	0x0800744d
 8007330:	0800744d 	.word	0x0800744d
 8007334:	080073cb 	.word	0x080073cb
 8007338:	0800744d 	.word	0x0800744d
 800733c:	0800744d 	.word	0x0800744d
 8007340:	0800744d 	.word	0x0800744d
 8007344:	0800740b 	.word	0x0800740b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 f9f8 	bl	8007744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0204 	bic.w	r2, r2, #4
 8007372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6999      	ldr	r1, [r3, #24]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	619a      	str	r2, [r3, #24]
      break;
 8007386:	e064      	b.n	8007452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fa3e 	bl	8007810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	619a      	str	r2, [r3, #24]
      break;
 80073c8:	e043      	b.n	8007452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fa89 	bl	80078e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0208 	orr.w	r2, r2, #8
 80073e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0204 	bic.w	r2, r2, #4
 80073f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69d9      	ldr	r1, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	61da      	str	r2, [r3, #28]
      break;
 8007408:	e023      	b.n	8007452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fad3 	bl	80079bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69d9      	ldr	r1, [r3, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	021a      	lsls	r2, r3, #8
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	61da      	str	r2, [r3, #28]
      break;
 800744a:	e002      	b.n	8007452 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
      break;
 8007450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIM_ConfigClockSource+0x1c>
 800747c:	2302      	movs	r3, #2
 800747e:	e0b4      	b.n	80075ea <HAL_TIM_ConfigClockSource+0x186>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800749e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b8:	d03e      	beq.n	8007538 <HAL_TIM_ConfigClockSource+0xd4>
 80074ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074be:	f200 8087 	bhi.w	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c6:	f000 8086 	beq.w	80075d6 <HAL_TIM_ConfigClockSource+0x172>
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d87f      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b70      	cmp	r3, #112	; 0x70
 80074d2:	d01a      	beq.n	800750a <HAL_TIM_ConfigClockSource+0xa6>
 80074d4:	2b70      	cmp	r3, #112	; 0x70
 80074d6:	d87b      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b60      	cmp	r3, #96	; 0x60
 80074da:	d050      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x11a>
 80074dc:	2b60      	cmp	r3, #96	; 0x60
 80074de:	d877      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b50      	cmp	r3, #80	; 0x50
 80074e2:	d03c      	beq.n	800755e <HAL_TIM_ConfigClockSource+0xfa>
 80074e4:	2b50      	cmp	r3, #80	; 0x50
 80074e6:	d873      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b40      	cmp	r3, #64	; 0x40
 80074ea:	d058      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x13a>
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d86f      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d064      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x15a>
 80074f4:	2b30      	cmp	r3, #48	; 0x30
 80074f6:	d86b      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d060      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x15a>
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d867      	bhi.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d05c      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x15a>
 8007504:	2b10      	cmp	r3, #16
 8007506:	d05a      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x15a>
 8007508:	e062      	b.n	80075d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6899      	ldr	r1, [r3, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f000 fb19 	bl	8007b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800752c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]
      break;
 8007536:	e04f      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	6899      	ldr	r1, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f000 fb02 	bl	8007b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800755a:	609a      	str	r2, [r3, #8]
      break;
 800755c:	e03c      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 fa76 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2150      	movs	r1, #80	; 0x50
 8007576:	4618      	mov	r0, r3
 8007578:	f000 facf 	bl	8007b1a <TIM_ITRx_SetConfig>
      break;
 800757c:	e02c      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 fa95 	bl	8007aba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2160      	movs	r1, #96	; 0x60
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fabf 	bl	8007b1a <TIM_ITRx_SetConfig>
      break;
 800759c:	e01c      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fa56 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 faaf 	bl	8007b1a <TIM_ITRx_SetConfig>
      break;
 80075bc:	e00c      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f000 faa6 	bl	8007b1a <TIM_ITRx_SetConfig>
      break;
 80075ce:	e003      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	e000      	b.n	80075d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a34      	ldr	r2, [pc, #208]	; (8007728 <TIM_Base_SetConfig+0xe4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00f      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007662:	d00b      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a31      	ldr	r2, [pc, #196]	; (800772c <TIM_Base_SetConfig+0xe8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d007      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a30      	ldr	r2, [pc, #192]	; (8007730 <TIM_Base_SetConfig+0xec>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_Base_SetConfig+0x38>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <TIM_Base_SetConfig+0xf0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d108      	bne.n	800768e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a25      	ldr	r2, [pc, #148]	; (8007728 <TIM_Base_SetConfig+0xe4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01b      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d017      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <TIM_Base_SetConfig+0xe8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a21      	ldr	r2, [pc, #132]	; (8007730 <TIM_Base_SetConfig+0xec>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00f      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <TIM_Base_SetConfig+0xf0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <TIM_Base_SetConfig+0xf4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1e      	ldr	r2, [pc, #120]	; (800773c <TIM_Base_SetConfig+0xf8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_Base_SetConfig+0x8a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1d      	ldr	r2, [pc, #116]	; (8007740 <TIM_Base_SetConfig+0xfc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a08      	ldr	r2, [pc, #32]	; (8007728 <TIM_Base_SetConfig+0xe4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d103      	bne.n	8007714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	615a      	str	r2, [r3, #20]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40010000 	.word	0x40010000
 800772c:	40000400 	.word	0x40000400
 8007730:	40000800 	.word	0x40000800
 8007734:	40000c00 	.word	0x40000c00
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800

08007744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f023 0201 	bic.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0303 	bic.w	r3, r3, #3
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f023 0302 	bic.w	r3, r3, #2
 800778c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a1c      	ldr	r2, [pc, #112]	; (800780c <TIM_OC1_SetConfig+0xc8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10c      	bne.n	80077ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 0308 	bic.w	r3, r3, #8
 80077a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f023 0304 	bic.w	r3, r3, #4
 80077b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a13      	ldr	r2, [pc, #76]	; (800780c <TIM_OC1_SetConfig+0xc8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d111      	bne.n	80077e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40010000 	.word	0x40010000

08007810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0210 	bic.w	r2, r3, #16
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0320 	bic.w	r3, r3, #32
 800785a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <TIM_OC2_SetConfig+0xd4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10d      	bne.n	800788c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <TIM_OC2_SetConfig+0xd4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d113      	bne.n	80078bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000

080078e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1d      	ldr	r2, [pc, #116]	; (80079b8 <TIM_OC3_SetConfig+0xd0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d10d      	bne.n	8007962 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800794c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a14      	ldr	r2, [pc, #80]	; (80079b8 <TIM_OC3_SetConfig+0xd0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d113      	bne.n	8007992 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40010000 	.word	0x40010000

080079bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	031b      	lsls	r3, r3, #12
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a10      	ldr	r2, [pc, #64]	; (8007a58 <TIM_OC4_SetConfig+0x9c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d109      	bne.n	8007a30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	019b      	lsls	r3, r3, #6
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000

08007a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 030a 	bic.w	r3, r3, #10
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b087      	sub	sp, #28
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0210 	bic.w	r2, r3, #16
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	031b      	lsls	r3, r3, #12
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	621a      	str	r2, [r3, #32]
}
 8007b0e:	bf00      	nop
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f043 0307 	orr.w	r3, r3, #7
 8007b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	609a      	str	r2, [r3, #8]
}
 8007b44:	bf00      	nop
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	021a      	lsls	r2, r3, #8
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	609a      	str	r2, [r3, #8]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e050      	b.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d018      	beq.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c40:	d013      	beq.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00e      	beq.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a16      	ldr	r2, [pc, #88]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d009      	beq.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10c      	bne.n	8007c84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00
 8007cb4:	40014000 	.word	0x40014000

08007cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e03f      	b.n	8007d72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fb fc0e 	bl	8003528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2224      	movs	r2, #36	; 0x24
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fd1f 	bl	8008768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4613      	mov	r3, r2
 8007d86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d130      	bne.n	8007df6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_UART_Transmit_IT+0x26>
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e029      	b.n	8007df8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_UART_Transmit_IT+0x38>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e022      	b.n	8007df8 <HAL_UART_Transmit_IT+0x7e>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	88fa      	ldrh	r2, [r7, #6]
 8007dca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2221      	movs	r2, #33	; 0x21
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007df0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
  }
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d11d      	bne.n	8007e5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_UART_Receive_IT+0x26>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e016      	b.n	8007e5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Receive_IT+0x38>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e00f      	b.n	8007e5c <HAL_UART_Receive_IT+0x58>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fab5 	bl	80083c0 <UART_Start_Receive_IT>
 8007e56:	4603      	mov	r3, r0
 8007e58:	e000      	b.n	8007e5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b0ba      	sub	sp, #232	; 0xe8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10f      	bne.n	8007eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_UART_IRQHandler+0x66>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fb95 	bl	80085f2 <UART_Receive_IT>
      return;
 8007ec8:	e256      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80de 	beq.w	8008090 <HAL_UART_IRQHandler+0x22c>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80d1 	beq.w	8008090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <HAL_UART_IRQHandler+0xae>
 8007efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_UART_IRQHandler+0xd2>
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f043 0202 	orr.w	r2, r3, #2
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <HAL_UART_IRQHandler+0xf6>
 8007f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f043 0204 	orr.w	r2, r3, #4
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d011      	beq.n	8007f8a <HAL_UART_IRQHandler+0x126>
 8007f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	f043 0208 	orr.w	r2, r3, #8
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 81ed 	beq.w	800836e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x14e>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb20 	bl	80085f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	bf0c      	ite	eq
 8007fc0:	2301      	moveq	r3, #1
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <HAL_UART_IRQHandler+0x17a>
 8007fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04f      	beq.n	800807e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa28 	bl	8008434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d141      	bne.n	8008076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800800c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800801e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800802a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1d9      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d013      	beq.n	800806e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	4a7d      	ldr	r2, [pc, #500]	; (8008240 <HAL_UART_IRQHandler+0x3dc>)
 800804c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	4618      	mov	r0, r3
 8008054:	f7fc f989 	bl	800436a <HAL_DMA_Abort_IT>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	e00e      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f990 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008074:	e00a      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f98c 	bl	8008394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	e006      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f988 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800808a:	e170      	b.n	800836e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	bf00      	nop
    return;
 800808e:	e16e      	b.n	800836e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	f040 814a 	bne.w	800832e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8143 	beq.w	800832e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 813c 	beq.w	800832e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60bb      	str	r3, [r7, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	f040 80b4 	bne.w	8008244 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8140 	beq.w	8008372 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080fa:	429a      	cmp	r2, r3
 80080fc:	f080 8139 	bcs.w	8008372 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008106:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	f000 8088 	beq.w	8008226 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	330c      	adds	r3, #12
 800811c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800812c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	330c      	adds	r3, #12
 800813e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800814e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800815a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1d9      	bne.n	8008116 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3314      	adds	r3, #20
 8008168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3314      	adds	r3, #20
 8008182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800818a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800818e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e1      	bne.n	8008162 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3314      	adds	r3, #20
 80081a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e3      	bne.n	800819e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f6:	f023 0310 	bic.w	r3, r3, #16
 80081fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008208:	65ba      	str	r2, [r7, #88]	; 0x58
 800820a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800820e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e3      	bne.n	80081e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	4618      	mov	r0, r3
 8008222:	f7fc f832 	bl	800428a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800822e:	b29b      	uxth	r3, r3
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	b29b      	uxth	r3, r3
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8b6 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800823c:	e099      	b.n	8008372 <HAL_UART_IRQHandler+0x50e>
 800823e:	bf00      	nop
 8008240:	080084fb 	.word	0x080084fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800824c:	b29b      	uxth	r3, r3
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 808b 	beq.w	8008376 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8086 	beq.w	8008376 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	330c      	adds	r3, #12
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800828e:	647a      	str	r2, [r7, #68]	; 0x44
 8008290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e3      	bne.n	800826a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3314      	adds	r3, #20
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	623b      	str	r3, [r7, #32]
   return(result);
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3314      	adds	r3, #20
 80082c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082c6:	633a      	str	r2, [r7, #48]	; 0x30
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e3      	bne.n	80082a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2220      	movs	r2, #32
 80082de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0310 	bic.w	r3, r3, #16
 80082fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	330c      	adds	r3, #12
 8008308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800830c:	61fa      	str	r2, [r7, #28]
 800830e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	617b      	str	r3, [r7, #20]
   return(result);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e3      	bne.n	80082e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f83e 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800832c:	e023      	b.n	8008376 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_UART_IRQHandler+0x4ea>
 800833a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f8eb 	bl	8008522 <UART_Transmit_IT>
    return;
 800834c:	e014      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00e      	beq.n	8008378 <HAL_UART_IRQHandler+0x514>
 800835a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d008      	beq.n	8008378 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f92b 	bl	80085c2 <UART_EndTransmit_IT>
    return;
 800836c:	e004      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
    return;
 800836e:	bf00      	nop
 8008370:	e002      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
      return;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
      return;
 8008376:	bf00      	nop
  }
}
 8008378:	37e8      	adds	r7, #232	; 0xe8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop

08008380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2222      	movs	r2, #34	; 0x22
 80083ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008404:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695a      	ldr	r2, [r3, #20]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0201 	orr.w	r2, r2, #1
 8008414:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 0220 	orr.w	r2, r2, #32
 8008424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b095      	sub	sp, #84	; 0x54
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	330c      	adds	r3, #12
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800845c:	643a      	str	r2, [r7, #64]	; 0x40
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e5      	bne.n	800843c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3314      	adds	r3, #20
 8008476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	64bb      	str	r3, [r7, #72]	; 0x48
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d119      	bne.n	80084e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	647b      	str	r3, [r7, #68]	; 0x44
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084cc:	61ba      	str	r2, [r7, #24]
 80084ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6979      	ldr	r1, [r7, #20]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	613b      	str	r3, [r7, #16]
   return(result);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e5      	bne.n	80084ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084ee:	bf00      	nop
 80084f0:	3754      	adds	r7, #84	; 0x54
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff ff3d 	bl	8008394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b21      	cmp	r3, #33	; 0x21
 8008534:	d13e      	bne.n	80085b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d114      	bne.n	800856a <UART_Transmit_IT+0x48>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d110      	bne.n	800856a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	621a      	str	r2, [r3, #32]
 8008568:	e008      	b.n	800857c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6211      	str	r1, [r2, #32]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4619      	mov	r1, r3
 800858a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10f      	bne.n	80085b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fecc 	bl	8008380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b08c      	sub	sp, #48	; 0x30
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	f040 80ab 	bne.w	800875e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008610:	d117      	bne.n	8008642 <UART_Receive_IT+0x50>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d113      	bne.n	8008642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	b29a      	uxth	r2, r3
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
 8008640:	e026      	b.n	8008690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008654:	d007      	beq.n	8008666 <UART_Receive_IT+0x74>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <UART_Receive_IT+0x82>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e008      	b.n	8008686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008680:	b2da      	uxtb	r2, r3
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4619      	mov	r1, r3
 800869e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d15a      	bne.n	800875a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0220 	bic.w	r2, r2, #32
 80086b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d135      	bne.n	8008750 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 0310 	bic.w	r3, r3, #16
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	623a      	str	r2, [r7, #32]
 800870c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	69f9      	ldr	r1, [r7, #28]
 8008710:	6a3a      	ldr	r2, [r7, #32]
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	61bb      	str	r3, [r7, #24]
   return(result);
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d10a      	bne.n	8008742 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fe2d 	bl	80083a8 <HAL_UARTEx_RxEventCallback>
 800874e:	e002      	b.n	8008756 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7f9 fc4b 	bl	8001fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e002      	b.n	8008760 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e000      	b.n	8008760 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800875e:	2302      	movs	r3, #2
  }
}
 8008760:	4618      	mov	r0, r3
 8008762:	3730      	adds	r7, #48	; 0x30
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	b09f      	sub	sp, #124	; 0x7c
 800876e:	af00      	add	r7, sp, #0
 8008770:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	68d9      	ldr	r1, [r3, #12]
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	ea40 0301 	orr.w	r3, r0, r1
 8008788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	431a      	orrs	r2, r3
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	431a      	orrs	r2, r3
 800879a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	4313      	orrs	r3, r2
 80087a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087ac:	f021 010c 	bic.w	r1, r1, #12
 80087b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b6:	430b      	orrs	r3, r1
 80087b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	6999      	ldr	r1, [r3, #24]
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	ea40 0301 	orr.w	r3, r0, r1
 80087d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4bc5      	ldr	r3, [pc, #788]	; (8008aec <UART_SetConfig+0x384>)
 80087d8:	429a      	cmp	r2, r3
 80087da:	d004      	beq.n	80087e6 <UART_SetConfig+0x7e>
 80087dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4bc3      	ldr	r3, [pc, #780]	; (8008af0 <UART_SetConfig+0x388>)
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d103      	bne.n	80087ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087e6:	f7fd ff77 	bl	80066d8 <HAL_RCC_GetPCLK2Freq>
 80087ea:	6778      	str	r0, [r7, #116]	; 0x74
 80087ec:	e002      	b.n	80087f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087ee:	f7fd ff5f 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 80087f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fc:	f040 80b6 	bne.w	800896c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008802:	461c      	mov	r4, r3
 8008804:	f04f 0500 	mov.w	r5, #0
 8008808:	4622      	mov	r2, r4
 800880a:	462b      	mov	r3, r5
 800880c:	1891      	adds	r1, r2, r2
 800880e:	6439      	str	r1, [r7, #64]	; 0x40
 8008810:	415b      	adcs	r3, r3
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
 8008814:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008818:	1912      	adds	r2, r2, r4
 800881a:	eb45 0303 	adc.w	r3, r5, r3
 800881e:	f04f 0000 	mov.w	r0, #0
 8008822:	f04f 0100 	mov.w	r1, #0
 8008826:	00d9      	lsls	r1, r3, #3
 8008828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800882c:	00d0      	lsls	r0, r2, #3
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	1911      	adds	r1, r2, r4
 8008834:	6639      	str	r1, [r7, #96]	; 0x60
 8008836:	416b      	adcs	r3, r5
 8008838:	667b      	str	r3, [r7, #100]	; 0x64
 800883a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	461a      	mov	r2, r3
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	1891      	adds	r1, r2, r2
 8008846:	63b9      	str	r1, [r7, #56]	; 0x38
 8008848:	415b      	adcs	r3, r3
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008850:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008854:	f7f8 f962 	bl	8000b1c <__aeabi_uldivmod>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4ba5      	ldr	r3, [pc, #660]	; (8008af4 <UART_SetConfig+0x38c>)
 800885e:	fba3 2302 	umull	r2, r3, r3, r2
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	011e      	lsls	r6, r3, #4
 8008866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008868:	461c      	mov	r4, r3
 800886a:	f04f 0500 	mov.w	r5, #0
 800886e:	4622      	mov	r2, r4
 8008870:	462b      	mov	r3, r5
 8008872:	1891      	adds	r1, r2, r2
 8008874:	6339      	str	r1, [r7, #48]	; 0x30
 8008876:	415b      	adcs	r3, r3
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
 800887a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800887e:	1912      	adds	r2, r2, r4
 8008880:	eb45 0303 	adc.w	r3, r5, r3
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	00d9      	lsls	r1, r3, #3
 800888e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008892:	00d0      	lsls	r0, r2, #3
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	1911      	adds	r1, r2, r4
 800889a:	65b9      	str	r1, [r7, #88]	; 0x58
 800889c:	416b      	adcs	r3, r5
 800889e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	461a      	mov	r2, r3
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	1891      	adds	r1, r2, r2
 80088ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80088ae:	415b      	adcs	r3, r3
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088ba:	f7f8 f92f 	bl	8000b1c <__aeabi_uldivmod>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4b8c      	ldr	r3, [pc, #560]	; (8008af4 <UART_SetConfig+0x38c>)
 80088c4:	fba3 1302 	umull	r1, r3, r3, r2
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	2164      	movs	r1, #100	; 0x64
 80088cc:	fb01 f303 	mul.w	r3, r1, r3
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	3332      	adds	r3, #50	; 0x32
 80088d6:	4a87      	ldr	r2, [pc, #540]	; (8008af4 <UART_SetConfig+0x38c>)
 80088d8:	fba2 2303 	umull	r2, r3, r2, r3
 80088dc:	095b      	lsrs	r3, r3, #5
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088e4:	441e      	add	r6, r3
 80088e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e8:	4618      	mov	r0, r3
 80088ea:	f04f 0100 	mov.w	r1, #0
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	1894      	adds	r4, r2, r2
 80088f4:	623c      	str	r4, [r7, #32]
 80088f6:	415b      	adcs	r3, r3
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
 80088fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088fe:	1812      	adds	r2, r2, r0
 8008900:	eb41 0303 	adc.w	r3, r1, r3
 8008904:	f04f 0400 	mov.w	r4, #0
 8008908:	f04f 0500 	mov.w	r5, #0
 800890c:	00dd      	lsls	r5, r3, #3
 800890e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008912:	00d4      	lsls	r4, r2, #3
 8008914:	4622      	mov	r2, r4
 8008916:	462b      	mov	r3, r5
 8008918:	1814      	adds	r4, r2, r0
 800891a:	653c      	str	r4, [r7, #80]	; 0x50
 800891c:	414b      	adcs	r3, r1
 800891e:	657b      	str	r3, [r7, #84]	; 0x54
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	461a      	mov	r2, r3
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	1891      	adds	r1, r2, r2
 800892c:	61b9      	str	r1, [r7, #24]
 800892e:	415b      	adcs	r3, r3
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008936:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800893a:	f7f8 f8ef 	bl	8000b1c <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4b6c      	ldr	r3, [pc, #432]	; (8008af4 <UART_SetConfig+0x38c>)
 8008944:	fba3 1302 	umull	r1, r3, r3, r2
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	2164      	movs	r1, #100	; 0x64
 800894c:	fb01 f303 	mul.w	r3, r1, r3
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	3332      	adds	r3, #50	; 0x32
 8008956:	4a67      	ldr	r2, [pc, #412]	; (8008af4 <UART_SetConfig+0x38c>)
 8008958:	fba2 2303 	umull	r2, r3, r2, r3
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	f003 0207 	and.w	r2, r3, #7
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4432      	add	r2, r6
 8008968:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800896a:	e0b9      	b.n	8008ae0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800896c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896e:	461c      	mov	r4, r3
 8008970:	f04f 0500 	mov.w	r5, #0
 8008974:	4622      	mov	r2, r4
 8008976:	462b      	mov	r3, r5
 8008978:	1891      	adds	r1, r2, r2
 800897a:	6139      	str	r1, [r7, #16]
 800897c:	415b      	adcs	r3, r3
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008984:	1912      	adds	r2, r2, r4
 8008986:	eb45 0303 	adc.w	r3, r5, r3
 800898a:	f04f 0000 	mov.w	r0, #0
 800898e:	f04f 0100 	mov.w	r1, #0
 8008992:	00d9      	lsls	r1, r3, #3
 8008994:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008998:	00d0      	lsls	r0, r2, #3
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	eb12 0804 	adds.w	r8, r2, r4
 80089a2:	eb43 0905 	adc.w	r9, r3, r5
 80089a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f04f 0100 	mov.w	r1, #0
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	008b      	lsls	r3, r1, #2
 80089ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089be:	0082      	lsls	r2, r0, #2
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f7f8 f8aa 	bl	8000b1c <__aeabi_uldivmod>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4b49      	ldr	r3, [pc, #292]	; (8008af4 <UART_SetConfig+0x38c>)
 80089ce:	fba3 2302 	umull	r2, r3, r3, r2
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	011e      	lsls	r6, r3, #4
 80089d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089d8:	4618      	mov	r0, r3
 80089da:	f04f 0100 	mov.w	r1, #0
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	1894      	adds	r4, r2, r2
 80089e4:	60bc      	str	r4, [r7, #8]
 80089e6:	415b      	adcs	r3, r3
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089ee:	1812      	adds	r2, r2, r0
 80089f0:	eb41 0303 	adc.w	r3, r1, r3
 80089f4:	f04f 0400 	mov.w	r4, #0
 80089f8:	f04f 0500 	mov.w	r5, #0
 80089fc:	00dd      	lsls	r5, r3, #3
 80089fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a02:	00d4      	lsls	r4, r2, #3
 8008a04:	4622      	mov	r2, r4
 8008a06:	462b      	mov	r3, r5
 8008a08:	1814      	adds	r4, r2, r0
 8008a0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a0c:	414b      	adcs	r3, r1
 8008a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f04f 0100 	mov.w	r1, #0
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	008b      	lsls	r3, r1, #2
 8008a24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a28:	0082      	lsls	r2, r0, #2
 8008a2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a2e:	f7f8 f875 	bl	8000b1c <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <UART_SetConfig+0x38c>)
 8008a38:	fba3 1302 	umull	r1, r3, r3, r2
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	2164      	movs	r1, #100	; 0x64
 8008a40:	fb01 f303 	mul.w	r3, r1, r3
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	3332      	adds	r3, #50	; 0x32
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <UART_SetConfig+0x38c>)
 8008a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a50:	095b      	lsrs	r3, r3, #5
 8008a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a56:	441e      	add	r6, r3
 8008a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f04f 0100 	mov.w	r1, #0
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	1894      	adds	r4, r2, r2
 8008a66:	603c      	str	r4, [r7, #0]
 8008a68:	415b      	adcs	r3, r3
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a70:	1812      	adds	r2, r2, r0
 8008a72:	eb41 0303 	adc.w	r3, r1, r3
 8008a76:	f04f 0400 	mov.w	r4, #0
 8008a7a:	f04f 0500 	mov.w	r5, #0
 8008a7e:	00dd      	lsls	r5, r3, #3
 8008a80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a84:	00d4      	lsls	r4, r2, #3
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	eb12 0a00 	adds.w	sl, r2, r0
 8008a8e:	eb43 0b01 	adc.w	fp, r3, r1
 8008a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	008b      	lsls	r3, r1, #2
 8008aa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008aaa:	0082      	lsls	r2, r0, #2
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f8 f834 	bl	8000b1c <__aeabi_uldivmod>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <UART_SetConfig+0x38c>)
 8008aba:	fba3 1302 	umull	r1, r3, r3, r2
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	2164      	movs	r1, #100	; 0x64
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	3332      	adds	r3, #50	; 0x32
 8008acc:	4a09      	ldr	r2, [pc, #36]	; (8008af4 <UART_SetConfig+0x38c>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4432      	add	r2, r6
 8008ade:	609a      	str	r2, [r3, #8]
}
 8008ae0:	bf00      	nop
 8008ae2:	377c      	adds	r7, #124	; 0x7c
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	bf00      	nop
 8008aec:	40011000 	.word	0x40011000
 8008af0:	40011400 	.word	0x40011400
 8008af4:	51eb851f 	.word	0x51eb851f

08008af8 <__errno>:
 8008af8:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <__errno+0x8>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000080 	.word	0x20000080

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f000 fc6e 	bl	80093f8 <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	080094b4 	.word	0x080094b4
 8008b40:	080094b4 	.word	0x080094b4
 8008b44:	080094b4 	.word	0x080094b4
 8008b48:	080094b8 	.word	0x080094b8

08008b4c <memset>:
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d100      	bne.n	8008b56 <memset+0xa>
 8008b54:	4770      	bx	lr
 8008b56:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5a:	e7f9      	b.n	8008b50 <memset+0x4>

08008b5c <siprintf>:
 8008b5c:	b40e      	push	{r1, r2, r3}
 8008b5e:	b500      	push	{lr}
 8008b60:	b09c      	sub	sp, #112	; 0x70
 8008b62:	ab1d      	add	r3, sp, #116	; 0x74
 8008b64:	9002      	str	r0, [sp, #8]
 8008b66:	9006      	str	r0, [sp, #24]
 8008b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <siprintf+0x38>)
 8008b6e:	9107      	str	r1, [sp, #28]
 8008b70:	9104      	str	r1, [sp, #16]
 8008b72:	4909      	ldr	r1, [pc, #36]	; (8008b98 <siprintf+0x3c>)
 8008b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	a902      	add	r1, sp, #8
 8008b80:	f000 f888 	bl	8008c94 <_svfiprintf_r>
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	b01c      	add	sp, #112	; 0x70
 8008b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b90:	b003      	add	sp, #12
 8008b92:	4770      	bx	lr
 8008b94:	20000080 	.word	0x20000080
 8008b98:	ffff0208 	.word	0xffff0208

08008b9c <_vsiprintf_r>:
 8008b9c:	b500      	push	{lr}
 8008b9e:	b09b      	sub	sp, #108	; 0x6c
 8008ba0:	9100      	str	r1, [sp, #0]
 8008ba2:	9104      	str	r1, [sp, #16]
 8008ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba8:	9105      	str	r1, [sp, #20]
 8008baa:	9102      	str	r1, [sp, #8]
 8008bac:	4905      	ldr	r1, [pc, #20]	; (8008bc4 <_vsiprintf_r+0x28>)
 8008bae:	9103      	str	r1, [sp, #12]
 8008bb0:	4669      	mov	r1, sp
 8008bb2:	f000 f86f 	bl	8008c94 <_svfiprintf_r>
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	b01b      	add	sp, #108	; 0x6c
 8008bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bc2:	bf00      	nop
 8008bc4:	ffff0208 	.word	0xffff0208

08008bc8 <vsiprintf>:
 8008bc8:	4613      	mov	r3, r2
 8008bca:	460a      	mov	r2, r1
 8008bcc:	4601      	mov	r1, r0
 8008bce:	4802      	ldr	r0, [pc, #8]	; (8008bd8 <vsiprintf+0x10>)
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	f7ff bfe3 	b.w	8008b9c <_vsiprintf_r>
 8008bd6:	bf00      	nop
 8008bd8:	20000080 	.word	0x20000080

08008bdc <__ssputs_r>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	688e      	ldr	r6, [r1, #8]
 8008be2:	429e      	cmp	r6, r3
 8008be4:	4682      	mov	sl, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4690      	mov	r8, r2
 8008bea:	461f      	mov	r7, r3
 8008bec:	d838      	bhi.n	8008c60 <__ssputs_r+0x84>
 8008bee:	898a      	ldrh	r2, [r1, #12]
 8008bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf4:	d032      	beq.n	8008c5c <__ssputs_r+0x80>
 8008bf6:	6825      	ldr	r5, [r4, #0]
 8008bf8:	6909      	ldr	r1, [r1, #16]
 8008bfa:	eba5 0901 	sub.w	r9, r5, r1
 8008bfe:	6965      	ldr	r5, [r4, #20]
 8008c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c08:	3301      	adds	r3, #1
 8008c0a:	444b      	add	r3, r9
 8008c0c:	106d      	asrs	r5, r5, #1
 8008c0e:	429d      	cmp	r5, r3
 8008c10:	bf38      	it	cc
 8008c12:	461d      	movcc	r5, r3
 8008c14:	0553      	lsls	r3, r2, #21
 8008c16:	d531      	bpl.n	8008c7c <__ssputs_r+0xa0>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f000 fb47 	bl	80092ac <_malloc_r>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	b950      	cbnz	r0, 8008c38 <__ssputs_r+0x5c>
 8008c22:	230c      	movs	r3, #12
 8008c24:	f8ca 3000 	str.w	r3, [sl]
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	6921      	ldr	r1, [r4, #16]
 8008c3a:	464a      	mov	r2, r9
 8008c3c:	f000 fabe 	bl	80091bc <memcpy>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	6126      	str	r6, [r4, #16]
 8008c4e:	6165      	str	r5, [r4, #20]
 8008c50:	444e      	add	r6, r9
 8008c52:	eba5 0509 	sub.w	r5, r5, r9
 8008c56:	6026      	str	r6, [r4, #0]
 8008c58:	60a5      	str	r5, [r4, #8]
 8008c5a:	463e      	mov	r6, r7
 8008c5c:	42be      	cmp	r6, r7
 8008c5e:	d900      	bls.n	8008c62 <__ssputs_r+0x86>
 8008c60:	463e      	mov	r6, r7
 8008c62:	4632      	mov	r2, r6
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	4641      	mov	r1, r8
 8008c68:	f000 fab6 	bl	80091d8 <memmove>
 8008c6c:	68a3      	ldr	r3, [r4, #8]
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	1b9b      	subs	r3, r3, r6
 8008c72:	4432      	add	r2, r6
 8008c74:	60a3      	str	r3, [r4, #8]
 8008c76:	6022      	str	r2, [r4, #0]
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e7db      	b.n	8008c34 <__ssputs_r+0x58>
 8008c7c:	462a      	mov	r2, r5
 8008c7e:	f000 fb6f 	bl	8009360 <_realloc_r>
 8008c82:	4606      	mov	r6, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1e1      	bne.n	8008c4c <__ssputs_r+0x70>
 8008c88:	6921      	ldr	r1, [r4, #16]
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	f000 fabe 	bl	800920c <_free_r>
 8008c90:	e7c7      	b.n	8008c22 <__ssputs_r+0x46>
	...

08008c94 <_svfiprintf_r>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	4698      	mov	r8, r3
 8008c9a:	898b      	ldrh	r3, [r1, #12]
 8008c9c:	061b      	lsls	r3, r3, #24
 8008c9e:	b09d      	sub	sp, #116	; 0x74
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	d50e      	bpl.n	8008cc6 <_svfiprintf_r+0x32>
 8008ca8:	690b      	ldr	r3, [r1, #16]
 8008caa:	b963      	cbnz	r3, 8008cc6 <_svfiprintf_r+0x32>
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	f000 fafd 	bl	80092ac <_malloc_r>
 8008cb2:	6028      	str	r0, [r5, #0]
 8008cb4:	6128      	str	r0, [r5, #16]
 8008cb6:	b920      	cbnz	r0, 8008cc2 <_svfiprintf_r+0x2e>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e0d1      	b.n	8008e66 <_svfiprintf_r+0x1d2>
 8008cc2:	2340      	movs	r3, #64	; 0x40
 8008cc4:	616b      	str	r3, [r5, #20]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	2320      	movs	r3, #32
 8008ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd4:	2330      	movs	r3, #48	; 0x30
 8008cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e80 <_svfiprintf_r+0x1ec>
 8008cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cde:	f04f 0901 	mov.w	r9, #1
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	469a      	mov	sl, r3
 8008ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cea:	b10a      	cbz	r2, 8008cf0 <_svfiprintf_r+0x5c>
 8008cec:	2a25      	cmp	r2, #37	; 0x25
 8008cee:	d1f9      	bne.n	8008ce4 <_svfiprintf_r+0x50>
 8008cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf4:	d00b      	beq.n	8008d0e <_svfiprintf_r+0x7a>
 8008cf6:	465b      	mov	r3, fp
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff ff6d 	bl	8008bdc <__ssputs_r>
 8008d02:	3001      	adds	r0, #1
 8008d04:	f000 80aa 	beq.w	8008e5c <_svfiprintf_r+0x1c8>
 8008d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d0a:	445a      	add	r2, fp
 8008d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80a2 	beq.w	8008e5c <_svfiprintf_r+0x1c8>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d22:	f10a 0a01 	add.w	sl, sl, #1
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	9307      	str	r3, [sp, #28]
 8008d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d30:	4654      	mov	r4, sl
 8008d32:	2205      	movs	r2, #5
 8008d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d38:	4851      	ldr	r0, [pc, #324]	; (8008e80 <_svfiprintf_r+0x1ec>)
 8008d3a:	f7f7 fa59 	bl	80001f0 <memchr>
 8008d3e:	9a04      	ldr	r2, [sp, #16]
 8008d40:	b9d8      	cbnz	r0, 8008d7a <_svfiprintf_r+0xe6>
 8008d42:	06d0      	lsls	r0, r2, #27
 8008d44:	bf44      	itt	mi
 8008d46:	2320      	movmi	r3, #32
 8008d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4c:	0711      	lsls	r1, r2, #28
 8008d4e:	bf44      	itt	mi
 8008d50:	232b      	movmi	r3, #43	; 0x2b
 8008d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d56:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5c:	d015      	beq.n	8008d8a <_svfiprintf_r+0xf6>
 8008d5e:	9a07      	ldr	r2, [sp, #28]
 8008d60:	4654      	mov	r4, sl
 8008d62:	2000      	movs	r0, #0
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6e:	3b30      	subs	r3, #48	; 0x30
 8008d70:	2b09      	cmp	r3, #9
 8008d72:	d94e      	bls.n	8008e12 <_svfiprintf_r+0x17e>
 8008d74:	b1b0      	cbz	r0, 8008da4 <_svfiprintf_r+0x110>
 8008d76:	9207      	str	r2, [sp, #28]
 8008d78:	e014      	b.n	8008da4 <_svfiprintf_r+0x110>
 8008d7a:	eba0 0308 	sub.w	r3, r0, r8
 8008d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d82:	4313      	orrs	r3, r2
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	46a2      	mov	sl, r4
 8008d88:	e7d2      	b.n	8008d30 <_svfiprintf_r+0x9c>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	1d19      	adds	r1, r3, #4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	9103      	str	r1, [sp, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bfbb      	ittet	lt
 8008d96:	425b      	neglt	r3, r3
 8008d98:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9c:	9307      	strge	r3, [sp, #28]
 8008d9e:	9307      	strlt	r3, [sp, #28]
 8008da0:	bfb8      	it	lt
 8008da2:	9204      	strlt	r2, [sp, #16]
 8008da4:	7823      	ldrb	r3, [r4, #0]
 8008da6:	2b2e      	cmp	r3, #46	; 0x2e
 8008da8:	d10c      	bne.n	8008dc4 <_svfiprintf_r+0x130>
 8008daa:	7863      	ldrb	r3, [r4, #1]
 8008dac:	2b2a      	cmp	r3, #42	; 0x2a
 8008dae:	d135      	bne.n	8008e1c <_svfiprintf_r+0x188>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9203      	str	r2, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bfb8      	it	lt
 8008dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dc0:	3402      	adds	r4, #2
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e90 <_svfiprintf_r+0x1fc>
 8008dc8:	7821      	ldrb	r1, [r4, #0]
 8008dca:	2203      	movs	r2, #3
 8008dcc:	4650      	mov	r0, sl
 8008dce:	f7f7 fa0f 	bl	80001f0 <memchr>
 8008dd2:	b140      	cbz	r0, 8008de6 <_svfiprintf_r+0x152>
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	eba0 000a 	sub.w	r0, r0, sl
 8008dda:	fa03 f000 	lsl.w	r0, r3, r0
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	4303      	orrs	r3, r0
 8008de2:	3401      	adds	r4, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	4826      	ldr	r0, [pc, #152]	; (8008e84 <_svfiprintf_r+0x1f0>)
 8008dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df0:	2206      	movs	r2, #6
 8008df2:	f7f7 f9fd 	bl	80001f0 <memchr>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d038      	beq.n	8008e6c <_svfiprintf_r+0x1d8>
 8008dfa:	4b23      	ldr	r3, [pc, #140]	; (8008e88 <_svfiprintf_r+0x1f4>)
 8008dfc:	bb1b      	cbnz	r3, 8008e46 <_svfiprintf_r+0x1b2>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	3307      	adds	r3, #7
 8008e02:	f023 0307 	bic.w	r3, r3, #7
 8008e06:	3308      	adds	r3, #8
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0c:	4433      	add	r3, r6
 8008e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e10:	e767      	b.n	8008ce2 <_svfiprintf_r+0x4e>
 8008e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e16:	460c      	mov	r4, r1
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e7a5      	b.n	8008d68 <_svfiprintf_r+0xd4>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	3401      	adds	r4, #1
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	4619      	mov	r1, r3
 8008e24:	f04f 0c0a 	mov.w	ip, #10
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2e:	3a30      	subs	r2, #48	; 0x30
 8008e30:	2a09      	cmp	r2, #9
 8008e32:	d903      	bls.n	8008e3c <_svfiprintf_r+0x1a8>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0c5      	beq.n	8008dc4 <_svfiprintf_r+0x130>
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	e7c3      	b.n	8008dc4 <_svfiprintf_r+0x130>
 8008e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e40:	4604      	mov	r4, r0
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7f0      	b.n	8008e28 <_svfiprintf_r+0x194>
 8008e46:	ab03      	add	r3, sp, #12
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <_svfiprintf_r+0x1f8>)
 8008e4e:	a904      	add	r1, sp, #16
 8008e50:	4638      	mov	r0, r7
 8008e52:	f3af 8000 	nop.w
 8008e56:	1c42      	adds	r2, r0, #1
 8008e58:	4606      	mov	r6, r0
 8008e5a:	d1d6      	bne.n	8008e0a <_svfiprintf_r+0x176>
 8008e5c:	89ab      	ldrh	r3, [r5, #12]
 8008e5e:	065b      	lsls	r3, r3, #25
 8008e60:	f53f af2c 	bmi.w	8008cbc <_svfiprintf_r+0x28>
 8008e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e66:	b01d      	add	sp, #116	; 0x74
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	ab03      	add	r3, sp, #12
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <_svfiprintf_r+0x1f8>)
 8008e74:	a904      	add	r1, sp, #16
 8008e76:	4638      	mov	r0, r7
 8008e78:	f000 f87a 	bl	8008f70 <_printf_i>
 8008e7c:	e7eb      	b.n	8008e56 <_svfiprintf_r+0x1c2>
 8008e7e:	bf00      	nop
 8008e80:	08009478 	.word	0x08009478
 8008e84:	08009482 	.word	0x08009482
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008bdd 	.word	0x08008bdd
 8008e90:	0800947e 	.word	0x0800947e

08008e94 <_printf_common>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	4616      	mov	r6, r2
 8008e9a:	4699      	mov	r9, r3
 8008e9c:	688a      	ldr	r2, [r1, #8]
 8008e9e:	690b      	ldr	r3, [r1, #16]
 8008ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	bfb8      	it	lt
 8008ea8:	4613      	movlt	r3, r2
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b10a      	cbz	r2, 8008eba <_printf_common+0x26>
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	0699      	lsls	r1, r3, #26
 8008ebe:	bf42      	ittt	mi
 8008ec0:	6833      	ldrmi	r3, [r6, #0]
 8008ec2:	3302      	addmi	r3, #2
 8008ec4:	6033      	strmi	r3, [r6, #0]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d106      	bne.n	8008edc <_printf_common+0x48>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	6832      	ldr	r2, [r6, #0]
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc26      	bgt.n	8008f2a <_printf_common+0x96>
 8008edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ee0:	1e13      	subs	r3, r2, #0
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	bf18      	it	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	0692      	lsls	r2, r2, #26
 8008eea:	d42b      	bmi.n	8008f44 <_printf_common+0xb0>
 8008eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d01e      	beq.n	8008f38 <_printf_common+0xa4>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	68e5      	ldr	r5, [r4, #12]
 8008efe:	6832      	ldr	r2, [r6, #0]
 8008f00:	f003 0306 	and.w	r3, r3, #6
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	bf08      	it	eq
 8008f08:	1aad      	subeq	r5, r5, r2
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	6922      	ldr	r2, [r4, #16]
 8008f0e:	bf0c      	ite	eq
 8008f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f14:	2500      	movne	r5, #0
 8008f16:	4293      	cmp	r3, r2
 8008f18:	bfc4      	itt	gt
 8008f1a:	1a9b      	subgt	r3, r3, r2
 8008f1c:	18ed      	addgt	r5, r5, r3
 8008f1e:	2600      	movs	r6, #0
 8008f20:	341a      	adds	r4, #26
 8008f22:	42b5      	cmp	r5, r6
 8008f24:	d11a      	bne.n	8008f5c <_printf_common+0xc8>
 8008f26:	2000      	movs	r0, #0
 8008f28:	e008      	b.n	8008f3c <_printf_common+0xa8>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4638      	mov	r0, r7
 8008f32:	47c0      	blx	r8
 8008f34:	3001      	adds	r0, #1
 8008f36:	d103      	bne.n	8008f40 <_printf_common+0xac>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f40:	3501      	adds	r5, #1
 8008f42:	e7c6      	b.n	8008ed2 <_printf_common+0x3e>
 8008f44:	18e1      	adds	r1, r4, r3
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	2030      	movs	r0, #48	; 0x30
 8008f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f4e:	4422      	add	r2, r4
 8008f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f58:	3302      	adds	r3, #2
 8008f5a:	e7c7      	b.n	8008eec <_printf_common+0x58>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4649      	mov	r1, r9
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	3001      	adds	r0, #1
 8008f68:	d0e6      	beq.n	8008f38 <_printf_common+0xa4>
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7d9      	b.n	8008f22 <_printf_common+0x8e>
	...

08008f70 <_printf_i>:
 8008f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	460c      	mov	r4, r1
 8008f76:	4691      	mov	r9, r2
 8008f78:	7e27      	ldrb	r7, [r4, #24]
 8008f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f7c:	2f78      	cmp	r7, #120	; 0x78
 8008f7e:	4680      	mov	r8, r0
 8008f80:	469a      	mov	sl, r3
 8008f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f86:	d807      	bhi.n	8008f98 <_printf_i+0x28>
 8008f88:	2f62      	cmp	r7, #98	; 0x62
 8008f8a:	d80a      	bhi.n	8008fa2 <_printf_i+0x32>
 8008f8c:	2f00      	cmp	r7, #0
 8008f8e:	f000 80d8 	beq.w	8009142 <_printf_i+0x1d2>
 8008f92:	2f58      	cmp	r7, #88	; 0x58
 8008f94:	f000 80a3 	beq.w	80090de <_printf_i+0x16e>
 8008f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fa0:	e03a      	b.n	8009018 <_printf_i+0xa8>
 8008fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fa6:	2b15      	cmp	r3, #21
 8008fa8:	d8f6      	bhi.n	8008f98 <_printf_i+0x28>
 8008faa:	a001      	add	r0, pc, #4	; (adr r0, 8008fb0 <_printf_i+0x40>)
 8008fac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	08008f99 	.word	0x08008f99
 8008fbc:	08008f99 	.word	0x08008f99
 8008fc0:	08008f99 	.word	0x08008f99
 8008fc4:	08008f99 	.word	0x08008f99
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f99 	.word	0x08008f99
 8008fd0:	08008f99 	.word	0x08008f99
 8008fd4:	08008f99 	.word	0x08008f99
 8008fd8:	08008f99 	.word	0x08008f99
 8008fdc:	08009129 	.word	0x08009129
 8008fe0:	0800904d 	.word	0x0800904d
 8008fe4:	0800910b 	.word	0x0800910b
 8008fe8:	08008f99 	.word	0x08008f99
 8008fec:	08008f99 	.word	0x08008f99
 8008ff0:	0800914b 	.word	0x0800914b
 8008ff4:	08008f99 	.word	0x08008f99
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008f99 	.word	0x08008f99
 8009000:	08008f99 	.word	0x08008f99
 8009004:	08009113 	.word	0x08009113
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	600a      	str	r2, [r1, #0]
 8009010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e0a3      	b.n	8009164 <_printf_i+0x1f4>
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	6808      	ldr	r0, [r1, #0]
 8009020:	062e      	lsls	r6, r5, #24
 8009022:	f100 0304 	add.w	r3, r0, #4
 8009026:	d50a      	bpl.n	800903e <_printf_i+0xce>
 8009028:	6805      	ldr	r5, [r0, #0]
 800902a:	600b      	str	r3, [r1, #0]
 800902c:	2d00      	cmp	r5, #0
 800902e:	da03      	bge.n	8009038 <_printf_i+0xc8>
 8009030:	232d      	movs	r3, #45	; 0x2d
 8009032:	426d      	negs	r5, r5
 8009034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009038:	485e      	ldr	r0, [pc, #376]	; (80091b4 <_printf_i+0x244>)
 800903a:	230a      	movs	r3, #10
 800903c:	e019      	b.n	8009072 <_printf_i+0x102>
 800903e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009042:	6805      	ldr	r5, [r0, #0]
 8009044:	600b      	str	r3, [r1, #0]
 8009046:	bf18      	it	ne
 8009048:	b22d      	sxthne	r5, r5
 800904a:	e7ef      	b.n	800902c <_printf_i+0xbc>
 800904c:	680b      	ldr	r3, [r1, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	1d18      	adds	r0, r3, #4
 8009052:	6008      	str	r0, [r1, #0]
 8009054:	0628      	lsls	r0, r5, #24
 8009056:	d501      	bpl.n	800905c <_printf_i+0xec>
 8009058:	681d      	ldr	r5, [r3, #0]
 800905a:	e002      	b.n	8009062 <_printf_i+0xf2>
 800905c:	0669      	lsls	r1, r5, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0xe8>
 8009060:	881d      	ldrh	r5, [r3, #0]
 8009062:	4854      	ldr	r0, [pc, #336]	; (80091b4 <_printf_i+0x244>)
 8009064:	2f6f      	cmp	r7, #111	; 0x6f
 8009066:	bf0c      	ite	eq
 8009068:	2308      	moveq	r3, #8
 800906a:	230a      	movne	r3, #10
 800906c:	2100      	movs	r1, #0
 800906e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009072:	6866      	ldr	r6, [r4, #4]
 8009074:	60a6      	str	r6, [r4, #8]
 8009076:	2e00      	cmp	r6, #0
 8009078:	bfa2      	ittt	ge
 800907a:	6821      	ldrge	r1, [r4, #0]
 800907c:	f021 0104 	bicge.w	r1, r1, #4
 8009080:	6021      	strge	r1, [r4, #0]
 8009082:	b90d      	cbnz	r5, 8009088 <_printf_i+0x118>
 8009084:	2e00      	cmp	r6, #0
 8009086:	d04d      	beq.n	8009124 <_printf_i+0x1b4>
 8009088:	4616      	mov	r6, r2
 800908a:	fbb5 f1f3 	udiv	r1, r5, r3
 800908e:	fb03 5711 	mls	r7, r3, r1, r5
 8009092:	5dc7      	ldrb	r7, [r0, r7]
 8009094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009098:	462f      	mov	r7, r5
 800909a:	42bb      	cmp	r3, r7
 800909c:	460d      	mov	r5, r1
 800909e:	d9f4      	bls.n	800908a <_printf_i+0x11a>
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d10b      	bne.n	80090bc <_printf_i+0x14c>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	07df      	lsls	r7, r3, #31
 80090a8:	d508      	bpl.n	80090bc <_printf_i+0x14c>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4299      	cmp	r1, r3
 80090b0:	bfde      	ittt	le
 80090b2:	2330      	movle	r3, #48	; 0x30
 80090b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090bc:	1b92      	subs	r2, r2, r6
 80090be:	6122      	str	r2, [r4, #16]
 80090c0:	f8cd a000 	str.w	sl, [sp]
 80090c4:	464b      	mov	r3, r9
 80090c6:	aa03      	add	r2, sp, #12
 80090c8:	4621      	mov	r1, r4
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7ff fee2 	bl	8008e94 <_printf_common>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d14c      	bne.n	800916e <_printf_i+0x1fe>
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	b004      	add	sp, #16
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	4835      	ldr	r0, [pc, #212]	; (80091b4 <_printf_i+0x244>)
 80090e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	680e      	ldr	r6, [r1, #0]
 80090e8:	061f      	lsls	r7, r3, #24
 80090ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80090ee:	600e      	str	r6, [r1, #0]
 80090f0:	d514      	bpl.n	800911c <_printf_i+0x1ac>
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	bf44      	itt	mi
 80090f6:	f043 0320 	orrmi.w	r3, r3, #32
 80090fa:	6023      	strmi	r3, [r4, #0]
 80090fc:	b91d      	cbnz	r5, 8009106 <_printf_i+0x196>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f023 0320 	bic.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2310      	movs	r3, #16
 8009108:	e7b0      	b.n	800906c <_printf_i+0xfc>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f043 0320 	orr.w	r3, r3, #32
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	2378      	movs	r3, #120	; 0x78
 8009114:	4828      	ldr	r0, [pc, #160]	; (80091b8 <_printf_i+0x248>)
 8009116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800911a:	e7e3      	b.n	80090e4 <_printf_i+0x174>
 800911c:	065e      	lsls	r6, r3, #25
 800911e:	bf48      	it	mi
 8009120:	b2ad      	uxthmi	r5, r5
 8009122:	e7e6      	b.n	80090f2 <_printf_i+0x182>
 8009124:	4616      	mov	r6, r2
 8009126:	e7bb      	b.n	80090a0 <_printf_i+0x130>
 8009128:	680b      	ldr	r3, [r1, #0]
 800912a:	6826      	ldr	r6, [r4, #0]
 800912c:	6960      	ldr	r0, [r4, #20]
 800912e:	1d1d      	adds	r5, r3, #4
 8009130:	600d      	str	r5, [r1, #0]
 8009132:	0635      	lsls	r5, r6, #24
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	d501      	bpl.n	800913c <_printf_i+0x1cc>
 8009138:	6018      	str	r0, [r3, #0]
 800913a:	e002      	b.n	8009142 <_printf_i+0x1d2>
 800913c:	0671      	lsls	r1, r6, #25
 800913e:	d5fb      	bpl.n	8009138 <_printf_i+0x1c8>
 8009140:	8018      	strh	r0, [r3, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	4616      	mov	r6, r2
 8009148:	e7ba      	b.n	80090c0 <_printf_i+0x150>
 800914a:	680b      	ldr	r3, [r1, #0]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	600a      	str	r2, [r1, #0]
 8009150:	681e      	ldr	r6, [r3, #0]
 8009152:	6862      	ldr	r2, [r4, #4]
 8009154:	2100      	movs	r1, #0
 8009156:	4630      	mov	r0, r6
 8009158:	f7f7 f84a 	bl	80001f0 <memchr>
 800915c:	b108      	cbz	r0, 8009162 <_printf_i+0x1f2>
 800915e:	1b80      	subs	r0, r0, r6
 8009160:	6060      	str	r0, [r4, #4]
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	6123      	str	r3, [r4, #16]
 8009166:	2300      	movs	r3, #0
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916c:	e7a8      	b.n	80090c0 <_printf_i+0x150>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	4632      	mov	r2, r6
 8009172:	4649      	mov	r1, r9
 8009174:	4640      	mov	r0, r8
 8009176:	47d0      	blx	sl
 8009178:	3001      	adds	r0, #1
 800917a:	d0ab      	beq.n	80090d4 <_printf_i+0x164>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	079b      	lsls	r3, r3, #30
 8009180:	d413      	bmi.n	80091aa <_printf_i+0x23a>
 8009182:	68e0      	ldr	r0, [r4, #12]
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	4298      	cmp	r0, r3
 8009188:	bfb8      	it	lt
 800918a:	4618      	movlt	r0, r3
 800918c:	e7a4      	b.n	80090d8 <_printf_i+0x168>
 800918e:	2301      	movs	r3, #1
 8009190:	4632      	mov	r2, r6
 8009192:	4649      	mov	r1, r9
 8009194:	4640      	mov	r0, r8
 8009196:	47d0      	blx	sl
 8009198:	3001      	adds	r0, #1
 800919a:	d09b      	beq.n	80090d4 <_printf_i+0x164>
 800919c:	3501      	adds	r5, #1
 800919e:	68e3      	ldr	r3, [r4, #12]
 80091a0:	9903      	ldr	r1, [sp, #12]
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	42ab      	cmp	r3, r5
 80091a6:	dcf2      	bgt.n	800918e <_printf_i+0x21e>
 80091a8:	e7eb      	b.n	8009182 <_printf_i+0x212>
 80091aa:	2500      	movs	r5, #0
 80091ac:	f104 0619 	add.w	r6, r4, #25
 80091b0:	e7f5      	b.n	800919e <_printf_i+0x22e>
 80091b2:	bf00      	nop
 80091b4:	08009489 	.word	0x08009489
 80091b8:	0800949a 	.word	0x0800949a

080091bc <memcpy>:
 80091bc:	440a      	add	r2, r1
 80091be:	4291      	cmp	r1, r2
 80091c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091c4:	d100      	bne.n	80091c8 <memcpy+0xc>
 80091c6:	4770      	bx	lr
 80091c8:	b510      	push	{r4, lr}
 80091ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091d2:	4291      	cmp	r1, r2
 80091d4:	d1f9      	bne.n	80091ca <memcpy+0xe>
 80091d6:	bd10      	pop	{r4, pc}

080091d8 <memmove>:
 80091d8:	4288      	cmp	r0, r1
 80091da:	b510      	push	{r4, lr}
 80091dc:	eb01 0402 	add.w	r4, r1, r2
 80091e0:	d902      	bls.n	80091e8 <memmove+0x10>
 80091e2:	4284      	cmp	r4, r0
 80091e4:	4623      	mov	r3, r4
 80091e6:	d807      	bhi.n	80091f8 <memmove+0x20>
 80091e8:	1e43      	subs	r3, r0, #1
 80091ea:	42a1      	cmp	r1, r4
 80091ec:	d008      	beq.n	8009200 <memmove+0x28>
 80091ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091f6:	e7f8      	b.n	80091ea <memmove+0x12>
 80091f8:	4402      	add	r2, r0
 80091fa:	4601      	mov	r1, r0
 80091fc:	428a      	cmp	r2, r1
 80091fe:	d100      	bne.n	8009202 <memmove+0x2a>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920a:	e7f7      	b.n	80091fc <memmove+0x24>

0800920c <_free_r>:
 800920c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800920e:	2900      	cmp	r1, #0
 8009210:	d048      	beq.n	80092a4 <_free_r+0x98>
 8009212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009216:	9001      	str	r0, [sp, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f1a1 0404 	sub.w	r4, r1, #4
 800921e:	bfb8      	it	lt
 8009220:	18e4      	addlt	r4, r4, r3
 8009222:	f000 f8d3 	bl	80093cc <__malloc_lock>
 8009226:	4a20      	ldr	r2, [pc, #128]	; (80092a8 <_free_r+0x9c>)
 8009228:	9801      	ldr	r0, [sp, #4]
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	4615      	mov	r5, r2
 800922e:	b933      	cbnz	r3, 800923e <_free_r+0x32>
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	6014      	str	r4, [r2, #0]
 8009234:	b003      	add	sp, #12
 8009236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800923a:	f000 b8cd 	b.w	80093d8 <__malloc_unlock>
 800923e:	42a3      	cmp	r3, r4
 8009240:	d90b      	bls.n	800925a <_free_r+0x4e>
 8009242:	6821      	ldr	r1, [r4, #0]
 8009244:	1862      	adds	r2, r4, r1
 8009246:	4293      	cmp	r3, r2
 8009248:	bf04      	itt	eq
 800924a:	681a      	ldreq	r2, [r3, #0]
 800924c:	685b      	ldreq	r3, [r3, #4]
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	bf04      	itt	eq
 8009252:	1852      	addeq	r2, r2, r1
 8009254:	6022      	streq	r2, [r4, #0]
 8009256:	602c      	str	r4, [r5, #0]
 8009258:	e7ec      	b.n	8009234 <_free_r+0x28>
 800925a:	461a      	mov	r2, r3
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b10b      	cbz	r3, 8009264 <_free_r+0x58>
 8009260:	42a3      	cmp	r3, r4
 8009262:	d9fa      	bls.n	800925a <_free_r+0x4e>
 8009264:	6811      	ldr	r1, [r2, #0]
 8009266:	1855      	adds	r5, r2, r1
 8009268:	42a5      	cmp	r5, r4
 800926a:	d10b      	bne.n	8009284 <_free_r+0x78>
 800926c:	6824      	ldr	r4, [r4, #0]
 800926e:	4421      	add	r1, r4
 8009270:	1854      	adds	r4, r2, r1
 8009272:	42a3      	cmp	r3, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	d1dd      	bne.n	8009234 <_free_r+0x28>
 8009278:	681c      	ldr	r4, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	6053      	str	r3, [r2, #4]
 800927e:	4421      	add	r1, r4
 8009280:	6011      	str	r1, [r2, #0]
 8009282:	e7d7      	b.n	8009234 <_free_r+0x28>
 8009284:	d902      	bls.n	800928c <_free_r+0x80>
 8009286:	230c      	movs	r3, #12
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	e7d3      	b.n	8009234 <_free_r+0x28>
 800928c:	6825      	ldr	r5, [r4, #0]
 800928e:	1961      	adds	r1, r4, r5
 8009290:	428b      	cmp	r3, r1
 8009292:	bf04      	itt	eq
 8009294:	6819      	ldreq	r1, [r3, #0]
 8009296:	685b      	ldreq	r3, [r3, #4]
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	bf04      	itt	eq
 800929c:	1949      	addeq	r1, r1, r5
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	6054      	str	r4, [r2, #4]
 80092a2:	e7c7      	b.n	8009234 <_free_r+0x28>
 80092a4:	b003      	add	sp, #12
 80092a6:	bd30      	pop	{r4, r5, pc}
 80092a8:	200001d4 	.word	0x200001d4

080092ac <_malloc_r>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	1ccd      	adds	r5, r1, #3
 80092b0:	f025 0503 	bic.w	r5, r5, #3
 80092b4:	3508      	adds	r5, #8
 80092b6:	2d0c      	cmp	r5, #12
 80092b8:	bf38      	it	cc
 80092ba:	250c      	movcc	r5, #12
 80092bc:	2d00      	cmp	r5, #0
 80092be:	4606      	mov	r6, r0
 80092c0:	db01      	blt.n	80092c6 <_malloc_r+0x1a>
 80092c2:	42a9      	cmp	r1, r5
 80092c4:	d903      	bls.n	80092ce <_malloc_r+0x22>
 80092c6:	230c      	movs	r3, #12
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	2000      	movs	r0, #0
 80092cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ce:	f000 f87d 	bl	80093cc <__malloc_lock>
 80092d2:	4921      	ldr	r1, [pc, #132]	; (8009358 <_malloc_r+0xac>)
 80092d4:	680a      	ldr	r2, [r1, #0]
 80092d6:	4614      	mov	r4, r2
 80092d8:	b99c      	cbnz	r4, 8009302 <_malloc_r+0x56>
 80092da:	4f20      	ldr	r7, [pc, #128]	; (800935c <_malloc_r+0xb0>)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	b923      	cbnz	r3, 80092ea <_malloc_r+0x3e>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4630      	mov	r0, r6
 80092e4:	f000 f862 	bl	80093ac <_sbrk_r>
 80092e8:	6038      	str	r0, [r7, #0]
 80092ea:	4629      	mov	r1, r5
 80092ec:	4630      	mov	r0, r6
 80092ee:	f000 f85d 	bl	80093ac <_sbrk_r>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d123      	bne.n	800933e <_malloc_r+0x92>
 80092f6:	230c      	movs	r3, #12
 80092f8:	6033      	str	r3, [r6, #0]
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f86c 	bl	80093d8 <__malloc_unlock>
 8009300:	e7e3      	b.n	80092ca <_malloc_r+0x1e>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	1b5b      	subs	r3, r3, r5
 8009306:	d417      	bmi.n	8009338 <_malloc_r+0x8c>
 8009308:	2b0b      	cmp	r3, #11
 800930a:	d903      	bls.n	8009314 <_malloc_r+0x68>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	441c      	add	r4, r3
 8009310:	6025      	str	r5, [r4, #0]
 8009312:	e004      	b.n	800931e <_malloc_r+0x72>
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	42a2      	cmp	r2, r4
 8009318:	bf0c      	ite	eq
 800931a:	600b      	streq	r3, [r1, #0]
 800931c:	6053      	strne	r3, [r2, #4]
 800931e:	4630      	mov	r0, r6
 8009320:	f000 f85a 	bl	80093d8 <__malloc_unlock>
 8009324:	f104 000b 	add.w	r0, r4, #11
 8009328:	1d23      	adds	r3, r4, #4
 800932a:	f020 0007 	bic.w	r0, r0, #7
 800932e:	1ac2      	subs	r2, r0, r3
 8009330:	d0cc      	beq.n	80092cc <_malloc_r+0x20>
 8009332:	1a1b      	subs	r3, r3, r0
 8009334:	50a3      	str	r3, [r4, r2]
 8009336:	e7c9      	b.n	80092cc <_malloc_r+0x20>
 8009338:	4622      	mov	r2, r4
 800933a:	6864      	ldr	r4, [r4, #4]
 800933c:	e7cc      	b.n	80092d8 <_malloc_r+0x2c>
 800933e:	1cc4      	adds	r4, r0, #3
 8009340:	f024 0403 	bic.w	r4, r4, #3
 8009344:	42a0      	cmp	r0, r4
 8009346:	d0e3      	beq.n	8009310 <_malloc_r+0x64>
 8009348:	1a21      	subs	r1, r4, r0
 800934a:	4630      	mov	r0, r6
 800934c:	f000 f82e 	bl	80093ac <_sbrk_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d1dd      	bne.n	8009310 <_malloc_r+0x64>
 8009354:	e7cf      	b.n	80092f6 <_malloc_r+0x4a>
 8009356:	bf00      	nop
 8009358:	200001d4 	.word	0x200001d4
 800935c:	200001d8 	.word	0x200001d8

08009360 <_realloc_r>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	4607      	mov	r7, r0
 8009364:	4614      	mov	r4, r2
 8009366:	460e      	mov	r6, r1
 8009368:	b921      	cbnz	r1, 8009374 <_realloc_r+0x14>
 800936a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800936e:	4611      	mov	r1, r2
 8009370:	f7ff bf9c 	b.w	80092ac <_malloc_r>
 8009374:	b922      	cbnz	r2, 8009380 <_realloc_r+0x20>
 8009376:	f7ff ff49 	bl	800920c <_free_r>
 800937a:	4625      	mov	r5, r4
 800937c:	4628      	mov	r0, r5
 800937e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009380:	f000 f830 	bl	80093e4 <_malloc_usable_size_r>
 8009384:	42a0      	cmp	r0, r4
 8009386:	d20f      	bcs.n	80093a8 <_realloc_r+0x48>
 8009388:	4621      	mov	r1, r4
 800938a:	4638      	mov	r0, r7
 800938c:	f7ff ff8e 	bl	80092ac <_malloc_r>
 8009390:	4605      	mov	r5, r0
 8009392:	2800      	cmp	r0, #0
 8009394:	d0f2      	beq.n	800937c <_realloc_r+0x1c>
 8009396:	4631      	mov	r1, r6
 8009398:	4622      	mov	r2, r4
 800939a:	f7ff ff0f 	bl	80091bc <memcpy>
 800939e:	4631      	mov	r1, r6
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff ff33 	bl	800920c <_free_r>
 80093a6:	e7e9      	b.n	800937c <_realloc_r+0x1c>
 80093a8:	4635      	mov	r5, r6
 80093aa:	e7e7      	b.n	800937c <_realloc_r+0x1c>

080093ac <_sbrk_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d06      	ldr	r5, [pc, #24]	; (80093c8 <_sbrk_r+0x1c>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7fa f9a0 	bl	80036fc <_sbrk>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_sbrk_r+0x1a>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_sbrk_r+0x1a>
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	200004cc 	.word	0x200004cc

080093cc <__malloc_lock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_lock+0x8>)
 80093ce:	f000 b811 	b.w	80093f4 <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	200004d4 	.word	0x200004d4

080093d8 <__malloc_unlock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__malloc_unlock+0x8>)
 80093da:	f000 b80c 	b.w	80093f6 <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	200004d4 	.word	0x200004d4

080093e4 <_malloc_usable_size_r>:
 80093e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e8:	1f18      	subs	r0, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bfbc      	itt	lt
 80093ee:	580b      	ldrlt	r3, [r1, r0]
 80093f0:	18c0      	addlt	r0, r0, r3
 80093f2:	4770      	bx	lr

080093f4 <__retarget_lock_acquire_recursive>:
 80093f4:	4770      	bx	lr

080093f6 <__retarget_lock_release_recursive>:
 80093f6:	4770      	bx	lr

080093f8 <_init>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr

08009404 <_fini>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	bf00      	nop
 8009408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940a:	bc08      	pop	{r3}
 800940c:	469e      	mov	lr, r3
 800940e:	4770      	bx	lr
